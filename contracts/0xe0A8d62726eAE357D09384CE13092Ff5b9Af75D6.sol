contract main {




// =====================  Runtime code  =====================


#
#  - sub_0100c202(?)
#  - sub_0a60551d(?)
#  - sendToken(address arg1, address arg2, uint256 arg3)
#  - sub_3a99775a(?)
#  - sub_3b309a57(?)
#  - sub_51eb11b4(?)
#  - sub_53576193(?)
#  - sub_75f685a1(?)
#  - setApprove(address arg1, address arg2, uint256 arg3)
#  - sub_c0d8c57e(?)
#  - sub_dad37c2a(?)
#  - _fallback()
#
const getBlockTime = block.timestamp


address stor0;

function destroy(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if stor0 != msg.sender:
        revert with 0, 'IS NOT OWner'
    selfdestruct(arg1)
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if stor0 != msg.sender:
        revert with 0, 'IS NOT OWner'
    require arg1
    stor0 = arg1
}

function sendETH(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if stor0 != msg.sender:
        revert with 0, 'IS NOT OWner'
    call arg1 with:
       value arg2 wei
         gas gas_remaining wei
    if not ext_call.success:
        revert with 0, 'ETH transfer failed'
}

function getBalanceOf(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if not ext_code.size(arg1):
        return 0
    require ext_code.size(arg1)
    staticcall arg1.0x70a08231 with:
            gas gas_remaining wei
           args arg2
    if not ext_call.success:
        return 0
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_79590718(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    require ext_code.size(address(arg1))
    staticcall address(arg1).0x70a08231 with:
            gas gas_remaining wei
           args address(arg2)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getReserves(address arg1, address arg2, address arg3) {
    require calldata.size - 4 >= 96
    require arg1 == arg1
    require arg2 == arg2
    require arg3 == arg3
    if not ext_code.size(arg1):
        return 0
    require ext_code.size(arg1)
    staticcall arg1.factory() with:
            gas gas_remaining wei
    if not ext_call.success:
        return 0
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if not ext_call.return_data[12 len 20]:
        return 0
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
            gas gas_remaining wei
           args address(arg2), arg3
    if not ext_call.success:
        return 0
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if not ext_call.return_data[12 len 20]:
        return 0
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        return 0
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if arg2 == arg3:
        revert with 0, 'IDENTICAL_ADDRESSES'
    if arg2 < arg3:
        if not arg2:
            revert with 0, 'ZERO_ADDRESS'
        if arg2 == arg2:
            return ext_call.return_data[18 len 14], ext_call.return_data[32] << 144
    else:
        if not arg3:
            revert with 0, 'ZERO_ADDRESS'
        if arg2 == arg3:
            return ext_call.return_data[18 len 14], ext_call.return_data[32] << 144
    return ext_call.return_data[50 len 14], ext_call.return_data[0] << 144
}

function sub_a67c73c8(?) {
    require calldata.size - 4 >= 96
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    if stor0 != msg.sender:
        revert with 0, 'IS NOT OWner'
    mem[100] = this.address
    require ext_code.size(address(arg1))
    staticcall address(arg1).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] and arg3 > -1 / ext_call.return_data[0]:
        revert with 0, 17
    mem[ceil32(return_data.size) + 96] = 68
    mem[ceil32(return_data.size) + 132 len 28] = address(arg2) << 64
    mem[ceil32(return_data.size) + 128 len 4] = unknown_0xa9059cbb(?????)
    mem[ceil32(return_data.size) + 196 len 96] = unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ext_call.return_data[0] * arg3 / 100, mem[ceil32(return_data.size) + 196 len 28]
    call address(arg1).mem[ceil32(return_data.size) + 196 len 4] with:
         gas gas_remaining wei
        args mem[ceil32(return_data.size) + 200 len 64]
    if not return_data.size:
        if not ext_call.success:
            revert with 0, 'TRANSFER_FAILED!'
        if ext_call.return_data[0]:
            require ext_call.return_data[0] >= 32
            require uint32(this.address), mem[132 len 28] == bool(uint32(this.address), mem[132 len 28])
            if not uint32(this.address), mem[132 len 28]:
                revert with 0, 'TRANSFER_FAILED!'
    else:
        mem[ceil32(return_data.size) + 228 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            revert with 0, 'TRANSFER_FAILED!'
        if return_data.size:
            require return_data.size >= 32
            require mem[ceil32(return_data.size) + 228] == bool(mem[ceil32(return_data.size) + 228])
            if not mem[ceil32(return_data.size) + 228]:
                revert with 0, 'TRANSFER_FAILED!'
}

function sub_37c7a73c(?) {
    require calldata.size - 4 >= 160
    require cd[4] == address(cd[4])
    require cd[36] == address(cd[36])
    require cd[68] == address(cd[68])
    require cd[132] <= test266151307()
    require cd[132] + 35 < calldata.size
    if ('cd', 132).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 132).length) + 97 < 96 or ceil32(32 * ('cd', 132).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 132).length
    require cd[132] + (32 * ('cd', 132).length) + 36 <= calldata.size
    idx = cd[132] + 36
    s = 128
    while idx < cd[132] + (32 * ('cd', 132).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    if stor0 != msg.sender:
        revert with 0, 'IS NOT OWner'
    mem[ceil32(32 * ('cd', 132).length) + 133] = address(cd[4])
    mem[ceil32(32 * ('cd', 132).length) + 97] = 68
    mem[ceil32(32 * ('cd', 132).length) + 129 len 4] = approve(address arg1, uint256 arg2)
    mem[ceil32(32 * ('cd', 132).length) + 197 len 96] = 0, address(cd[4]), -1, mem[ceil32(32 * ('cd', 132).length) + 197 len 28]
    call address(cd[36]).mem[ceil32(32 * ('cd', 132).length) + 197 len 4] with:
         gas gas_remaining wei
        args mem[ceil32(32 * ('cd', 132).length) + 201 len 64]
    if not return_data.size:
        if not ext_call.success:
            revert with 0, 'NOT_APPROVE!'
        if ('cd', 132).length:
            require ('cd', 132).length >= 32
            require mem[128] == bool(mem[128])
            if not mem[128]:
                revert with 0, 'NOT_APPROVE!'
        idx = 0
        s = 128
        t = ceil32(32 * ('cd', 132).length) + 393
        while idx < ('cd', 132).length:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        call address(cd[4]).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args cd[100], 1, Array(len=('cd', 132).length, data=mem[ceil32(32 * ('cd', 132).length) + 393 len 32 * ('cd', 132).length]), address(cd[68]), block.timestamp
    else:
        mem[ceil32(32 * ('cd', 132).length) + 229 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            revert with 0, 'NOT_APPROVE!'
        if return_data.size:
            require return_data.size >= 32
            require mem[ceil32(32 * ('cd', 132).length) + 229] == bool(mem[ceil32(32 * ('cd', 132).length) + 229])
            if not mem[ceil32(32 * ('cd', 132).length) + 229]:
                revert with 0, 'NOT_APPROVE!'
        idx = 0
        s = 128
        t = ceil32(32 * ('cd', 132).length) + ceil32(return_data.size) + 394
        while idx < ('cd', 132).length:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        call address(cd[4]).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args cd[100], 1, Array(len=('cd', 132).length, data=mem[ceil32(32 * ('cd', 132).length) + ceil32(return_data.size) + 394 len 32 * ('cd', 132).length]), address(cd[68]), block.timestamp
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_fd55fe75(?) {
    require calldata.size - 4 >= 192
    require cd[4] == address(cd[4])
    require cd[36] == address(cd[36])
    require cd[68] == address(cd[68])
    require cd[132] <= test266151307()
    require cd[132] + 35 < calldata.size
    if ('cd', 132).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 132).length) + 97 < 96 or ceil32(32 * ('cd', 132).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 132).length
    require cd[132] + (32 * ('cd', 132).length) + 36 <= calldata.size
    idx = cd[132] + 36
    s = 128
    while idx < cd[132] + (32 * ('cd', 132).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    if stor0 != msg.sender:
        revert with 0, 'IS NOT OWner'
    mem[ceil32(32 * ('cd', 132).length) + 133] = address(cd[4])
    mem[ceil32(32 * ('cd', 132).length) + 97] = 68
    mem[ceil32(32 * ('cd', 132).length) + 129 len 4] = approve(address arg1, uint256 arg2)
    mem[ceil32(32 * ('cd', 132).length) + 197 len 96] = 0, address(cd[4]), -1, mem[ceil32(32 * ('cd', 132).length) + 197 len 28]
    call address(cd[36]).mem[ceil32(32 * ('cd', 132).length) + 197 len 4] with:
         gas gas_remaining wei
        args mem[ceil32(32 * ('cd', 132).length) + 201 len 64]
    if not return_data.size:
        if not ext_call.success:
            revert with 0, 'NOT_APPROVE!'
        if ('cd', 132).length:
            require ('cd', 132).length >= 32
            require mem[128] == bool(mem[128])
            if not mem[128]:
                revert with 0, 'NOT_APPROVE!'
        if cd[100] and cd[164] > -1 / cd[100]:
            revert with 0, 17
        idx = 0
        s = 128
        t = ceil32(32 * ('cd', 132).length) + 393
        while idx < ('cd', 132).length:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        call address(cd[4]).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args cd[100], cd[100] * cd[164] / 100, Array(len=('cd', 132).length, data=mem[ceil32(32 * ('cd', 132).length) + 393 len 32 * ('cd', 132).length]), address(cd[68]), block.timestamp
    else:
        mem[ceil32(32 * ('cd', 132).length) + 229 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            revert with 0, 'NOT_APPROVE!'
        if return_data.size:
            require return_data.size >= 32
            require mem[ceil32(32 * ('cd', 132).length) + 229] == bool(mem[ceil32(32 * ('cd', 132).length) + 229])
            if not mem[ceil32(32 * ('cd', 132).length) + 229]:
                revert with 0, 'NOT_APPROVE!'
        if cd[100] and cd[164] > -1 / cd[100]:
            revert with 0, 17
        idx = 0
        s = 128
        t = ceil32(32 * ('cd', 132).length) + ceil32(return_data.size) + 394
        while idx < ('cd', 132).length:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        call address(cd[4]).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args cd[100], cd[100] * cd[164] / 100, Array(len=('cd', 132).length, data=mem[ceil32(32 * ('cd', 132).length) + ceil32(return_data.size) + 394 len 32 * ('cd', 132).length]), address(cd[68]), block.timestamp
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_25f00593(?) {
    require calldata.size - 4 >= 96
    require cd[4] == address(cd[4])
    require cd[68] <= test266151307()
    require cd[68] + 35 < calldata.size
    if ('cd', 68).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 68).length) + 97 < 96 or ceil32(32 * ('cd', 68).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 68).length
    require cd[68] + (32 * ('cd', 68).length) + 36 <= calldata.size
    idx = cd[68] + 36
    s = 128
    while idx < cd[68] + (32 * ('cd', 68).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    mem[ceil32(32 * ('cd', 68).length) + 97] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
    mem[ceil32(32 * ('cd', 68).length) + 101] = cd[36]
    mem[ceil32(32 * ('cd', 68).length) + 133] = 64
    mem[ceil32(32 * ('cd', 68).length) + 165] = ('cd', 68).length
    idx = 0
    s = 128
    t = ceil32(32 * ('cd', 68).length) + 197
    while idx < ('cd', 68).length:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
            gas gas_remaining wei
           args cd[36], Array(len=('cd', 68).length, data=mem[ceil32(32 * ('cd', 68).length) + 197 len 32 * ('cd', 68).length])
    if not ext_call.success:
        if ('cd', 68).length > test266151307():
            revert with 0, 65
        if ('cd', 68).length:
            mem[ceil32(32 * ('cd', 68).length) + 129 len 32 * ('cd', 68).length] = call.data[calldata.size len 32 * ('cd', 68).length]
        idx = 0
        while idx < ('cd', 68).length:
            if idx >= ('cd', 68).length:
                revert with 0, 50
            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        return Array(len=('cd', 68).length, data=mem[ceil32(32 * ('cd', 68).length) + 129 len 32 * ('cd', 68).length])
    mem[ceil32(32 * ('cd', 68).length) + 97 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + 97
    require return_data.size >= 32
    _61 = mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, cd[36]) >> 32
    require mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, cd[36]) >> 32 <= test266151307()
    require ceil32(32 * ('cd', 68).length) + return_data.size + 97 > ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 128
    _63 = mem[ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97]
    if mem[ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97]) + 1 < 0 or ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + ceil32(32 * mem[ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97]) + 98 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + ceil32(32 * mem[ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97]) + 98
    mem[ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + 97] = _63
    require _61 + (32 * _63) + 32 <= return_data.size
    mem[ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + 129 len ceil32(32 * _63)] = mem[ceil32(32 * ('cd', 68).length) + _61 + 129 len ceil32(32 * _63)]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _63
    mem[mem[64] + 64 len 32 * _63] = mem[ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + 129 len 32 * _63]
    return Array(len=_63, data=mem[mem[64] + 64 len 32 * _63])
}

function sub_778a2fa5(?) {
    require calldata.size - 4 >= 96
    require cd[4] == address(cd[4])
    require cd[68] <= test266151307()
    require cd[68] + 35 < calldata.size
    if ('cd', 68).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 68).length) + 97 < 96 or ceil32(32 * ('cd', 68).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 68).length
    require cd[68] + (32 * ('cd', 68).length) + 36 <= calldata.size
    idx = cd[68] + 36
    s = 128
    while idx < cd[68] + (32 * ('cd', 68).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    mem[ceil32(32 * ('cd', 68).length) + 97] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
    mem[ceil32(32 * ('cd', 68).length) + 101] = cd[36]
    mem[ceil32(32 * ('cd', 68).length) + 133] = 64
    mem[ceil32(32 * ('cd', 68).length) + 165] = ('cd', 68).length
    idx = 0
    s = 128
    t = ceil32(32 * ('cd', 68).length) + 197
    while idx < ('cd', 68).length:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
            gas gas_remaining wei
           args cd[36], Array(len=('cd', 68).length, data=mem[ceil32(32 * ('cd', 68).length) + 197 len 32 * ('cd', 68).length])
    if not ext_call.success:
        if ('cd', 68).length > test266151307():
            revert with 0, 65
        if ('cd', 68).length:
            mem[ceil32(32 * ('cd', 68).length) + 129 len 32 * ('cd', 68).length] = call.data[calldata.size len 32 * ('cd', 68).length]
        idx = 0
        while idx < ('cd', 68).length:
            if idx >= ('cd', 68).length:
                revert with 0, 50
            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        return Array(len=('cd', 68).length, data=mem[ceil32(32 * ('cd', 68).length) + 129 len 32 * ('cd', 68).length])
    mem[ceil32(32 * ('cd', 68).length) + 97 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + 97
    require return_data.size >= 32
    _61 = mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, cd[36]) >> 32
    require mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, cd[36]) >> 32 <= test266151307()
    require ceil32(32 * ('cd', 68).length) + return_data.size + 97 > ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 128
    _63 = mem[ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97]
    if mem[ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97]) + 1 < 0 or ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + ceil32(32 * mem[ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97]) + 98 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + ceil32(32 * mem[ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97]) + 98
    mem[ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + 97] = _63
    require _61 + (32 * _63) + 32 <= return_data.size
    mem[ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + 129 len ceil32(32 * _63)] = mem[ceil32(32 * ('cd', 68).length) + _61 + 129 len ceil32(32 * _63)]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _63
    mem[mem[64] + 64 len 32 * _63] = mem[ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + 129 len 32 * _63]
    return Array(len=_63, data=mem[mem[64] + 64 len 32 * _63])
}

function sub_81da7f30(?) {
    require calldata.size - 4 >= 64
    require cd[4] == address(cd[4])
    require cd[36] <= test266151307()
    require cd[36] + 35 < calldata.size
    if ('cd', 36).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 36).length) + 97 < 96 or ceil32(32 * ('cd', 36).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 36).length
    require cd[36] + (32 * ('cd', 36).length) + 36 <= calldata.size
    idx = cd[36] + 36
    s = 128
    while idx < cd[36] + (32 * ('cd', 36).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    if ('cd', 36).length > test266151307():
        revert with 0, 65
    mem[ceil32(32 * ('cd', 36).length) + 97] = ('cd', 36).length
    mem[64] = ceil32(32 * ('cd', 36).length) + (32 * ('cd', 36).length) + 129
    if not ('cd', 36).length:
        idx = 0
        while idx < ('cd', 36).length:
            if idx >= mem[96]:
                revert with 0, 50
            _67 = mem[(32 * idx) + 128]
            if not ext_code.size(mem[(32 * idx) + 128]):
                if idx >= mem[ceil32(32 * ('cd', 36).length) + 97]:
                    revert with 0, 50
                mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + 129] = 0
            else:
                mem[mem[64] + 4] = address(cd[4])
                require ext_code.size(address(_67))
                staticcall address(_67).0x70a08231 with:
                        gas gas_remaining wei
                       args address(cd[4])
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + 97]:
                        revert with 0, 50
                    mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + 129] = 0
                else:
                    _78 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + 97]:
                        revert with 0, 50
                    mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + 129] = mem[_78]
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        mem[mem[64]] = 32
        _70 = mem[ceil32(32 * ('cd', 36).length) + 97]
        mem[mem[64] + 32] = mem[ceil32(32 * ('cd', 36).length) + 97]
        mem[mem[64] + 64 len 32 * _70] = mem[ceil32(32 * ('cd', 36).length) + 129 len 32 * _70]
        return 32, mem[mem[64] + 32 len (32 * _70) + 32]
    mem[ceil32(32 * ('cd', 36).length) + 129 len 32 * ('cd', 36).length] = call.data[calldata.size len 32 * ('cd', 36).length]
    idx = 0
    while idx < ('cd', 36).length:
        if idx >= mem[96]:
            revert with 0, 50
        _69 = mem[(32 * idx) + 128]
        if not ext_code.size(mem[(32 * idx) + 128]):
            if idx >= mem[ceil32(32 * ('cd', 36).length) + 97]:
                revert with 0, 50
            mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + 129] = 0
        else:
            mem[mem[64] + 4] = address(cd[4])
            require ext_code.size(address(_69))
            staticcall address(_69).0x70a08231 with:
                    gas gas_remaining wei
                   args address(cd[4])
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                if idx >= mem[ceil32(32 * ('cd', 36).length) + 97]:
                    revert with 0, 50
                mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + 129] = 0
            else:
                _81 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if idx >= mem[ceil32(32 * ('cd', 36).length) + 97]:
                    revert with 0, 50
                mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + 129] = mem[_81]
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    mem[mem[64]] = 32
    _73 = mem[ceil32(32 * ('cd', 36).length) + 97]
    mem[mem[64] + 32] = mem[ceil32(32 * ('cd', 36).length) + 97]
    mem[mem[64] + 64 len 32 * _73] = mem[ceil32(32 * ('cd', 36).length) + 129 len 32 * _73]
    return 32, mem[mem[64] + 32 len (32 * _73) + 32]
}

function sub_07f04f38(?) payable {
    require calldata.size - 4 >= 96
    require cd[4] == address(cd[4])
    require cd[68] <= test266151307()
    require cd[68] + 35 < calldata.size
    if ('cd', 68).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 68).length) + 97 < 96 or ceil32(32 * ('cd', 68).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 68).length
    require cd[68] + (32 * ('cd', 68).length) + 36 <= calldata.size
    idx = cd[68] + 36
    s = 128
    while idx < cd[68] + (32 * ('cd', 68).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    mem[ceil32(32 * ('cd', 68).length) + 97] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
    mem[ceil32(32 * ('cd', 68).length) + 101] = msg.value
    mem[ceil32(32 * ('cd', 68).length) + 133] = 64
    mem[ceil32(32 * ('cd', 68).length) + 165] = ('cd', 68).length
    idx = 0
    s = 128
    t = ceil32(32 * ('cd', 68).length) + 197
    while idx < ('cd', 68).length:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
            gas gas_remaining wei
           args msg.value, Array(len=('cd', 68).length, data=mem[ceil32(32 * ('cd', 68).length) + 197 len 32 * ('cd', 68).length])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(32 * ('cd', 68).length) + 97 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + 97
    require return_data.size >= 32
    _89 = mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, msg.value) >> 32
    require mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, msg.value) >> 32 <= test266151307()
    require ceil32(32 * ('cd', 68).length) + return_data.size + 97 > ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, msg.value) >> 32 + 128
    _90 = mem[ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, msg.value) >> 32 + 97]
    if mem[ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, msg.value) >> 32 + 97] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, msg.value) >> 32 + 97]) + 1 < 0 or ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + ceil32(32 * mem[ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, msg.value) >> 32 + 97]) + 98 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + ceil32(32 * mem[ceil32(32 * ('cd', 68).length) + mem[ceil32(32 * ('cd', 68).length) + 97 len 4], Mask(224, 32, msg.value) >> 32 + 97]) + 98
    mem[ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + 97] = _90
    require _89 + (32 * _90) + 32 <= return_data.size
    mem[ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + 129 len ceil32(32 * _90)] = mem[ceil32(32 * ('cd', 68).length) + _89 + 129 len ceil32(32 * _90)]
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).factory() with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _129 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _130 = mem[_129]
    require mem[_129] == mem[_129 + 12 len 20]
    if ('cd', 68).length < 1:
        revert with 0, 17
    if ('cd', 68).length - 1 >= ('cd', 68).length:
        revert with 0, 50
    if ('cd', 68).length < 2:
        revert with 0, 17
    if ('cd', 68).length - 2 >= ('cd', 68).length:
        revert with 0, 50
    _136 = mem[(32 * ('cd', 68).length - 2) + 128]
    mem[mem[64] + 4] = mem[(32 * ('cd', 68).length - 1) + 140 len 20]
    mem[mem[64] + 36] = address(_136)
    require ext_code.size(address(_130))
    staticcall address(_130).getPair(address arg1, address arg2) with:
            gas gas_remaining wei
           args mem[mem[64] + 4], address(_136)
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _139 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    require mem[_139] == mem[_139 + 12 len 20]
    if _90 < 1:
        revert with 0, 17
    if _90 - 1 >= _90:
        revert with 0, 50
    _143 = mem[(32 * _90 - 1) + ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + 129]
    if mem[(32 * _90 - 1) + ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + 129] and cd[36] > -1 / mem[(32 * _90 - 1) + ceil32(32 * ('cd', 68).length) + ceil32(return_data.size) + 129]:
        revert with 0, 17
    if 0x1b02da8cb0d097eb8d57a175b88c7d8b47997506 == address(cd[4]):
        _144 = mem[64]
        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _143 * cd[36] / 100
        mem[mem[64] + 36] = 128
        mem[mem[64] + 132] = ('cd', 68).length
        idx = 0
        s = 128
        t = mem[64] + 164
        while idx < ('cd', 68).length:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[_144 + 68] = msg.sender
        mem[_144 + 100] = block.timestamp
        require ext_code.size(address(cd[4]))
        call address(cd[4]).mem[mem[64] len 4] with:
           value msg.value wei
             gas gas_remaining wei
            args mem[mem[64] + 4 len _144 + (32 * ('cd', 68).length) + -mem[64] + 160]
    else:
        if 0xb5b2444edf79b00d40f463f79158d1187a0d0c25 == address(cd[4]):
            _145 = mem[64]
            mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _143 * cd[36] / 100
            mem[mem[64] + 36] = 128
            mem[mem[64] + 132] = ('cd', 68).length
            idx = 0
            s = 128
            t = mem[64] + 164
            while idx < ('cd', 68).length:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_145 + 68] = msg.sender
            mem[_145 + 100] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).mem[mem[64] len 4] with:
               value msg.value wei
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _145 + (32 * ('cd', 68).length) + -mem[64] + 160]
        else:
            if address(cd[4]) != 0xc45fb63001b56a21e29c7dcc1727bfda273a368:
                _147 = mem[64]
                mem[mem[64]] = 0xc57559dd00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _143 * cd[36] / 100
                mem[mem[64] + 36] = 128
                mem[mem[64] + 132] = ('cd', 68).length
                idx = 0
                s = 128
                t = mem[64] + 164
                while idx < mem[96]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[mem[64] + 68] = msg.sender
                mem[_147 + 100] = block.timestamp
                require ext_code.size(address(cd[4]))
                call address(cd[4]).mem[mem[64] len 4] with:
                   value msg.value wei
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _147 + (32 * ('cd', 68).length) + -mem[64] + 160]
            else:
                _148 = mem[64]
                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _143 * cd[36] / 100
                mem[mem[64] + 36] = 128
                mem[mem[64] + 132] = ('cd', 68).length
                idx = 0
                s = 128
                t = mem[64] + 164
                while idx < ('cd', 68).length:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_148 + 68] = msg.sender
                mem[_148 + 100] = block.timestamp
                require ext_code.size(address(cd[4]))
                call address(cd[4]).mem[mem[64] len 4] with:
                   value msg.value wei
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _148 + (32 * ('cd', 68).length) + -mem[64] + 160]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_a52bc0dc(?) {
    require calldata.size - 4 >= 128
    require cd[36] == address(cd[36])
    require cd[68] <= test266151307()
    require cd[68] + 35 < calldata.size
    if ('cd', 68).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 68).length) + 97 < 96 or ceil32(32 * ('cd', 68).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 68).length
    require cd[68] + (32 * ('cd', 68).length) + 36 <= calldata.size
    idx = cd[68] + 36
    s = 128
    while idx < cd[68] + (32 * ('cd', 68).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    require cd[100] <= test266151307()
    require cd[100] + 35 < calldata.size
    if ('cd', 100).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 100).length) + 98 < 97 or ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98
    mem[ceil32(32 * ('cd', 68).length) + 97] = ('cd', 100).length
    require cd[100] + (32 * ('cd', 100).length) + 36 <= calldata.size
    idx = cd[100] + 36
    s = ceil32(32 * ('cd', 68).length) + 129
    while idx < cd[100] + (32 * ('cd', 100).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 102] = cd[4]
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 134] = 64
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 166] = ('cd', 68).length
    idx = 0
    s = 128
    t = mem[64] + 100
    while idx < mem[96]:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[36]))
    staticcall address(cd[36]).mem[mem[64] len 4] with:
            gas gas_remaining wei
           args mem[mem[64] + 4 len (32 * ('cd', 68).length) + 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _216 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _217 = mem[_216]
    require mem[_216] <= test266151307()
    require _216 + return_data.size > _216 + mem[_216] + 31
    _218 = mem[_216 + mem[_216]]
    if mem[_216 + mem[_216]] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[_216 + mem[_216]]) + 1 < 0 or _216 + ceil32(return_data.size) + ceil32(32 * mem[_216 + mem[_216]]) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _216 + ceil32(return_data.size) + ceil32(32 * mem[_216 + mem[_216]]) + 1
    mem[_216 + ceil32(return_data.size)] = _218
    require _217 + (32 * _218) + 32 <= return_data.size
    mem[_216 + ceil32(return_data.size) + 32 len ceil32(32 * _218)] = mem[_216 + _217 + 32 len ceil32(32 * _218)]
    if _218 < 1:
        revert with 0, 17
    if _218 - 1 >= _218:
        revert with 0, 50
    if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
        revert with 0, 50
    _287 = mem[ceil32(32 * ('cd', 68).length) + 129]
    require ext_code.size(mem[ceil32(32 * ('cd', 68).length) + 141 len 20])
    staticcall mem[ceil32(32 * ('cd', 68).length) + 141 len 20].0x7d1db4a5 with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if ext_call.success:
        _290 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _293 = mem[_290]
        if mem[_290] >= mem[(32 * _218 - 1) + _216 + ceil32(return_data.size) + 32]:
            return cd[4]
        _297 = mem[64]
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _293
        mem[mem[64] + 36] = 64
        _302 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 100
        while idx < _302:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[36]))
        staticcall address(cd[36]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _297 + (32 * _302) + -mem[64] + 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _352 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _355 = mem[_352]
        require mem[_352] <= test266151307()
        require _352 + return_data.size > _352 + mem[_352] + 31
        _358 = mem[_352 + mem[_352]]
        if mem[_352 + mem[_352]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_352 + mem[_352]]) + 1 < 0 or _352 + ceil32(return_data.size) + ceil32(32 * mem[_352 + mem[_352]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _352 + ceil32(return_data.size) + ceil32(32 * mem[_352 + mem[_352]]) + 1
        mem[_352 + ceil32(return_data.size)] = _358
        require _355 + (32 * _358) + 32 <= return_data.size
        mem[_352 + ceil32(return_data.size) + 32 len ceil32(32 * _358)] = mem[_352 + _355 + 32 len ceil32(32 * _358)]
        if _358 < 1:
            revert with 0, 17
        if _358 - 1 >= _358:
            revert with 0, 50
        mem[mem[64]] = mem[(32 * _358 - 1) + _352 + ceil32(return_data.size) + 32]
        return memory
          from mem[64]
           len 32
    require ext_code.size(address(_287))
    staticcall address(_287).maxTxAmount() with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        if mem[(32 * _218 - 1) + _216 + ceil32(return_data.size) + 32] >= mem[(32 * _218 - 1) + _216 + ceil32(return_data.size) + 32]:
            return cd[4]
        _296 = mem[64]
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = mem[(32 * _218 - 1) + _216 + ceil32(return_data.size) + 32]
        mem[mem[64] + 36] = 64
        _299 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 100
        while idx < _299:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[36]))
        staticcall address(cd[36]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _296 + (32 * _299) + -mem[64] + 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _350 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _353 = mem[_350]
        require mem[_350] <= test266151307()
        require _350 + return_data.size > _350 + mem[_350] + 31
        _356 = mem[_350 + mem[_350]]
        if mem[_350 + mem[_350]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_350 + mem[_350]]) + 1 < 0 or _350 + ceil32(return_data.size) + ceil32(32 * mem[_350 + mem[_350]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _350 + ceil32(return_data.size) + ceil32(32 * mem[_350 + mem[_350]]) + 1
        mem[_350 + ceil32(return_data.size)] = _356
        require _353 + (32 * _356) + 32 <= return_data.size
        mem[_350 + ceil32(return_data.size) + 32 len ceil32(32 * _356)] = mem[_350 + _353 + 32 len ceil32(32 * _356)]
        if _356 < 1:
            revert with 0, 17
        if _356 - 1 >= _356:
            revert with 0, 50
        mem[mem[64]] = mem[(32 * _356 - 1) + _350 + ceil32(return_data.size) + 32]
        return memory
          from mem[64]
           len 32
    _294 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _295 = mem[_294]
    if mem[_294] >= mem[(32 * _218 - 1) + _216 + ceil32(return_data.size) + 32]:
        return cd[4]
    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = _295
    mem[mem[64] + 36] = 64
    _309 = mem[ceil32(32 * ('cd', 68).length) + 97]
    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
    idx = 0
    s = ceil32(32 * ('cd', 68).length) + 129
    t = mem[64] + 100
    while idx < _309:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[36]))
    staticcall address(cd[36]).getAmountsOut(uint256 arg1, address[] arg2) with:
            gas gas_remaining wei
           args _295, 64, mem[mem[64] + 68 len (32 * _309) + 32]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _351 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _354 = mem[_351]
    require mem[_351] <= test266151307()
    require _351 + return_data.size > _351 + mem[_351] + 31
    _357 = mem[_351 + mem[_351]]
    if mem[_351 + mem[_351]] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[_351 + mem[_351]]) + 1 < 0 or _351 + ceil32(return_data.size) + ceil32(32 * mem[_351 + mem[_351]]) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _351 + ceil32(return_data.size) + ceil32(32 * mem[_351 + mem[_351]]) + 1
    mem[_351 + ceil32(return_data.size)] = _357
    require _354 + (32 * _357) + 32 <= return_data.size
    mem[_351 + ceil32(return_data.size) + 32 len ceil32(32 * _357)] = mem[_351 + _354 + 32 len ceil32(32 * _357)]
    if _357 < 1:
        revert with 0, 17
    if _357 - 1 >= _357:
        revert with 0, 50
    return memory
      from (32 * _357 - 1) + _351 + ceil32(return_data.size) + 32
       len 32
}

function sub_2f988059(?) payable {
    require calldata.size - 4 >= 192
    require cd[68] == address(cd[68])
    require cd[132] <= test266151307()
    require cd[132] + 35 < calldata.size
    if ('cd', 132).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 132).length) + 97 < 96 or ceil32(32 * ('cd', 132).length) + 97 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(32 * ('cd', 132).length) + 97
    mem[96] = ('cd', 132).length
    require cd[132] + (32 * ('cd', 132).length) + 36 <= calldata.size
    idx = cd[132] + 36
    s = 128
    while idx < cd[132] + (32 * ('cd', 132).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    require cd[164] == address(cd[164])
    if cd[4] < block.timestamp:
        revert with 0, 'TIME OUT'
    if eth.balance(this.address) < msg.value:
        revert with 0, 17
    idx = 0
    while idx < cd[36]:
        if 0x1b02da8cb0d097eb8d57a175b88c7d8b47997506 == address(cd[68]):
            _449 = mem[64]
            mem[mem[64]] = 0xfb3bdb4100000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[100]
            mem[mem[64] + 36] = 128
            _452 = mem[96]
            mem[mem[64] + 132] = mem[96]
            s = 0
            t = 128
            u = mem[64] + 164
            while s < mem[96]:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            mem[mem[64] + 68] = address(cd[164])
            mem[_449 + 100] = block.timestamp
            require ext_code.size(address(cd[68]))
            call address(cd[68]).mem[mem[64] len 4] with:
               value msg.value wei
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _449 + (32 * _452) + -mem[64] + 160]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _679 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _687 = mem[_679]
            require mem[_679] <= test266151307()
            require _679 + return_data.size > _679 + mem[_679] + 31
            _695 = mem[_679 + mem[_679]]
            if mem[_679 + mem[_679]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_679 + mem[_679]]) + 1 < 0 or _679 + ceil32(return_data.size) + ceil32(32 * mem[_679 + mem[_679]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _679 + ceil32(return_data.size) + ceil32(32 * mem[_679 + mem[_679]]) + 1
            mem[_679 + ceil32(return_data.size)] = _695
            require _687 + (32 * _695) + 32 <= return_data.size
            t = _679 + ceil32(return_data.size) + 32
            s = _679 + _687 + 32
            while s < _679 + _687 + (32 * _695) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            if eth.balance(this.address) < eth.balance(this.address) - msg.value:
                revert with 0, 17
            _880 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = msg.value
            mem[mem[64] + 36] = 64
            _884 = mem[96]
            mem[mem[64] + 68] = mem[96]
            s = 0
            t = 128
            u = mem[64] + 100
            while s < _884:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            require ext_code.size(address(cd[68]))
            staticcall address(cd[68]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _880 + (32 * _884) + -mem[64] + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1055 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1059 = mem[_1055]
            require mem[_1055] <= test266151307()
            require _1055 + return_data.size > _1055 + mem[_1055] + 31
            _1063 = mem[_1055 + mem[_1055]]
            if mem[_1055 + mem[_1055]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_1055 + mem[_1055]]) + 1 < 0 or _1055 + ceil32(return_data.size) + ceil32(32 * mem[_1055 + mem[_1055]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _1055 + ceil32(return_data.size) + ceil32(32 * mem[_1055 + mem[_1055]]) + 1
            mem[_1055 + ceil32(return_data.size)] = _1063
            require _1059 + (32 * _1063) + 32 <= return_data.size
            t = _1055 + ceil32(return_data.size) + 32
            s = _1055 + _1059 + 32
            while s < _1055 + _1059 + (32 * _1063) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            require ext_code.size(address(cd[68]))
            staticcall address(cd[68]).factory() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1219 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1223 = mem[_1219]
            require mem[_1219] == mem[_1219 + 12 len 20]
            if mem[96] < 1:
                revert with 0, 17
            if mem[96] - 1 >= mem[96]:
                revert with 0, 50
            if mem[96] < 2:
                revert with 0, 17
            if mem[96] - 2 >= mem[96]:
                revert with 0, 50
            _1247 = mem[(32 * mem[96] - 2) + 128]
            mem[mem[64] + 4] = mem[(32 * mem[96] - 1) + 140 len 20]
            mem[mem[64] + 36] = address(_1247)
            require ext_code.size(address(_1223))
            staticcall address(_1223).getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4], address(_1247)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1259 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_1259] == mem[_1259 + 12 len 20]
            if _1063 < 1:
                revert with 0, 17
            if _1063 - 1 >= _1063:
                revert with 0, 50
            if mem[(32 * _1063 - 1) + _1055 + ceil32(return_data.size) + 32] >= cd[100]:
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if msg.value:
                _1279 = mem[64]
                mem[mem[64]] = 0
                mem[64] = mem[64] + 32
                idx = 0
                while idx < mem[_1279]:
                    idx = idx + 32
                    continue 
                if ceil32(mem[_1279]) > mem[_1279]:
                    mem[mem[_1279] + _1279 + 32] = 0
                call msg.sender with:
                   value msg.value wei
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len mem[_1279] + _1279 + -mem[64] + 28]
                if not ext_call.success:
                    revert with 0, 'ETH transfer failed'
        else:
            if 0xb5b2444edf79b00d40f463f79158d1187a0d0c25 == address(cd[68]):
                _450 = mem[64]
                mem[mem[64]] = 0xfb3bdb4100000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[100]
                mem[mem[64] + 36] = 128
                _455 = mem[96]
                mem[mem[64] + 132] = mem[96]
                s = 0
                t = 128
                u = mem[64] + 164
                while s < _455:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                mem[_450 + 68] = address(cd[164])
                mem[_450 + 100] = block.timestamp
                require ext_code.size(address(cd[68]))
                call address(cd[68]).mem[mem[64] len 4] with:
                   value msg.value wei
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _450 + (32 * _455) + -mem[64] + 160]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _680 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _688 = mem[_680]
                require mem[_680] <= test266151307()
                require _680 + return_data.size > _680 + mem[_680] + 31
                _696 = mem[_680 + mem[_680]]
                if mem[_680 + mem[_680]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_680 + mem[_680]]) + 1 < 0 or _680 + ceil32(return_data.size) + ceil32(32 * mem[_680 + mem[_680]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _680 + ceil32(return_data.size) + ceil32(32 * mem[_680 + mem[_680]]) + 1
                mem[_680 + ceil32(return_data.size)] = _696
                require _688 + (32 * _696) + 32 <= return_data.size
                t = _680 + ceil32(return_data.size) + 32
                s = _680 + _688 + 32
                while s < _680 + _688 + (32 * _696) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if eth.balance(this.address) < eth.balance(this.address) - msg.value:
                    revert with 0, 17
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = msg.value
                mem[mem[64] + 36] = 64
                _885 = mem[96]
                mem[mem[64] + 68] = mem[96]
                s = 0
                t = 128
                u = mem[64] + 100
                while s < mem[96]:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(address(cd[68]))
                staticcall address(cd[68]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len (32 * _885) + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1056 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1060 = mem[_1056]
                require mem[_1056] <= test266151307()
                require _1056 + return_data.size > _1056 + mem[_1056] + 31
                _1064 = mem[_1056 + mem[_1056]]
                if mem[_1056 + mem[_1056]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_1056 + mem[_1056]]) + 1 < 0 or _1056 + ceil32(return_data.size) + ceil32(32 * mem[_1056 + mem[_1056]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _1056 + ceil32(return_data.size) + ceil32(32 * mem[_1056 + mem[_1056]]) + 1
                mem[_1056 + ceil32(return_data.size)] = _1064
                require _1060 + (32 * _1064) + 32 <= return_data.size
                t = _1056 + ceil32(return_data.size) + 32
                s = _1056 + _1060 + 32
                while s < _1056 + _1060 + (32 * _1064) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                require ext_code.size(address(cd[68]))
                staticcall address(cd[68]).factory() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1220 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1224 = mem[_1220]
                require mem[_1220] == mem[_1220 + 12 len 20]
                if mem[96] < 1:
                    revert with 0, 17
                if mem[96] - 1 >= mem[96]:
                    revert with 0, 50
                if mem[96] < 2:
                    revert with 0, 17
                if mem[96] - 2 >= mem[96]:
                    revert with 0, 50
                _1249 = mem[(32 * mem[96] - 2) + 128]
                mem[mem[64] + 4] = mem[(32 * mem[96] - 1) + 140 len 20]
                mem[mem[64] + 36] = address(_1249)
                require ext_code.size(address(_1224))
                staticcall address(_1224).getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4], address(_1249)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1260 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_1260] == mem[_1260 + 12 len 20]
                if _1064 < 1:
                    revert with 0, 17
                if _1064 - 1 >= _1064:
                    revert with 0, 50
                if mem[(32 * _1064 - 1) + _1056 + ceil32(return_data.size) + 32] >= cd[100]:
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if msg.value:
                    _1281 = mem[64]
                    mem[mem[64]] = 0
                    mem[64] = mem[64] + 32
                    idx = 0
                    while idx < mem[_1281]:
                        idx = idx + 32
                        continue 
                    if ceil32(mem[_1281]) > mem[_1281]:
                        mem[mem[_1281] + _1281 + 32] = 0
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len mem[_1281] + _1281 + -mem[64] + 28]
                    if not ext_call.success:
                        revert with 0, 'ETH transfer failed'
            else:
                if address(cd[68]) != 0xc45fb63001b56a21e29c7dcc1727bfda273a368:
                    _453 = mem[64]
                    mem[mem[64]] = 0x8a657e6700000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[100]
                    mem[mem[64] + 36] = 128
                    _457 = mem[96]
                    mem[mem[64] + 132] = mem[96]
                    s = 0
                    t = 128
                    u = mem[64] + 164
                    while s < _457:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[_453 + 68] = address(cd[164])
                    mem[_453 + 100] = block.timestamp
                    require ext_code.size(address(cd[68]))
                    call address(cd[68]).mem[mem[64] len 4] with:
                       value msg.value wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _453 + (32 * _457) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _681 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _689 = mem[_681]
                    require mem[_681] <= test266151307()
                    require _681 + return_data.size > _681 + mem[_681] + 31
                    _697 = mem[_681 + mem[_681]]
                    if mem[_681 + mem[_681]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_681 + mem[_681]]) + 1 < 0 or _681 + ceil32(return_data.size) + ceil32(32 * mem[_681 + mem[_681]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _681 + ceil32(return_data.size) + ceil32(32 * mem[_681 + mem[_681]]) + 1
                    mem[_681 + ceil32(return_data.size)] = _697
                    require _689 + (32 * _697) + 32 <= return_data.size
                    t = _681 + ceil32(return_data.size) + 32
                    s = _681 + _689 + 32
                    while s < _681 + _689 + (32 * _697) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    if eth.balance(this.address) < eth.balance(this.address) - msg.value:
                        revert with 0, 17
                    _879 = mem[64]
                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.value
                    mem[mem[64] + 36] = 64
                    _883 = mem[96]
                    mem[mem[64] + 68] = mem[96]
                    s = 0
                    t = 128
                    u = mem[64] + 100
                    while s < _883:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    require ext_code.size(address(cd[68]))
                    staticcall address(cd[68]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _879 + (32 * _883) + -mem[64] + 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1057 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1061 = mem[_1057]
                    require mem[_1057] <= test266151307()
                    require _1057 + return_data.size > _1057 + mem[_1057] + 31
                    _1065 = mem[_1057 + mem[_1057]]
                    if mem[_1057 + mem[_1057]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_1057 + mem[_1057]]) + 1 < 0 or _1057 + ceil32(return_data.size) + ceil32(32 * mem[_1057 + mem[_1057]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _1057 + ceil32(return_data.size) + ceil32(32 * mem[_1057 + mem[_1057]]) + 1
                    mem[_1057 + ceil32(return_data.size)] = _1065
                    require _1061 + (32 * _1065) + 32 <= return_data.size
                    t = _1057 + ceil32(return_data.size) + 32
                    s = _1057 + _1061 + 32
                    while s < _1057 + _1061 + (32 * _1065) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    require ext_code.size(address(cd[68]))
                    staticcall address(cd[68]).factory() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1221 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1225 = mem[_1221]
                    require mem[_1221] == mem[_1221 + 12 len 20]
                    if mem[96] < 1:
                        revert with 0, 17
                    if mem[96] - 1 >= mem[96]:
                        revert with 0, 50
                    if mem[96] < 2:
                        revert with 0, 17
                    if mem[96] - 2 >= mem[96]:
                        revert with 0, 50
                    _1251 = mem[(32 * mem[96] - 2) + 128]
                    mem[mem[64] + 4] = mem[(32 * mem[96] - 1) + 140 len 20]
                    mem[mem[64] + 36] = address(_1251)
                    require ext_code.size(address(_1225))
                    staticcall address(_1225).getPair(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4], address(_1251)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1261 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_1261] == mem[_1261 + 12 len 20]
                    if _1065 < 1:
                        revert with 0, 17
                    if _1065 - 1 >= _1065:
                        revert with 0, 50
                    if mem[(32 * _1065 - 1) + _1057 + ceil32(return_data.size) + 32] >= cd[100]:
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if msg.value:
                        _1283 = mem[64]
                        mem[mem[64]] = 0
                        mem[64] = mem[64] + 32
                        idx = 0
                        while idx < mem[_1283]:
                            idx = idx + 32
                            continue 
                        if ceil32(mem[_1283]) > mem[_1283]:
                            mem[mem[_1283] + _1283 + 32] = 0
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len mem[_1283] + _1283 + -mem[64] + 28]
                        if not ext_call.success:
                            revert with 0, 'ETH transfer failed'
                else:
                    _454 = mem[64]
                    mem[mem[64]] = 0xfb3bdb4100000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[100]
                    mem[mem[64] + 36] = 128
                    _458 = mem[96]
                    mem[mem[64] + 132] = mem[96]
                    s = 0
                    t = 128
                    u = mem[64] + 164
                    while s < _458:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[_454 + 68] = address(cd[164])
                    mem[_454 + 100] = block.timestamp
                    require ext_code.size(address(cd[68]))
                    call address(cd[68]).mem[mem[64] len 4] with:
                       value msg.value wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _454 + (32 * _458) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _682 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _690 = mem[_682]
                    require mem[_682] <= test266151307()
                    require _682 + return_data.size > _682 + mem[_682] + 31
                    _698 = mem[_682 + mem[_682]]
                    if mem[_682 + mem[_682]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_682 + mem[_682]]) + 1 < 0 or _682 + ceil32(return_data.size) + ceil32(32 * mem[_682 + mem[_682]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _682 + ceil32(return_data.size) + ceil32(32 * mem[_682 + mem[_682]]) + 1
                    mem[_682 + ceil32(return_data.size)] = _698
                    require _690 + (32 * _698) + 32 <= return_data.size
                    t = _682 + ceil32(return_data.size) + 32
                    s = _682 + _690 + 32
                    while s < _682 + _690 + (32 * _698) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    if eth.balance(this.address) < eth.balance(this.address) - msg.value:
                        revert with 0, 17
                    _882 = mem[64]
                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.value
                    mem[mem[64] + 36] = 64
                    _886 = mem[96]
                    mem[mem[64] + 68] = mem[96]
                    s = 0
                    t = 128
                    u = mem[64] + 100
                    while s < _886:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    require ext_code.size(address(cd[68]))
                    staticcall address(cd[68]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _882 + (32 * _886) + -mem[64] + 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1058 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1062 = mem[_1058]
                    require mem[_1058] <= test266151307()
                    require _1058 + return_data.size > _1058 + mem[_1058] + 31
                    _1066 = mem[_1058 + mem[_1058]]
                    if mem[_1058 + mem[_1058]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_1058 + mem[_1058]]) + 1 < 0 or _1058 + ceil32(return_data.size) + ceil32(32 * mem[_1058 + mem[_1058]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _1058 + ceil32(return_data.size) + ceil32(32 * mem[_1058 + mem[_1058]]) + 1
                    mem[_1058 + ceil32(return_data.size)] = _1066
                    require _1062 + (32 * _1066) + 32 <= return_data.size
                    t = _1058 + ceil32(return_data.size) + 32
                    s = _1058 + _1062 + 32
                    while s < _1058 + _1062 + (32 * _1066) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    require ext_code.size(address(cd[68]))
                    staticcall address(cd[68]).factory() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1222 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1226 = mem[_1222]
                    require mem[_1222] == mem[_1222 + 12 len 20]
                    if mem[96] < 1:
                        revert with 0, 17
                    if mem[96] - 1 >= mem[96]:
                        revert with 0, 50
                    if mem[96] < 2:
                        revert with 0, 17
                    if mem[96] - 2 >= mem[96]:
                        revert with 0, 50
                    _1253 = mem[(32 * mem[96] - 2) + 128]
                    mem[mem[64] + 4] = mem[(32 * mem[96] - 1) + 140 len 20]
                    mem[mem[64] + 36] = address(_1253)
                    require ext_code.size(address(_1226))
                    staticcall address(_1226).getPair(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4], address(_1253)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1262 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_1262] == mem[_1262 + 12 len 20]
                    if _1066 < 1:
                        revert with 0, 17
                    if _1066 - 1 >= _1066:
                        revert with 0, 50
                    if mem[(32 * _1066 - 1) + _1058 + ceil32(return_data.size) + 32] >= cd[100]:
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if msg.value:
                        _1285 = mem[64]
                        mem[mem[64]] = 0
                        mem[64] = mem[64] + 32
                        idx = 0
                        while idx < mem[_1285]:
                            idx = idx + 32
                            continue 
                        if ceil32(mem[_1285]) > mem[_1285]:
                            mem[mem[_1285] + _1285 + 32] = 0
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len mem[_1285] + _1285 + -mem[64] + 28]
                        if not ext_call.success:
                            revert with 0, 'ETH transfer failed'
    if msg.value:
        _446 = mem[64]
        mem[mem[64]] = 0
        mem[64] = mem[64] + 32
        if ceil32(mem[_446]) > mem[_446]:
            mem[mem[_446] + _446 + 32] = 0
        call msg.sender with:
           value msg.value wei
             gas gas_remaining wei
            args mem[mem[64] + 4 len mem[_446] + _446 + -mem[64] + 28]
        if not ext_call.success:
            revert with 0, 'ETH transfer failed'
}

function getTokenInfo(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(arg1)
    staticcall arg1.0x18160ddd with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(arg1)
    staticcall arg1.0x313ce567 with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    mem[(2 * ceil32(return_data.size)) + 96] = 0x6fdde0300000000000000000000000000000000000000000000000000000000
    require ext_code.size(arg1)
    staticcall arg1.name() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[(2 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    _12 = mem[(2 * ceil32(return_data.size)) + 96]
    require mem[(2 * ceil32(return_data.size)) + 96] <= test266151307()
    require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 96] + 127 < (2 * ceil32(return_data.size)) + return_data.size + 96
    _13 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 96] + 96]
    if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 96] + 96] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 96] + 96])) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(ceil32(mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 96] + 96])) + 97 > test266151307():
        revert with 0, 65
    mem[64] = (4 * ceil32(return_data.size)) + ceil32(ceil32(mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 96] + 96])) + 97
    mem[(4 * ceil32(return_data.size)) + 96] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 96] + 96]
    require _12 + _13 + 32 <= return_data.size
    mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_13)] = mem[(2 * ceil32(return_data.size)) + _12 + 128 len ceil32(_13)]
    if ceil32(_13) <= _13:
        mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(arg1)
        staticcall arg1.0x95d89b41 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _319 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _321 = mem[_319]
        require mem[_319] <= test266151307()
        require _319 + mem[_319] + 31 < _319 + return_data.size
        _323 = mem[_319 + mem[_319]]
        if mem[_319 + mem[_319]] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[_319 + mem[_319]])) + 1 < 0 or _319 + ceil32(return_data.size) + ceil32(ceil32(mem[_319 + mem[_319]])) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _319 + ceil32(return_data.size) + ceil32(ceil32(mem[_319 + mem[_319]])) + 1
        mem[_319 + ceil32(return_data.size)] = _323
        require _321 + _323 + 32 <= return_data.size
        mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)] = mem[_319 + _321 + 32 len ceil32(_323)]
        if ceil32(_323) <= _323:
            require ext_code.size(arg1)
            staticcall arg1.0x8da5cb5b with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if ext_call.success:
                _623 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _635 = mem[_623]
                require mem[_623] == mem[_623 + 12 len 20]
                mem[mem[64]] = ext_call.return_data[0]
                mem[mem[64] + 32] = address(_635)
                mem[mem[64] + 64] = 160
                _684 = mem[(4 * ceil32(return_data.size)) + 96]
                mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
                mem[mem[64] + 192 len ceil32(_684)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_684)]
                if ceil32(_684) <= _684:
                    mem[mem[64] + 96] = ceil32(_684) + 192
                    mem[ceil32(_684) + mem[64] + 192] = _323
                    mem[ceil32(_684) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
                    if ceil32(_323) > _323:
                        mem[_323 + ceil32(_684) + mem[64] + 224] = 0
                    return ext_call.return_data[0], 
                           address(_635),
                           Array(len=mem[mem[64] + 160 len ceil32(_684) + 32], data=_323, mem[mem[64] + ceil32(_684) + 224 len ceil32(_323)]),
                           ceil32(_684) + 192,
                           ext_call.return_data[0] << 248
                mem[_684 + mem[64] + 192] = 0
                mem[mem[64] + 96] = ceil32(_684) + 192
                mem[ceil32(_684) + mem[64] + 192] = _323
                mem[ceil32(_684) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
                if ceil32(_323) > _323:
                    mem[_323 + ceil32(_684) + mem[64] + 224] = 0
                return ext_call.return_data[0], 
                       address(_635),
                       160,
                       ceil32(_684) + 192,
                       ext_call.return_data[0] << 248,
                       mem[mem[64] + 160 len _684 + 32],
                       0,
                       mem[mem[64] + _684 + 224 len ceil32(_323) + ceil32(_684) - _684]
            require ext_code.size(arg1)
            staticcall arg1.0x893d20e8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if ext_call.success:
                _639 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _651 = mem[_639]
                require mem[_639] == mem[_639 + 12 len 20]
                mem[mem[64]] = ext_call.return_data[0]
                mem[mem[64] + 32] = address(_651)
                mem[mem[64] + 64] = 160
                _699 = mem[(4 * ceil32(return_data.size)) + 96]
                mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
                mem[mem[64] + 192 len ceil32(_699)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_699)]
                if ceil32(_699) <= _699:
                    mem[mem[64] + 96] = ceil32(_699) + 192
                    mem[ceil32(_699) + mem[64] + 192] = _323
                    mem[ceil32(_699) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
                    if ceil32(_323) > _323:
                        mem[_323 + ceil32(_699) + mem[64] + 224] = 0
                    return ext_call.return_data[0], 
                           address(_651),
                           Array(len=mem[mem[64] + 160 len ceil32(_699) + 32], data=_323, mem[mem[64] + ceil32(_699) + 224 len ceil32(_323)]),
                           ceil32(_699) + 192,
                           ext_call.return_data[0] << 248
                mem[_699 + mem[64] + 192] = 0
                mem[mem[64] + 96] = ceil32(_699) + 192
                mem[ceil32(_699) + mem[64] + 192] = _323
                mem[ceil32(_699) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
                if ceil32(_323) > _323:
                    mem[_323 + ceil32(_699) + mem[64] + 224] = 0
                return ext_call.return_data[0], 
                       address(_651),
                       160,
                       ceil32(_699) + 192,
                       ext_call.return_data[0] << 248,
                       mem[mem[64] + 160 len _699 + 32],
                       0,
                       mem[mem[64] + _699 + 224 len ceil32(_323) + ceil32(_699) - _699]
            require ext_code.size(arg1)
            staticcall arg1.Owner() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if ext_call.success:
                _655 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _667 = mem[_655]
                require mem[_655] == mem[_655 + 12 len 20]
                mem[mem[64]] = ext_call.return_data[0]
                mem[mem[64] + 32] = address(_667)
                mem[mem[64] + 64] = 160
                _715 = mem[(4 * ceil32(return_data.size)) + 96]
                mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
                mem[mem[64] + 192 len ceil32(_715)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_715)]
                if ceil32(_715) <= _715:
                    mem[mem[64] + 96] = ceil32(_715) + 192
                    mem[ceil32(_715) + mem[64] + 192] = _323
                    mem[ceil32(_715) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
                    if ceil32(_323) > _323:
                        mem[_323 + ceil32(_715) + mem[64] + 224] = 0
                    return ext_call.return_data[0], 
                           address(_667),
                           Array(len=mem[mem[64] + 160 len ceil32(_715) + 32], data=_323, mem[mem[64] + ceil32(_715) + 224 len ceil32(_323)]),
                           ceil32(_715) + 192,
                           ext_call.return_data[0] << 248
                mem[_715 + mem[64] + 192] = 0
                mem[mem[64] + 96] = ceil32(_715) + 192
                mem[ceil32(_715) + mem[64] + 192] = _323
                mem[ceil32(_715) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
                if ceil32(_323) > _323:
                    mem[_323 + ceil32(_715) + mem[64] + 224] = 0
                return ext_call.return_data[0], 
                       address(_667),
                       160,
                       ceil32(_715) + 192,
                       ext_call.return_data[0] << 248,
                       mem[mem[64] + 160 len _715 + 32],
                       0,
                       mem[mem[64] + _715 + 224 len ceil32(_323) + ceil32(_715) - _715]
            require ext_code.size(arg1)
            staticcall arg1.getowner() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                mem[mem[64]] = ext_call.return_data[0]
                mem[mem[64] + 32] = 1
                mem[mem[64] + 64] = 160
                _695 = mem[(4 * ceil32(return_data.size)) + 96]
                mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
                mem[mem[64] + 192 len ceil32(_695)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_695)]
                if ceil32(_695) <= _695:
                    mem[mem[64] + 96] = ceil32(_695) + 192
                    mem[ceil32(_695) + mem[64] + 192] = _323
                    mem[ceil32(_695) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
                    if ceil32(_323) > _323:
                        mem[_323 + ceil32(_695) + mem[64] + 224] = 0
                    return ext_call.return_data[0], 
                           1,
                           Array(len=mem[mem[64] + 160 len ceil32(_695) + 32], data=_323, mem[mem[64] + ceil32(_695) + 224 len ceil32(_323)]),
                           ceil32(_695) + 192,
                           ext_call.return_data[0] << 248
                mem[_695 + mem[64] + 192] = 0
                mem[mem[64] + 96] = ceil32(_695) + 192
                mem[ceil32(_695) + mem[64] + 192] = _323
                mem[ceil32(_695) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
                if ceil32(_323) > _323:
                    mem[_323 + ceil32(_695) + mem[64] + 224] = 0
                return ext_call.return_data[0], 
                       1,
                       160,
                       ceil32(_695) + 192,
                       ext_call.return_data[0] << 248,
                       mem[mem[64] + 160 len _695 + 32],
                       0,
                       mem[mem[64] + _695 + 224 len ceil32(_323) + ceil32(_695) - _695]
            _671 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _679 = mem[_671]
            require mem[_671] == mem[_671 + 12 len 20]
            mem[mem[64]] = ext_call.return_data[0]
            mem[mem[64] + 32] = address(_679)
            mem[mem[64] + 64] = 160
            _737 = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 192 len ceil32(_737)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_737)]
            if ceil32(_737) <= _737:
                mem[mem[64] + 96] = ceil32(_737) + 192
                mem[ceil32(_737) + mem[64] + 192] = _323
                mem[ceil32(_737) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
                if ceil32(_323) > _323:
                    mem[_323 + ceil32(_737) + mem[64] + 224] = 0
                return ext_call.return_data[0], 
                       address(_679),
                       Array(len=mem[mem[64] + 160 len ceil32(_737) + 32], data=_323, mem[mem[64] + ceil32(_737) + 224 len ceil32(_323)]),
                       ceil32(_737) + 192,
                       ext_call.return_data[0] << 248
            mem[_737 + mem[64] + 192] = 0
            mem[mem[64] + 96] = ceil32(_737) + 192
            mem[ceil32(_737) + mem[64] + 192] = _323
            mem[ceil32(_737) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
            if ceil32(_323) > _323:
                mem[_323 + ceil32(_737) + mem[64] + 224] = 0
            return ext_call.return_data[0], 
                   address(_679),
                   160,
                   ceil32(_737) + 192,
                   ext_call.return_data[0] << 248,
                   mem[mem[64] + 160 len _737 + 32],
                   0,
                   mem[mem[64] + _737 + 224 len ceil32(_323) + ceil32(_737) - _737]
        mem[_323 + _319 + ceil32(return_data.size) + 32] = 0
        require ext_code.size(arg1)
        staticcall arg1.0x8da5cb5b with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if ext_call.success:
            _624 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _636 = mem[_624]
            require mem[_624] == mem[_624 + 12 len 20]
            mem[mem[64]] = ext_call.return_data[0]
            mem[mem[64] + 32] = address(_636)
            mem[mem[64] + 64] = 160
            _686 = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 192 len ceil32(_686)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_686)]
            if ceil32(_686) <= _686:
                mem[mem[64] + 96] = ceil32(_686) + 192
                mem[ceil32(_686) + mem[64] + 192] = _323
                mem[ceil32(_686) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
                if ceil32(_323) > _323:
                    mem[_323 + ceil32(_686) + mem[64] + 224] = 0
                return ext_call.return_data[0], 
                       address(_636),
                       Array(len=mem[mem[64] + 160 len ceil32(_686) + 32], data=_323, mem[mem[64] + ceil32(_686) + 224 len ceil32(_323)]),
                       ceil32(_686) + 192,
                       ext_call.return_data[0] << 248
            mem[_686 + mem[64] + 192] = 0
            mem[mem[64] + 96] = ceil32(_686) + 192
            mem[ceil32(_686) + mem[64] + 192] = _323
            mem[ceil32(_686) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
            if ceil32(_323) > _323:
                mem[_323 + ceil32(_686) + mem[64] + 224] = 0
            return ext_call.return_data[0], 
                   address(_636),
                   160,
                   ceil32(_686) + 192,
                   ext_call.return_data[0] << 248,
                   mem[mem[64] + 160 len _686 + 32],
                   0,
                   mem[mem[64] + _686 + 224 len ceil32(_323) + ceil32(_686) - _686]
        require ext_code.size(arg1)
        staticcall arg1.0x893d20e8 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if ext_call.success:
            _640 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _652 = mem[_640]
            require mem[_640] == mem[_640 + 12 len 20]
            mem[mem[64]] = ext_call.return_data[0]
            mem[mem[64] + 32] = address(_652)
            mem[mem[64] + 64] = 160
            _701 = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 192 len ceil32(_701)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_701)]
            if ceil32(_701) <= _701:
                mem[mem[64] + 96] = ceil32(_701) + 192
                mem[ceil32(_701) + mem[64] + 192] = _323
                mem[ceil32(_701) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
                if ceil32(_323) > _323:
                    mem[_323 + ceil32(_701) + mem[64] + 224] = 0
                return ext_call.return_data[0], 
                       address(_652),
                       Array(len=mem[mem[64] + 160 len ceil32(_701) + 32], data=_323, mem[mem[64] + ceil32(_701) + 224 len ceil32(_323)]),
                       ceil32(_701) + 192,
                       ext_call.return_data[0] << 248
            mem[_701 + mem[64] + 192] = 0
            mem[mem[64] + 96] = ceil32(_701) + 192
            mem[ceil32(_701) + mem[64] + 192] = _323
            mem[ceil32(_701) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
            if ceil32(_323) > _323:
                mem[_323 + ceil32(_701) + mem[64] + 224] = 0
            return ext_call.return_data[0], 
                   address(_652),
                   160,
                   ceil32(_701) + 192,
                   ext_call.return_data[0] << 248,
                   mem[mem[64] + 160 len _701 + 32],
                   0,
                   mem[mem[64] + _701 + 224 len ceil32(_323) + ceil32(_701) - _701]
        require ext_code.size(arg1)
        staticcall arg1.Owner() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if ext_call.success:
            _656 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _668 = mem[_656]
            require mem[_656] == mem[_656 + 12 len 20]
            mem[mem[64]] = ext_call.return_data[0]
            mem[mem[64] + 32] = address(_668)
            mem[mem[64] + 64] = 160
            _717 = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 192 len ceil32(_717)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_717)]
            if ceil32(_717) <= _717:
                mem[mem[64] + 96] = ceil32(_717) + 192
                mem[ceil32(_717) + mem[64] + 192] = _323
                mem[ceil32(_717) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
                if ceil32(_323) > _323:
                    mem[_323 + ceil32(_717) + mem[64] + 224] = 0
                return ext_call.return_data[0], 
                       address(_668),
                       Array(len=mem[mem[64] + 160 len ceil32(_717) + 32], data=_323, mem[mem[64] + ceil32(_717) + 224 len ceil32(_323)]),
                       ceil32(_717) + 192,
                       ext_call.return_data[0] << 248
            mem[_717 + mem[64] + 192] = 0
            mem[mem[64] + 96] = ceil32(_717) + 192
            mem[ceil32(_717) + mem[64] + 192] = _323
            mem[ceil32(_717) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
            if ceil32(_323) > _323:
                mem[_323 + ceil32(_717) + mem[64] + 224] = 0
            return ext_call.return_data[0], 
                   address(_668),
                   160,
                   ceil32(_717) + 192,
                   ext_call.return_data[0] << 248,
                   mem[mem[64] + 160 len _717 + 32],
                   0,
                   mem[mem[64] + _717 + 224 len ceil32(_323) + ceil32(_717) - _717]
        require ext_code.size(arg1)
        staticcall arg1.getowner() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            mem[mem[64]] = ext_call.return_data[0]
            mem[mem[64] + 32] = 1
            mem[mem[64] + 64] = 160
            _696 = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 192 len ceil32(_696)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_696)]
            if ceil32(_696) <= _696:
                mem[mem[64] + 96] = ceil32(_696) + 192
                mem[ceil32(_696) + mem[64] + 192] = _323
                mem[ceil32(_696) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
                if ceil32(_323) > _323:
                    mem[_323 + ceil32(_696) + mem[64] + 224] = 0
                return ext_call.return_data[0], 
                       1,
                       Array(len=mem[mem[64] + 160 len ceil32(_696) + 32], data=_323, mem[mem[64] + ceil32(_696) + 224 len ceil32(_323)]),
                       ceil32(_696) + 192,
                       ext_call.return_data[0] << 248
            mem[_696 + mem[64] + 192] = 0
            mem[mem[64] + 96] = ceil32(_696) + 192
            mem[ceil32(_696) + mem[64] + 192] = _323
            mem[ceil32(_696) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
            if ceil32(_323) > _323:
                mem[_323 + ceil32(_696) + mem[64] + 224] = 0
            return ext_call.return_data[0], 
                   1,
                   160,
                   ceil32(_696) + 192,
                   ext_call.return_data[0] << 248,
                   mem[mem[64] + 160 len _696 + 32],
                   0,
                   mem[mem[64] + _696 + 224 len ceil32(_323) + ceil32(_696) - _696]
        _672 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _680 = mem[_672]
        require mem[_672] == mem[_672 + 12 len 20]
        mem[mem[64]] = ext_call.return_data[0]
        mem[mem[64] + 32] = address(_680)
        mem[mem[64] + 64] = 160
        _741 = mem[(4 * ceil32(return_data.size)) + 96]
        mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
        mem[mem[64] + 192 len ceil32(_741)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_741)]
        if ceil32(_741) <= _741:
            mem[mem[64] + 96] = ceil32(_741) + 192
            mem[ceil32(_741) + mem[64] + 192] = _323
            mem[ceil32(_741) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
            if ceil32(_323) > _323:
                mem[_323 + ceil32(_741) + mem[64] + 224] = 0
            return ext_call.return_data[0], 
                   address(_680),
                   Array(len=mem[mem[64] + 160 len ceil32(_741) + 32], data=_323, mem[mem[64] + ceil32(_741) + 224 len ceil32(_323)]),
                   ceil32(_741) + 192,
                   ext_call.return_data[0] << 248
        mem[_741 + mem[64] + 192] = 0
        mem[mem[64] + 96] = ceil32(_741) + 192
        mem[ceil32(_741) + mem[64] + 192] = _323
        mem[ceil32(_741) + mem[64] + 224 len ceil32(_323)] = mem[_319 + ceil32(return_data.size) + 32 len ceil32(_323)]
        if ceil32(_323) > _323:
            mem[_323 + ceil32(_741) + mem[64] + 224] = 0
        return ext_call.return_data[0], 
               address(_680),
               160,
               ceil32(_741) + 192,
               ext_call.return_data[0] << 248,
               mem[mem[64] + 160 len _741 + 32],
               0,
               mem[mem[64] + _741 + 224 len ceil32(_323) + ceil32(_741) - _741]
    mem[_13 + (4 * ceil32(return_data.size)) + 128] = 0
    mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
    require ext_code.size(arg1)
    staticcall arg1.0x95d89b41 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _320 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _322 = mem[_320]
    require mem[_320] <= test266151307()
    require _320 + mem[_320] + 31 < _320 + return_data.size
    _324 = mem[_320 + mem[_320]]
    if mem[_320 + mem[_320]] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[_320 + mem[_320]])) + 1 < 0 or _320 + ceil32(return_data.size) + ceil32(ceil32(mem[_320 + mem[_320]])) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _320 + ceil32(return_data.size) + ceil32(ceil32(mem[_320 + mem[_320]])) + 1
    mem[_320 + ceil32(return_data.size)] = _324
    require _322 + _324 + 32 <= return_data.size
    mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)] = mem[_320 + _322 + 32 len ceil32(_324)]
    if ceil32(_324) <= _324:
        require ext_code.size(arg1)
        staticcall arg1.0x8da5cb5b with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if ext_call.success:
            _625 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _637 = mem[_625]
            require mem[_625] == mem[_625 + 12 len 20]
            mem[mem[64]] = ext_call.return_data[0]
            mem[mem[64] + 32] = address(_637)
            mem[mem[64] + 64] = 160
            _688 = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 192 len ceil32(_688)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_688)]
            if ceil32(_688) <= _688:
                mem[mem[64] + 96] = ceil32(_688) + 192
                mem[ceil32(_688) + mem[64] + 192] = _324
                mem[ceil32(_688) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
                if ceil32(_324) > _324:
                    mem[_324 + ceil32(_688) + mem[64] + 224] = 0
                return ext_call.return_data[0], 
                       address(_637),
                       Array(len=mem[mem[64] + 160 len ceil32(_688) + 32], data=_324, mem[mem[64] + ceil32(_688) + 224 len ceil32(_324)]),
                       ceil32(_688) + 192,
                       ext_call.return_data[0] << 248
            mem[_688 + mem[64] + 192] = 0
            mem[mem[64] + 96] = ceil32(_688) + 192
            mem[ceil32(_688) + mem[64] + 192] = _324
            mem[ceil32(_688) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
            if ceil32(_324) > _324:
                mem[_324 + ceil32(_688) + mem[64] + 224] = 0
            return ext_call.return_data[0], 
                   address(_637),
                   160,
                   ceil32(_688) + 192,
                   ext_call.return_data[0] << 248,
                   mem[mem[64] + 160 len _688 + 32],
                   0,
                   mem[mem[64] + _688 + 224 len ceil32(_324) + ceil32(_688) - _688]
        require ext_code.size(arg1)
        staticcall arg1.0x893d20e8 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if ext_call.success:
            _641 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _653 = mem[_641]
            require mem[_641] == mem[_641 + 12 len 20]
            mem[mem[64]] = ext_call.return_data[0]
            mem[mem[64] + 32] = address(_653)
            mem[mem[64] + 64] = 160
            _703 = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 192 len ceil32(_703)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_703)]
            if ceil32(_703) <= _703:
                mem[mem[64] + 96] = ceil32(_703) + 192
                mem[ceil32(_703) + mem[64] + 192] = _324
                mem[ceil32(_703) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
                if ceil32(_324) > _324:
                    mem[_324 + ceil32(_703) + mem[64] + 224] = 0
                return ext_call.return_data[0], 
                       address(_653),
                       Array(len=mem[mem[64] + 160 len ceil32(_703) + 32], data=_324, mem[mem[64] + ceil32(_703) + 224 len ceil32(_324)]),
                       ceil32(_703) + 192,
                       ext_call.return_data[0] << 248
            mem[_703 + mem[64] + 192] = 0
            mem[mem[64] + 96] = ceil32(_703) + 192
            mem[ceil32(_703) + mem[64] + 192] = _324
            mem[ceil32(_703) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
            if ceil32(_324) > _324:
                mem[_324 + ceil32(_703) + mem[64] + 224] = 0
            return ext_call.return_data[0], 
                   address(_653),
                   160,
                   ceil32(_703) + 192,
                   ext_call.return_data[0] << 248,
                   mem[mem[64] + 160 len _703 + 32],
                   0,
                   mem[mem[64] + _703 + 224 len ceil32(_324) + ceil32(_703) - _703]
        require ext_code.size(arg1)
        staticcall arg1.Owner() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if ext_call.success:
            _657 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _669 = mem[_657]
            require mem[_657] == mem[_657 + 12 len 20]
            mem[mem[64]] = ext_call.return_data[0]
            mem[mem[64] + 32] = address(_669)
            mem[mem[64] + 64] = 160
            _719 = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 192 len ceil32(_719)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_719)]
            if ceil32(_719) <= _719:
                mem[mem[64] + 96] = ceil32(_719) + 192
                mem[ceil32(_719) + mem[64] + 192] = _324
                mem[ceil32(_719) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
                if ceil32(_324) > _324:
                    mem[_324 + ceil32(_719) + mem[64] + 224] = 0
                return ext_call.return_data[0], 
                       address(_669),
                       Array(len=mem[mem[64] + 160 len ceil32(_719) + 32], data=_324, mem[mem[64] + ceil32(_719) + 224 len ceil32(_324)]),
                       ceil32(_719) + 192,
                       ext_call.return_data[0] << 248
            mem[_719 + mem[64] + 192] = 0
            mem[mem[64] + 96] = ceil32(_719) + 192
            mem[ceil32(_719) + mem[64] + 192] = _324
            mem[ceil32(_719) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
            if ceil32(_324) > _324:
                mem[_324 + ceil32(_719) + mem[64] + 224] = 0
            return ext_call.return_data[0], 
                   address(_669),
                   160,
                   ceil32(_719) + 192,
                   ext_call.return_data[0] << 248,
                   mem[mem[64] + 160 len _719 + 32],
                   0,
                   mem[mem[64] + _719 + 224 len ceil32(_324) + ceil32(_719) - _719]
        require ext_code.size(arg1)
        staticcall arg1.getowner() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            mem[mem[64]] = ext_call.return_data[0]
            mem[mem[64] + 32] = 1
            mem[mem[64] + 64] = 160
            _697 = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
            mem[mem[64] + 192 len ceil32(_697)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_697)]
            if ceil32(_697) <= _697:
                mem[mem[64] + 96] = ceil32(_697) + 192
                mem[ceil32(_697) + mem[64] + 192] = _324
                mem[ceil32(_697) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
                if ceil32(_324) > _324:
                    mem[_324 + ceil32(_697) + mem[64] + 224] = 0
                return ext_call.return_data[0], 
                       1,
                       Array(len=mem[mem[64] + 160 len ceil32(_697) + 32], data=_324, mem[mem[64] + ceil32(_697) + 224 len ceil32(_324)]),
                       ceil32(_697) + 192,
                       ext_call.return_data[0] << 248
            mem[_697 + mem[64] + 192] = 0
            mem[mem[64] + 96] = ceil32(_697) + 192
            mem[ceil32(_697) + mem[64] + 192] = _324
            mem[ceil32(_697) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
            if ceil32(_324) > _324:
                mem[_324 + ceil32(_697) + mem[64] + 224] = 0
            return ext_call.return_data[0], 
                   1,
                   160,
                   ceil32(_697) + 192,
                   ext_call.return_data[0] << 248,
                   mem[mem[64] + 160 len _697 + 32],
                   0,
                   mem[mem[64] + _697 + 224 len ceil32(_324) + ceil32(_697) - _697]
        _673 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _681 = mem[_673]
        require mem[_673] == mem[_673 + 12 len 20]
        mem[mem[64]] = ext_call.return_data[0]
        mem[mem[64] + 32] = address(_681)
        mem[mem[64] + 64] = 160
        _745 = mem[(4 * ceil32(return_data.size)) + 96]
        mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
        mem[mem[64] + 192 len ceil32(_745)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_745)]
        if ceil32(_745) <= _745:
            mem[mem[64] + 96] = ceil32(_745) + 192
            mem[ceil32(_745) + mem[64] + 192] = _324
            mem[ceil32(_745) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
            if ceil32(_324) > _324:
                mem[_324 + ceil32(_745) + mem[64] + 224] = 0
            return ext_call.return_data[0], 
                   address(_681),
                   Array(len=mem[mem[64] + 160 len ceil32(_745) + 32], data=_324, mem[mem[64] + ceil32(_745) + 224 len ceil32(_324)]),
                   ceil32(_745) + 192,
                   ext_call.return_data[0] << 248
        mem[_745 + mem[64] + 192] = 0
        mem[mem[64] + 96] = ceil32(_745) + 192
        mem[ceil32(_745) + mem[64] + 192] = _324
        mem[ceil32(_745) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
        if ceil32(_324) > _324:
            mem[_324 + ceil32(_745) + mem[64] + 224] = 0
        return ext_call.return_data[0], 
               address(_681),
               160,
               ceil32(_745) + 192,
               ext_call.return_data[0] << 248,
               mem[mem[64] + 160 len _745 + 32],
               0,
               mem[mem[64] + _745 + 224 len ceil32(_324) + ceil32(_745) - _745]
    mem[_324 + _320 + ceil32(return_data.size) + 32] = 0
    require ext_code.size(arg1)
    staticcall arg1.0x8da5cb5b with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if ext_call.success:
        _626 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _638 = mem[_626]
        require mem[_626] == mem[_626 + 12 len 20]
        mem[mem[64]] = ext_call.return_data[0]
        mem[mem[64] + 32] = address(_638)
        mem[mem[64] + 64] = 160
        _690 = mem[(4 * ceil32(return_data.size)) + 96]
        mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
        mem[mem[64] + 192 len ceil32(_690)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_690)]
        if ceil32(_690) <= _690:
            mem[mem[64] + 96] = ceil32(_690) + 192
            mem[ceil32(_690) + mem[64] + 192] = _324
            mem[ceil32(_690) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
            if ceil32(_324) > _324:
                mem[_324 + ceil32(_690) + mem[64] + 224] = 0
            return ext_call.return_data[0], 
                   address(_638),
                   Array(len=mem[mem[64] + 160 len ceil32(_690) + 32], data=_324, mem[mem[64] + ceil32(_690) + 224 len ceil32(_324)]),
                   ceil32(_690) + 192,
                   ext_call.return_data[0] << 248
        mem[_690 + mem[64] + 192] = 0
        mem[mem[64] + 96] = ceil32(_690) + 192
        mem[ceil32(_690) + mem[64] + 192] = _324
        mem[ceil32(_690) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
        if ceil32(_324) > _324:
            mem[_324 + ceil32(_690) + mem[64] + 224] = 0
        return ext_call.return_data[0], 
               address(_638),
               160,
               ceil32(_690) + 192,
               ext_call.return_data[0] << 248,
               mem[mem[64] + 160 len _690 + 32],
               0,
               mem[mem[64] + _690 + 224 len ceil32(_324) + ceil32(_690) - _690]
    require ext_code.size(arg1)
    staticcall arg1.0x893d20e8 with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if ext_call.success:
        _642 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _654 = mem[_642]
        require mem[_642] == mem[_642 + 12 len 20]
        mem[mem[64]] = ext_call.return_data[0]
        mem[mem[64] + 32] = address(_654)
        mem[mem[64] + 64] = 160
        _705 = mem[(4 * ceil32(return_data.size)) + 96]
        mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
        mem[mem[64] + 192 len ceil32(_705)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_705)]
        if ceil32(_705) <= _705:
            mem[mem[64] + 96] = ceil32(_705) + 192
            mem[ceil32(_705) + mem[64] + 192] = _324
            mem[ceil32(_705) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
            if ceil32(_324) > _324:
                mem[_324 + ceil32(_705) + mem[64] + 224] = 0
            return ext_call.return_data[0], 
                   address(_654),
                   Array(len=mem[mem[64] + 160 len ceil32(_705) + 32], data=_324, mem[mem[64] + ceil32(_705) + 224 len ceil32(_324)]),
                   ceil32(_705) + 192,
                   ext_call.return_data[0] << 248
        mem[_705 + mem[64] + 192] = 0
        mem[mem[64] + 96] = ceil32(_705) + 192
        mem[ceil32(_705) + mem[64] + 192] = _324
        mem[ceil32(_705) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
        if ceil32(_324) > _324:
            mem[_324 + ceil32(_705) + mem[64] + 224] = 0
        return ext_call.return_data[0], 
               address(_654),
               160,
               ceil32(_705) + 192,
               ext_call.return_data[0] << 248,
               mem[mem[64] + 160 len _705 + 32],
               0,
               mem[mem[64] + _705 + 224 len ceil32(_324) + ceil32(_705) - _705]
    require ext_code.size(arg1)
    staticcall arg1.Owner() with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if ext_call.success:
        _658 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _670 = mem[_658]
        require mem[_658] == mem[_658 + 12 len 20]
        mem[mem[64]] = ext_call.return_data[0]
        mem[mem[64] + 32] = address(_670)
        mem[mem[64] + 64] = 160
        _721 = mem[(4 * ceil32(return_data.size)) + 96]
        mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
        mem[mem[64] + 192 len ceil32(_721)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_721)]
        if ceil32(_721) <= _721:
            mem[mem[64] + 96] = ceil32(_721) + 192
            mem[ceil32(_721) + mem[64] + 192] = _324
            mem[ceil32(_721) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
            if ceil32(_324) > _324:
                mem[_324 + ceil32(_721) + mem[64] + 224] = 0
            return ext_call.return_data[0], 
                   address(_670),
                   Array(len=mem[mem[64] + 160 len ceil32(_721) + 32], data=_324, mem[mem[64] + ceil32(_721) + 224 len ceil32(_324)]),
                   ceil32(_721) + 192,
                   ext_call.return_data[0] << 248
        mem[_721 + mem[64] + 192] = 0
        mem[mem[64] + 96] = ceil32(_721) + 192
        mem[ceil32(_721) + mem[64] + 192] = _324
        mem[ceil32(_721) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
        if ceil32(_324) > _324:
            mem[_324 + ceil32(_721) + mem[64] + 224] = 0
        return ext_call.return_data[0], 
               address(_670),
               160,
               ceil32(_721) + 192,
               ext_call.return_data[0] << 248,
               mem[mem[64] + 160 len _721 + 32],
               0,
               mem[mem[64] + _721 + 224 len ceil32(_324) + ceil32(_721) - _721]
    require ext_code.size(arg1)
    staticcall arg1.getowner() with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        mem[mem[64]] = ext_call.return_data[0]
        mem[mem[64] + 32] = 1
        mem[mem[64] + 64] = 160
        _698 = mem[(4 * ceil32(return_data.size)) + 96]
        mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
        mem[mem[64] + 192 len ceil32(_698)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_698)]
        if ceil32(_698) <= _698:
            mem[mem[64] + 96] = ceil32(_698) + 192
            mem[ceil32(_698) + mem[64] + 192] = _324
            mem[ceil32(_698) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
            if ceil32(_324) > _324:
                mem[_324 + ceil32(_698) + mem[64] + 224] = 0
            return ext_call.return_data[0], 
                   1,
                   Array(len=mem[mem[64] + 160 len ceil32(_698) + 32], data=_324, mem[mem[64] + ceil32(_698) + 224 len ceil32(_324)]),
                   ceil32(_698) + 192,
                   ext_call.return_data[0] << 248
        mem[_698 + mem[64] + 192] = 0
        mem[mem[64] + 96] = ceil32(_698) + 192
        mem[ceil32(_698) + mem[64] + 192] = _324
        mem[ceil32(_698) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
        if ceil32(_324) > _324:
            mem[_324 + ceil32(_698) + mem[64] + 224] = 0
        return ext_call.return_data[0], 
               1,
               160,
               ceil32(_698) + 192,
               ext_call.return_data[0] << 248,
               mem[mem[64] + 160 len _698 + 32],
               0,
               mem[mem[64] + _698 + 224 len ceil32(_324) + ceil32(_698) - _698]
    _674 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _682 = mem[_674]
    require mem[_674] == mem[_674 + 12 len 20]
    mem[mem[64]] = ext_call.return_data[0]
    mem[mem[64] + 32] = address(_682)
    mem[mem[64] + 64] = 160
    _749 = mem[(4 * ceil32(return_data.size)) + 96]
    mem[mem[64] + 160] = mem[(4 * ceil32(return_data.size)) + 96]
    mem[mem[64] + 192 len ceil32(_749)] = mem[(4 * ceil32(return_data.size)) + 128 len ceil32(_749)]
    if ceil32(_749) <= _749:
        mem[mem[64] + 96] = ceil32(_749) + 192
        mem[ceil32(_749) + mem[64] + 192] = _324
        mem[ceil32(_749) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
        if ceil32(_324) > _324:
            mem[_324 + ceil32(_749) + mem[64] + 224] = 0
        return ext_call.return_data[0], 
               address(_682),
               Array(len=mem[mem[64] + 160 len ceil32(_749) + 32], data=_324, mem[mem[64] + ceil32(_749) + 224 len ceil32(_324)]),
               ceil32(_749) + 192,
               ext_call.return_data[0] << 248
    mem[_749 + mem[64] + 192] = 0
    mem[mem[64] + 96] = ceil32(_749) + 192
    mem[ceil32(_749) + mem[64] + 192] = _324
    mem[ceil32(_749) + mem[64] + 224 len ceil32(_324)] = mem[_320 + ceil32(return_data.size) + 32 len ceil32(_324)]
    if ceil32(_324) > _324:
        mem[_324 + ceil32(_749) + mem[64] + 224] = 0
    return ext_call.return_data[0], 
           address(_682),
           160,
           ceil32(_749) + 192,
           ext_call.return_data[0] << 248,
           mem[mem[64] + 160 len _749 + 32],
           0,
           mem[mem[64] + _749 + 224 len ceil32(_324) + ceil32(_749) - _749]
}

function sub_50442305(?) {
    require calldata.size - 4 >= 128
    require cd[4] == address(cd[4])
    require cd[100] <= test266151307()
    require cd[100] + 35 < calldata.size
    if ('cd', 100).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 100).length) + 97 < 96 or ceil32(32 * ('cd', 100).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 100).length
    require cd[100] + (32 * ('cd', 100).length) + 36 <= calldata.size
    idx = cd[100] + 36
    s = 128
    while idx < cd[100] + (32 * ('cd', 100).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    mem[ceil32(32 * ('cd', 100).length) + 97] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
    mem[ceil32(32 * ('cd', 100).length) + 101] = cd[68]
    mem[ceil32(32 * ('cd', 100).length) + 133] = 64
    mem[ceil32(32 * ('cd', 100).length) + 165] = ('cd', 100).length
    idx = 0
    s = 128
    t = ceil32(32 * ('cd', 100).length) + 197
    while idx < ('cd', 100).length:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
            gas gas_remaining wei
           args cd[68], Array(len=('cd', 100).length, data=mem[ceil32(32 * ('cd', 100).length) + 197 len 32 * ('cd', 100).length])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(32 * ('cd', 100).length) + 97 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97
    require return_data.size >= 32
    _1331 = mem[ceil32(32 * ('cd', 100).length) + 97 len 4], Mask(224, 32, cd[68]) >> 32
    require mem[ceil32(32 * ('cd', 100).length) + 97 len 4], Mask(224, 32, cd[68]) >> 32 <= test266151307()
    require ceil32(32 * ('cd', 100).length) + return_data.size + 97 > ceil32(32 * ('cd', 100).length) + mem[ceil32(32 * ('cd', 100).length) + 97 len 4], Mask(224, 32, cd[68]) >> 32 + 128
    _1332 = mem[ceil32(32 * ('cd', 100).length) + mem[ceil32(32 * ('cd', 100).length) + 97 len 4], Mask(224, 32, cd[68]) >> 32 + 97]
    if mem[ceil32(32 * ('cd', 100).length) + mem[ceil32(32 * ('cd', 100).length) + 97 len 4], Mask(224, 32, cd[68]) >> 32 + 97] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[ceil32(32 * ('cd', 100).length) + mem[ceil32(32 * ('cd', 100).length) + 97 len 4], Mask(224, 32, cd[68]) >> 32 + 97]) + 1 < 0 or ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + ceil32(32 * mem[ceil32(32 * ('cd', 100).length) + mem[ceil32(32 * ('cd', 100).length) + 97 len 4], Mask(224, 32, cd[68]) >> 32 + 97]) + 98 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + ceil32(32 * mem[ceil32(32 * ('cd', 100).length) + mem[ceil32(32 * ('cd', 100).length) + 97 len 4], Mask(224, 32, cd[68]) >> 32 + 97]) + 98
    mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97] = mem[ceil32(32 * ('cd', 100).length) + mem[ceil32(32 * ('cd', 100).length) + 97 len 4], Mask(224, 32, cd[68]) >> 32 + 97]
    require _1331 + (32 * _1332) + 32 <= return_data.size
    mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129 len ceil32(32 * _1332)] = mem[ceil32(32 * ('cd', 100).length) + _1331 + 129 len ceil32(32 * _1332)]
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).factory() with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _1992 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _1993 = mem[_1992]
    require mem[_1992] == mem[_1992 + 12 len 20]
    if ('cd', 100).length < 1:
        revert with 0, 17
    if ('cd', 100).length - 1 >= ('cd', 100).length:
        revert with 0, 50
    if ('cd', 100).length < 2:
        revert with 0, 17
    if ('cd', 100).length - 2 >= ('cd', 100).length:
        revert with 0, 50
    _1999 = mem[(32 * ('cd', 100).length - 2) + 128]
    mem[mem[64] + 4] = mem[(32 * ('cd', 100).length - 1) + 140 len 20]
    mem[mem[64] + 36] = address(_1999)
    require ext_code.size(address(_1993))
    staticcall address(_1993).getPair(address arg1, address arg2) with:
            gas gas_remaining wei
           args mem[mem[64] + 4], address(_1999)
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _2002 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    require mem[_2002] == mem[_2002 + 12 len 20]
    if 0 >= ('cd', 100).length:
        revert with 0, 50
    _2005 = mem[128]
    _2006 = mem[64]
    mem[mem[64] + 36] = msg.sender
    mem[mem[64] + 68] = this.address
    mem[mem[64] + 100] = cd[68]
    _2007 = mem[64]
    mem[mem[64]] = 100
    mem[64] = mem[64] + 132
    mem[_2007 + 32 len 4] = unknown_0x23b872dd(?????)
    _2010 = mem[_2007]
    mem[_2006 + 132 len ceil32(mem[_2007])] = mem[_2007 + 32 len ceil32(mem[_2007])]
    if ceil32(_2010) <= _2010:
        call address(_2005) with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len _2010 + _2006 + -mem[64] + 128]
        if not return_data.size:
            if not ext_call.success:
                revert with 0, 'TRANSFER_FROM_FAILED'
            if not ('cd', 100).length:
                if _1332 < 1:
                    revert with 0, 17
                if _1332 - 1 >= _1332:
                    revert with 0, 50
                _2677 = mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129]
                if mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129] and cd[36] > -1 / mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129]:
                    revert with 0, 17
                if 0 >= ('cd', 100).length:
                    revert with 0, 50
                _2705 = mem[128]
                _2709 = mem[64]
                mem[mem[64] + 36] = address(cd[4])
                mem[mem[64] + 68] = -1
                _2710 = mem[64]
                mem[mem[64]] = 68
                mem[64] = mem[64] + 100
                mem[_2710 + 32 len 4] = approve(address arg1, uint256 arg2)
                _2725 = mem[_2710]
                mem[_2709 + 100 len ceil32(mem[_2710])] = mem[_2710 + 32 len ceil32(mem[_2710])]
                if ceil32(_2725) <= _2725:
                    call address(_2705) with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _2725 + _2709 + -mem[64] + 96]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not ('cd', 100).length:
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2677 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < mem[96]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                        else:
                            require ('cd', 100).length >= 32
                            require mem[128] == bool(mem[128])
                            if not mem[128]:
                                revert with 0, 'NOT_APPROVE!'
                            _3669 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2677 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3669 + 100] = msg.sender
                            mem[_3669 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3669 + (32 * ('cd', 100).length) + -mem[64] + 192]
                    else:
                        _3301 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size) + 1
                        mem[_3301] = return_data.size
                        mem[_3301 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not return_data.size:
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2677 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < mem[96]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                        else:
                            require return_data.size >= 32
                            require mem[_3301 + 32] == bool(mem[_3301 + 32])
                            if not mem[_3301 + 32]:
                                revert with 0, 'NOT_APPROVE!'
                            _3670 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2677 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3670 + 100] = msg.sender
                            mem[_3670 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3670 + (32 * ('cd', 100).length) + -mem[64] + 192]
                else:
                    mem[_2725 + _2709 + 100] = 0
                    call address(_2705) with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _2725 + _2709 + -mem[64] + 96]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not ('cd', 100).length:
                            _3479 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2677 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3479 + 100] = msg.sender
                            mem[_3479 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3479 + (32 * ('cd', 100).length) + -mem[64] + 192]
                        else:
                            require ('cd', 100).length >= 32
                            require mem[128] == bool(mem[128])
                            if not mem[128]:
                                revert with 0, 'NOT_APPROVE!'
                            _3671 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2677 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3671 + 100] = msg.sender
                            mem[_3671 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3671 + (32 * ('cd', 100).length) + -mem[64] + 192]
                    else:
                        _3302 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size) + 1
                        mem[_3302] = return_data.size
                        mem[_3302 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not return_data.size:
                            _3480 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2677 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3480 + 100] = msg.sender
                            mem[_3480 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3480 + (32 * ('cd', 100).length) + -mem[64] + 192]
                        else:
                            require return_data.size >= 32
                            require mem[_3302 + 32] == bool(mem[_3302 + 32])
                            if not mem[_3302 + 32]:
                                revert with 0, 'NOT_APPROVE!'
                            _3672 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2677 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3672 + 100] = msg.sender
                            mem[_3672 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3672 + (32 * ('cd', 100).length) + -mem[64] + 192]
            else:
                require ('cd', 100).length >= 32
                require mem[128] == bool(mem[128])
                if not mem[128]:
                    revert with 0, 'TRANSFER_FROM_FAILED'
                if _1332 < 1:
                    revert with 0, 17
                if _1332 - 1 >= _1332:
                    revert with 0, 50
                _2698 = mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129]
                if mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129] and cd[36] > -1 / mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129]:
                    revert with 0, 17
                if 0 >= ('cd', 100).length:
                    revert with 0, 50
                _2737 = mem[128]
                _2741 = mem[64]
                mem[mem[64] + 36] = address(cd[4])
                mem[mem[64] + 68] = -1
                _2742 = mem[64]
                mem[mem[64]] = 68
                mem[64] = mem[64] + 100
                mem[_2742 + 32 len 4] = approve(address arg1, uint256 arg2)
                _2759 = mem[_2742]
                mem[_2741 + 100 len ceil32(mem[_2742])] = mem[_2742 + 32 len ceil32(mem[_2742])]
                if ceil32(_2759) <= _2759:
                    call address(_2737) with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _2759 + _2741 + -mem[64] + 96]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if ('cd', 100).length:
                            require ('cd', 100).length >= 32
                            require mem[128] == bool(mem[128])
                            if not mem[128]:
                                revert with 0, 'NOT_APPROVE!'
                        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = cd[68]
                        mem[mem[64] + 36] = _2698 * cd[36] / 100
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = ('cd', 100).length
                        idx = 0
                        s = 128
                        t = mem[64] + 196
                        while idx < mem[96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(cd[4]))
                        call address(cd[4]).mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                    else:
                        _3303 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size) + 1
                        mem[_3303] = return_data.size
                        mem[_3303 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not return_data.size:
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2698 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < mem[96]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                        else:
                            require return_data.size >= 32
                            require mem[_3303 + 32] == bool(mem[_3303 + 32])
                            if not mem[_3303 + 32]:
                                revert with 0, 'NOT_APPROVE!'
                            _3674 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2698 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3674 + 100] = msg.sender
                            mem[_3674 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3674 + (32 * ('cd', 100).length) + -mem[64] + 192]
                else:
                    mem[_2759 + _2741 + 100] = 0
                    call address(_2737) with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _2759 + _2741 + -mem[64] + 96]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not ('cd', 100).length:
                            _3483 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2698 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3483 + 100] = msg.sender
                            mem[_3483 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3483 + (32 * ('cd', 100).length) + -mem[64] + 192]
                        else:
                            require ('cd', 100).length >= 32
                            require mem[128] == bool(mem[128])
                            if not mem[128]:
                                revert with 0, 'NOT_APPROVE!'
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2698 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < mem[96]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                    else:
                        _3304 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size) + 1
                        mem[_3304] = return_data.size
                        mem[_3304 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not return_data.size:
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2698 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < mem[96]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                        else:
                            require return_data.size >= 32
                            require mem[_3304 + 32] == bool(mem[_3304 + 32])
                            if not mem[_3304 + 32]:
                                revert with 0, 'NOT_APPROVE!'
                            _3676 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2698 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3676 + 100] = msg.sender
                            mem[_3676 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3676 + (32 * ('cd', 100).length) + -mem[64] + 192]
        else:
            _2647 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size) + 1
            mem[_2647] = return_data.size
            mem[_2647 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
            if not ext_call.success:
                revert with 0, 'TRANSFER_FROM_FAILED'
            if not return_data.size:
                if _1332 < 1:
                    revert with 0, 17
                if _1332 - 1 >= _1332:
                    revert with 0, 50
                _2678 = mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129]
                if mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129] and cd[36] > -1 / mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129]:
                    revert with 0, 17
                if 0 >= ('cd', 100).length:
                    revert with 0, 50
                _2706 = mem[128]
                _2713 = mem[64]
                mem[mem[64] + 36] = address(cd[4])
                mem[mem[64] + 68] = -1
                _2714 = mem[64]
                mem[mem[64]] = 68
                mem[64] = mem[64] + 100
                mem[_2714 + 32 len 4] = approve(address arg1, uint256 arg2)
                _2726 = mem[_2714]
                mem[_2713 + 100 len ceil32(mem[_2714])] = mem[_2714 + 32 len ceil32(mem[_2714])]
                if ceil32(_2726) > _2726:
                    mem[_2726 + _2713 + 100] = 0
                    call address(_2706) with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _2726 + _2713 + -mem[64] + 96]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not ('cd', 100).length:
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2678 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < mem[96]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                        else:
                            require ('cd', 100).length >= 32
                            require mem[128] == bool(mem[128])
                            if not mem[128]:
                                revert with 0, 'NOT_APPROVE!'
                            _3679 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2678 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3679 + 100] = msg.sender
                            mem[_3679 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3679 + (32 * ('cd', 100).length) + -mem[64] + 192]
                    else:
                        _3306 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size) + 1
                        mem[_3306] = return_data.size
                        mem[_3306 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if return_data.size:
                            require return_data.size >= 32
                            require mem[_3306 + 32] == bool(mem[_3306 + 32])
                            if not mem[_3306 + 32]:
                                revert with 0, 'NOT_APPROVE!'
                        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = cd[68]
                        mem[mem[64] + 36] = _2678 * cd[36] / 100
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = ('cd', 100).length
                        idx = 0
                        s = 128
                        t = mem[64] + 196
                        while idx < mem[96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(cd[4]))
                        call address(cd[4]).mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                else:
                    call address(_2706) with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _2726 + _2713 + -mem[64] + 96]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if ('cd', 100).length:
                            require ('cd', 100).length >= 32
                            require mem[128] == bool(mem[128])
                            if not mem[128]:
                                revert with 0, 'NOT_APPROVE!'
                        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = cd[68]
                        mem[mem[64] + 36] = _2678 * cd[36] / 100
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = ('cd', 100).length
                        idx = 0
                        s = 128
                        t = mem[64] + 196
                        while idx < mem[96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(cd[4]))
                        call address(cd[4]).mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                    else:
                        _3305 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size) + 1
                        mem[_3305] = return_data.size
                        mem[_3305 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not return_data.size:
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2678 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < mem[96]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                        else:
                            require return_data.size >= 32
                            require mem[_3305 + 32] == bool(mem[_3305 + 32])
                            if not mem[_3305 + 32]:
                                revert with 0, 'NOT_APPROVE!'
                            _3678 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2678 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3678 + 100] = msg.sender
                            mem[_3678 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3678 + (32 * ('cd', 100).length) + -mem[64] + 192]
            else:
                require return_data.size >= 32
                require mem[_2647 + 32] == bool(mem[_2647 + 32])
                if not mem[_2647 + 32]:
                    revert with 0, 'TRANSFER_FROM_FAILED'
                if _1332 < 1:
                    revert with 0, 17
                if _1332 - 1 >= _1332:
                    revert with 0, 50
                _2700 = mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129]
                if mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129] and cd[36] > -1 / mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129]:
                    revert with 0, 17
                if 0 >= ('cd', 100).length:
                    revert with 0, 50
                _2738 = mem[128]
                _2745 = mem[64]
                mem[mem[64] + 36] = address(cd[4])
                mem[mem[64] + 68] = -1
                _2746 = mem[64]
                mem[mem[64]] = 68
                mem[64] = mem[64] + 100
                mem[_2746 + 32 len 4] = approve(address arg1, uint256 arg2)
                _2762 = mem[_2746]
                mem[_2745 + 100 len ceil32(mem[_2746])] = mem[_2746 + 32 len ceil32(mem[_2746])]
                if ceil32(_2762) <= _2762:
                    call address(_2738) with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _2762 + _2745 + -mem[64] + 96]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not ('cd', 100).length:
                            _3489 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2700 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3489 + 100] = msg.sender
                            mem[_3489 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3489 + (32 * ('cd', 100).length) + -mem[64] + 192]
                        else:
                            require ('cd', 100).length >= 32
                            require mem[128] == bool(mem[128])
                            if not mem[128]:
                                revert with 0, 'NOT_APPROVE!'
                            _3681 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2700 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3681 + 100] = msg.sender
                            mem[_3681 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3681 + (32 * ('cd', 100).length) + -mem[64] + 192]
                    else:
                        _3307 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size) + 1
                        mem[_3307] = return_data.size
                        mem[_3307 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not return_data.size:
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2700 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < mem[96]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                        else:
                            require return_data.size >= 32
                            require mem[_3307 + 32] == bool(mem[_3307 + 32])
                            if not mem[_3307 + 32]:
                                revert with 0, 'NOT_APPROVE!'
                            _3682 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2700 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3682 + 100] = msg.sender
                            mem[_3682 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3682 + (32 * ('cd', 100).length) + -mem[64] + 192]
                else:
                    mem[_2762 + _2745 + 100] = 0
                    call address(_2738) with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _2762 + _2745 + -mem[64] + 96]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if ('cd', 100).length:
                            require ('cd', 100).length >= 32
                            require mem[128] == bool(mem[128])
                            if not mem[128]:
                                revert with 0, 'NOT_APPROVE!'
                        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = cd[68]
                        mem[mem[64] + 36] = _2700 * cd[36] / 100
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = ('cd', 100).length
                        idx = 0
                        s = 128
                        t = mem[64] + 196
                        while idx < mem[96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(cd[4]))
                        call address(cd[4]).mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                    else:
                        _3308 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size) + 1
                        mem[_3308] = return_data.size
                        mem[_3308 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not return_data.size:
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2700 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < mem[96]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                        else:
                            require return_data.size >= 32
                            require mem[_3308 + 32] == bool(mem[_3308 + 32])
                            if not mem[_3308 + 32]:
                                revert with 0, 'NOT_APPROVE!'
                            _3684 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2700 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3684 + 100] = msg.sender
                            mem[_3684 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3684 + (32 * ('cd', 100).length) + -mem[64] + 192]
    else:
        mem[_2010 + _2006 + 132] = 0
        call address(_2005) with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len _2010 + _2006 + -mem[64] + 128]
        if not return_data.size:
            if not ext_call.success:
                revert with 0, 'TRANSFER_FROM_FAILED'
            if not ('cd', 100).length:
                if _1332 < 1:
                    revert with 0, 17
                if _1332 - 1 >= _1332:
                    revert with 0, 50
                _2679 = mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129]
                if mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129] and cd[36] > -1 / mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129]:
                    revert with 0, 17
                if 0 >= ('cd', 100).length:
                    revert with 0, 50
                _2707 = mem[128]
                _2717 = mem[64]
                mem[mem[64] + 36] = address(cd[4])
                mem[mem[64] + 68] = -1
                _2718 = mem[64]
                mem[mem[64]] = 68
                mem[64] = mem[64] + 100
                mem[_2718 + 32 len 4] = approve(address arg1, uint256 arg2)
                _2727 = mem[_2718]
                mem[_2717 + 100 len ceil32(mem[_2718])] = mem[_2718 + 32 len ceil32(mem[_2718])]
                if ceil32(_2727) > _2727:
                    mem[_2727 + _2717 + 100] = 0
                    call address(_2707) with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _2727 + _2717 + -mem[64] + 96]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not ('cd', 100).length:
                            _3495 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2679 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3495 + 100] = msg.sender
                            mem[_3495 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3495 + (32 * ('cd', 100).length) + -mem[64] + 192]
                        else:
                            require ('cd', 100).length >= 32
                            require mem[128] == bool(mem[128])
                            if not mem[128]:
                                revert with 0, 'NOT_APPROVE!'
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2679 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < mem[96]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                    else:
                        _3310 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size) + 1
                        mem[_3310] = return_data.size
                        mem[_3310 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if return_data.size:
                            require return_data.size >= 32
                            require mem[_3310 + 32] == bool(mem[_3310 + 32])
                            if not mem[_3310 + 32]:
                                revert with 0, 'NOT_APPROVE!'
                        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = cd[68]
                        mem[mem[64] + 36] = _2679 * cd[36] / 100
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = ('cd', 100).length
                        idx = 0
                        s = 128
                        t = mem[64] + 196
                        while idx < mem[96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(cd[4]))
                        call address(cd[4]).mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                else:
                    call address(_2707) with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _2727 + _2717 + -mem[64] + 96]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if ('cd', 100).length:
                            require ('cd', 100).length >= 32
                            require mem[128] == bool(mem[128])
                            if not mem[128]:
                                revert with 0, 'NOT_APPROVE!'
                        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = cd[68]
                        mem[mem[64] + 36] = _2679 * cd[36] / 100
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = ('cd', 100).length
                        idx = 0
                        s = 128
                        t = mem[64] + 196
                        while idx < mem[96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(cd[4]))
                        call address(cd[4]).mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                    else:
                        _3309 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size) + 1
                        mem[_3309] = return_data.size
                        mem[_3309 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not return_data.size:
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2679 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < mem[96]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                        else:
                            require return_data.size >= 32
                            require mem[_3309 + 32] == bool(mem[_3309 + 32])
                            if not mem[_3309 + 32]:
                                revert with 0, 'NOT_APPROVE!'
                            _3686 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2679 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3686 + 100] = msg.sender
                            mem[_3686 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3686 + (32 * ('cd', 100).length) + -mem[64] + 192]
            else:
                require ('cd', 100).length >= 32
                require mem[128] == bool(mem[128])
                if not mem[128]:
                    revert with 0, 'TRANSFER_FROM_FAILED'
                if _1332 < 1:
                    revert with 0, 17
                if _1332 - 1 >= _1332:
                    revert with 0, 50
                _2702 = mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129]
                if mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129] and cd[36] > -1 / mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129]:
                    revert with 0, 17
                if 0 >= ('cd', 100).length:
                    revert with 0, 50
                _2739 = mem[128]
                _2749 = mem[64]
                mem[mem[64] + 36] = address(cd[4])
                mem[mem[64] + 68] = -1
                _2750 = mem[64]
                mem[mem[64]] = 68
                mem[64] = mem[64] + 100
                mem[_2750 + 32 len 4] = approve(address arg1, uint256 arg2)
                _2765 = mem[_2750]
                mem[_2749 + 100 len ceil32(mem[_2750])] = mem[_2750 + 32 len ceil32(mem[_2750])]
                if ceil32(_2765) <= _2765:
                    call address(_2739) with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _2765 + _2749 + -mem[64] + 96]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not ('cd', 100).length:
                            _3497 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2702 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3497 + 100] = msg.sender
                            mem[_3497 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3497 + (32 * ('cd', 100).length) + -mem[64] + 192]
                        else:
                            require ('cd', 100).length >= 32
                            require mem[128] == bool(mem[128])
                            if not mem[128]:
                                revert with 0, 'NOT_APPROVE!'
                            _3689 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2702 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3689 + 100] = msg.sender
                            mem[_3689 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3689 + (32 * ('cd', 100).length) + -mem[64] + 192]
                    else:
                        _3311 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size) + 1
                        mem[_3311] = return_data.size
                        mem[_3311 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if return_data.size:
                            require return_data.size >= 32
                            require mem[_3311 + 32] == bool(mem[_3311 + 32])
                            if not mem[_3311 + 32]:
                                revert with 0, 'NOT_APPROVE!'
                        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = cd[68]
                        mem[mem[64] + 36] = _2702 * cd[36] / 100
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = ('cd', 100).length
                        idx = 0
                        s = 128
                        t = mem[64] + 196
                        while idx < mem[96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(cd[4]))
                        call address(cd[4]).mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                else:
                    mem[_2765 + _2749 + 100] = 0
                    call address(_2739) with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _2765 + _2749 + -mem[64] + 96]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if ('cd', 100).length:
                            require ('cd', 100).length >= 32
                            require mem[128] == bool(mem[128])
                            if not mem[128]:
                                revert with 0, 'NOT_APPROVE!'
                        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = cd[68]
                        mem[mem[64] + 36] = _2702 * cd[36] / 100
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = ('cd', 100).length
                        idx = 0
                        s = 128
                        t = mem[64] + 196
                        while idx < mem[96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(cd[4]))
                        call address(cd[4]).mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                    else:
                        _3312 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size) + 1
                        mem[_3312] = return_data.size
                        mem[_3312 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not return_data.size:
                            _3500 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2702 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3500 + 100] = msg.sender
                            mem[_3500 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3500 + (32 * ('cd', 100).length) + -mem[64] + 192]
                        else:
                            require return_data.size >= 32
                            require mem[_3312 + 32] == bool(mem[_3312 + 32])
                            if not mem[_3312 + 32]:
                                revert with 0, 'NOT_APPROVE!'
                            _3692 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2702 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3692 + 100] = msg.sender
                            mem[_3692 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3692 + (32 * ('cd', 100).length) + -mem[64] + 192]
        else:
            _2648 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size) + 1
            mem[_2648] = return_data.size
            mem[_2648 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
            if not ext_call.success:
                revert with 0, 'TRANSFER_FROM_FAILED'
            if not return_data.size:
                if _1332 < 1:
                    revert with 0, 17
                if _1332 - 1 >= _1332:
                    revert with 0, 50
                _2680 = mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129]
                if mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129] and cd[36] > -1 / mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129]:
                    revert with 0, 17
                if 0 >= ('cd', 100).length:
                    revert with 0, 50
                _2708 = mem[128]
                _2721 = mem[64]
                mem[mem[64] + 36] = address(cd[4])
                mem[mem[64] + 68] = -1
                _2722 = mem[64]
                mem[mem[64]] = 68
                mem[64] = mem[64] + 100
                mem[_2722 + 32 len 4] = approve(address arg1, uint256 arg2)
                _2728 = mem[_2722]
                mem[_2721 + 100 len ceil32(mem[_2722])] = mem[_2722 + 32 len ceil32(mem[_2722])]
                if ceil32(_2728) <= _2728:
                    call address(_2708) with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _2728 + _2721 + -mem[64] + 96]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if ('cd', 100).length:
                            require ('cd', 100).length >= 32
                            require mem[128] == bool(mem[128])
                            if not mem[128]:
                                revert with 0, 'NOT_APPROVE!'
                    else:
                        _3313 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size) + 1
                        mem[_3313] = return_data.size
                        mem[_3313 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if return_data.size:
                            require return_data.size >= 32
                            require mem[_3313 + 32] == bool(mem[_3313 + 32])
                            if not mem[_3313 + 32]:
                                revert with 0, 'NOT_APPROVE!'
                else:
                    mem[_2728 + _2721 + 100] = 0
                    call address(_2708) with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _2728 + _2721 + -mem[64] + 96]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if ('cd', 100).length:
                            require ('cd', 100).length >= 32
                            require mem[128] == bool(mem[128])
                            if not mem[128]:
                                revert with 0, 'NOT_APPROVE!'
                    else:
                        _3314 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size) + 1
                        mem[_3314] = return_data.size
                        mem[_3314 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if return_data.size:
                            require return_data.size >= 32
                            require mem[_3314 + 32] == bool(mem[_3314 + 32])
                            if not mem[_3314 + 32]:
                                revert with 0, 'NOT_APPROVE!'
                mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[68]
                mem[mem[64] + 36] = _2680 * cd[36] / 100
                mem[mem[64] + 68] = 160
                mem[mem[64] + 164] = ('cd', 100).length
                idx = 0
                s = 128
                t = mem[64] + 196
                while idx < mem[96]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                call address(cd[4]).mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
            else:
                require return_data.size >= 32
                require mem[_2648 + 32] == bool(mem[_2648 + 32])
                if not mem[_2648 + 32]:
                    revert with 0, 'TRANSFER_FROM_FAILED'
                if _1332 < 1:
                    revert with 0, 17
                if _1332 - 1 >= _1332:
                    revert with 0, 50
                _2704 = mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129]
                if mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129] and cd[36] > -1 / mem[(32 * _1332 - 1) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 129]:
                    revert with 0, 17
                if 0 >= ('cd', 100).length:
                    revert with 0, 50
                _2740 = mem[128]
                _2753 = mem[64]
                mem[mem[64] + 36] = address(cd[4])
                mem[mem[64] + 68] = -1
                _2754 = mem[64]
                mem[mem[64]] = 68
                mem[64] = mem[64] + 100
                mem[_2754 + 32 len 4] = approve(address arg1, uint256 arg2)
                _2768 = mem[_2754]
                mem[_2753 + 100 len ceil32(mem[_2754])] = mem[_2754 + 32 len ceil32(mem[_2754])]
                if ceil32(_2768) <= _2768:
                    call address(_2740) with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _2768 + _2753 + -mem[64] + 96]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not ('cd', 100).length:
                            _3505 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2704 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3505 + 100] = msg.sender
                            mem[_3505 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3505 + (32 * ('cd', 100).length) + -mem[64] + 192]
                        else:
                            require ('cd', 100).length >= 32
                            require mem[128] == bool(mem[128])
                            if not mem[128]:
                                revert with 0, 'NOT_APPROVE!'
                            _3697 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2704 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3697 + 100] = msg.sender
                            mem[_3697 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3697 + (32 * ('cd', 100).length) + -mem[64] + 192]
                    else:
                        _3315 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size) + 1
                        mem[_3315] = return_data.size
                        mem[_3315 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if return_data.size:
                            require return_data.size >= 32
                            require mem[_3315 + 32] == bool(mem[_3315 + 32])
                            if not mem[_3315 + 32]:
                                revert with 0, 'NOT_APPROVE!'
                        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = cd[68]
                        mem[mem[64] + 36] = _2704 * cd[36] / 100
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = ('cd', 100).length
                        idx = 0
                        s = 128
                        t = mem[64] + 196
                        while idx < mem[96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(cd[4]))
                        call address(cd[4]).mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                else:
                    mem[_2768 + _2753 + 100] = 0
                    call address(_2740) with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _2768 + _2753 + -mem[64] + 96]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not ('cd', 100).length:
                            _3507 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2704 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3507 + 100] = msg.sender
                            mem[_3507 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3507 + (32 * ('cd', 100).length) + -mem[64] + 192]
                        else:
                            require ('cd', 100).length >= 32
                            require mem[128] == bool(mem[128])
                            if not mem[128]:
                                revert with 0, 'NOT_APPROVE!'
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2704 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < mem[96]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len 96], msg.sender, block.timestamp, mem[mem[64] + 164 len (32 * ('cd', 100).length) + 32]
                    else:
                        _3316 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size) + 1
                        mem[_3316] = return_data.size
                        mem[_3316 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            revert with 0, 'NOT_APPROVE!'
                        if not return_data.size:
                            _3508 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2704 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3508 + 100] = msg.sender
                            mem[_3508 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3508 + (32 * ('cd', 100).length) + -mem[64] + 192]
                        else:
                            require return_data.size >= 32
                            require mem[_3316 + 32] == bool(mem[_3316 + 32])
                            if not mem[_3316 + 32]:
                                revert with 0, 'NOT_APPROVE!'
                            _3700 = mem[64]
                            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[68]
                            mem[mem[64] + 36] = _2704 * cd[36] / 100
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = ('cd', 100).length
                            idx = 0
                            s = 128
                            t = mem[64] + 196
                            while idx < ('cd', 100).length:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3700 + 100] = msg.sender
                            mem[_3700 + 132] = block.timestamp
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3700 + (32 * ('cd', 100).length) + -mem[64] + 192]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_6c2c74c7(?) {
    require calldata.size - 4 >= 96
    require cd[4] == address(cd[4])
    require cd[36] == address(cd[36])
    require cd[68] <= test266151307()
    require cd[68] + 35 < calldata.size
    if ('cd', 68).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 68).length) + 97 < 96 or ceil32(32 * ('cd', 68).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 68).length
    require cd[68] + (32 * ('cd', 68).length) + 36 <= calldata.size
    idx = cd[68] + 36
    s = 128
    while idx < cd[68] + (32 * ('cd', 68).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    if ('cd', 68).length > test266151307():
        revert with 0, 65
    mem[ceil32(32 * ('cd', 68).length) + 97] = ('cd', 68).length
    if not ('cd', 68).length:
        if ('cd', 68).length > test266151307():
            revert with 0, 65
        mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129] = ('cd', 68).length
        mem[64] = ceil32(32 * ('cd', 68).length) + (64 * ('cd', 68).length) + 161
        if not ('cd', 68).length:
            if 0 >= ('cd', 68).length:
                revert with 0, 50
            if not ext_code.size(mem[128]):
                idx = 0
                while idx < ('cd', 68).length:
                    if idx >= mem[96]:
                        revert with 0, 50
                    if not ext_code.size(mem[(32 * idx) + 128]):
                        if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                            revert with 0, 50
                        mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                        _1276 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_1276] = 0
                        if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                            revert with 0, 50
                        mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1276
                    else:
                        if idx >= mem[96]:
                            revert with 0, 50
                        require ext_code.size(mem[(32 * idx) + 140 len 20])
                        staticcall mem[(32 * idx) + 140 len 20].0x313ce567 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                            if idx >= mem[96]:
                                revert with 0, 50
                            _1369 = mem[(32 * idx) + 128]
                            mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(address(_1369))
                            staticcall address(_1369).0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                _1437 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_1437] = 0
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1437
                            else:
                                _1418 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _1456 = mem[_1418]
                                require mem[_1418] <= test266151307()
                                require _1418 + mem[_1418] + 31 < _1418 + return_data.size
                                _1512 = mem[_1418 + mem[_1418]]
                                if mem[_1418 + mem[_1418]] > test266151307():
                                    revert with 0, 65
                                if ceil32(ceil32(mem[_1418 + mem[_1418]])) + 1 < 0 or _1418 + ceil32(return_data.size) + ceil32(ceil32(mem[_1418 + mem[_1418]])) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _1418 + ceil32(return_data.size) + ceil32(ceil32(mem[_1418 + mem[_1418]])) + 1
                                mem[_1418 + ceil32(return_data.size)] = _1512
                                require _1456 + _1512 + 32 <= return_data.size
                                s = 0
                                while s < _1512:
                                    mem[s + _1418 + ceil32(return_data.size) + 32] = mem[s + _1418 + _1456 + 32]
                                    s = s + 32
                                    continue 
                                if ceil32(_1512) > _1512:
                                    mem[_1512 + _1418 + ceil32(return_data.size) + 32] = 0
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1418 + ceil32(return_data.size)
                        else:
                            _1320 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_1320] == mem[_1320 + 31 len 1]
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = mem[_1320 + 31 len 1]
                            if idx >= mem[96]:
                                revert with 0, 50
                            _1480 = mem[(32 * idx) + 128]
                            mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(address(_1480))
                            staticcall address(_1480).0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                _1545 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_1545] = 0
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1545
                            else:
                                _1528 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _1574 = mem[_1528]
                                require mem[_1528] <= test266151307()
                                require _1528 + mem[_1528] + 31 < _1528 + return_data.size
                                _1608 = mem[_1528 + mem[_1528]]
                                if mem[_1528 + mem[_1528]] > test266151307():
                                    revert with 0, 65
                                if ceil32(ceil32(mem[_1528 + mem[_1528]])) + 1 < 0 or _1528 + ceil32(return_data.size) + ceil32(ceil32(mem[_1528 + mem[_1528]])) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _1528 + ceil32(return_data.size) + ceil32(ceil32(mem[_1528 + mem[_1528]])) + 1
                                mem[_1528 + ceil32(return_data.size)] = _1608
                                require _1574 + _1608 + 32 <= return_data.size
                                s = 0
                                while s < _1608:
                                    mem[s + _1528 + ceil32(return_data.size) + 32] = mem[s + _1528 + _1574 + 32]
                                    s = s + 32
                                    continue 
                                if ceil32(_1608) > _1608:
                                    mem[_1608 + _1528 + ceil32(return_data.size) + 32] = 0
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1528 + ceil32(return_data.size)
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                _1242 = mem[64]
                mem[mem[64]] = 0
                mem[mem[64] + 32] = 96
                _1258 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 96] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 128
                while idx < _1258:
                    mem[t] = mem[s + 31 len 1]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[mem[64] + 64] = (32 * _1258) + 128
                _1864 = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                mem[_1242 + (32 * _1258) + 128] = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161
                t = _1242 + (32 * _1258) + (32 * _1864) + 160
                u = _1242 + (32 * _1258) + 160
                while idx < _1864:
                    mem[u] = t + -_1242 + -(32 * _1258) - 160
                    _2182 = mem[s]
                    _2206 = mem[mem[s]]
                    mem[t] = mem[mem[s]]
                    v = 0
                    while v < _2206:
                        mem[v + t + 32] = mem[v + _2182 + 32]
                        v = v + 32
                        continue 
                    if ceil32(_2206) > _2206:
                        mem[_2206 + t + 32] = 0
                    idx = idx + 1
                    s = s + 32
                    t = ceil32(_2206) + t + 32
                    u = u + 32
                    continue 
            else:
                if 0 >= ('cd', 68).length:
                    revert with 0, 50
                mem[ceil32(32 * ('cd', 68).length) + (64 * ('cd', 68).length) + 165] = address(cd[4])
                mem[ceil32(32 * ('cd', 68).length) + (64 * ('cd', 68).length) + 197] = address(cd[36])
                require ext_code.size(mem[140 len 20])
                staticcall mem[140 len 20].0xdd62ed3e with:
                        gas gas_remaining wei
                       args address(cd[4]), address(cd[36])
                mem[ceil32(32 * ('cd', 68).length) + (64 * ('cd', 68).length) + 161] = ext_call.return_data[0]
                if not ext_call.success:
                    idx = 0
                    while idx < ('cd', 68).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        if not ext_code.size(mem[(32 * idx) + 128]):
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                            _1281 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_1281] = 0
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1281
                        else:
                            if idx >= mem[96]:
                                revert with 0, 50
                            require ext_code.size(mem[(32 * idx) + 140 len 20])
                            staticcall mem[(32 * idx) + 140 len 20].0x313ce567 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                                if idx >= mem[96]:
                                    revert with 0, 50
                                _1373 = mem[(32 * idx) + 128]
                                mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                                require ext_code.size(address(_1373))
                                staticcall address(_1373).0x95d89b41 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    _1440 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_1440] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1440
                                else:
                                    _1420 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _1458 = mem[_1420]
                                    require mem[_1420] <= test266151307()
                                    require _1420 + mem[_1420] + 31 < _1420 + return_data.size
                                    _1513 = mem[_1420 + mem[_1420]]
                                    if mem[_1420 + mem[_1420]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(ceil32(mem[_1420 + mem[_1420]])) + 1 < 0 or _1420 + ceil32(return_data.size) + ceil32(ceil32(mem[_1420 + mem[_1420]])) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _1420 + ceil32(return_data.size) + ceil32(ceil32(mem[_1420 + mem[_1420]])) + 1
                                    mem[_1420 + ceil32(return_data.size)] = _1513
                                    require _1458 + _1513 + 32 <= return_data.size
                                    s = 0
                                    while s < _1513:
                                        mem[s + _1420 + ceil32(return_data.size) + 32] = mem[s + _1420 + _1458 + 32]
                                        s = s + 32
                                        continue 
                                    if ceil32(_1513) > _1513:
                                        mem[_1513 + _1420 + ceil32(return_data.size) + 32] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1420 + ceil32(return_data.size)
                            else:
                                _1321 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_1321] == mem[_1321 + 31 len 1]
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = mem[_1321 + 31 len 1]
                                if idx >= mem[96]:
                                    revert with 0, 50
                                _1483 = mem[(32 * idx) + 128]
                                mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                                require ext_code.size(address(_1483))
                                staticcall address(_1483).0x95d89b41 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    _1548 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_1548] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1548
                                else:
                                    _1529 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _1575 = mem[_1529]
                                    require mem[_1529] <= test266151307()
                                    require _1529 + mem[_1529] + 31 < _1529 + return_data.size
                                    _1609 = mem[_1529 + mem[_1529]]
                                    if mem[_1529 + mem[_1529]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(ceil32(mem[_1529 + mem[_1529]])) + 1 < 0 or _1529 + ceil32(return_data.size) + ceil32(ceil32(mem[_1529 + mem[_1529]])) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _1529 + ceil32(return_data.size) + ceil32(ceil32(mem[_1529 + mem[_1529]])) + 1
                                    mem[_1529 + ceil32(return_data.size)] = _1609
                                    require _1575 + _1609 + 32 <= return_data.size
                                    s = 0
                                    while s < _1609:
                                        mem[s + _1529 + ceil32(return_data.size) + 32] = mem[s + _1529 + _1575 + 32]
                                        s = s + 32
                                        continue 
                                    if ceil32(_1609) > _1609:
                                        mem[_1609 + _1529 + ceil32(return_data.size) + 32] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1529 + ceil32(return_data.size)
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    _1244 = mem[64]
                    mem[mem[64]] = 0
                    mem[mem[64] + 32] = 96
                    _1261 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    mem[mem[64] + 96] = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + 129
                    t = mem[64] + 128
                    while idx < _1261:
                        mem[t] = mem[s + 31 len 1]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    mem[mem[64] + 64] = (32 * _1261) + 128
                    _1865 = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                    mem[_1244 + (32 * _1261) + 128] = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161
                    t = _1244 + (32 * _1261) + (32 * _1865) + 160
                    u = _1244 + (32 * _1261) + 160
                    while idx < _1865:
                        mem[u] = t + -_1244 + -(32 * _1261) - 160
                        _2183 = mem[s]
                        _2207 = mem[mem[s]]
                        mem[t] = mem[mem[s]]
                        v = 0
                        while v < _2207:
                            mem[v + t + 32] = mem[v + _2183 + 32]
                            v = v + 32
                            continue 
                        if ceil32(_2207) > _2207:
                            mem[_2207 + t + 32] = 0
                        idx = idx + 1
                        s = s + 32
                        t = ceil32(_2207) + t + 32
                        u = u + 32
                        continue 
                else:
                    mem[64] = ceil32(32 * ('cd', 68).length) + (64 * ('cd', 68).length) + ceil32(return_data.size) + 161
                    require return_data.size >= 32
                    idx = 0
                    while idx < ('cd', 68).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        if not ext_code.size(mem[(32 * idx) + 128]):
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                            _1286 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_1286] = 0
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1286
                        else:
                            if idx >= mem[96]:
                                revert with 0, 50
                            require ext_code.size(mem[(32 * idx) + 140 len 20])
                            staticcall mem[(32 * idx) + 140 len 20].0x313ce567 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                                if idx >= mem[96]:
                                    revert with 0, 50
                                _1377 = mem[(32 * idx) + 128]
                                mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                                require ext_code.size(address(_1377))
                                staticcall address(_1377).0x95d89b41 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    _1443 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_1443] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1443
                                else:
                                    _1422 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _1460 = mem[_1422]
                                    require mem[_1422] <= test266151307()
                                    require _1422 + mem[_1422] + 31 < _1422 + return_data.size
                                    _1514 = mem[_1422 + mem[_1422]]
                                    if mem[_1422 + mem[_1422]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(ceil32(mem[_1422 + mem[_1422]])) + 1 < 0 or _1422 + ceil32(return_data.size) + ceil32(ceil32(mem[_1422 + mem[_1422]])) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _1422 + ceil32(return_data.size) + ceil32(ceil32(mem[_1422 + mem[_1422]])) + 1
                                    mem[_1422 + ceil32(return_data.size)] = _1514
                                    require _1460 + _1514 + 32 <= return_data.size
                                    s = 0
                                    while s < _1514:
                                        mem[s + _1422 + ceil32(return_data.size) + 32] = mem[s + _1422 + _1460 + 32]
                                        s = s + 32
                                        continue 
                                    if ceil32(_1514) > _1514:
                                        mem[_1514 + _1422 + ceil32(return_data.size) + 32] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1422 + ceil32(return_data.size)
                            else:
                                _1322 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_1322] == mem[_1322 + 31 len 1]
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = mem[_1322 + 31 len 1]
                                if idx >= mem[96]:
                                    revert with 0, 50
                                _1486 = mem[(32 * idx) + 128]
                                mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                                require ext_code.size(address(_1486))
                                staticcall address(_1486).0x95d89b41 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    _1551 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_1551] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1551
                                else:
                                    _1530 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _1576 = mem[_1530]
                                    require mem[_1530] <= test266151307()
                                    require _1530 + mem[_1530] + 31 < _1530 + return_data.size
                                    _1610 = mem[_1530 + mem[_1530]]
                                    if mem[_1530 + mem[_1530]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(ceil32(mem[_1530 + mem[_1530]])) + 1 < 0 or _1530 + ceil32(return_data.size) + ceil32(ceil32(mem[_1530 + mem[_1530]])) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _1530 + ceil32(return_data.size) + ceil32(ceil32(mem[_1530 + mem[_1530]])) + 1
                                    mem[_1530 + ceil32(return_data.size)] = _1610
                                    require _1576 + _1610 + 32 <= return_data.size
                                    s = 0
                                    while s < _1610:
                                        mem[s + _1530 + ceil32(return_data.size) + 32] = mem[s + _1530 + _1576 + 32]
                                        s = s + 32
                                        continue 
                                    if ceil32(_1610) > _1610:
                                        mem[_1610 + _1530 + ceil32(return_data.size) + 32] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1530 + ceil32(return_data.size)
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    _1246 = mem[64]
                    mem[mem[64]] = ext_call.return_data[0]
                    mem[mem[64] + 32] = 96
                    _1264 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    mem[mem[64] + 96] = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + 129
                    t = mem[64] + 128
                    while idx < _1264:
                        mem[t] = mem[s + 31 len 1]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    mem[_1246 + 64] = (32 * _1264) + 128
                    _1866 = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                    mem[_1246 + (32 * _1264) + 128] = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161
                    t = _1246 + (32 * _1264) + (32 * _1866) + 160
                    u = _1246 + (32 * _1264) + 160
                    while idx < _1866:
                        mem[u] = t + -_1246 + -(32 * _1264) - 160
                        _2184 = mem[s]
                        _2208 = mem[mem[s]]
                        mem[t] = mem[mem[s]]
                        v = 0
                        while v < _2208:
                            mem[v + t + 32] = mem[v + _2184 + 32]
                            v = v + 32
                            continue 
                        if ceil32(_2208) > _2208:
                            mem[_2208 + t + 32] = 0
                        idx = idx + 1
                        s = s + 32
                        t = ceil32(_2208) + t + 32
                        u = u + 32
                        continue 
        else:
            mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = 96
            s = ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161
            idx = ('cd', 68).length
            while idx - 1:
                mem[s + 32] = 96
                s = s + 32
                idx = idx - 1
                continue 
            if 0 >= mem[96]:
                revert with 0, 50
            if not ext_code.size(mem[128]):
                _1822 = mem[96]
                idx = 0
                while idx < _1822:
                    if idx >= mem[96]:
                        revert with 0, 50
                    if not ext_code.size(mem[(32 * idx) + 128]):
                        if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                            revert with 0, 50
                        mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                        _1891 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_1891] = 0
                        if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                            revert with 0, 50
                        mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1891
                    else:
                        if idx >= mem[96]:
                            revert with 0, 50
                        require ext_code.size(mem[(32 * idx) + 140 len 20])
                        staticcall mem[(32 * idx) + 140 len 20].0x313ce567 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                            if idx >= mem[96]:
                                revert with 0, 50
                            _2009 = mem[(32 * idx) + 128]
                            mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(address(_2009))
                            staticcall address(_2009).0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                _2051 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_2051] = 0
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2051
                            else:
                                _2038 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _2068 = mem[_2038]
                                require mem[_2038] <= test266151307()
                                require _2038 + mem[_2038] + 31 < _2038 + return_data.size
                                _2098 = mem[_2038 + mem[_2038]]
                                if mem[_2038 + mem[_2038]] > test266151307():
                                    revert with 0, 65
                                if ceil32(ceil32(mem[_2038 + mem[_2038]])) + 1 < 0 or _2038 + ceil32(return_data.size) + ceil32(ceil32(mem[_2038 + mem[_2038]])) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _2038 + ceil32(return_data.size) + ceil32(ceil32(mem[_2038 + mem[_2038]])) + 1
                                mem[_2038 + ceil32(return_data.size)] = _2098
                                require _2068 + _2098 + 32 <= return_data.size
                                s = 0
                                while s < _2098:
                                    mem[s + _2038 + ceil32(return_data.size) + 32] = mem[s + _2038 + _2068 + 32]
                                    _1822 = mem[96]
                                    s = s + 32
                                    continue 
                                if ceil32(_2098) > _2098:
                                    mem[_2098 + _2038 + ceil32(return_data.size) + 32] = 0
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2038 + ceil32(return_data.size)
                        else:
                            _1963 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_1963] == mem[_1963 + 31 len 1]
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = mem[_1963 + 31 len 1]
                            if idx >= mem[96]:
                                revert with 0, 50
                            _2080 = mem[(32 * idx) + 128]
                            mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(address(_2080))
                            staticcall address(_2080).0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                _2111 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_2111] = 0
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2111
                            else:
                                _2104 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _2128 = mem[_2104]
                                require mem[_2104] <= test266151307()
                                require _2104 + mem[_2104] + 31 < _2104 + return_data.size
                                _2134 = mem[_2104 + mem[_2104]]
                                if mem[_2104 + mem[_2104]] > test266151307():
                                    revert with 0, 65
                                if ceil32(ceil32(mem[_2104 + mem[_2104]])) + 1 < 0 or _2104 + ceil32(return_data.size) + ceil32(ceil32(mem[_2104 + mem[_2104]])) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _2104 + ceil32(return_data.size) + ceil32(ceil32(mem[_2104 + mem[_2104]])) + 1
                                mem[_2104 + ceil32(return_data.size)] = _2134
                                require _2128 + _2134 + 32 <= return_data.size
                                s = 0
                                while s < _2134:
                                    mem[s + _2104 + ceil32(return_data.size) + 32] = mem[s + _2104 + _2128 + 32]
                                    _1822 = mem[96]
                                    s = s + 32
                                    continue 
                                if ceil32(_2134) > _2134:
                                    mem[_2134 + _2104 + ceil32(return_data.size) + 32] = 0
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2104 + ceil32(return_data.size)
                    if idx == -1:
                        revert with 0, 17
                    _1822 = mem[96]
                    idx = idx + 1
                    continue 
                _1852 = mem[64]
                mem[mem[64]] = 0
                mem[mem[64] + 32] = 96
                _1870 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 96] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 128
                while idx < _1870:
                    mem[t] = mem[s + 31 len 1]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[mem[64] + 64] = (32 * _1870) + 128
                _2215 = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                mem[_1852 + (32 * _1870) + 128] = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161
                t = _1852 + (32 * _1870) + (32 * _2215) + 160
                u = _1852 + (32 * _1870) + 160
                while idx < _2215:
                    mem[u] = t + -_1852 + -(32 * _1870) - 160
                    _2281 = mem[s]
                    _2290 = mem[mem[s]]
                    mem[t] = mem[mem[s]]
                    v = 0
                    while v < _2290:
                        mem[v + t + 32] = mem[v + _2281 + 32]
                        v = v + 32
                        continue 
                    if ceil32(_2290) > _2290:
                        mem[_2290 + t + 32] = 0
                    idx = idx + 1
                    s = s + 32
                    t = ceil32(_2290) + t + 32
                    u = u + 32
                    continue 
            else:
                if 0 >= mem[96]:
                    revert with 0, 50
                _1311 = mem[128]
                mem[mem[64] + 4] = address(cd[4])
                mem[mem[64] + 36] = address(cd[36])
                require ext_code.size(address(_1311))
                staticcall address(_1311).0xdd62ed3e with:
                        gas gas_remaining wei
                       args address(cd[4]), address(cd[36])
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    _1823 = mem[96]
                    idx = 0
                    while idx < _1823:
                        if idx >= mem[96]:
                            revert with 0, 50
                        if not ext_code.size(mem[(32 * idx) + 128]):
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                            _1896 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_1896] = 0
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1896
                        else:
                            if idx >= mem[96]:
                                revert with 0, 50
                            require ext_code.size(mem[(32 * idx) + 140 len 20])
                            staticcall mem[(32 * idx) + 140 len 20].0x313ce567 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                                if idx >= mem[96]:
                                    revert with 0, 50
                                _2013 = mem[(32 * idx) + 128]
                                mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                                require ext_code.size(address(_2013))
                                staticcall address(_2013).0x95d89b41 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    _2054 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_2054] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2054
                                else:
                                    _2040 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _2070 = mem[_2040]
                                    require mem[_2040] <= test266151307()
                                    require _2040 + mem[_2040] + 31 < _2040 + return_data.size
                                    _2099 = mem[_2040 + mem[_2040]]
                                    if mem[_2040 + mem[_2040]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(ceil32(mem[_2040 + mem[_2040]])) + 1 < 0 or _2040 + ceil32(return_data.size) + ceil32(ceil32(mem[_2040 + mem[_2040]])) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _2040 + ceil32(return_data.size) + ceil32(ceil32(mem[_2040 + mem[_2040]])) + 1
                                    mem[_2040 + ceil32(return_data.size)] = _2099
                                    require _2070 + _2099 + 32 <= return_data.size
                                    s = 0
                                    while s < _2099:
                                        mem[s + _2040 + ceil32(return_data.size) + 32] = mem[s + _2040 + _2070 + 32]
                                        _1823 = mem[96]
                                        s = s + 32
                                        continue 
                                    if ceil32(_2099) > _2099:
                                        mem[_2099 + _2040 + ceil32(return_data.size) + 32] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2040 + ceil32(return_data.size)
                            else:
                                _1964 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_1964] == mem[_1964 + 31 len 1]
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = mem[_1964 + 31 len 1]
                                if idx >= mem[96]:
                                    revert with 0, 50
                                _2083 = mem[(32 * idx) + 128]
                                mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                                require ext_code.size(address(_2083))
                                staticcall address(_2083).0x95d89b41 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    _2114 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_2114] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2114
                                else:
                                    _2105 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _2129 = mem[_2105]
                                    require mem[_2105] <= test266151307()
                                    require _2105 + mem[_2105] + 31 < _2105 + return_data.size
                                    _2135 = mem[_2105 + mem[_2105]]
                                    if mem[_2105 + mem[_2105]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(ceil32(mem[_2105 + mem[_2105]])) + 1 < 0 or _2105 + ceil32(return_data.size) + ceil32(ceil32(mem[_2105 + mem[_2105]])) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _2105 + ceil32(return_data.size) + ceil32(ceil32(mem[_2105 + mem[_2105]])) + 1
                                    mem[_2105 + ceil32(return_data.size)] = _2135
                                    require _2129 + _2135 + 32 <= return_data.size
                                    s = 0
                                    while s < _2135:
                                        mem[s + _2105 + ceil32(return_data.size) + 32] = mem[s + _2105 + _2129 + 32]
                                        _1823 = mem[96]
                                        s = s + 32
                                        continue 
                                    if ceil32(_2135) > _2135:
                                        mem[_2135 + _2105 + ceil32(return_data.size) + 32] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2105 + ceil32(return_data.size)
                        if idx == -1:
                            revert with 0, 17
                        _1823 = mem[96]
                        idx = idx + 1
                        continue 
                    _1854 = mem[64]
                    mem[mem[64]] = 0
                    mem[mem[64] + 32] = 96
                    _1873 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    mem[mem[64] + 96] = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + 129
                    t = mem[64] + 128
                    while idx < _1873:
                        mem[t] = mem[s + 31 len 1]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    mem[mem[64] + 64] = (32 * _1873) + 128
                    _2216 = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                    mem[_1854 + (32 * _1873) + 128] = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161
                    t = _1854 + (32 * _1873) + (32 * _2216) + 160
                    u = _1854 + (32 * _1873) + 160
                    while idx < _2216:
                        mem[u] = t + -_1854 + -(32 * _1873) - 160
                        _2282 = mem[s]
                        _2291 = mem[mem[s]]
                        mem[t] = mem[mem[s]]
                        v = 0
                        while v < _2291:
                            mem[v + t + 32] = mem[v + _2282 + 32]
                            v = v + 32
                            continue 
                        if ceil32(_2291) > _2291:
                            mem[_2291 + t + 32] = 0
                        idx = idx + 1
                        s = s + 32
                        t = ceil32(_2291) + t + 32
                        u = u + 32
                        continue 
                else:
                    _1335 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1360 = mem[_1335]
                    _1824 = mem[96]
                    idx = 0
                    while idx < _1824:
                        if idx >= mem[96]:
                            revert with 0, 50
                        if not ext_code.size(mem[(32 * idx) + 128]):
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                            _1901 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_1901] = 0
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1901
                        else:
                            if idx >= mem[96]:
                                revert with 0, 50
                            require ext_code.size(mem[(32 * idx) + 140 len 20])
                            staticcall mem[(32 * idx) + 140 len 20].0x313ce567 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                                if idx >= mem[96]:
                                    revert with 0, 50
                                _2017 = mem[(32 * idx) + 128]
                                mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                                require ext_code.size(address(_2017))
                                staticcall address(_2017).0x95d89b41 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    _2057 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_2057] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2057
                                else:
                                    _2042 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _2072 = mem[_2042]
                                    require mem[_2042] <= test266151307()
                                    require _2042 + mem[_2042] + 31 < _2042 + return_data.size
                                    _2100 = mem[_2042 + mem[_2042]]
                                    if mem[_2042 + mem[_2042]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(ceil32(mem[_2042 + mem[_2042]])) + 1 < 0 or _2042 + ceil32(return_data.size) + ceil32(ceil32(mem[_2042 + mem[_2042]])) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _2042 + ceil32(return_data.size) + ceil32(ceil32(mem[_2042 + mem[_2042]])) + 1
                                    mem[_2042 + ceil32(return_data.size)] = _2100
                                    require _2072 + _2100 + 32 <= return_data.size
                                    s = 0
                                    while s < _2100:
                                        mem[s + _2042 + ceil32(return_data.size) + 32] = mem[s + _2042 + _2072 + 32]
                                        _1824 = mem[96]
                                        s = s + 32
                                        continue 
                                    if ceil32(_2100) > _2100:
                                        mem[_2100 + _2042 + ceil32(return_data.size) + 32] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2042 + ceil32(return_data.size)
                            else:
                                _1965 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_1965] == mem[_1965 + 31 len 1]
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = mem[_1965 + 31 len 1]
                                if idx >= mem[96]:
                                    revert with 0, 50
                                _2086 = mem[(32 * idx) + 128]
                                mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                                require ext_code.size(address(_2086))
                                staticcall address(_2086).0x95d89b41 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    _2117 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_2117] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2117
                                else:
                                    _2106 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _2130 = mem[_2106]
                                    require mem[_2106] <= test266151307()
                                    require _2106 + mem[_2106] + 31 < _2106 + return_data.size
                                    _2136 = mem[_2106 + mem[_2106]]
                                    if mem[_2106 + mem[_2106]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(ceil32(mem[_2106 + mem[_2106]])) + 1 < 0 or _2106 + ceil32(return_data.size) + ceil32(ceil32(mem[_2106 + mem[_2106]])) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _2106 + ceil32(return_data.size) + ceil32(ceil32(mem[_2106 + mem[_2106]])) + 1
                                    mem[_2106 + ceil32(return_data.size)] = _2136
                                    require _2130 + _2136 + 32 <= return_data.size
                                    s = 0
                                    while s < _2136:
                                        mem[s + _2106 + ceil32(return_data.size) + 32] = mem[s + _2106 + _2130 + 32]
                                        _1824 = mem[96]
                                        s = s + 32
                                        continue 
                                    if ceil32(_2136) > _2136:
                                        mem[_2136 + _2106 + ceil32(return_data.size) + 32] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2106 + ceil32(return_data.size)
                        if idx == -1:
                            revert with 0, 17
                        _1824 = mem[96]
                        idx = idx + 1
                        continue 
                    _1856 = mem[64]
                    mem[mem[64]] = _1360
                    mem[mem[64] + 32] = 96
                    _1876 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    mem[mem[64] + 96] = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + 129
                    t = mem[64] + 128
                    while idx < _1876:
                        mem[t] = mem[s + 31 len 1]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    mem[_1856 + 64] = (32 * _1876) + 128
                    _2217 = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                    mem[_1856 + (32 * _1876) + 128] = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161
                    t = _1856 + (32 * _1876) + (32 * _2217) + 160
                    u = _1856 + (32 * _1876) + 160
                    while idx < _2217:
                        mem[u] = t + -_1856 + -(32 * _1876) - 160
                        _2283 = mem[s]
                        _2292 = mem[mem[s]]
                        mem[t] = mem[mem[s]]
                        v = 0
                        while v < _2292:
                            mem[v + t + 32] = mem[v + _2283 + 32]
                            v = v + 32
                            continue 
                        if ceil32(_2292) > _2292:
                            mem[_2292 + t + 32] = 0
                        idx = idx + 1
                        s = s + 32
                        t = ceil32(_2292) + t + 32
                        u = u + 32
                        continue 
    else:
        mem[ceil32(32 * ('cd', 68).length) + 129 len 32 * ('cd', 68).length] = call.data[calldata.size len 32 * ('cd', 68).length]
        if ('cd', 68).length > test266151307():
            revert with 0, 65
        mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129] = ('cd', 68).length
        mem[64] = ceil32(32 * ('cd', 68).length) + (64 * ('cd', 68).length) + 161
        if not ('cd', 68).length:
            if 0 >= ('cd', 68).length:
                revert with 0, 50
            if not ext_code.size(mem[128]):
                idx = 0
                while idx < ('cd', 68).length:
                    if idx >= mem[96]:
                        revert with 0, 50
                    if not ext_code.size(mem[(32 * idx) + 128]):
                        if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                            revert with 0, 50
                        mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                        _1292 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_1292] = 0
                        if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                            revert with 0, 50
                        mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1292
                    else:
                        if idx >= mem[96]:
                            revert with 0, 50
                        require ext_code.size(mem[(32 * idx) + 140 len 20])
                        staticcall mem[(32 * idx) + 140 len 20].0x313ce567 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                            if idx >= mem[96]:
                                revert with 0, 50
                            _1385 = mem[(32 * idx) + 128]
                            mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(address(_1385))
                            staticcall address(_1385).0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                _1447 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_1447] = 0
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1447
                            else:
                                _1427 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _1468 = mem[_1427]
                                require mem[_1427] <= test266151307()
                                require _1427 + mem[_1427] + 31 < _1427 + return_data.size
                                _1520 = mem[_1427 + mem[_1427]]
                                if mem[_1427 + mem[_1427]] > test266151307():
                                    revert with 0, 65
                                if ceil32(ceil32(mem[_1427 + mem[_1427]])) + 1 < 0 or _1427 + ceil32(return_data.size) + ceil32(ceil32(mem[_1427 + mem[_1427]])) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _1427 + ceil32(return_data.size) + ceil32(ceil32(mem[_1427 + mem[_1427]])) + 1
                                mem[_1427 + ceil32(return_data.size)] = _1520
                                require _1468 + _1520 + 32 <= return_data.size
                                s = 0
                                while s < _1520:
                                    mem[s + _1427 + ceil32(return_data.size) + 32] = mem[s + _1427 + _1468 + 32]
                                    s = s + 32
                                    continue 
                                if ceil32(_1520) > _1520:
                                    mem[_1520 + _1427 + ceil32(return_data.size) + 32] = 0
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1427 + ceil32(return_data.size)
                        else:
                            _1324 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_1324] == mem[_1324 + 31 len 1]
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = mem[_1324 + 31 len 1]
                            if idx >= mem[96]:
                                revert with 0, 50
                            _1496 = mem[(32 * idx) + 128]
                            mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(address(_1496))
                            staticcall address(_1496).0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                _1560 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_1560] = 0
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1560
                            else:
                                _1536 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _1585 = mem[_1536]
                                require mem[_1536] <= test266151307()
                                require _1536 + mem[_1536] + 31 < _1536 + return_data.size
                                _1618 = mem[_1536 + mem[_1536]]
                                if mem[_1536 + mem[_1536]] > test266151307():
                                    revert with 0, 65
                                if ceil32(ceil32(mem[_1536 + mem[_1536]])) + 1 < 0 or _1536 + ceil32(return_data.size) + ceil32(ceil32(mem[_1536 + mem[_1536]])) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _1536 + ceil32(return_data.size) + ceil32(ceil32(mem[_1536 + mem[_1536]])) + 1
                                mem[_1536 + ceil32(return_data.size)] = _1618
                                require _1585 + _1618 + 32 <= return_data.size
                                s = 0
                                while s < _1618:
                                    mem[s + _1536 + ceil32(return_data.size) + 32] = mem[s + _1536 + _1585 + 32]
                                    s = s + 32
                                    continue 
                                if ceil32(_1618) > _1618:
                                    mem[_1618 + _1536 + ceil32(return_data.size) + 32] = 0
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1536 + ceil32(return_data.size)
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                _1249 = mem[64]
                mem[mem[64]] = 0
                mem[mem[64] + 32] = 96
                _1267 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 96] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 128
                while idx < _1267:
                    mem[t] = mem[s + 31 len 1]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[mem[64] + 64] = (32 * _1267) + 128
                _1867 = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                mem[_1249 + (32 * _1267) + 128] = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161
                t = _1249 + (32 * _1267) + (32 * _1867) + 160
                u = _1249 + (32 * _1267) + 160
                while idx < _1867:
                    mem[u] = t + -_1249 + -(32 * _1267) - 160
                    _2194 = mem[s]
                    _2209 = mem[mem[s]]
                    mem[t] = mem[mem[s]]
                    v = 0
                    while v < _2209:
                        mem[v + t + 32] = mem[v + _2194 + 32]
                        v = v + 32
                        continue 
                    if ceil32(_2209) > _2209:
                        mem[_2209 + t + 32] = 0
                    idx = idx + 1
                    s = s + 32
                    t = ceil32(_2209) + t + 32
                    u = u + 32
                    continue 
            else:
                if 0 >= ('cd', 68).length:
                    revert with 0, 50
                mem[ceil32(32 * ('cd', 68).length) + (64 * ('cd', 68).length) + 165] = address(cd[4])
                mem[ceil32(32 * ('cd', 68).length) + (64 * ('cd', 68).length) + 197] = address(cd[36])
                require ext_code.size(mem[140 len 20])
                staticcall mem[140 len 20].0xdd62ed3e with:
                        gas gas_remaining wei
                       args mem[ceil32(32 * ('cd', 68).length) + (64 * ('cd', 68).length) + 165 len (127 * ('cd', 68).length) + 64]
                mem[ceil32(32 * ('cd', 68).length) + (64 * ('cd', 68).length) + 161] = ext_call.return_data[0]
                if not ext_call.success:
                    idx = 0
                    while idx < ('cd', 68).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        if not ext_code.size(mem[(32 * idx) + 128]):
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                            _1297 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_1297] = 0
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1297
                        else:
                            if idx >= mem[96]:
                                revert with 0, 50
                            require ext_code.size(mem[(32 * idx) + 140 len 20])
                            staticcall mem[(32 * idx) + 140 len 20].0x313ce567 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                                if idx >= mem[96]:
                                    revert with 0, 50
                                _1389 = mem[(32 * idx) + 128]
                                mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                                require ext_code.size(address(_1389))
                                staticcall address(_1389).0x95d89b41 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    _1450 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_1450] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1450
                                else:
                                    _1429 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _1470 = mem[_1429]
                                    require mem[_1429] <= test266151307()
                                    require _1429 + mem[_1429] + 31 < _1429 + return_data.size
                                    _1521 = mem[_1429 + mem[_1429]]
                                    if mem[_1429 + mem[_1429]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(ceil32(mem[_1429 + mem[_1429]])) + 1 < 0 or _1429 + ceil32(return_data.size) + ceil32(ceil32(mem[_1429 + mem[_1429]])) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _1429 + ceil32(return_data.size) + ceil32(ceil32(mem[_1429 + mem[_1429]])) + 1
                                    mem[_1429 + ceil32(return_data.size)] = _1521
                                    require _1470 + _1521 + 32 <= return_data.size
                                    s = 0
                                    while s < _1521:
                                        mem[s + _1429 + ceil32(return_data.size) + 32] = mem[s + _1429 + _1470 + 32]
                                        s = s + 32
                                        continue 
                                    if ceil32(_1521) > _1521:
                                        mem[_1521 + _1429 + ceil32(return_data.size) + 32] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1429 + ceil32(return_data.size)
                            else:
                                _1325 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_1325] == mem[_1325 + 31 len 1]
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = mem[_1325 + 31 len 1]
                                if idx >= mem[96]:
                                    revert with 0, 50
                                _1499 = mem[(32 * idx) + 128]
                                mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                                require ext_code.size(address(_1499))
                                staticcall address(_1499).0x95d89b41 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    _1563 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_1563] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1563
                                else:
                                    _1537 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _1586 = mem[_1537]
                                    require mem[_1537] <= test266151307()
                                    require _1537 + mem[_1537] + 31 < _1537 + return_data.size
                                    _1619 = mem[_1537 + mem[_1537]]
                                    if mem[_1537 + mem[_1537]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(ceil32(mem[_1537 + mem[_1537]])) + 1 < 0 or _1537 + ceil32(return_data.size) + ceil32(ceil32(mem[_1537 + mem[_1537]])) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _1537 + ceil32(return_data.size) + ceil32(ceil32(mem[_1537 + mem[_1537]])) + 1
                                    mem[_1537 + ceil32(return_data.size)] = _1619
                                    require _1586 + _1619 + 32 <= return_data.size
                                    s = 0
                                    while s < _1619:
                                        mem[s + _1537 + ceil32(return_data.size) + 32] = mem[s + _1537 + _1586 + 32]
                                        s = s + 32
                                        continue 
                                    if ceil32(_1619) > _1619:
                                        mem[_1619 + _1537 + ceil32(return_data.size) + 32] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1537 + ceil32(return_data.size)
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    _1251 = mem[64]
                    mem[mem[64]] = 0
                    mem[mem[64] + 32] = 96
                    _1270 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    mem[mem[64] + 96] = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + 129
                    t = mem[64] + 128
                    while idx < _1270:
                        mem[t] = mem[s + 31 len 1]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    mem[mem[64] + 64] = (32 * _1270) + 128
                    _1868 = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                    mem[_1251 + (32 * _1270) + 128] = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161
                    t = _1251 + (32 * _1270) + (32 * _1868) + 160
                    u = _1251 + (32 * _1270) + 160
                    while idx < _1868:
                        mem[u] = t + -_1251 + -(32 * _1270) - 160
                        _2195 = mem[s]
                        _2210 = mem[mem[s]]
                        mem[t] = mem[mem[s]]
                        v = 0
                        while v < _2210:
                            mem[v + t + 32] = mem[v + _2195 + 32]
                            v = v + 32
                            continue 
                        if ceil32(_2210) > _2210:
                            mem[_2210 + t + 32] = 0
                        idx = idx + 1
                        s = s + 32
                        t = ceil32(_2210) + t + 32
                        u = u + 32
                        continue 
                else:
                    mem[64] = ceil32(32 * ('cd', 68).length) + (64 * ('cd', 68).length) + ceil32(return_data.size) + 161
                    require return_data.size >= 32
                    idx = 0
                    while idx < ('cd', 68).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        if not ext_code.size(mem[(32 * idx) + 128]):
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                            _1302 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_1302] = 0
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1302
                        else:
                            if idx >= mem[96]:
                                revert with 0, 50
                            require ext_code.size(mem[(32 * idx) + 140 len 20])
                            staticcall mem[(32 * idx) + 140 len 20].0x313ce567 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                                if idx >= mem[96]:
                                    revert with 0, 50
                                _1393 = mem[(32 * idx) + 128]
                                mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                                require ext_code.size(address(_1393))
                                staticcall address(_1393).0x95d89b41 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    _1453 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_1453] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1453
                                else:
                                    _1431 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _1472 = mem[_1431]
                                    require mem[_1431] <= test266151307()
                                    require _1431 + mem[_1431] + 31 < _1431 + return_data.size
                                    _1522 = mem[_1431 + mem[_1431]]
                                    if mem[_1431 + mem[_1431]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(ceil32(mem[_1431 + mem[_1431]])) + 1 < 0 or _1431 + ceil32(return_data.size) + ceil32(ceil32(mem[_1431 + mem[_1431]])) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _1431 + ceil32(return_data.size) + ceil32(ceil32(mem[_1431 + mem[_1431]])) + 1
                                    mem[_1431 + ceil32(return_data.size)] = _1522
                                    require _1472 + _1522 + 32 <= return_data.size
                                    s = 0
                                    while s < _1522:
                                        mem[s + _1431 + ceil32(return_data.size) + 32] = mem[s + _1431 + _1472 + 32]
                                        s = s + 32
                                        continue 
                                    if ceil32(_1522) > _1522:
                                        mem[_1522 + _1431 + ceil32(return_data.size) + 32] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1431 + ceil32(return_data.size)
                            else:
                                _1326 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_1326] == mem[_1326 + 31 len 1]
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = mem[_1326 + 31 len 1]
                                if idx >= mem[96]:
                                    revert with 0, 50
                                _1502 = mem[(32 * idx) + 128]
                                mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                                require ext_code.size(address(_1502))
                                staticcall address(_1502).0x95d89b41 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    _1566 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_1566] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1566
                                else:
                                    _1538 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _1587 = mem[_1538]
                                    require mem[_1538] <= test266151307()
                                    require _1538 + mem[_1538] + 31 < _1538 + return_data.size
                                    _1620 = mem[_1538 + mem[_1538]]
                                    if mem[_1538 + mem[_1538]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(ceil32(mem[_1538 + mem[_1538]])) + 1 < 0 or _1538 + ceil32(return_data.size) + ceil32(ceil32(mem[_1538 + mem[_1538]])) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _1538 + ceil32(return_data.size) + ceil32(ceil32(mem[_1538 + mem[_1538]])) + 1
                                    mem[_1538 + ceil32(return_data.size)] = _1620
                                    require _1587 + _1620 + 32 <= return_data.size
                                    s = 0
                                    while s < _1620:
                                        mem[s + _1538 + ceil32(return_data.size) + 32] = mem[s + _1538 + _1587 + 32]
                                        s = s + 32
                                        continue 
                                    if ceil32(_1620) > _1620:
                                        mem[_1620 + _1538 + ceil32(return_data.size) + 32] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1538 + ceil32(return_data.size)
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    _1253 = mem[64]
                    mem[mem[64]] = ext_call.return_data[0]
                    mem[mem[64] + 32] = 96
                    _1273 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    mem[mem[64] + 96] = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + 129
                    t = mem[64] + 128
                    while idx < _1273:
                        mem[t] = mem[s + 31 len 1]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    mem[_1253 + 64] = (32 * _1273) + 128
                    _1869 = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                    mem[_1253 + (32 * _1273) + 128] = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161
                    t = _1253 + (32 * _1273) + (32 * _1869) + 160
                    u = _1253 + (32 * _1273) + 160
                    while idx < _1869:
                        mem[u] = t + -_1253 + -(32 * _1273) - 160
                        _2196 = mem[s]
                        _2211 = mem[mem[s]]
                        mem[t] = mem[mem[s]]
                        v = 0
                        while v < _2211:
                            mem[v + t + 32] = mem[v + _2196 + 32]
                            v = v + 32
                            continue 
                        if ceil32(_2211) > _2211:
                            mem[_2211 + t + 32] = 0
                        idx = idx + 1
                        s = s + 32
                        t = ceil32(_2211) + t + 32
                        u = u + 32
                        continue 
        else:
            mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = 96
            s = ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161
            idx = ('cd', 68).length
            while idx - 1:
                mem[s + 32] = 96
                s = s + 32
                idx = idx - 1
                continue 
            if 0 >= mem[96]:
                revert with 0, 50
            if not ext_code.size(mem[128]):
                _1825 = mem[96]
                idx = 0
                while idx < _1825:
                    if idx >= mem[96]:
                        revert with 0, 50
                    if not ext_code.size(mem[(32 * idx) + 128]):
                        if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                            revert with 0, 50
                        mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                        _1909 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_1909] = 0
                        if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                            revert with 0, 50
                        mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1909
                    else:
                        if idx >= mem[96]:
                            revert with 0, 50
                        require ext_code.size(mem[(32 * idx) + 140 len 20])
                        staticcall mem[(32 * idx) + 140 len 20].0x313ce567 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                            if idx >= mem[96]:
                                revert with 0, 50
                            _2021 = mem[(32 * idx) + 128]
                            mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(address(_2021))
                            staticcall address(_2021).0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                _2060 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_2060] = 0
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2060
                            else:
                                _2044 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _2074 = mem[_2044]
                                require mem[_2044] <= test266151307()
                                require _2044 + mem[_2044] + 31 < _2044 + return_data.size
                                _2101 = mem[_2044 + mem[_2044]]
                                if mem[_2044 + mem[_2044]] > test266151307():
                                    revert with 0, 65
                                if ceil32(ceil32(mem[_2044 + mem[_2044]])) + 1 < 0 or _2044 + ceil32(return_data.size) + ceil32(ceil32(mem[_2044 + mem[_2044]])) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _2044 + ceil32(return_data.size) + ceil32(ceil32(mem[_2044 + mem[_2044]])) + 1
                                mem[_2044 + ceil32(return_data.size)] = _2101
                                require _2074 + _2101 + 32 <= return_data.size
                                s = 0
                                while s < _2101:
                                    mem[s + _2044 + ceil32(return_data.size) + 32] = mem[s + _2044 + _2074 + 32]
                                    _1825 = mem[96]
                                    s = s + 32
                                    continue 
                                if ceil32(_2101) > _2101:
                                    mem[_2101 + _2044 + ceil32(return_data.size) + 32] = 0
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2044 + ceil32(return_data.size)
                        else:
                            _1969 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_1969] == mem[_1969 + 31 len 1]
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = mem[_1969 + 31 len 1]
                            if idx >= mem[96]:
                                revert with 0, 50
                            _2089 = mem[(32 * idx) + 128]
                            mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(address(_2089))
                            staticcall address(_2089).0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                _2120 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_2120] = 0
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2120
                            else:
                                _2107 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _2131 = mem[_2107]
                                require mem[_2107] <= test266151307()
                                require _2107 + mem[_2107] + 31 < _2107 + return_data.size
                                _2137 = mem[_2107 + mem[_2107]]
                                if mem[_2107 + mem[_2107]] > test266151307():
                                    revert with 0, 65
                                if ceil32(ceil32(mem[_2107 + mem[_2107]])) + 1 < 0 or _2107 + ceil32(return_data.size) + ceil32(ceil32(mem[_2107 + mem[_2107]])) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _2107 + ceil32(return_data.size) + ceil32(ceil32(mem[_2107 + mem[_2107]])) + 1
                                mem[_2107 + ceil32(return_data.size)] = _2137
                                require _2131 + _2137 + 32 <= return_data.size
                                s = 0
                                while s < _2137:
                                    mem[s + _2107 + ceil32(return_data.size) + 32] = mem[s + _2107 + _2131 + 32]
                                    _1825 = mem[96]
                                    s = s + 32
                                    continue 
                                if ceil32(_2137) > _2137:
                                    mem[_2137 + _2107 + ceil32(return_data.size) + 32] = 0
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2107 + ceil32(return_data.size)
                    if idx == -1:
                        revert with 0, 17
                    _1825 = mem[96]
                    idx = idx + 1
                    continue 
                _1858 = mem[64]
                mem[mem[64]] = 0
                mem[mem[64] + 32] = 96
                _1879 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 96] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 128
                while idx < _1879:
                    mem[t] = mem[s + 31 len 1]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_1858 + 64] = (32 * _1879) + 128
                _2221 = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                mem[_1858 + (32 * _1879) + 128] = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161
                t = _1858 + (32 * _1879) + (32 * _2221) + 160
                u = _1858 + (32 * _1879) + 160
                while idx < _2221:
                    mem[u] = t + -_1858 + -(32 * _1879) - 160
                    _2287 = mem[s]
                    _2293 = mem[mem[s]]
                    mem[t] = mem[mem[s]]
                    v = 0
                    while v < _2293:
                        mem[v + t + 32] = mem[v + _2287 + 32]
                        v = v + 32
                        continue 
                    if ceil32(_2293) > _2293:
                        mem[_2293 + t + 32] = 0
                    idx = idx + 1
                    s = s + 32
                    t = ceil32(_2293) + t + 32
                    u = u + 32
                    continue 
            else:
                if 0 >= mem[96]:
                    revert with 0, 50
                _1317 = mem[128]
                mem[mem[64] + 4] = address(cd[4])
                mem[mem[64] + 36] = address(cd[36])
                require ext_code.size(address(_1317))
                staticcall address(_1317).0xdd62ed3e with:
                        gas gas_remaining wei
                       args address(cd[4]), address(cd[36])
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    _1826 = mem[96]
                    idx = 0
                    while idx < _1826:
                        if idx >= mem[96]:
                            revert with 0, 50
                        if not ext_code.size(mem[(32 * idx) + 128]):
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                            _1914 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_1914] = 0
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1914
                        else:
                            if idx >= mem[96]:
                                revert with 0, 50
                            require ext_code.size(mem[(32 * idx) + 140 len 20])
                            staticcall mem[(32 * idx) + 140 len 20].0x313ce567 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                                if idx >= mem[96]:
                                    revert with 0, 50
                                _2025 = mem[(32 * idx) + 128]
                                mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                                require ext_code.size(address(_2025))
                                staticcall address(_2025).0x95d89b41 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    _2063 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_2063] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2063
                                else:
                                    _2046 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _2076 = mem[_2046]
                                    require mem[_2046] <= test266151307()
                                    require _2046 + mem[_2046] + 31 < _2046 + return_data.size
                                    _2102 = mem[_2046 + mem[_2046]]
                                    if mem[_2046 + mem[_2046]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(ceil32(mem[_2046 + mem[_2046]])) + 1 < 0 or _2046 + ceil32(return_data.size) + ceil32(ceil32(mem[_2046 + mem[_2046]])) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _2046 + ceil32(return_data.size) + ceil32(ceil32(mem[_2046 + mem[_2046]])) + 1
                                    mem[_2046 + ceil32(return_data.size)] = _2102
                                    require _2076 + _2102 + 32 <= return_data.size
                                    s = 0
                                    while s < _2102:
                                        mem[s + _2046 + ceil32(return_data.size) + 32] = mem[s + _2046 + _2076 + 32]
                                        _1826 = mem[96]
                                        s = s + 32
                                        continue 
                                    if ceil32(_2102) > _2102:
                                        mem[_2102 + _2046 + ceil32(return_data.size) + 32] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2046 + ceil32(return_data.size)
                            else:
                                _1970 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_1970] == mem[_1970 + 31 len 1]
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = mem[_1970 + 31 len 1]
                                if idx >= mem[96]:
                                    revert with 0, 50
                                _2092 = mem[(32 * idx) + 128]
                                mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                                require ext_code.size(address(_2092))
                                staticcall address(_2092).0x95d89b41 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    _2123 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_2123] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2123
                                else:
                                    _2108 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _2132 = mem[_2108]
                                    require mem[_2108] <= test266151307()
                                    require _2108 + mem[_2108] + 31 < _2108 + return_data.size
                                    _2138 = mem[_2108 + mem[_2108]]
                                    if mem[_2108 + mem[_2108]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(ceil32(mem[_2108 + mem[_2108]])) + 1 < 0 or _2108 + ceil32(return_data.size) + ceil32(ceil32(mem[_2108 + mem[_2108]])) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _2108 + ceil32(return_data.size) + ceil32(ceil32(mem[_2108 + mem[_2108]])) + 1
                                    mem[_2108 + ceil32(return_data.size)] = _2138
                                    require _2132 + _2138 + 32 <= return_data.size
                                    s = 0
                                    while s < _2138:
                                        mem[s + _2108 + ceil32(return_data.size) + 32] = mem[s + _2108 + _2132 + 32]
                                        _1826 = mem[96]
                                        s = s + 32
                                        continue 
                                    if ceil32(_2138) > _2138:
                                        mem[_2138 + _2108 + ceil32(return_data.size) + 32] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2108 + ceil32(return_data.size)
                        if idx == -1:
                            revert with 0, 17
                        _1826 = mem[96]
                        idx = idx + 1
                        continue 
                    _1860 = mem[64]
                    mem[mem[64]] = 0
                    mem[mem[64] + 32] = 96
                    _1882 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    mem[mem[64] + 96] = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + 129
                    t = mem[64] + 128
                    while idx < _1882:
                        mem[t] = mem[s + 31 len 1]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    mem[_1860 + 64] = (32 * _1882) + 128
                    _2222 = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                    mem[_1860 + (32 * _1882) + 128] = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161
                    t = _1860 + (32 * _1882) + (32 * _2222) + 160
                    u = _1860 + (32 * _1882) + 160
                    while idx < _2222:
                        mem[u] = t + -_1860 + -(32 * _1882) - 160
                        _2288 = mem[s]
                        _2294 = mem[mem[s]]
                        mem[t] = mem[mem[s]]
                        v = 0
                        while v < _2294:
                            mem[v + t + 32] = mem[v + _2288 + 32]
                            v = v + 32
                            continue 
                        if ceil32(_2294) > _2294:
                            mem[_2294 + t + 32] = 0
                        idx = idx + 1
                        s = s + 32
                        t = ceil32(_2294) + t + 32
                        u = u + 32
                        continue 
                else:
                    _1343 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1367 = mem[_1343]
                    _1827 = mem[96]
                    idx = 0
                    while idx < _1827:
                        if idx >= mem[96]:
                            revert with 0, 50
                        if not ext_code.size(mem[(32 * idx) + 128]):
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                            _1919 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_1919] = 0
                            if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                revert with 0, 50
                            mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _1919
                        else:
                            if idx >= mem[96]:
                                revert with 0, 50
                            require ext_code.size(mem[(32 * idx) + 140 len 20])
                            staticcall mem[(32 * idx) + 140 len 20].0x313ce567 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = 0
                                if idx >= mem[96]:
                                    revert with 0, 50
                                _2029 = mem[(32 * idx) + 128]
                                mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                                require ext_code.size(address(_2029))
                                staticcall address(_2029).0x95d89b41 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    _2066 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_2066] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2066
                                else:
                                    _2048 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _2078 = mem[_2048]
                                    require mem[_2048] <= test266151307()
                                    require _2048 + mem[_2048] + 31 < _2048 + return_data.size
                                    _2103 = mem[_2048 + mem[_2048]]
                                    if mem[_2048 + mem[_2048]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(ceil32(mem[_2048 + mem[_2048]])) + 1 < 0 or _2048 + ceil32(return_data.size) + ceil32(ceil32(mem[_2048 + mem[_2048]])) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _2048 + ceil32(return_data.size) + ceil32(ceil32(mem[_2048 + mem[_2048]])) + 1
                                    mem[_2048 + ceil32(return_data.size)] = _2103
                                    require _2078 + _2103 + 32 <= return_data.size
                                    s = 0
                                    while s < _2103:
                                        mem[s + _2048 + ceil32(return_data.size) + 32] = mem[s + _2048 + _2078 + 32]
                                        _1827 = mem[96]
                                        s = s + 32
                                        continue 
                                    if ceil32(_2103) > _2103:
                                        mem[_2103 + _2048 + ceil32(return_data.size) + 32] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2048 + ceil32(return_data.size)
                            else:
                                _1971 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_1971] == mem[_1971 + 31 len 1]
                                if idx >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                                    revert with 0, 50
                                mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + 129] = mem[_1971 + 31 len 1]
                                if idx >= mem[96]:
                                    revert with 0, 50
                                _2095 = mem[(32 * idx) + 128]
                                mem[mem[64]] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                                require ext_code.size(address(_2095))
                                staticcall address(_2095).0x95d89b41 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    _2126 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_2126] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2126
                                else:
                                    _2109 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _2133 = mem[_2109]
                                    require mem[_2109] <= test266151307()
                                    require _2109 + mem[_2109] + 31 < _2109 + return_data.size
                                    _2139 = mem[_2109 + mem[_2109]]
                                    if mem[_2109 + mem[_2109]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(ceil32(mem[_2109 + mem[_2109]])) + 1 < 0 or _2109 + ceil32(return_data.size) + ceil32(ceil32(mem[_2109 + mem[_2109]])) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _2109 + ceil32(return_data.size) + ceil32(ceil32(mem[_2109 + mem[_2109]])) + 1
                                    mem[_2109 + ceil32(return_data.size)] = _2139
                                    require _2133 + _2139 + 32 <= return_data.size
                                    s = 0
                                    while s < _2139:
                                        mem[s + _2109 + ceil32(return_data.size) + 32] = mem[s + _2109 + _2133 + 32]
                                        _1827 = mem[96]
                                        s = s + 32
                                        continue 
                                    if ceil32(_2139) > _2139:
                                        mem[_2139 + _2109 + ceil32(return_data.size) + 32] = 0
                                    if idx >= mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]:
                                        revert with 0, 50
                                    mem[(32 * idx) + ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161] = _2109 + ceil32(return_data.size)
                        if idx == -1:
                            revert with 0, 17
                        _1827 = mem[96]
                        idx = idx + 1
                        continue 
                    _1862 = mem[64]
                    mem[mem[64]] = _1367
                    mem[mem[64] + 32] = 96
                    _1885 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    mem[mem[64] + 96] = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + 129
                    t = mem[64] + 128
                    while idx < _1885:
                        mem[t] = mem[s + 31 len 1]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    mem[_1862 + 64] = (32 * _1885) + 128
                    _2223 = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                    mem[_1862 + (32 * _1885) + 128] = mem[ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 129]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + (32 * ('cd', 68).length) + 161
                    t = _1862 + (32 * _1885) + (32 * _2223) + 160
                    u = _1862 + (32 * _1885) + 160
                    while idx < _2223:
                        mem[u] = t + -_1862 + -(32 * _1885) - 160
                        _2289 = mem[s]
                        _2295 = mem[mem[s]]
                        mem[t] = mem[mem[s]]
                        v = 0
                        while v < _2295:
                            mem[v + t + 32] = mem[v + _2289 + 32]
                            v = v + 32
                            continue 
                        if ceil32(_2295) > _2295:
                            mem[_2295 + t + 32] = 0
                        idx = idx + 1
                        s = s + 32
                        t = ceil32(_2295) + t + 32
                        u = u + 32
                        continue 
    return memory
      from mem[64]
       len t - mem[64]
}

function sub_d75e4f1b(?) {
    require calldata.size - 4 >= 192
    require cd[4] == address(cd[4])
    require cd[68] <= test266151307()
    require cd[68] + 35 < calldata.size
    if ('cd', 68).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 68).length) + 97 < 96 or ceil32(32 * ('cd', 68).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 68).length
    require cd[68] + (32 * ('cd', 68).length) + 36 <= calldata.size
    idx = cd[68] + 36
    s = 128
    while idx < cd[68] + (32 * ('cd', 68).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    require cd[100] <= test266151307()
    require cd[100] + 35 < calldata.size
    if ('cd', 100).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 100).length) + 98 < 97 or ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98 > test266151307():
        revert with 0, 65
    mem[ceil32(32 * ('cd', 68).length) + 97] = ('cd', 100).length
    require cd[100] + (32 * ('cd', 100).length) + 36 <= calldata.size
    idx = cd[100] + 36
    s = ceil32(32 * ('cd', 68).length) + 129
    while idx < cd[100] + (32 * ('cd', 100).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    require cd[132] <= test266151307()
    require cd[132] + 35 < calldata.size
    if ('cd', 132).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 132).length) + 99 < 98 or ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99 > test266151307():
        revert with 0, 65
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] = ('cd', 132).length
    require cd[132] + (32 * ('cd', 132).length) + 36 <= calldata.size
    idx = cd[132] + 36
    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
    while idx < cd[132] + (32 * ('cd', 132).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    require cd[164] <= test266151307()
    require cd[164] + 35 < calldata.size
    if ('cd', 164).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 164).length) + 100 < 99 or ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + ceil32(32 * ('cd', 164).length) + 100 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + ceil32(32 * ('cd', 164).length) + 100
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] = ('cd', 164).length
    require cd[164] + (32 * ('cd', 164).length) + 36 <= calldata.size
    idx = cd[164] + 36
    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
    while idx < cd[164] + (32 * ('cd', 164).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + ceil32(32 * ('cd', 164).length) + 100] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + ceil32(32 * ('cd', 164).length) + 104] = cd[36]
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + ceil32(32 * ('cd', 164).length) + 136] = 64
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + ceil32(32 * ('cd', 164).length) + 168] = ('cd', 68).length
    idx = 0
    s = 128
    t = mem[64] + 100
    while idx < ('cd', 68).length:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).mem[mem[64] len 4] with:
            gas gas_remaining wei
           args mem[mem[64] + 4 len ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + ceil32(32 * ('cd', 164).length) + (32 * ('cd', 68).length) + -mem[64] + 196]
    if not ext_call.success:
        _7064 = mem[96]
        if mem[96] > test266151307():
            revert with 0, 65
        _7065 = mem[64]
        mem[mem[64]] = mem[96]
        mem[64] = mem[64] + (32 * _7064) + 32
        if not _7064:
            _8469 = mem[96]
            idx = 0
            while idx < _8469:
                if idx >= mem[_7065]:
                    revert with 0, 50
                mem[(32 * idx) + _7065 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _8469 = mem[96]
                idx = idx + 1
                continue 
            _8474 = mem[64]
            mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _8476 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 100
            while idx < _8476:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _8474 + (32 * _8476) + -mem[64] + 96]
            if not ext_call.success:
                _9878 = mem[ceil32(32 * ('cd', 68).length) + 97]
                if mem[ceil32(32 * ('cd', 68).length) + 97] > test266151307():
                    revert with 0, 65
                _9881 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[64] = mem[64] + (32 * _9878) + 32
                if not _9878:
                    _11258 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = 0
                    while idx < _11258:
                        if idx >= mem[_9881]:
                            revert with 0, 50
                        mem[(32 * idx) + _9881 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _11258 = mem[ceil32(32 * ('cd', 68).length) + 97]
                        idx = idx + 1
                        continue 
                    _11273 = mem[64]
                    mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 64
                    _11279 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
                    t = mem[64] + 100
                    while idx < _11279:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _11273 + (32 * _11279) + -mem[64] + 96]
                    if not ext_call.success:
                        _12650 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
                            revert with 0, 65
                        _12659 = mem[64]
                        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        mem[64] = mem[64] + (32 * _12650) + 32
                        if _12650:
                            mem[_12659 + 32 len 32 * _12650] = call.data[calldata.size len 32 * _12650]
                            _13956 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                            idx = 0
                            while idx < _13956:
                                if idx >= mem[_12659]:
                                    revert with 0, 50
                                mem[(32 * idx) + _12659 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _13956 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                                idx = idx + 1
                                continue 
                            mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[36]
                            mem[mem[64] + 36] = 64
                            _14019 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                            t = mem[64] + 100
                            while idx < _14019:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(cd[4]))
                            staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args cd[36], 64, mem[mem[64] + 68 len (32 * _14019) + 32]
                            if not ext_call.success:
                                _15297 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                                    revert with 0, 65
                                _15325 = mem[64]
                                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                mem[64] = mem[64] + (32 * _15297) + 32
                                if not _15297:
                                    _16378 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                    idx = 0
                                    while idx < _16378:
                                        if idx >= mem[_15325]:
                                            revert with 0, 50
                                        mem[(32 * idx) + _15325 + 32] = 0
                                        if idx == -1:
                                            revert with 0, 17
                                        _16378 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                        idx = idx + 1
                                        continue 
                                    mem[mem[64]] = 128
                                    _16567 = mem[_7065]
                                    mem[mem[64] + 128] = mem[_7065]
                                    mem[mem[64] + 160 len 32 * _16567] = mem[_7065 + 32 len 32 * _16567]
                                    var146001 = _16567
                                    mem[mem[64] + 32] = (32 * _16567) + 160
                                    _17405 = mem[_9881]
                                    mem[mem[64] + (32 * _16567) + 160] = mem[_9881]
                                    mem[mem[64] + (32 * _16567) + 192 len 32 * _17405] = mem[_9881 + 32 len 32 * _17405]
                                    mem[mem[64] + 64] = (32 * _16567) + (32 * _17405) + 192
                                    _18053 = mem[_12659]
                                    mem[mem[64] + (32 * _16567) + (32 * _17405) + 192] = mem[_12659]
                                    mem[mem[64] + (32 * _16567) + (32 * _17405) + 224 len 32 * _18053] = mem[_12659 + 32 len 32 * _18053]
                                    mem[mem[64] + 96] = (32 * _16567) + (32 * _17405) + (32 * _18053) + 224
                                    _18539 = mem[_15325]
                                    mem[mem[64] + (32 * _16567) + (32 * _17405) + (32 * _18053) + 224] = mem[_15325]
                                    mem[mem[64] + (32 * _16567) + (32 * _17405) + (32 * _18053) + 256 len 32 * _18539] = mem[_15325 + 32 len 32 * _18539]
                                    return 128, 
                                           (32 * _16567) + 160,
                                           (32 * _16567) + (32 * _17405) + 192,
                                           (32 * _16567) + (32 * _17405) + (32 * _18053) + 224,
                                           mem[mem[64] + 128 len (32 * _16567) + (32 * _17405) + (32 * _18053) + (32 * _18539) + 128]
                                mem[_15325 + 32 len 32 * _15297] = call.data[calldata.size len 32 * _15297]
                                _16379 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = 0
                                while idx < _16379:
                                    if idx >= mem[_15325]:
                                        revert with 0, 50
                                    mem[(32 * idx) + _15325 + 32] = 0
                                    if idx == -1:
                                        revert with 0, 17
                                    _16379 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                    idx = idx + 1
                                    continue 
                                _16514 = mem[64]
                                mem[mem[64]] = 128
                                _16568 = mem[_7065]
                                mem[mem[64] + 128] = mem[_7065]
                                mem[mem[64] + 160 len 32 * _16568] = mem[_7065 + 32 len 32 * _16568]
                                mem[mem[64] + 32] = (32 * _16568) + 160
                                _17406 = mem[_9881]
                                mem[mem[64] + (32 * _16568) + 160] = mem[_9881]
                                mem[mem[64] + (32 * _16568) + 192 len 32 * _17406] = mem[_9881 + 32 len 32 * _17406]
                                var152001 = _17406
                                mem[mem[64] + 64] = (32 * _16568) + (32 * _17406) + 192
                                _18054 = mem[_12659]
                                mem[_16514 + (32 * _16568) + (32 * _17406) + 192] = mem[_12659]
                                mem[_16514 + (32 * _16568) + (32 * _17406) + 224 len 32 * _18054] = mem[_12659 + 32 len 32 * _18054]
                                mem[_16514 + 96] = (32 * _16568) + (32 * _17406) + (32 * _18054) + 224
                                _18540 = mem[_15325]
                                mem[_16514 + (32 * _16568) + (32 * _17406) + (32 * _18054) + 224] = mem[_15325]
                                mem[_16514 + (32 * _16568) + (32 * _17406) + (32 * _18054) + 256 len 32 * _18540] = mem[_15325 + 32 len 32 * _18540]
                                return memory
                                  from mem[64]
                                   len _16514 + (32 * _16568) + (32 * _17406) + (32 * _18054) + (32 * _18540) + -mem[64] + 256
                            _15270 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15326 = mem[_15270]
                            require mem[_15270] <= test266151307()
                            require _15270 + return_data.size > _15270 + mem[_15270] + 31
                            _15380 = mem[_15270 + mem[_15270]]
                            if mem[_15270 + mem[_15270]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_15270 + mem[_15270]]) + 1 < 0 or _15270 + ceil32(return_data.size) + ceil32(32 * mem[_15270 + mem[_15270]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _15270 + ceil32(return_data.size) + ceil32(32 * mem[_15270 + mem[_15270]]) + 1
                            mem[_15270 + ceil32(return_data.size)] = _15380
                            require _15326 + (32 * _15380) + 32 <= return_data.size
                            mem[_15270 + ceil32(return_data.size) + 32 len ceil32(32 * _15380)] = mem[_15270 + _15326 + 32 len ceil32(32 * _15380)]
                            _16620 = mem[64]
                            mem[mem[64]] = 128
                            _16701 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16701] = mem[_7065 + 32 len 32 * _16701]
                            mem[mem[64] + 32] = (32 * _16701) + 160
                            _17407 = mem[_9881]
                            mem[mem[64] + (32 * _16701) + 160] = mem[_9881]
                            mem[mem[64] + (32 * _16701) + 192 len 32 * _17407] = mem[_9881 + 32 len 32 * _17407]
                            mem[mem[64] + 64] = (32 * _16701) + (32 * _17407) + 192
                            _18055 = mem[_12659]
                            mem[_16620 + (32 * _16701) + (32 * _17407) + 192] = mem[_12659]
                            mem[_16620 + (32 * _16701) + (32 * _17407) + 224 len 32 * _18055] = mem[_12659 + 32 len 32 * _18055]
                            mem[_16620 + 96] = (32 * _16701) + (32 * _17407) + (32 * _18055) + 224
                            mem[_16620 + (32 * _16701) + (32 * _17407) + (32 * _18055) + 224] = _15380
                            mem[_16620 + (32 * _16701) + (32 * _17407) + (32 * _18055) + 256 len 32 * _15380] = mem[_15270 + ceil32(return_data.size) + 32 len 32 * _15380]
                            return memory
                              from mem[64]
                               len _16620 + (32 * _16701) + (32 * _17407) + (32 * _18055) + (32 * _15380) + -mem[64] + 256
                        _13955 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        idx = 0
                        while idx < _13955:
                            if idx >= mem[_12659]:
                                revert with 0, 50
                            mem[(32 * idx) + _12659 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _13955 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = cd[36]
                        mem[mem[64] + 36] = 64
                        _14018 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                        t = mem[64] + 100
                        while idx < _14018:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args cd[36], 64, mem[mem[64] + 68 len (32 * _14018) + 32]
                        if ext_call.success:
                            _15269 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15324 = mem[_15269]
                            require mem[_15269] <= test266151307()
                            require _15269 + return_data.size > _15269 + mem[_15269] + 31
                            _15378 = mem[_15269 + mem[_15269]]
                            if mem[_15269 + mem[_15269]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_15269 + mem[_15269]]) + 1 < 0 or _15269 + ceil32(return_data.size) + ceil32(32 * mem[_15269 + mem[_15269]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _15269 + ceil32(return_data.size) + ceil32(32 * mem[_15269 + mem[_15269]]) + 1
                            mem[_15269 + ceil32(return_data.size)] = _15378
                            require _15324 + (32 * _15378) + 32 <= return_data.size
                            mem[_15269 + ceil32(return_data.size) + 32 len ceil32(32 * _15378)] = mem[_15269 + _15324 + 32 len ceil32(32 * _15378)]
                            _16619 = mem[64]
                            mem[mem[64]] = 128
                            _16700 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16700] = mem[_7065 + 32 len 32 * _16700]
                            mem[mem[64] + 32] = (32 * _16700) + 160
                            _17404 = mem[_9881]
                            mem[mem[64] + (32 * _16700) + 160] = mem[_9881]
                            mem[mem[64] + (32 * _16700) + 192 len 32 * _17404] = mem[_9881 + 32 len 32 * _17404]
                            mem[mem[64] + 64] = (32 * _16700) + (32 * _17404) + 192
                            _18052 = mem[_12659]
                            mem[_16619 + (32 * _16700) + (32 * _17404) + 192] = mem[_12659]
                            mem[_16619 + (32 * _16700) + (32 * _17404) + 224 len 32 * _18052] = mem[_12659 + 32 len 32 * _18052]
                            mem[_16619 + 96] = (32 * _16700) + (32 * _17404) + (32 * _18052) + 224
                            mem[_16619 + (32 * _16700) + (32 * _17404) + (32 * _18052) + 224] = _15378
                            mem[_16619 + (32 * _16700) + (32 * _17404) + (32 * _18052) + 256 len 32 * _15378] = mem[_15269 + ceil32(return_data.size) + 32 len 32 * _15378]
                            return memory
                              from mem[64]
                               len _16619 + (32 * _16700) + (32 * _17404) + (32 * _18052) + (32 * _15378) + -mem[64] + 256
                        _15296 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                            revert with 0, 65
                        _15323 = mem[64]
                        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[64] = mem[64] + (32 * _15296) + 32
                        if _15296:
                            mem[_15323 + 32 len 32 * _15296] = call.data[calldata.size len 32 * _15296]
                            _16377 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16377:
                                if idx >= mem[_15323]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15323 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16377 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            mem[mem[64]] = 128
                            _16566 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16566] = mem[_7065 + 32 len 32 * _16566]
                            var146001 = _16566
                            mem[mem[64] + 32] = (32 * _16566) + 160
                            _17403 = mem[_9881]
                            mem[mem[64] + (32 * _16566) + 160] = mem[_9881]
                            mem[mem[64] + (32 * _16566) + 192 len 32 * _17403] = mem[_9881 + 32 len 32 * _17403]
                            mem[mem[64] + 64] = (32 * _16566) + (32 * _17403) + 192
                            _18051 = mem[_12659]
                            mem[mem[64] + (32 * _16566) + (32 * _17403) + 192] = mem[_12659]
                            mem[mem[64] + (32 * _16566) + (32 * _17403) + 224 len 32 * _18051] = mem[_12659 + 32 len 32 * _18051]
                            mem[mem[64] + 96] = (32 * _16566) + (32 * _17403) + (32 * _18051) + 224
                            _18537 = mem[_15323]
                            mem[mem[64] + (32 * _16566) + (32 * _17403) + (32 * _18051) + 224] = mem[_15323]
                            mem[mem[64] + (32 * _16566) + (32 * _17403) + (32 * _18051) + 256 len 32 * _18537] = mem[_15323 + 32 len 32 * _18537]
                            return 128, 
                                   (32 * _16566) + 160,
                                   (32 * _16566) + (32 * _17403) + 192,
                                   (32 * _16566) + (32 * _17403) + (32 * _18051) + 224,
                                   mem[mem[64] + 128 len (32 * _16566) + (32 * _17403) + (32 * _18051) + (32 * _18537) + 128]
                        _16376 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16376:
                            if idx >= mem[_15323]:
                                revert with 0, 50
                            mem[(32 * idx) + _15323 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16376 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16565 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16565] = mem[_7065 + 32 len 32 * _16565]
                        var145001 = _16565
                        mem[mem[64] + 32] = (32 * _16565) + 160
                        _17402 = mem[_9881]
                        mem[mem[64] + (32 * _16565) + 160] = mem[_9881]
                        mem[mem[64] + (32 * _16565) + 192 len 32 * _17402] = mem[_9881 + 32 len 32 * _17402]
                        var150001 = _17402
                        var150002 = _9881 + (32 * _17402) + 32
                        var150007 = mem[64] + (32 * _16565) + (32 * _17402) + 192
                        mem[mem[64] + 64] = (32 * _16565) + (32 * _17402) + 192
                        _18050 = mem[_12659]
                        mem[mem[64] + (32 * _16565) + (32 * _17402) + 192] = mem[_12659]
                        mem[mem[64] + (32 * _16565) + (32 * _17402) + 224 len 32 * _18050] = mem[_12659 + 32 len 32 * _18050]
                        var155001 = _18050
                        mem[mem[64] + 96] = (32 * _16565) + (32 * _17402) + (32 * _18050) + 224
                        _18536 = mem[_15323]
                        mem[mem[64] + (32 * _16565) + (32 * _17402) + (32 * _18050) + 224] = mem[_15323]
                        mem[mem[64] + (32 * _16565) + (32 * _17402) + (32 * _18050) + 256 len 32 * _18536] = mem[_15323 + 32 len 32 * _18536]
                        var160001 = _18536
                        var160002 = _15323 + (32 * _18536) + 32
                        var160007 = mem[64] + (32 * _16565) + (32 * _17402) + (32 * _18050) + (32 * _18536) + 256
                        return 128, 
                               (32 * _16565) + 160,
                               (32 * _16565) + (32 * _17402) + 192,
                               (32 * _16565) + (32 * _17402) + (32 * _18050) + 224,
                               mem[mem[64] + 128 len (32 * _16565) + (32 * _17402) + (32 * _18050) + (32 * _18536) + 128]
                    _12641 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _12660 = mem[_12641]
                    require mem[_12641] <= test266151307()
                    require _12641 + return_data.size > _12641 + mem[_12641] + 31
                    _12678 = mem[_12641 + mem[_12641]]
                    if mem[_12641 + mem[_12641]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_12641 + mem[_12641]]) + 1 < 0 or _12641 + ceil32(return_data.size) + ceil32(32 * mem[_12641 + mem[_12641]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _12641 + ceil32(return_data.size) + ceil32(32 * mem[_12641 + mem[_12641]]) + 1
                    mem[_12641 + ceil32(return_data.size)] = _12678
                    require _12660 + (32 * _12678) + 32 <= return_data.size
                    mem[_12641 + ceil32(return_data.size) + 32 len ceil32(32 * _12678)] = mem[_12641 + _12660 + 32 len ceil32(32 * _12678)]
                    var127002 = _12641 + ceil32(return_data.size) + ceil32(32 * _12678) + 32
                    _14036 = mem[64]
                    mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 64
                    _14063 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                    t = mem[64] + 100
                    while idx < _14063:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _14036 + (32 * _14063) + -mem[64] + 96]
                    if not ext_call.success:
                        _15298 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                            revert with 0, 65
                        _15327 = mem[64]
                        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[64] = mem[64] + (32 * _15298) + 32
                        if not _15298:
                            _16380 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16380:
                                if idx >= mem[_15327]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15327 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16380 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            mem[mem[64]] = 128
                            _16569 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16569] = mem[_7065 + 32 len 32 * _16569]
                            mem[mem[64] + 32] = (32 * _16569) + 160
                            _17408 = mem[_9881]
                            mem[mem[64] + (32 * _16569) + 160] = mem[_9881]
                            mem[mem[64] + (32 * _16569) + 192 len 32 * _17408] = mem[_9881 + 32 len 32 * _17408]
                            mem[mem[64] + 64] = (32 * _16569) + (32 * _17408) + 192
                            _18056 = mem[_12641 + ceil32(return_data.size)]
                            mem[mem[64] + (32 * _16569) + (32 * _17408) + 192] = mem[_12641 + ceil32(return_data.size)]
                            mem[mem[64] + (32 * _16569) + (32 * _17408) + 224 len 32 * _18056] = mem[_12641 + ceil32(return_data.size) + 32 len 32 * _18056]
                            mem[mem[64] + 96] = (32 * _16569) + (32 * _17408) + (32 * _18056) + 224
                            _18542 = mem[_15327]
                            mem[mem[64] + (32 * _16569) + (32 * _17408) + (32 * _18056) + 224] = mem[_15327]
                            mem[mem[64] + (32 * _16569) + (32 * _17408) + (32 * _18056) + 256 len 32 * _18542] = mem[_15327 + 32 len 32 * _18542]
                            return 128, 
                                   (32 * _16569) + 160,
                                   (32 * _16569) + (32 * _17408) + 192,
                                   (32 * _16569) + (32 * _17408) + (32 * _18056) + 224,
                                   mem[mem[64] + 128 len (32 * _16569) + (32 * _17408) + (32 * _18056) + (32 * _18542) + 128]
                        mem[_15327 + 32 len 32 * _15298] = call.data[calldata.size len 32 * _15298]
                        _16381 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16381:
                            if idx >= mem[_15327]:
                                revert with 0, 50
                            mem[(32 * idx) + _15327 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16381 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16570 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16570] = mem[_7065 + 32 len 32 * _16570]
                        mem[mem[64] + 32] = (32 * _16570) + 160
                        _17409 = mem[_9881]
                        mem[mem[64] + (32 * _16570) + 160] = mem[_9881]
                        mem[mem[64] + (32 * _16570) + 192 len 32 * _17409] = mem[_9881 + 32 len 32 * _17409]
                        mem[mem[64] + 64] = (32 * _16570) + (32 * _17409) + 192
                        _18057 = mem[_12641 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16570) + (32 * _17409) + 192] = mem[_12641 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16570) + (32 * _17409) + 224 len 32 * _18057] = mem[_12641 + ceil32(return_data.size) + 32 len 32 * _18057]
                        mem[mem[64] + 96] = (32 * _16570) + (32 * _17409) + (32 * _18057) + 224
                        _18543 = mem[_15327]
                        mem[mem[64] + (32 * _16570) + (32 * _17409) + (32 * _18057) + 224] = mem[_15327]
                        mem[mem[64] + (32 * _16570) + (32 * _17409) + (32 * _18057) + 256 len 32 * _18543] = mem[_15327 + 32 len 32 * _18543]
                        return 128, 
                               (32 * _16570) + 160,
                               (32 * _16570) + (32 * _17409) + 192,
                               (32 * _16570) + (32 * _17409) + (32 * _18057) + 224,
                               mem[mem[64] + 128 len (32 * _16570) + (32 * _17409) + (32 * _18057) + (32 * _18543) + 128]
                    _15271 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _15328 = mem[_15271]
                    require mem[_15271] <= test266151307()
                    require _15271 + return_data.size > _15271 + mem[_15271] + 31
                    _15382 = mem[_15271 + mem[_15271]]
                    if mem[_15271 + mem[_15271]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_15271 + mem[_15271]]) + 1 < 0 or _15271 + ceil32(return_data.size) + ceil32(32 * mem[_15271 + mem[_15271]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _15271 + ceil32(return_data.size) + ceil32(32 * mem[_15271 + mem[_15271]]) + 1
                    mem[_15271 + ceil32(return_data.size)] = _15382
                    require _15328 + (32 * _15382) + 32 <= return_data.size
                    mem[_15271 + ceil32(return_data.size) + 32 len ceil32(32 * _15382)] = mem[_15271 + _15328 + 32 len ceil32(32 * _15382)]
                    mem[mem[64]] = 128
                    _16702 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16702] = mem[_7065 + 32 len 32 * _16702]
                    mem[mem[64] + 32] = (32 * _16702) + 160
                    _17410 = mem[_9881]
                    mem[mem[64] + (32 * _16702) + 160] = mem[_9881]
                    mem[mem[64] + (32 * _16702) + 192 len 32 * _17410] = mem[_9881 + 32 len 32 * _17410]
                    mem[mem[64] + 64] = (32 * _16702) + (32 * _17410) + 192
                    _18058 = mem[_12641 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16702) + (32 * _17410) + 192] = mem[_12641 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16702) + (32 * _17410) + 224 len 32 * _18058] = mem[_12641 + ceil32(return_data.size) + 32 len 32 * _18058]
                    mem[mem[64] + 96] = (32 * _16702) + (32 * _17410) + (32 * _18058) + 224
                    mem[mem[64] + (32 * _16702) + (32 * _17410) + (32 * _18058) + 224] = _15382
                    mem[mem[64] + (32 * _16702) + (32 * _17410) + (32 * _18058) + 256 len 32 * _15382] = mem[_15271 + ceil32(return_data.size) + 32 len 32 * _15382]
                    return Array(len=mem[mem[64] + 128 len (32 * _16702) + (32 * _17410) + (32 * _18058) + 96], data=_15382, mem[mem[64] + (32 * _16702) + (32 * _17410) + (32 * _18058) + 256 len 32 * _15382]), 
                           (32 * _16702) + 160,
                           (32 * _16702) + (32 * _17410) + 192,
                           (32 * _16702) + (32 * _17410) + (32 * _18058) + 224
                mem[_9881 + 32 len 32 * _9878] = call.data[calldata.size len 32 * _9878]
                _11259 = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                while idx < _11259:
                    if idx >= mem[_9881]:
                        revert with 0, 50
                    mem[(32 * idx) + _9881 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _11259 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = idx + 1
                    continue 
                _11274 = mem[64]
                mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _11280 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
                t = mem[64] + 100
                while idx < _11280:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _11274 + (32 * _11280) + -mem[64] + 96]
                if not ext_call.success:
                    _12651 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
                        revert with 0, 65
                    _12661 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    mem[64] = mem[64] + (32 * _12651) + 32
                    if not _12651:
                        _13957 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        idx = 0
                        while idx < _13957:
                            if idx >= mem[_12661]:
                                revert with 0, 50
                            mem[(32 * idx) + _12661 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _13957 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = cd[36]
                        mem[mem[64] + 36] = 64
                        _14020 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                        t = mem[64] + 100
                        while idx < _14020:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args cd[36], 64, mem[mem[64] + 68 len (32 * _14020) + 32]
                        if not ext_call.success:
                            _15299 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                                revert with 0, 65
                            _15329 = mem[64]
                            mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            mem[64] = mem[64] + (32 * _15299) + 32
                            if not _15299:
                                _16382 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = 0
                                while idx < _16382:
                                    if idx >= mem[_15329]:
                                        revert with 0, 50
                                    mem[(32 * idx) + _15329 + 32] = 0
                                    if idx == -1:
                                        revert with 0, 17
                                    _16382 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                    idx = idx + 1
                                    continue 
                                mem[mem[64]] = 128
                                _16571 = mem[_7065]
                                mem[mem[64] + 128] = mem[_7065]
                                mem[mem[64] + 160 len 32 * _16571] = mem[_7065 + 32 len 32 * _16571]
                                var146001 = _16571
                                mem[mem[64] + 32] = (32 * _16571) + 160
                                _17411 = mem[_9881]
                                mem[mem[64] + (32 * _16571) + 160] = mem[_9881]
                                mem[mem[64] + (32 * _16571) + 192 len 32 * _17411] = mem[_9881 + 32 len 32 * _17411]
                                mem[mem[64] + 64] = (32 * _16571) + (32 * _17411) + 192
                                _18059 = mem[_12661]
                                mem[mem[64] + (32 * _16571) + (32 * _17411) + 192] = mem[_12661]
                                mem[mem[64] + (32 * _16571) + (32 * _17411) + 224 len 32 * _18059] = mem[_12661 + 32 len 32 * _18059]
                                mem[mem[64] + 96] = (32 * _16571) + (32 * _17411) + (32 * _18059) + 224
                                _18545 = mem[_15329]
                                mem[mem[64] + (32 * _16571) + (32 * _17411) + (32 * _18059) + 224] = mem[_15329]
                                mem[mem[64] + (32 * _16571) + (32 * _17411) + (32 * _18059) + 256 len 32 * _18545] = mem[_15329 + 32 len 32 * _18545]
                                return 128, 
                                       (32 * _16571) + 160,
                                       (32 * _16571) + (32 * _17411) + 192,
                                       (32 * _16571) + (32 * _17411) + (32 * _18059) + 224,
                                       mem[mem[64] + 128 len (32 * _16571) + (32 * _17411) + (32 * _18059) + (32 * _18545) + 128]
                            mem[_15329 + 32 len 32 * _15299] = call.data[calldata.size len 32 * _15299]
                            _16383 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16383:
                                if idx >= mem[_15329]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15329 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16383 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            mem[mem[64]] = 128
                            _16572 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16572] = mem[_7065 + 32 len 32 * _16572]
                            mem[mem[64] + 32] = (32 * _16572) + 160
                            _17412 = mem[_9881]
                            mem[mem[64] + (32 * _16572) + 160] = mem[_9881]
                            mem[mem[64] + (32 * _16572) + 192 len 32 * _17412] = mem[_9881 + 32 len 32 * _17412]
                            var152001 = _17412
                            mem[mem[64] + 64] = (32 * _16572) + (32 * _17412) + 192
                            _18060 = mem[_12661]
                            mem[mem[64] + (32 * _16572) + (32 * _17412) + 192] = mem[_12661]
                            mem[mem[64] + (32 * _16572) + (32 * _17412) + 224 len 32 * _18060] = mem[_12661 + 32 len 32 * _18060]
                            mem[mem[64] + 96] = (32 * _16572) + (32 * _17412) + (32 * _18060) + 224
                            _18546 = mem[_15329]
                            mem[mem[64] + (32 * _16572) + (32 * _17412) + (32 * _18060) + 224] = mem[_15329]
                            mem[mem[64] + (32 * _16572) + (32 * _17412) + (32 * _18060) + 256 len 32 * _18546] = mem[_15329 + 32 len 32 * _18546]
                            return 128, 
                                   (32 * _16572) + 160,
                                   (32 * _16572) + (32 * _17412) + 192,
                                   (32 * _16572) + (32 * _17412) + (32 * _18060) + 224,
                                   mem[mem[64] + 128 len (32 * _16572) + (32 * _17412) + (32 * _18060) + (32 * _18546) + 128]
                        _15272 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _15330 = mem[_15272]
                        require mem[_15272] <= test266151307()
                        require _15272 + return_data.size > _15272 + mem[_15272] + 31
                        _15384 = mem[_15272 + mem[_15272]]
                        if mem[_15272 + mem[_15272]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_15272 + mem[_15272]]) + 1 < 0 or _15272 + ceil32(return_data.size) + ceil32(32 * mem[_15272 + mem[_15272]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _15272 + ceil32(return_data.size) + ceil32(32 * mem[_15272 + mem[_15272]]) + 1
                        mem[_15272 + ceil32(return_data.size)] = _15384
                        require _15330 + (32 * _15384) + 32 <= return_data.size
                        mem[_15272 + ceil32(return_data.size) + 32 len ceil32(32 * _15384)] = mem[_15272 + _15330 + 32 len ceil32(32 * _15384)]
                        _16622 = mem[64]
                        mem[mem[64]] = 128
                        _16703 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16703] = mem[_7065 + 32 len 32 * _16703]
                        mem[mem[64] + 32] = (32 * _16703) + 160
                        _17413 = mem[_9881]
                        mem[mem[64] + (32 * _16703) + 160] = mem[_9881]
                        mem[mem[64] + (32 * _16703) + 192 len 32 * _17413] = mem[_9881 + 32 len 32 * _17413]
                        mem[mem[64] + 64] = (32 * _16703) + (32 * _17413) + 192
                        _18061 = mem[_12661]
                        mem[_16622 + (32 * _16703) + (32 * _17413) + 192] = mem[_12661]
                        mem[_16622 + (32 * _16703) + (32 * _17413) + 224 len 32 * _18061] = mem[_12661 + 32 len 32 * _18061]
                        mem[_16622 + 96] = (32 * _16703) + (32 * _17413) + (32 * _18061) + 224
                        mem[_16622 + (32 * _16703) + (32 * _17413) + (32 * _18061) + 224] = _15384
                        mem[_16622 + (32 * _16703) + (32 * _17413) + (32 * _18061) + 256 len 32 * _15384] = mem[_15272 + ceil32(return_data.size) + 32 len 32 * _15384]
                        return memory
                          from mem[64]
                           len _16622 + (32 * _16703) + (32 * _17413) + (32 * _18061) + (32 * _15384) + -mem[64] + 256
                    mem[_12661 + 32 len 32 * _12651] = call.data[calldata.size len 32 * _12651]
                    _13958 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = 0
                    while idx < _13958:
                        if idx >= mem[_12661]:
                            revert with 0, 50
                        mem[(32 * idx) + _12661 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _13958 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        idx = idx + 1
                        continue 
                    mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 64
                    _14021 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                    t = mem[64] + 100
                    while idx < _14021:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args cd[36], 64, mem[mem[64] + 68 len (32 * _14021) + 32]
                    if not ext_call.success:
                        _15300 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                            revert with 0, 65
                        _15331 = mem[64]
                        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[64] = mem[64] + (32 * _15300) + 32
                        if not _15300:
                            _16384 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16384:
                                if idx >= mem[_15331]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15331 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16384 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            mem[mem[64]] = 128
                            _16573 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16573] = mem[_7065 + 32 len 32 * _16573]
                            mem[mem[64] + 32] = (32 * _16573) + 160
                            _17414 = mem[_9881]
                            mem[mem[64] + (32 * _16573) + 160] = mem[_9881]
                            mem[mem[64] + (32 * _16573) + 192 len 32 * _17414] = mem[_9881 + 32 len 32 * _17414]
                            var152001 = _17414
                            mem[mem[64] + 64] = (32 * _16573) + (32 * _17414) + 192
                            _18062 = mem[_12661]
                            mem[mem[64] + (32 * _16573) + (32 * _17414) + 192] = mem[_12661]
                            mem[mem[64] + (32 * _16573) + (32 * _17414) + 224 len 32 * _18062] = mem[_12661 + 32 len 32 * _18062]
                            mem[mem[64] + 96] = (32 * _16573) + (32 * _17414) + (32 * _18062) + 224
                            _18548 = mem[_15331]
                            mem[mem[64] + (32 * _16573) + (32 * _17414) + (32 * _18062) + 224] = mem[_15331]
                            mem[mem[64] + (32 * _16573) + (32 * _17414) + (32 * _18062) + 256 len 32 * _18548] = mem[_15331 + 32 len 32 * _18548]
                            return 128, 
                                   (32 * _16573) + 160,
                                   (32 * _16573) + (32 * _17414) + 192,
                                   (32 * _16573) + (32 * _17414) + (32 * _18062) + 224,
                                   mem[mem[64] + 128 len (32 * _16573) + (32 * _17414) + (32 * _18062) + (32 * _18548) + 128]
                        mem[_15331 + 32 len 32 * _15300] = call.data[calldata.size len 32 * _15300]
                        _16385 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16385:
                            if idx >= mem[_15331]:
                                revert with 0, 50
                            mem[(32 * idx) + _15331 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16385 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        _16520 = mem[64]
                        mem[mem[64]] = 128
                        _16574 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16574] = mem[_7065 + 32 len 32 * _16574]
                        mem[mem[64] + 32] = (32 * _16574) + 160
                        _17415 = mem[_9881]
                        mem[mem[64] + (32 * _16574) + 160] = mem[_9881]
                        mem[mem[64] + (32 * _16574) + 192 len 32 * _17415] = mem[_9881 + 32 len 32 * _17415]
                        var153001 = _17415
                        mem[mem[64] + 64] = (32 * _16574) + (32 * _17415) + 192
                        _18063 = mem[_12661]
                        mem[_16520 + (32 * _16574) + (32 * _17415) + 192] = mem[_12661]
                        mem[_16520 + (32 * _16574) + (32 * _17415) + 224 len 32 * _18063] = mem[_12661 + 32 len 32 * _18063]
                        mem[_16520 + 96] = (32 * _16574) + (32 * _17415) + (32 * _18063) + 224
                        _18549 = mem[_15331]
                        mem[_16520 + (32 * _16574) + (32 * _17415) + (32 * _18063) + 224] = mem[_15331]
                        mem[_16520 + (32 * _16574) + (32 * _17415) + (32 * _18063) + 256 len 32 * _18549] = mem[_15331 + 32 len 32 * _18549]
                        var163001 = _18549
                        return memory
                          from mem[64]
                           len _16520 + (32 * _16574) + (32 * _17415) + (32 * _18063) + (32 * _18549) + -mem[64] + 256
                    _15273 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _15332 = mem[_15273]
                    require mem[_15273] <= test266151307()
                    require _15273 + return_data.size > _15273 + mem[_15273] + 31
                    _15386 = mem[_15273 + mem[_15273]]
                    if mem[_15273 + mem[_15273]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_15273 + mem[_15273]]) + 1 < 0 or _15273 + ceil32(return_data.size) + ceil32(32 * mem[_15273 + mem[_15273]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _15273 + ceil32(return_data.size) + ceil32(32 * mem[_15273 + mem[_15273]]) + 1
                    mem[_15273 + ceil32(return_data.size)] = _15386
                    require _15332 + (32 * _15386) + 32 <= return_data.size
                    mem[_15273 + ceil32(return_data.size) + 32 len ceil32(32 * _15386)] = mem[_15273 + _15332 + 32 len ceil32(32 * _15386)]
                    mem[mem[64]] = 128
                    _16704 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16704] = mem[_7065 + 32 len 32 * _16704]
                    mem[mem[64] + 32] = (32 * _16704) + 160
                    _17416 = mem[_9881]
                    mem[mem[64] + (32 * _16704) + 160] = mem[_9881]
                    mem[mem[64] + (32 * _16704) + 192 len 32 * _17416] = mem[_9881 + 32 len 32 * _17416]
                    var163001 = _17416
                    mem[mem[64] + 64] = (32 * _16704) + (32 * _17416) + 192
                    _18064 = mem[_12661]
                    mem[mem[64] + (32 * _16704) + (32 * _17416) + 192] = mem[_12661]
                    mem[mem[64] + (32 * _16704) + (32 * _17416) + 224 len 32 * _18064] = mem[_12661 + 32 len 32 * _18064]
                    mem[mem[64] + 96] = (32 * _16704) + (32 * _17416) + (32 * _18064) + 224
                    mem[mem[64] + (32 * _16704) + (32 * _17416) + (32 * _18064) + 224] = _15386
                    mem[mem[64] + (32 * _16704) + (32 * _17416) + (32 * _18064) + 256 len 32 * _15386] = mem[_15273 + ceil32(return_data.size) + 32 len 32 * _15386]
                    return Array(len=mem[mem[64] + 128 len (32 * _16704) + (32 * _17416) + (32 * _18064) + 96], data=_15386, mem[mem[64] + (32 * _16704) + (32 * _17416) + (32 * _18064) + 256 len 32 * _15386]), 
                           (32 * _16704) + 160,
                           (32 * _16704) + (32 * _17416) + 192,
                           (32 * _16704) + (32 * _17416) + (32 * _18064) + 224
                _12642 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _12662 = mem[_12642]
                require mem[_12642] <= test266151307()
                require _12642 + return_data.size > _12642 + mem[_12642] + 31
                _12680 = mem[_12642 + mem[_12642]]
                if mem[_12642 + mem[_12642]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_12642 + mem[_12642]]) + 1 < 0 or _12642 + ceil32(return_data.size) + ceil32(32 * mem[_12642 + mem[_12642]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _12642 + ceil32(return_data.size) + ceil32(32 * mem[_12642 + mem[_12642]]) + 1
                mem[_12642 + ceil32(return_data.size)] = _12680
                require _12662 + (32 * _12680) + 32 <= return_data.size
                mem[_12642 + ceil32(return_data.size) + 32 len ceil32(32 * _12680)] = mem[_12642 + _12662 + 32 len ceil32(32 * _12680)]
                var128002 = _12642 + ceil32(return_data.size) + ceil32(32 * _12680) + 32
                _14037 = mem[64]
                mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _14064 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                t = mem[64] + 100
                while idx < _14064:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _14037 + (32 * _14064) + -mem[64] + 96]
                if not ext_call.success:
                    _15301 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                        revert with 0, 65
                    _15333 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[64] = mem[64] + (32 * _15301) + 32
                    if not _15301:
                        _16386 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16386:
                            if idx >= mem[_15333]:
                                revert with 0, 50
                            mem[(32 * idx) + _15333 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16386 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16575 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16575] = mem[_7065 + 32 len 32 * _16575]
                        mem[mem[64] + 32] = (32 * _16575) + 160
                        _17417 = mem[_9881]
                        mem[mem[64] + (32 * _16575) + 160] = mem[_9881]
                        mem[mem[64] + (32 * _16575) + 192 len 32 * _17417] = mem[_9881 + 32 len 32 * _17417]
                        mem[mem[64] + 64] = (32 * _16575) + (32 * _17417) + 192
                        _18065 = mem[_12642 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16575) + (32 * _17417) + 192] = mem[_12642 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16575) + (32 * _17417) + 224 len 32 * _18065] = mem[_12642 + ceil32(return_data.size) + 32 len 32 * _18065]
                        mem[mem[64] + 96] = (32 * _16575) + (32 * _17417) + (32 * _18065) + 224
                        _18551 = mem[_15333]
                        mem[mem[64] + (32 * _16575) + (32 * _17417) + (32 * _18065) + 224] = mem[_15333]
                        mem[mem[64] + (32 * _16575) + (32 * _17417) + (32 * _18065) + 256 len 32 * _18551] = mem[_15333 + 32 len 32 * _18551]
                        return 128, 
                               (32 * _16575) + 160,
                               (32 * _16575) + (32 * _17417) + 192,
                               (32 * _16575) + (32 * _17417) + (32 * _18065) + 224,
                               mem[mem[64] + 128 len (32 * _16575) + (32 * _17417) + (32 * _18065) + (32 * _18551) + 128]
                    mem[_15333 + 32 len 32 * _15301] = call.data[calldata.size len 32 * _15301]
                    _16387 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16387:
                        if idx >= mem[_15333]:
                            revert with 0, 50
                        mem[(32 * idx) + _15333 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16387 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    _16522 = mem[64]
                    mem[mem[64]] = 128
                    _16576 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16576] = mem[_7065 + 32 len 32 * _16576]
                    mem[mem[64] + 32] = (32 * _16576) + 160
                    _17418 = mem[_9881]
                    mem[mem[64] + (32 * _16576) + 160] = mem[_9881]
                    mem[mem[64] + (32 * _16576) + 192 len 32 * _17418] = mem[_9881 + 32 len 32 * _17418]
                    var163001 = _17418
                    mem[mem[64] + 64] = (32 * _16576) + (32 * _17418) + 192
                    _18066 = mem[_12642 + ceil32(return_data.size)]
                    mem[_16522 + (32 * _16576) + (32 * _17418) + 192] = mem[_12642 + ceil32(return_data.size)]
                    mem[_16522 + (32 * _16576) + (32 * _17418) + 224 len 32 * _18066] = mem[_12642 + ceil32(return_data.size) + 32 len 32 * _18066]
                    mem[_16522 + 96] = (32 * _16576) + (32 * _17418) + (32 * _18066) + 224
                    _18552 = mem[_15333]
                    mem[_16522 + (32 * _16576) + (32 * _17418) + (32 * _18066) + 224] = mem[_15333]
                    mem[_16522 + (32 * _16576) + (32 * _17418) + (32 * _18066) + 256 len 32 * _18552] = mem[_15333 + 32 len 32 * _18552]
                    return memory
                      from mem[64]
                       len _16522 + (32 * _16576) + (32 * _17418) + (32 * _18066) + (32 * _18552) + -mem[64] + 256
                _15274 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _15334 = mem[_15274]
                require mem[_15274] <= test266151307()
                require _15274 + return_data.size > _15274 + mem[_15274] + 31
                _15388 = mem[_15274 + mem[_15274]]
                if mem[_15274 + mem[_15274]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_15274 + mem[_15274]]) + 1 < 0 or _15274 + ceil32(return_data.size) + ceil32(32 * mem[_15274 + mem[_15274]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _15274 + ceil32(return_data.size) + ceil32(32 * mem[_15274 + mem[_15274]]) + 1
                mem[_15274 + ceil32(return_data.size)] = _15388
                require _15334 + (32 * _15388) + 32 <= return_data.size
                mem[_15274 + ceil32(return_data.size) + 32 len ceil32(32 * _15388)] = mem[_15274 + _15334 + 32 len ceil32(32 * _15388)]
                _16624 = mem[64]
                mem[mem[64]] = 128
                _16705 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16705] = mem[_7065 + 32 len 32 * _16705]
                mem[mem[64] + 32] = (32 * _16705) + 160
                _17419 = mem[_9881]
                mem[mem[64] + (32 * _16705) + 160] = mem[_9881]
                mem[mem[64] + (32 * _16705) + 192 len 32 * _17419] = mem[_9881 + 32 len 32 * _17419]
                mem[mem[64] + 64] = (32 * _16705) + (32 * _17419) + 192
                _18067 = mem[_12642 + ceil32(return_data.size)]
                mem[_16624 + (32 * _16705) + (32 * _17419) + 192] = mem[_12642 + ceil32(return_data.size)]
                mem[_16624 + (32 * _16705) + (32 * _17419) + 224 len 32 * _18067] = mem[_12642 + ceil32(return_data.size) + 32 len 32 * _18067]
                mem[_16624 + 96] = (32 * _16705) + (32 * _17419) + (32 * _18067) + 224
                mem[_16624 + (32 * _16705) + (32 * _17419) + (32 * _18067) + 224] = _15388
                mem[_16624 + (32 * _16705) + (32 * _17419) + (32 * _18067) + 256 len 32 * _15388] = mem[_15274 + ceil32(return_data.size) + 32 len 32 * _15388]
                return memory
                  from mem[64]
                   len _16624 + (32 * _16705) + (32 * _17419) + (32 * _18067) + (32 * _15388) + -mem[64] + 256
            _9875 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _9882 = mem[_9875]
            require mem[_9875] <= test266151307()
            require _9875 + return_data.size > _9875 + mem[_9875] + 31
            _9888 = mem[_9875 + mem[_9875]]
            if mem[_9875 + mem[_9875]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_9875 + mem[_9875]]) + 1 < 0 or _9875 + ceil32(return_data.size) + ceil32(32 * mem[_9875 + mem[_9875]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _9875 + ceil32(return_data.size) + ceil32(32 * mem[_9875 + mem[_9875]]) + 1
            mem[_9875 + ceil32(return_data.size)] = _9888
            require _9882 + (32 * _9888) + 32 <= return_data.size
            mem[_9875 + ceil32(return_data.size) + 32 len ceil32(32 * _9888)] = mem[_9875 + _9882 + 32 len ceil32(32 * _9888)]
            var109002 = _9875 + ceil32(return_data.size) + ceil32(32 * _9888) + 32
            mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _11294 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
            t = mem[64] + 100
            while idx < _11294:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args cd[36], 64, mem[mem[64] + 68 len (32 * _11294) + 32]
            if not ext_call.success:
                _12652 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
                    revert with 0, 65
                _12663 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                mem[64] = mem[64] + (32 * _12652) + 32
                if not _12652:
                    _13959 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = 0
                    while idx < _13959:
                        if idx >= mem[_12663]:
                            revert with 0, 50
                        mem[(32 * idx) + _12663 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _13959 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        idx = idx + 1
                        continue 
                    _14004 = mem[64]
                    mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 64
                    _14022 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                    t = mem[64] + 100
                    while idx < _14022:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _14004 + (32 * _14022) + -mem[64] + 96]
                    if not ext_call.success:
                        _15302 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                            revert with 0, 65
                        _15335 = mem[64]
                        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[64] = mem[64] + (32 * _15302) + 32
                        if not _15302:
                            _16388 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16388:
                                if idx >= mem[_15335]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15335 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16388 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            _16523 = mem[64]
                            mem[mem[64]] = 128
                            _16577 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16577] = mem[_7065 + 32 len 32 * _16577]
                            mem[mem[64] + 32] = (32 * _16577) + 160
                            _17420 = mem[_9875 + ceil32(return_data.size)]
                            mem[mem[64] + (32 * _16577) + 160] = mem[_9875 + ceil32(return_data.size)]
                            mem[mem[64] + (32 * _16577) + 192 len 32 * _17420] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17420]
                            mem[mem[64] + 64] = (32 * _16577) + (32 * _17420) + 192
                            _18068 = mem[_12663]
                            mem[_16523 + (32 * _16577) + (32 * _17420) + 192] = mem[_12663]
                            mem[_16523 + (32 * _16577) + (32 * _17420) + 224 len 32 * _18068] = mem[_12663 + 32 len 32 * _18068]
                            mem[_16523 + 96] = (32 * _16577) + (32 * _17420) + (32 * _18068) + 224
                            _18554 = mem[_15335]
                            mem[_16523 + (32 * _16577) + (32 * _17420) + (32 * _18068) + 224] = mem[_15335]
                            mem[_16523 + (32 * _16577) + (32 * _17420) + (32 * _18068) + 256 len 32 * _18554] = mem[_15335 + 32 len 32 * _18554]
                            return memory
                              from mem[64]
                               len _16523 + (32 * _16577) + (32 * _17420) + (32 * _18068) + (32 * _18554) + -mem[64] + 256
                        mem[_15335 + 32 len 32 * _15302] = call.data[calldata.size len 32 * _15302]
                        _16389 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16389:
                            if idx >= mem[_15335]:
                                revert with 0, 50
                            mem[(32 * idx) + _15335 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16389 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16578 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16578] = mem[_7065 + 32 len 32 * _16578]
                        mem[mem[64] + 32] = (32 * _16578) + 160
                        _17421 = mem[_9875 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16578) + 160] = mem[_9875 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16578) + 192 len 32 * _17421] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17421]
                        mem[mem[64] + 64] = (32 * _16578) + (32 * _17421) + 192
                        _18069 = mem[_12663]
                        mem[mem[64] + (32 * _16578) + (32 * _17421) + 192] = mem[_12663]
                        mem[mem[64] + (32 * _16578) + (32 * _17421) + 224 len 32 * _18069] = mem[_12663 + 32 len 32 * _18069]
                        mem[mem[64] + 96] = (32 * _16578) + (32 * _17421) + (32 * _18069) + 224
                        _18555 = mem[_15335]
                        mem[mem[64] + (32 * _16578) + (32 * _17421) + (32 * _18069) + 224] = mem[_15335]
                        mem[mem[64] + (32 * _16578) + (32 * _17421) + (32 * _18069) + 256 len 32 * _18555] = mem[_15335 + 32 len 32 * _18555]
                        return 128, 
                               (32 * _16578) + 160,
                               (32 * _16578) + (32 * _17421) + 192,
                               (32 * _16578) + (32 * _17421) + (32 * _18069) + 224,
                               mem[mem[64] + 128 len (32 * _16578) + (32 * _17421) + (32 * _18069) + (32 * _18555) + 128]
                    _15275 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _15336 = mem[_15275]
                    require mem[_15275] <= test266151307()
                    require _15275 + return_data.size > _15275 + mem[_15275] + 31
                    _15390 = mem[_15275 + mem[_15275]]
                    if mem[_15275 + mem[_15275]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_15275 + mem[_15275]]) + 1 < 0 or _15275 + ceil32(return_data.size) + ceil32(32 * mem[_15275 + mem[_15275]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _15275 + ceil32(return_data.size) + ceil32(32 * mem[_15275 + mem[_15275]]) + 1
                    mem[_15275 + ceil32(return_data.size)] = _15390
                    require _15336 + (32 * _15390) + 32 <= return_data.size
                    mem[_15275 + ceil32(return_data.size) + 32 len ceil32(32 * _15390)] = mem[_15275 + _15336 + 32 len ceil32(32 * _15390)]
                    _16625 = mem[64]
                    mem[mem[64]] = 128
                    _16706 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16706] = mem[_7065 + 32 len 32 * _16706]
                    mem[mem[64] + 32] = (32 * _16706) + 160
                    _17422 = mem[_9875 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16706) + 160] = mem[_9875 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16706) + 192 len 32 * _17422] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17422]
                    mem[mem[64] + 64] = (32 * _16706) + (32 * _17422) + 192
                    _18070 = mem[_12663]
                    mem[_16625 + (32 * _16706) + (32 * _17422) + 192] = mem[_12663]
                    mem[_16625 + (32 * _16706) + (32 * _17422) + 224 len 32 * _18070] = mem[_12663 + 32 len 32 * _18070]
                    mem[_16625 + 96] = (32 * _16706) + (32 * _17422) + (32 * _18070) + 224
                    mem[_16625 + (32 * _16706) + (32 * _17422) + (32 * _18070) + 224] = _15390
                    mem[_16625 + (32 * _16706) + (32 * _17422) + (32 * _18070) + 256 len 32 * _15390] = mem[_15275 + ceil32(return_data.size) + 32 len 32 * _15390]
                    return memory
                      from mem[64]
                       len _16625 + (32 * _16706) + (32 * _17422) + (32 * _18070) + (32 * _15390) + -mem[64] + 256
                mem[_12663 + 32 len 32 * _12652] = call.data[calldata.size len 32 * _12652]
                _13960 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = 0
                while idx < _13960:
                    if idx >= mem[_12663]:
                        revert with 0, 50
                    mem[(32 * idx) + _12663 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _13960 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = idx + 1
                    continue 
                _14005 = mem[64]
                mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _14023 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                t = mem[64] + 100
                while idx < _14023:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _14005 + (32 * _14023) + -mem[64] + 96]
                if not ext_call.success:
                    _15303 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                        revert with 0, 65
                    _15337 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[64] = mem[64] + (32 * _15303) + 32
                    if not _15303:
                        _16390 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16390:
                            if idx >= mem[_15337]:
                                revert with 0, 50
                            mem[(32 * idx) + _15337 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16390 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        _16525 = mem[64]
                        mem[mem[64]] = 128
                        _16579 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16579] = mem[_7065 + 32 len 32 * _16579]
                        mem[mem[64] + 32] = (32 * _16579) + 160
                        _17423 = mem[_9875 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16579) + 160] = mem[_9875 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16579) + 192 len 32 * _17423] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17423]
                        mem[mem[64] + 64] = (32 * _16579) + (32 * _17423) + 192
                        _18071 = mem[_12663]
                        mem[_16525 + (32 * _16579) + (32 * _17423) + 192] = mem[_12663]
                        mem[_16525 + (32 * _16579) + (32 * _17423) + 224 len 32 * _18071] = mem[_12663 + 32 len 32 * _18071]
                        mem[_16525 + 96] = (32 * _16579) + (32 * _17423) + (32 * _18071) + 224
                        _18557 = mem[_15337]
                        mem[_16525 + (32 * _16579) + (32 * _17423) + (32 * _18071) + 224] = mem[_15337]
                        mem[_16525 + (32 * _16579) + (32 * _17423) + (32 * _18071) + 256 len 32 * _18557] = mem[_15337 + 32 len 32 * _18557]
                        return memory
                          from mem[64]
                           len _16525 + (32 * _16579) + (32 * _17423) + (32 * _18071) + (32 * _18557) + -mem[64] + 256
                    mem[_15337 + 32 len 32 * _15303] = call.data[calldata.size len 32 * _15303]
                    _16391 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16391:
                        if idx >= mem[_15337]:
                            revert with 0, 50
                        mem[(32 * idx) + _15337 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16391 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    _16526 = mem[64]
                    mem[mem[64]] = 128
                    _16580 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16580] = mem[_7065 + 32 len 32 * _16580]
                    mem[mem[64] + 32] = (32 * _16580) + 160
                    _17424 = mem[_9875 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16580) + 160] = mem[_9875 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16580) + 192 len 32 * _17424] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17424]
                    var163001 = _17424
                    mem[mem[64] + 64] = (32 * _16580) + (32 * _17424) + 192
                    _18072 = mem[_12663]
                    mem[_16526 + (32 * _16580) + (32 * _17424) + 192] = mem[_12663]
                    mem[_16526 + (32 * _16580) + (32 * _17424) + 224 len 32 * _18072] = mem[_12663 + 32 len 32 * _18072]
                    mem[_16526 + 96] = (32 * _16580) + (32 * _17424) + (32 * _18072) + 224
                    _18558 = mem[_15337]
                    mem[_16526 + (32 * _16580) + (32 * _17424) + (32 * _18072) + 224] = mem[_15337]
                    mem[_16526 + (32 * _16580) + (32 * _17424) + (32 * _18072) + 256 len 32 * _18558] = mem[_15337 + 32 len 32 * _18558]
                    return memory
                      from mem[64]
                       len _16526 + (32 * _16580) + (32 * _17424) + (32 * _18072) + (32 * _18558) + -mem[64] + 256
                _15276 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _15338 = mem[_15276]
                require mem[_15276] <= test266151307()
                require _15276 + return_data.size > _15276 + mem[_15276] + 31
                _15392 = mem[_15276 + mem[_15276]]
                if mem[_15276 + mem[_15276]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_15276 + mem[_15276]]) + 1 < 0 or _15276 + ceil32(return_data.size) + ceil32(32 * mem[_15276 + mem[_15276]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _15276 + ceil32(return_data.size) + ceil32(32 * mem[_15276 + mem[_15276]]) + 1
                mem[_15276 + ceil32(return_data.size)] = _15392
                require _15338 + (32 * _15392) + 32 <= return_data.size
                mem[_15276 + ceil32(return_data.size) + 32 len ceil32(32 * _15392)] = mem[_15276 + _15338 + 32 len ceil32(32 * _15392)]
                _16626 = mem[64]
                mem[mem[64]] = 128
                _16707 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16707] = mem[_7065 + 32 len 32 * _16707]
                mem[mem[64] + 32] = (32 * _16707) + 160
                _17425 = mem[_9875 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16707) + 160] = mem[_9875 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16707) + 192 len 32 * _17425] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17425]
                mem[mem[64] + 64] = (32 * _16707) + (32 * _17425) + 192
                _18073 = mem[_12663]
                mem[_16626 + (32 * _16707) + (32 * _17425) + 192] = mem[_12663]
                mem[_16626 + (32 * _16707) + (32 * _17425) + 224 len 32 * _18073] = mem[_12663 + 32 len 32 * _18073]
                mem[_16626 + 96] = (32 * _16707) + (32 * _17425) + (32 * _18073) + 224
                mem[_16626 + (32 * _16707) + (32 * _17425) + (32 * _18073) + 224] = _15392
                mem[_16626 + (32 * _16707) + (32 * _17425) + (32 * _18073) + 256 len 32 * _15392] = mem[_15276 + ceil32(return_data.size) + 32 len 32 * _15392]
                return memory
                  from mem[64]
                   len _16626 + (32 * _16707) + (32 * _17425) + (32 * _18073) + (32 * _15392) + -mem[64] + 256
            _12643 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _12664 = mem[_12643]
            require mem[_12643] <= test266151307()
            require _12643 + return_data.size > _12643 + mem[_12643] + 31
            _12682 = mem[_12643 + mem[_12643]]
            if mem[_12643 + mem[_12643]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_12643 + mem[_12643]]) + 1 < 0 or _12643 + ceil32(return_data.size) + ceil32(32 * mem[_12643 + mem[_12643]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _12643 + ceil32(return_data.size) + ceil32(32 * mem[_12643 + mem[_12643]]) + 1
            mem[_12643 + ceil32(return_data.size)] = _12682
            require _12664 + (32 * _12682) + 32 <= return_data.size
            mem[_12643 + ceil32(return_data.size) + 32 len ceil32(32 * _12682)] = mem[_12643 + _12664 + 32 len ceil32(32 * _12682)]
            var138002 = _12643 + ceil32(return_data.size) + ceil32(32 * _12682) + 32
            mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _14065 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
            t = mem[64] + 100
            while idx < _14065:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args cd[36], 64, mem[mem[64] + 68 len (32 * _14065) + 32]
            if not ext_call.success:
                _15304 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                    revert with 0, 65
                _15339 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[64] = mem[64] + (32 * _15304) + 32
                if not _15304:
                    _16392 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16392:
                        if idx >= mem[_15339]:
                            revert with 0, 50
                        mem[(32 * idx) + _15339 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16392 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    _16527 = mem[64]
                    mem[mem[64]] = 128
                    _16581 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16581] = mem[_7065 + 32 len 32 * _16581]
                    mem[mem[64] + 32] = (32 * _16581) + 160
                    _17426 = mem[_9875 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16581) + 160] = mem[_9875 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16581) + 192 len 32 * _17426] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17426]
                    mem[mem[64] + 64] = (32 * _16581) + (32 * _17426) + 192
                    _18074 = mem[_12643 + ceil32(return_data.size)]
                    mem[_16527 + (32 * _16581) + (32 * _17426) + 192] = mem[_12643 + ceil32(return_data.size)]
                    mem[_16527 + (32 * _16581) + (32 * _17426) + 224 len 32 * _18074] = mem[_12643 + ceil32(return_data.size) + 32 len 32 * _18074]
                    mem[_16527 + 96] = (32 * _16581) + (32 * _17426) + (32 * _18074) + 224
                    _18560 = mem[_15339]
                    mem[_16527 + (32 * _16581) + (32 * _17426) + (32 * _18074) + 224] = mem[_15339]
                    mem[_16527 + (32 * _16581) + (32 * _17426) + (32 * _18074) + 256 len 32 * _18560] = mem[_15339 + 32 len 32 * _18560]
                    return memory
                      from mem[64]
                       len _16527 + (32 * _16581) + (32 * _17426) + (32 * _18074) + (32 * _18560) + -mem[64] + 256
                mem[_15339 + 32 len 32 * _15304] = call.data[calldata.size len 32 * _15304]
                _16393 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16393:
                    if idx >= mem[_15339]:
                        revert with 0, 50
                    mem[(32 * idx) + _15339 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16393 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                _16528 = mem[64]
                mem[mem[64]] = 128
                _16582 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16582] = mem[_7065 + 32 len 32 * _16582]
                mem[mem[64] + 32] = (32 * _16582) + 160
                _17427 = mem[_9875 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16582) + 160] = mem[_9875 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16582) + 192 len 32 * _17427] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17427]
                mem[mem[64] + 64] = (32 * _16582) + (32 * _17427) + 192
                _18075 = mem[_12643 + ceil32(return_data.size)]
                mem[_16528 + (32 * _16582) + (32 * _17427) + 192] = mem[_12643 + ceil32(return_data.size)]
                mem[_16528 + (32 * _16582) + (32 * _17427) + 224 len 32 * _18075] = mem[_12643 + ceil32(return_data.size) + 32 len 32 * _18075]
                mem[_16528 + 96] = (32 * _16582) + (32 * _17427) + (32 * _18075) + 224
                _18561 = mem[_15339]
                mem[_16528 + (32 * _16582) + (32 * _17427) + (32 * _18075) + 224] = mem[_15339]
                mem[_16528 + (32 * _16582) + (32 * _17427) + (32 * _18075) + 256 len 32 * _18561] = mem[_15339 + 32 len 32 * _18561]
                return memory
                  from mem[64]
                   len _16528 + (32 * _16582) + (32 * _17427) + (32 * _18075) + (32 * _18561) + -mem[64] + 256
            _15277 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _15340 = mem[_15277]
            require mem[_15277] <= test266151307()
            require _15277 + return_data.size > _15277 + mem[_15277] + 31
            _15394 = mem[_15277 + mem[_15277]]
            if mem[_15277 + mem[_15277]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_15277 + mem[_15277]]) + 1 < 0 or _15277 + ceil32(return_data.size) + ceil32(32 * mem[_15277 + mem[_15277]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _15277 + ceil32(return_data.size) + ceil32(32 * mem[_15277 + mem[_15277]]) + 1
            mem[_15277 + ceil32(return_data.size)] = _15394
            require _15340 + (32 * _15394) + 32 <= return_data.size
            mem[_15277 + ceil32(return_data.size) + 32 len ceil32(32 * _15394)] = mem[_15277 + _15340 + 32 len ceil32(32 * _15394)]
            _16627 = mem[64]
            mem[mem[64]] = 128
            _16708 = mem[_7065]
            mem[mem[64] + 128] = mem[_7065]
            mem[mem[64] + 160 len 32 * _16708] = mem[_7065 + 32 len 32 * _16708]
            mem[mem[64] + 32] = (32 * _16708) + 160
            _17428 = mem[_9875 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16708) + 160] = mem[_9875 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16708) + 192 len 32 * _17428] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17428]
            mem[mem[64] + 64] = (32 * _16708) + (32 * _17428) + 192
            _18076 = mem[_12643 + ceil32(return_data.size)]
            mem[_16627 + (32 * _16708) + (32 * _17428) + 192] = mem[_12643 + ceil32(return_data.size)]
            mem[_16627 + (32 * _16708) + (32 * _17428) + 224 len 32 * _18076] = mem[_12643 + ceil32(return_data.size) + 32 len 32 * _18076]
            mem[_16627 + 96] = (32 * _16708) + (32 * _17428) + (32 * _18076) + 224
            mem[_16627 + (32 * _16708) + (32 * _17428) + (32 * _18076) + 224] = _15394
            mem[_16627 + (32 * _16708) + (32 * _17428) + (32 * _18076) + 256 len 32 * _15394] = mem[_15277 + ceil32(return_data.size) + 32 len 32 * _15394]
            return memory
              from mem[64]
               len _16627 + (32 * _16708) + (32 * _17428) + (32 * _18076) + (32 * _15394) + -mem[64] + 256
        mem[_7065 + 32 len 32 * _7064] = call.data[calldata.size len 32 * _7064]
        _8470 = mem[96]
        idx = 0
        while idx < _8470:
            if idx >= mem[_7065]:
                revert with 0, 50
            mem[(32 * idx) + _7065 + 32] = 0
            if idx == -1:
                revert with 0, 17
            _8470 = mem[96]
            idx = idx + 1
            continue 
        _8475 = mem[64]
        mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = cd[36]
        mem[mem[64] + 36] = 64
        _8477 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 100
        while idx < _8477:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _8475 + (32 * _8477) + -mem[64] + 96]
        if not ext_call.success:
            _9879 = mem[ceil32(32 * ('cd', 68).length) + 97]
            if mem[ceil32(32 * ('cd', 68).length) + 97] > test266151307():
                revert with 0, 65
            _9883 = mem[64]
            mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[64] = mem[64] + (32 * _9879) + 32
            if not _9879:
                _11260 = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                while idx < _11260:
                    if idx >= mem[_9883]:
                        revert with 0, 50
                    mem[(32 * idx) + _9883 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _11260 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = idx + 1
                    continue 
                _11275 = mem[64]
                mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _11281 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
                t = mem[64] + 100
                while idx < _11281:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _11275 + (32 * _11281) + -mem[64] + 96]
                if not ext_call.success:
                    _12653 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
                        revert with 0, 65
                    _12665 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    mem[64] = mem[64] + (32 * _12653) + 32
                    if not _12653:
                        _13961 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        idx = 0
                        while idx < _13961:
                            if idx >= mem[_12665]:
                                revert with 0, 50
                            mem[(32 * idx) + _12665 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _13961 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = cd[36]
                        mem[mem[64] + 36] = 64
                        _14024 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                        t = mem[64] + 100
                        while idx < _14024:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args cd[36], 64, mem[mem[64] + 68 len (32 * _14024) + 32]
                        if not ext_call.success:
                            _15305 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                                revert with 0, 65
                            _15341 = mem[64]
                            mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            mem[64] = mem[64] + (32 * _15305) + 32
                            if not _15305:
                                _16394 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = 0
                                while idx < _16394:
                                    if idx >= mem[_15341]:
                                        revert with 0, 50
                                    mem[(32 * idx) + _15341 + 32] = 0
                                    if idx == -1:
                                        revert with 0, 17
                                    _16394 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                    idx = idx + 1
                                    continue 
                                mem[mem[64]] = 128
                                _16583 = mem[_7065]
                                mem[mem[64] + 128] = mem[_7065]
                                mem[mem[64] + 160 len 32 * _16583] = mem[_7065 + 32 len 32 * _16583]
                                var146001 = _16583
                                mem[mem[64] + 32] = (32 * _16583) + 160
                                _17429 = mem[_9883]
                                mem[mem[64] + (32 * _16583) + 160] = mem[_9883]
                                mem[mem[64] + (32 * _16583) + 192 len 32 * _17429] = mem[_9883 + 32 len 32 * _17429]
                                mem[mem[64] + 64] = (32 * _16583) + (32 * _17429) + 192
                                _18077 = mem[_12665]
                                mem[mem[64] + (32 * _16583) + (32 * _17429) + 192] = mem[_12665]
                                mem[mem[64] + (32 * _16583) + (32 * _17429) + 224 len 32 * _18077] = mem[_12665 + 32 len 32 * _18077]
                                mem[mem[64] + 96] = (32 * _16583) + (32 * _17429) + (32 * _18077) + 224
                                _18563 = mem[_15341]
                                mem[mem[64] + (32 * _16583) + (32 * _17429) + (32 * _18077) + 224] = mem[_15341]
                                mem[mem[64] + (32 * _16583) + (32 * _17429) + (32 * _18077) + 256 len 32 * _18563] = mem[_15341 + 32 len 32 * _18563]
                                return 128, 
                                       (32 * _16583) + 160,
                                       (32 * _16583) + (32 * _17429) + 192,
                                       (32 * _16583) + (32 * _17429) + (32 * _18077) + 224,
                                       mem[mem[64] + 128 len (32 * _16583) + (32 * _17429) + (32 * _18077) + (32 * _18563) + 128]
                            mem[_15341 + 32 len 32 * _15305] = call.data[calldata.size len 32 * _15305]
                            _16395 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16395:
                                if idx >= mem[_15341]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15341 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16395 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            mem[mem[64]] = 128
                            _16584 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16584] = mem[_7065 + 32 len 32 * _16584]
                            mem[mem[64] + 32] = (32 * _16584) + 160
                            _17430 = mem[_9883]
                            mem[mem[64] + (32 * _16584) + 160] = mem[_9883]
                            mem[mem[64] + (32 * _16584) + 192 len 32 * _17430] = mem[_9883 + 32 len 32 * _17430]
                            var152001 = _17430
                            mem[mem[64] + 64] = (32 * _16584) + (32 * _17430) + 192
                            _18078 = mem[_12665]
                            mem[mem[64] + (32 * _16584) + (32 * _17430) + 192] = mem[_12665]
                            mem[mem[64] + (32 * _16584) + (32 * _17430) + 224 len 32 * _18078] = mem[_12665 + 32 len 32 * _18078]
                            mem[mem[64] + 96] = (32 * _16584) + (32 * _17430) + (32 * _18078) + 224
                            _18564 = mem[_15341]
                            mem[mem[64] + (32 * _16584) + (32 * _17430) + (32 * _18078) + 224] = mem[_15341]
                            mem[mem[64] + (32 * _16584) + (32 * _17430) + (32 * _18078) + 256 len 32 * _18564] = mem[_15341 + 32 len 32 * _18564]
                            return 128, 
                                   (32 * _16584) + 160,
                                   (32 * _16584) + (32 * _17430) + 192,
                                   (32 * _16584) + (32 * _17430) + (32 * _18078) + 224,
                                   mem[mem[64] + 128 len (32 * _16584) + (32 * _17430) + (32 * _18078) + (32 * _18564) + 128]
                        _15278 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _15342 = mem[_15278]
                        require mem[_15278] <= test266151307()
                        require _15278 + return_data.size > _15278 + mem[_15278] + 31
                        _15396 = mem[_15278 + mem[_15278]]
                        if mem[_15278 + mem[_15278]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_15278 + mem[_15278]]) + 1 < 0 or _15278 + ceil32(return_data.size) + ceil32(32 * mem[_15278 + mem[_15278]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _15278 + ceil32(return_data.size) + ceil32(32 * mem[_15278 + mem[_15278]]) + 1
                        mem[_15278 + ceil32(return_data.size)] = _15396
                        require _15342 + (32 * _15396) + 32 <= return_data.size
                        mem[_15278 + ceil32(return_data.size) + 32 len ceil32(32 * _15396)] = mem[_15278 + _15342 + 32 len ceil32(32 * _15396)]
                        _16628 = mem[64]
                        mem[mem[64]] = 128
                        _16709 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16709] = mem[_7065 + 32 len 32 * _16709]
                        mem[mem[64] + 32] = (32 * _16709) + 160
                        _17431 = mem[_9883]
                        mem[mem[64] + (32 * _16709) + 160] = mem[_9883]
                        mem[mem[64] + (32 * _16709) + 192 len 32 * _17431] = mem[_9883 + 32 len 32 * _17431]
                        mem[mem[64] + 64] = (32 * _16709) + (32 * _17431) + 192
                        _18079 = mem[_12665]
                        mem[_16628 + (32 * _16709) + (32 * _17431) + 192] = mem[_12665]
                        mem[_16628 + (32 * _16709) + (32 * _17431) + 224 len 32 * _18079] = mem[_12665 + 32 len 32 * _18079]
                        mem[_16628 + 96] = (32 * _16709) + (32 * _17431) + (32 * _18079) + 224
                        mem[_16628 + (32 * _16709) + (32 * _17431) + (32 * _18079) + 224] = _15396
                        mem[_16628 + (32 * _16709) + (32 * _17431) + (32 * _18079) + 256 len 32 * _15396] = mem[_15278 + ceil32(return_data.size) + 32 len 32 * _15396]
                        return memory
                          from mem[64]
                           len _16628 + (32 * _16709) + (32 * _17431) + (32 * _18079) + (32 * _15396) + -mem[64] + 256
                    mem[_12665 + 32 len 32 * _12653] = call.data[calldata.size len 32 * _12653]
                    _13962 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = 0
                    while idx < _13962:
                        if idx >= mem[_12665]:
                            revert with 0, 50
                        mem[(32 * idx) + _12665 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _13962 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        idx = idx + 1
                        continue 
                    _14007 = mem[64]
                    mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 64
                    _14025 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                    t = mem[64] + 100
                    while idx < _14025:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _14007 + (32 * _14025) + -mem[64] + 96]
                    if not ext_call.success:
                        _15306 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                            revert with 0, 65
                        _15343 = mem[64]
                        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[64] = mem[64] + (32 * _15306) + 32
                        if not _15306:
                            _16396 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16396:
                                if idx >= mem[_15343]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15343 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16396 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            _16531 = mem[64]
                            mem[mem[64]] = 128
                            _16585 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16585] = mem[_7065 + 32 len 32 * _16585]
                            mem[mem[64] + 32] = (32 * _16585) + 160
                            _17432 = mem[_9883]
                            mem[mem[64] + (32 * _16585) + 160] = mem[_9883]
                            mem[mem[64] + (32 * _16585) + 192 len 32 * _17432] = mem[_9883 + 32 len 32 * _17432]
                            var152001 = _17432
                            mem[mem[64] + 64] = (32 * _16585) + (32 * _17432) + 192
                            _18080 = mem[_12665]
                            mem[_16531 + (32 * _16585) + (32 * _17432) + 192] = mem[_12665]
                            mem[_16531 + (32 * _16585) + (32 * _17432) + 224 len 32 * _18080] = mem[_12665 + 32 len 32 * _18080]
                            mem[_16531 + 96] = (32 * _16585) + (32 * _17432) + (32 * _18080) + 224
                            _18566 = mem[_15343]
                            mem[_16531 + (32 * _16585) + (32 * _17432) + (32 * _18080) + 224] = mem[_15343]
                            mem[_16531 + (32 * _16585) + (32 * _17432) + (32 * _18080) + 256 len 32 * _18566] = mem[_15343 + 32 len 32 * _18566]
                            return memory
                              from mem[64]
                               len _16531 + (32 * _16585) + (32 * _17432) + (32 * _18080) + (32 * _18566) + -mem[64] + 256
                        mem[_15343 + 32 len 32 * _15306] = call.data[calldata.size len 32 * _15306]
                        _16397 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16397:
                            if idx >= mem[_15343]:
                                revert with 0, 50
                            mem[(32 * idx) + _15343 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16397 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16586 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16586] = mem[_7065 + 32 len 32 * _16586]
                        mem[mem[64] + 32] = (32 * _16586) + 160
                        _17433 = mem[_9883]
                        mem[mem[64] + (32 * _16586) + 160] = mem[_9883]
                        mem[mem[64] + (32 * _16586) + 192 len 32 * _17433] = mem[_9883 + 32 len 32 * _17433]
                        var153001 = _17433
                        mem[mem[64] + 64] = (32 * _16586) + (32 * _17433) + 192
                        _18081 = mem[_12665]
                        mem[mem[64] + (32 * _16586) + (32 * _17433) + 192] = mem[_12665]
                        mem[mem[64] + (32 * _16586) + (32 * _17433) + 224 len 32 * _18081] = mem[_12665 + 32 len 32 * _18081]
                        mem[mem[64] + 96] = (32 * _16586) + (32 * _17433) + (32 * _18081) + 224
                        _18567 = mem[_15343]
                        mem[mem[64] + (32 * _16586) + (32 * _17433) + (32 * _18081) + 224] = mem[_15343]
                        mem[mem[64] + (32 * _16586) + (32 * _17433) + (32 * _18081) + 256 len 32 * _18567] = mem[_15343 + 32 len 32 * _18567]
                        var163001 = _18567
                        return 128, 
                               (32 * _16586) + 160,
                               (32 * _16586) + (32 * _17433) + 192,
                               (32 * _16586) + (32 * _17433) + (32 * _18081) + 224,
                               mem[mem[64] + 128 len (32 * _16586) + (32 * _17433) + (32 * _18081) + (32 * _18567) + 128]
                    _15279 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _15344 = mem[_15279]
                    require mem[_15279] <= test266151307()
                    require _15279 + return_data.size > _15279 + mem[_15279] + 31
                    _15398 = mem[_15279 + mem[_15279]]
                    if mem[_15279 + mem[_15279]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_15279 + mem[_15279]]) + 1 < 0 or _15279 + ceil32(return_data.size) + ceil32(32 * mem[_15279 + mem[_15279]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _15279 + ceil32(return_data.size) + ceil32(32 * mem[_15279 + mem[_15279]]) + 1
                    mem[_15279 + ceil32(return_data.size)] = _15398
                    require _15344 + (32 * _15398) + 32 <= return_data.size
                    mem[_15279 + ceil32(return_data.size) + 32 len ceil32(32 * _15398)] = mem[_15279 + _15344 + 32 len ceil32(32 * _15398)]
                    _16629 = mem[64]
                    mem[mem[64]] = 128
                    _16710 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16710] = mem[_7065 + 32 len 32 * _16710]
                    mem[mem[64] + 32] = (32 * _16710) + 160
                    _17434 = mem[_9883]
                    mem[mem[64] + (32 * _16710) + 160] = mem[_9883]
                    mem[mem[64] + (32 * _16710) + 192 len 32 * _17434] = mem[_9883 + 32 len 32 * _17434]
                    var163001 = _17434
                    mem[mem[64] + 64] = (32 * _16710) + (32 * _17434) + 192
                    _18082 = mem[_12665]
                    mem[_16629 + (32 * _16710) + (32 * _17434) + 192] = mem[_12665]
                    mem[_16629 + (32 * _16710) + (32 * _17434) + 224 len 32 * _18082] = mem[_12665 + 32 len 32 * _18082]
                    mem[_16629 + 96] = (32 * _16710) + (32 * _17434) + (32 * _18082) + 224
                    mem[_16629 + (32 * _16710) + (32 * _17434) + (32 * _18082) + 224] = _15398
                    mem[_16629 + (32 * _16710) + (32 * _17434) + (32 * _18082) + 256 len 32 * _15398] = mem[_15279 + ceil32(return_data.size) + 32 len 32 * _15398]
                    return memory
                      from mem[64]
                       len _16629 + (32 * _16710) + (32 * _17434) + (32 * _18082) + (32 * _15398) + -mem[64] + 256
                _12644 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _12666 = mem[_12644]
                require mem[_12644] <= test266151307()
                require _12644 + return_data.size > _12644 + mem[_12644] + 31
                _12684 = mem[_12644 + mem[_12644]]
                if mem[_12644 + mem[_12644]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_12644 + mem[_12644]]) + 1 < 0 or _12644 + ceil32(return_data.size) + ceil32(32 * mem[_12644 + mem[_12644]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _12644 + ceil32(return_data.size) + ceil32(32 * mem[_12644 + mem[_12644]]) + 1
                mem[_12644 + ceil32(return_data.size)] = _12684
                require _12666 + (32 * _12684) + 32 <= return_data.size
                mem[_12644 + ceil32(return_data.size) + 32 len ceil32(32 * _12684)] = mem[_12644 + _12666 + 32 len ceil32(32 * _12684)]
                var128002 = _12644 + ceil32(return_data.size) + ceil32(32 * _12684) + 32
                _14039 = mem[64]
                mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _14066 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                t = mem[64] + 100
                while idx < _14066:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _14039 + (32 * _14066) + -mem[64] + 96]
                if not ext_call.success:
                    _15307 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                        revert with 0, 65
                    _15345 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[64] = mem[64] + (32 * _15307) + 32
                    if not _15307:
                        _16398 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16398:
                            if idx >= mem[_15345]:
                                revert with 0, 50
                            mem[(32 * idx) + _15345 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16398 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        _16533 = mem[64]
                        mem[mem[64]] = 128
                        _16587 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16587] = mem[_7065 + 32 len 32 * _16587]
                        mem[mem[64] + 32] = (32 * _16587) + 160
                        _17435 = mem[_9883]
                        mem[mem[64] + (32 * _16587) + 160] = mem[_9883]
                        mem[mem[64] + (32 * _16587) + 192 len 32 * _17435] = mem[_9883 + 32 len 32 * _17435]
                        mem[mem[64] + 64] = (32 * _16587) + (32 * _17435) + 192
                        _18083 = mem[_12644 + ceil32(return_data.size)]
                        mem[_16533 + (32 * _16587) + (32 * _17435) + 192] = mem[_12644 + ceil32(return_data.size)]
                        mem[_16533 + (32 * _16587) + (32 * _17435) + 224 len 32 * _18083] = mem[_12644 + ceil32(return_data.size) + 32 len 32 * _18083]
                        mem[_16533 + 96] = (32 * _16587) + (32 * _17435) + (32 * _18083) + 224
                        _18569 = mem[_15345]
                        mem[_16533 + (32 * _16587) + (32 * _17435) + (32 * _18083) + 224] = mem[_15345]
                        mem[_16533 + (32 * _16587) + (32 * _17435) + (32 * _18083) + 256 len 32 * _18569] = mem[_15345 + 32 len 32 * _18569]
                        return memory
                          from mem[64]
                           len _16533 + (32 * _16587) + (32 * _17435) + (32 * _18083) + (32 * _18569) + -mem[64] + 256
                    mem[_15345 + 32 len 32 * _15307] = call.data[calldata.size len 32 * _15307]
                    _16399 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16399:
                        if idx >= mem[_15345]:
                            revert with 0, 50
                        mem[(32 * idx) + _15345 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16399 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    _16534 = mem[64]
                    mem[mem[64]] = 128
                    _16588 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16588] = mem[_7065 + 32 len 32 * _16588]
                    mem[mem[64] + 32] = (32 * _16588) + 160
                    _17436 = mem[_9883]
                    mem[mem[64] + (32 * _16588) + 160] = mem[_9883]
                    mem[mem[64] + (32 * _16588) + 192 len 32 * _17436] = mem[_9883 + 32 len 32 * _17436]
                    var163001 = _17436
                    mem[mem[64] + 64] = (32 * _16588) + (32 * _17436) + 192
                    _18084 = mem[_12644 + ceil32(return_data.size)]
                    mem[_16534 + (32 * _16588) + (32 * _17436) + 192] = mem[_12644 + ceil32(return_data.size)]
                    mem[_16534 + (32 * _16588) + (32 * _17436) + 224 len 32 * _18084] = mem[_12644 + ceil32(return_data.size) + 32 len 32 * _18084]
                    mem[_16534 + 96] = (32 * _16588) + (32 * _17436) + (32 * _18084) + 224
                    _18570 = mem[_15345]
                    mem[_16534 + (32 * _16588) + (32 * _17436) + (32 * _18084) + 224] = mem[_15345]
                    mem[_16534 + (32 * _16588) + (32 * _17436) + (32 * _18084) + 256 len 32 * _18570] = mem[_15345 + 32 len 32 * _18570]
                    return memory
                      from mem[64]
                       len _16534 + (32 * _16588) + (32 * _17436) + (32 * _18084) + (32 * _18570) + -mem[64] + 256
                _15280 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _15346 = mem[_15280]
                require mem[_15280] <= test266151307()
                require _15280 + return_data.size > _15280 + mem[_15280] + 31
                _15400 = mem[_15280 + mem[_15280]]
                if mem[_15280 + mem[_15280]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_15280 + mem[_15280]]) + 1 < 0 or _15280 + ceil32(return_data.size) + ceil32(32 * mem[_15280 + mem[_15280]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _15280 + ceil32(return_data.size) + ceil32(32 * mem[_15280 + mem[_15280]]) + 1
                mem[_15280 + ceil32(return_data.size)] = _15400
                require _15346 + (32 * _15400) + 32 <= return_data.size
                mem[_15280 + ceil32(return_data.size) + 32 len ceil32(32 * _15400)] = mem[_15280 + _15346 + 32 len ceil32(32 * _15400)]
                mem[mem[64]] = 128
                _16711 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16711] = mem[_7065 + 32 len 32 * _16711]
                mem[mem[64] + 32] = (32 * _16711) + 160
                _17437 = mem[_9883]
                mem[mem[64] + (32 * _16711) + 160] = mem[_9883]
                mem[mem[64] + (32 * _16711) + 192 len 32 * _17437] = mem[_9883 + 32 len 32 * _17437]
                mem[mem[64] + 64] = (32 * _16711) + (32 * _17437) + 192
                _18085 = mem[_12644 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16711) + (32 * _17437) + 192] = mem[_12644 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16711) + (32 * _17437) + 224 len 32 * _18085] = mem[_12644 + ceil32(return_data.size) + 32 len 32 * _18085]
                mem[mem[64] + 96] = (32 * _16711) + (32 * _17437) + (32 * _18085) + 224
                mem[mem[64] + (32 * _16711) + (32 * _17437) + (32 * _18085) + 224] = _15400
                mem[mem[64] + (32 * _16711) + (32 * _17437) + (32 * _18085) + 256 len 32 * _15400] = mem[_15280 + ceil32(return_data.size) + 32 len 32 * _15400]
                return Array(len=mem[mem[64] + 128 len (32 * _16711) + (32 * _17437) + (32 * _18085) + 96], data=_15400, mem[mem[64] + (32 * _16711) + (32 * _17437) + (32 * _18085) + 256 len 32 * _15400]), 
                       (32 * _16711) + 160,
                       (32 * _16711) + (32 * _17437) + 192,
                       (32 * _16711) + (32 * _17437) + (32 * _18085) + 224
            mem[_9883 + 32 len 32 * _9879] = call.data[calldata.size len 32 * _9879]
            _11261 = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            while idx < _11261:
                if idx >= mem[_9883]:
                    revert with 0, 50
                mem[(32 * idx) + _9883 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _11261 = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = idx + 1
                continue 
            _11276 = mem[64]
            mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _11282 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
            t = mem[64] + 100
            while idx < _11282:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _11276 + (32 * _11282) + -mem[64] + 96]
            if not ext_call.success:
                _12654 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
                    revert with 0, 65
                _12667 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                mem[64] = mem[64] + (32 * _12654) + 32
                if not _12654:
                    _13963 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = 0
                    while idx < _13963:
                        if idx >= mem[_12667]:
                            revert with 0, 50
                        mem[(32 * idx) + _12667 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _13963 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        idx = idx + 1
                        continue 
                    mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 64
                    _14026 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                    t = mem[64] + 100
                    while idx < _14026:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args cd[36], 64, mem[mem[64] + 68 len (32 * _14026) + 32]
                    if not ext_call.success:
                        _15308 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                            revert with 0, 65
                        _15347 = mem[64]
                        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[64] = mem[64] + (32 * _15308) + 32
                        if not _15308:
                            _16400 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16400:
                                if idx >= mem[_15347]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15347 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16400 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            _16535 = mem[64]
                            mem[mem[64]] = 128
                            _16589 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16589] = mem[_7065 + 32 len 32 * _16589]
                            mem[mem[64] + 32] = (32 * _16589) + 160
                            _17438 = mem[_9883]
                            mem[mem[64] + (32 * _16589) + 160] = mem[_9883]
                            mem[mem[64] + (32 * _16589) + 192 len 32 * _17438] = mem[_9883 + 32 len 32 * _17438]
                            var152001 = _17438
                            mem[mem[64] + 64] = (32 * _16589) + (32 * _17438) + 192
                            _18086 = mem[_12667]
                            mem[_16535 + (32 * _16589) + (32 * _17438) + 192] = mem[_12667]
                            mem[_16535 + (32 * _16589) + (32 * _17438) + 224 len 32 * _18086] = mem[_12667 + 32 len 32 * _18086]
                            mem[_16535 + 96] = (32 * _16589) + (32 * _17438) + (32 * _18086) + 224
                            _18572 = mem[_15347]
                            mem[_16535 + (32 * _16589) + (32 * _17438) + (32 * _18086) + 224] = mem[_15347]
                            mem[_16535 + (32 * _16589) + (32 * _17438) + (32 * _18086) + 256 len 32 * _18572] = mem[_15347 + 32 len 32 * _18572]
                            return memory
                              from mem[64]
                               len _16535 + (32 * _16589) + (32 * _17438) + (32 * _18086) + (32 * _18572) + -mem[64] + 256
                        mem[_15347 + 32 len 32 * _15308] = call.data[calldata.size len 32 * _15308]
                        _16401 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16401:
                            if idx >= mem[_15347]:
                                revert with 0, 50
                            mem[(32 * idx) + _15347 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16401 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        _16536 = mem[64]
                        mem[mem[64]] = 128
                        _16590 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16590] = mem[_7065 + 32 len 32 * _16590]
                        mem[mem[64] + 32] = (32 * _16590) + 160
                        _17439 = mem[_9883]
                        mem[mem[64] + (32 * _16590) + 160] = mem[_9883]
                        mem[mem[64] + (32 * _16590) + 192 len 32 * _17439] = mem[_9883 + 32 len 32 * _17439]
                        var153001 = _17439
                        mem[mem[64] + 64] = (32 * _16590) + (32 * _17439) + 192
                        _18087 = mem[_12667]
                        mem[_16536 + (32 * _16590) + (32 * _17439) + 192] = mem[_12667]
                        mem[_16536 + (32 * _16590) + (32 * _17439) + 224 len 32 * _18087] = mem[_12667 + 32 len 32 * _18087]
                        mem[_16536 + 96] = (32 * _16590) + (32 * _17439) + (32 * _18087) + 224
                        _18573 = mem[_15347]
                        mem[_16536 + (32 * _16590) + (32 * _17439) + (32 * _18087) + 224] = mem[_15347]
                        mem[_16536 + (32 * _16590) + (32 * _17439) + (32 * _18087) + 256 len 32 * _18573] = mem[_15347 + 32 len 32 * _18573]
                        var163001 = _18573
                        return memory
                          from mem[64]
                           len _16536 + (32 * _16590) + (32 * _17439) + (32 * _18087) + (32 * _18573) + -mem[64] + 256
                    _15281 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _15348 = mem[_15281]
                    require mem[_15281] <= test266151307()
                    require _15281 + return_data.size > _15281 + mem[_15281] + 31
                    _15402 = mem[_15281 + mem[_15281]]
                    if mem[_15281 + mem[_15281]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_15281 + mem[_15281]]) + 1 < 0 or _15281 + ceil32(return_data.size) + ceil32(32 * mem[_15281 + mem[_15281]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _15281 + ceil32(return_data.size) + ceil32(32 * mem[_15281 + mem[_15281]]) + 1
                    mem[_15281 + ceil32(return_data.size)] = _15402
                    require _15348 + (32 * _15402) + 32 <= return_data.size
                    mem[_15281 + ceil32(return_data.size) + 32 len ceil32(32 * _15402)] = mem[_15281 + _15348 + 32 len ceil32(32 * _15402)]
                    mem[mem[64]] = 128
                    _16712 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16712] = mem[_7065 + 32 len 32 * _16712]
                    mem[mem[64] + 32] = (32 * _16712) + 160
                    _17440 = mem[_9883]
                    mem[mem[64] + (32 * _16712) + 160] = mem[_9883]
                    mem[mem[64] + (32 * _16712) + 192 len 32 * _17440] = mem[_9883 + 32 len 32 * _17440]
                    var163001 = _17440
                    mem[mem[64] + 64] = (32 * _16712) + (32 * _17440) + 192
                    _18088 = mem[_12667]
                    mem[mem[64] + (32 * _16712) + (32 * _17440) + 192] = mem[_12667]
                    mem[mem[64] + (32 * _16712) + (32 * _17440) + 224 len 32 * _18088] = mem[_12667 + 32 len 32 * _18088]
                    mem[mem[64] + 96] = (32 * _16712) + (32 * _17440) + (32 * _18088) + 224
                    mem[mem[64] + (32 * _16712) + (32 * _17440) + (32 * _18088) + 224] = _15402
                    mem[mem[64] + (32 * _16712) + (32 * _17440) + (32 * _18088) + 256 len 32 * _15402] = mem[_15281 + ceil32(return_data.size) + 32 len 32 * _15402]
                    return Array(len=mem[mem[64] + 128 len (32 * _16712) + (32 * _17440) + (32 * _18088) + 96], data=_15402, mem[mem[64] + (32 * _16712) + (32 * _17440) + (32 * _18088) + 256 len 32 * _15402]), 
                           (32 * _16712) + 160,
                           (32 * _16712) + (32 * _17440) + 192,
                           (32 * _16712) + (32 * _17440) + (32 * _18088) + 224
                mem[_12667 + 32 len 32 * _12654] = call.data[calldata.size len 32 * _12654]
                _13964 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = 0
                while idx < _13964:
                    if idx >= mem[_12667]:
                        revert with 0, 50
                    mem[(32 * idx) + _12667 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _13964 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = idx + 1
                    continue 
                mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _14027 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                t = mem[64] + 100
                while idx < _14027:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args cd[36], 64, mem[mem[64] + 68 len (32 * _14027) + 32]
                if not ext_call.success:
                    _15309 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                        revert with 0, 65
                    _15349 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[64] = mem[64] + (32 * _15309) + 32
                    if not _15309:
                        _16402 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16402:
                            if idx >= mem[_15349]:
                                revert with 0, 50
                            mem[(32 * idx) + _15349 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16402 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16591 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16591] = mem[_7065 + 32 len 32 * _16591]
                        mem[mem[64] + 32] = (32 * _16591) + 160
                        _17441 = mem[_9883]
                        mem[mem[64] + (32 * _16591) + 160] = mem[_9883]
                        mem[mem[64] + (32 * _16591) + 192 len 32 * _17441] = mem[_9883 + 32 len 32 * _17441]
                        var153001 = _17441
                        mem[mem[64] + 64] = (32 * _16591) + (32 * _17441) + 192
                        _18089 = mem[_12667]
                        mem[mem[64] + (32 * _16591) + (32 * _17441) + 192] = mem[_12667]
                        mem[mem[64] + (32 * _16591) + (32 * _17441) + 224 len 32 * _18089] = mem[_12667 + 32 len 32 * _18089]
                        mem[mem[64] + 96] = (32 * _16591) + (32 * _17441) + (32 * _18089) + 224
                        _18575 = mem[_15349]
                        mem[mem[64] + (32 * _16591) + (32 * _17441) + (32 * _18089) + 224] = mem[_15349]
                        mem[mem[64] + (32 * _16591) + (32 * _17441) + (32 * _18089) + 256 len 32 * _18575] = mem[_15349 + 32 len 32 * _18575]
                        var163001 = _18575
                        return 128, 
                               (32 * _16591) + 160,
                               (32 * _16591) + (32 * _17441) + 192,
                               (32 * _16591) + (32 * _17441) + (32 * _18089) + 224,
                               mem[mem[64] + 128 len (32 * _16591) + (32 * _17441) + (32 * _18089) + (32 * _18575) + 128]
                    mem[_15349 + 32 len 32 * _15309] = call.data[calldata.size len 32 * _15309]
                    _16403 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16403:
                        if idx >= mem[_15349]:
                            revert with 0, 50
                        mem[(32 * idx) + _15349 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16403 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    _16538 = mem[64]
                    mem[mem[64]] = 128
                    _16592 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16592] = mem[_7065 + 32 len 32 * _16592]
                    var149001 = _16592
                    var149002 = _7065 + (32 * _16592) + 32
                    var149007 = mem[64] + (32 * _16592) + 160
                    mem[mem[64] + 32] = (32 * _16592) + 160
                    _17442 = mem[_9883]
                    mem[mem[64] + (32 * _16592) + 160] = mem[_9883]
                    mem[mem[64] + (32 * _16592) + 192 len 32 * _17442] = mem[_9883 + 32 len 32 * _17442]
                    var154001 = _17442
                    mem[mem[64] + 64] = (32 * _16592) + (32 * _17442) + 192
                    _18090 = mem[_12667]
                    mem[_16538 + (32 * _16592) + (32 * _17442) + 192] = mem[_12667]
                    mem[_16538 + (32 * _16592) + (32 * _17442) + 224 len 32 * _18090] = mem[_12667 + 32 len 32 * _18090]
                    mem[_16538 + 96] = (32 * _16592) + (32 * _17442) + (32 * _18090) + 224
                    _18576 = mem[_15349]
                    mem[_16538 + (32 * _16592) + (32 * _17442) + (32 * _18090) + 224] = mem[_15349]
                    mem[_16538 + (32 * _16592) + (32 * _17442) + (32 * _18090) + 256 len 32 * _18576] = mem[_15349 + 32 len 32 * _18576]
                    var164001 = _18576
                    return memory
                      from mem[64]
                       len _16538 + (32 * _16592) + (32 * _17442) + (32 * _18090) + (32 * _18576) + -mem[64] + 256
                _15282 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _15350 = mem[_15282]
                require mem[_15282] <= test266151307()
                require _15282 + return_data.size > _15282 + mem[_15282] + 31
                _15404 = mem[_15282 + mem[_15282]]
                if mem[_15282 + mem[_15282]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_15282 + mem[_15282]]) + 1 < 0 or _15282 + ceil32(return_data.size) + ceil32(32 * mem[_15282 + mem[_15282]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _15282 + ceil32(return_data.size) + ceil32(32 * mem[_15282 + mem[_15282]]) + 1
                mem[_15282 + ceil32(return_data.size)] = _15404
                require _15350 + (32 * _15404) + 32 <= return_data.size
                mem[_15282 + ceil32(return_data.size) + 32 len ceil32(32 * _15404)] = mem[_15282 + _15350 + 32 len ceil32(32 * _15404)]
                _16632 = mem[64]
                mem[mem[64]] = 128
                _16713 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16713] = mem[_7065 + 32 len 32 * _16713]
                mem[mem[64] + 32] = (32 * _16713) + 160
                _17443 = mem[_9883]
                mem[mem[64] + (32 * _16713) + 160] = mem[_9883]
                mem[mem[64] + (32 * _16713) + 192 len 32 * _17443] = mem[_9883 + 32 len 32 * _17443]
                var164001 = _17443
                mem[mem[64] + 64] = (32 * _16713) + (32 * _17443) + 192
                _18091 = mem[_12667]
                mem[_16632 + (32 * _16713) + (32 * _17443) + 192] = mem[_12667]
                mem[_16632 + (32 * _16713) + (32 * _17443) + 224 len 32 * _18091] = mem[_12667 + 32 len 32 * _18091]
                mem[_16632 + 96] = (32 * _16713) + (32 * _17443) + (32 * _18091) + 224
                mem[_16632 + (32 * _16713) + (32 * _17443) + (32 * _18091) + 224] = _15404
                mem[_16632 + (32 * _16713) + (32 * _17443) + (32 * _18091) + 256 len 32 * _15404] = mem[_15282 + ceil32(return_data.size) + 32 len 32 * _15404]
                var174001 = _15404
                return memory
                  from mem[64]
                   len _16632 + (32 * _16713) + (32 * _17443) + (32 * _18091) + (32 * _15404) + -mem[64] + 256
            _12645 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _12668 = mem[_12645]
            require mem[_12645] <= test266151307()
            require _12645 + return_data.size > _12645 + mem[_12645] + 31
            _12686 = mem[_12645 + mem[_12645]]
            if mem[_12645 + mem[_12645]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_12645 + mem[_12645]]) + 1 < 0 or _12645 + ceil32(return_data.size) + ceil32(32 * mem[_12645 + mem[_12645]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _12645 + ceil32(return_data.size) + ceil32(32 * mem[_12645 + mem[_12645]]) + 1
            mem[_12645 + ceil32(return_data.size)] = _12686
            require _12668 + (32 * _12686) + 32 <= return_data.size
            mem[_12645 + ceil32(return_data.size) + 32 len ceil32(32 * _12686)] = mem[_12645 + _12668 + 32 len ceil32(32 * _12686)]
            var129002 = _12645 + ceil32(return_data.size) + ceil32(32 * _12686) + 32
            _14040 = mem[64]
            mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _14067 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
            t = mem[64] + 100
            while idx < _14067:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _14040 + (32 * _14067) + -mem[64] + 96]
            if not ext_call.success:
                _15310 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                    revert with 0, 65
                _15351 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[64] = mem[64] + (32 * _15310) + 32
                if not _15310:
                    _16404 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16404:
                        if idx >= mem[_15351]:
                            revert with 0, 50
                        mem[(32 * idx) + _15351 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16404 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    mem[mem[64]] = 128
                    _16593 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16593] = mem[_7065 + 32 len 32 * _16593]
                    mem[mem[64] + 32] = (32 * _16593) + 160
                    _17444 = mem[_9883]
                    mem[mem[64] + (32 * _16593) + 160] = mem[_9883]
                    mem[mem[64] + (32 * _16593) + 192 len 32 * _17444] = mem[_9883 + 32 len 32 * _17444]
                    var163001 = _17444
                    mem[mem[64] + 64] = (32 * _16593) + (32 * _17444) + 192
                    _18092 = mem[_12645 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16593) + (32 * _17444) + 192] = mem[_12645 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16593) + (32 * _17444) + 224 len 32 * _18092] = mem[_12645 + ceil32(return_data.size) + 32 len 32 * _18092]
                    mem[mem[64] + 96] = (32 * _16593) + (32 * _17444) + (32 * _18092) + 224
                    _18578 = mem[_15351]
                    mem[mem[64] + (32 * _16593) + (32 * _17444) + (32 * _18092) + 224] = mem[_15351]
                    mem[mem[64] + (32 * _16593) + (32 * _17444) + (32 * _18092) + 256 len 32 * _18578] = mem[_15351 + 32 len 32 * _18578]
                    return 128, 
                           (32 * _16593) + 160,
                           (32 * _16593) + (32 * _17444) + 192,
                           (32 * _16593) + (32 * _17444) + (32 * _18092) + 224,
                           mem[mem[64] + 128 len (32 * _16593) + (32 * _17444) + (32 * _18092) + (32 * _18578) + 128]
                mem[_15351 + 32 len 32 * _15310] = call.data[calldata.size len 32 * _15310]
                _16405 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16405:
                    if idx >= mem[_15351]:
                        revert with 0, 50
                    mem[(32 * idx) + _15351 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16405 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                _16540 = mem[64]
                mem[mem[64]] = 128
                _16594 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16594] = mem[_7065 + 32 len 32 * _16594]
                mem[mem[64] + 32] = (32 * _16594) + 160
                _17445 = mem[_9883]
                mem[mem[64] + (32 * _16594) + 160] = mem[_9883]
                mem[mem[64] + (32 * _16594) + 192 len 32 * _17445] = mem[_9883 + 32 len 32 * _17445]
                var164001 = _17445
                mem[mem[64] + 64] = (32 * _16594) + (32 * _17445) + 192
                _18093 = mem[_12645 + ceil32(return_data.size)]
                mem[_16540 + (32 * _16594) + (32 * _17445) + 192] = mem[_12645 + ceil32(return_data.size)]
                mem[_16540 + (32 * _16594) + (32 * _17445) + 224 len 32 * _18093] = mem[_12645 + ceil32(return_data.size) + 32 len 32 * _18093]
                mem[_16540 + 96] = (32 * _16594) + (32 * _17445) + (32 * _18093) + 224
                _18579 = mem[_15351]
                mem[_16540 + (32 * _16594) + (32 * _17445) + (32 * _18093) + 224] = mem[_15351]
                mem[_16540 + (32 * _16594) + (32 * _17445) + (32 * _18093) + 256 len 32 * _18579] = mem[_15351 + 32 len 32 * _18579]
                var174001 = _18579
                return memory
                  from mem[64]
                   len _16540 + (32 * _16594) + (32 * _17445) + (32 * _18093) + (32 * _18579) + -mem[64] + 256
            _15283 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _15352 = mem[_15283]
            require mem[_15283] <= test266151307()
            require _15283 + return_data.size > _15283 + mem[_15283] + 31
            _15406 = mem[_15283 + mem[_15283]]
            if mem[_15283 + mem[_15283]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_15283 + mem[_15283]]) + 1 < 0 or _15283 + ceil32(return_data.size) + ceil32(32 * mem[_15283 + mem[_15283]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _15283 + ceil32(return_data.size) + ceil32(32 * mem[_15283 + mem[_15283]]) + 1
            mem[_15283 + ceil32(return_data.size)] = _15406
            require _15352 + (32 * _15406) + 32 <= return_data.size
            mem[_15283 + ceil32(return_data.size) + 32 len ceil32(32 * _15406)] = mem[_15283 + _15352 + 32 len ceil32(32 * _15406)]
            _16633 = mem[64]
            mem[mem[64]] = 128
            _16714 = mem[_7065]
            mem[mem[64] + 128] = mem[_7065]
            mem[mem[64] + 160 len 32 * _16714] = mem[_7065 + 32 len 32 * _16714]
            mem[mem[64] + 32] = (32 * _16714) + 160
            _17446 = mem[_9883]
            mem[mem[64] + (32 * _16714) + 160] = mem[_9883]
            mem[mem[64] + (32 * _16714) + 192 len 32 * _17446] = mem[_9883 + 32 len 32 * _17446]
            var174001 = _17446
            mem[mem[64] + 64] = (32 * _16714) + (32 * _17446) + 192
            _18094 = mem[_12645 + ceil32(return_data.size)]
            mem[_16633 + (32 * _16714) + (32 * _17446) + 192] = mem[_12645 + ceil32(return_data.size)]
            mem[_16633 + (32 * _16714) + (32 * _17446) + 224 len 32 * _18094] = mem[_12645 + ceil32(return_data.size) + 32 len 32 * _18094]
            mem[_16633 + 96] = (32 * _16714) + (32 * _17446) + (32 * _18094) + 224
            mem[_16633 + (32 * _16714) + (32 * _17446) + (32 * _18094) + 224] = _15406
            mem[_16633 + (32 * _16714) + (32 * _17446) + (32 * _18094) + 256 len 32 * _15406] = mem[_15283 + ceil32(return_data.size) + 32 len 32 * _15406]
            return memory
              from mem[64]
               len _16633 + (32 * _16714) + (32 * _17446) + (32 * _18094) + (32 * _15406) + -mem[64] + 256
        _9876 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _9884 = mem[_9876]
        require mem[_9876] <= test266151307()
        require _9876 + return_data.size > _9876 + mem[_9876] + 31
        _9890 = mem[_9876 + mem[_9876]]
        if mem[_9876 + mem[_9876]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_9876 + mem[_9876]]) + 1 < 0 or _9876 + ceil32(return_data.size) + ceil32(32 * mem[_9876 + mem[_9876]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _9876 + ceil32(return_data.size) + ceil32(32 * mem[_9876 + mem[_9876]]) + 1
        mem[_9876 + ceil32(return_data.size)] = _9890
        require _9884 + (32 * _9890) + 32 <= return_data.size
        mem[_9876 + ceil32(return_data.size) + 32 len ceil32(32 * _9890)] = mem[_9876 + _9884 + 32 len ceil32(32 * _9890)]
        var110002 = _9876 + ceil32(return_data.size) + ceil32(32 * _9890) + 32
        _11286 = mem[64]
        mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = cd[36]
        mem[mem[64] + 36] = 64
        _11295 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
        t = mem[64] + 100
        while idx < _11295:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _11286 + (32 * _11295) + -mem[64] + 96]
        if not ext_call.success:
            _12655 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
                revert with 0, 65
            _12669 = mem[64]
            mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            mem[64] = mem[64] + (32 * _12655) + 32
            if not _12655:
                _13965 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = 0
                while idx < _13965:
                    if idx >= mem[_12669]:
                        revert with 0, 50
                    mem[(32 * idx) + _12669 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _13965 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = idx + 1
                    continue 
                _14010 = mem[64]
                mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _14028 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                t = mem[64] + 100
                while idx < _14028:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _14010 + (32 * _14028) + -mem[64] + 96]
                if not ext_call.success:
                    _15311 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                        revert with 0, 65
                    _15353 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[64] = mem[64] + (32 * _15311) + 32
                    if not _15311:
                        _16406 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16406:
                            if idx >= mem[_15353]:
                                revert with 0, 50
                            mem[(32 * idx) + _15353 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16406 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16595 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16595] = mem[_7065 + 32 len 32 * _16595]
                        mem[mem[64] + 32] = (32 * _16595) + 160
                        _17447 = mem[_9876 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16595) + 160] = mem[_9876 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16595) + 192 len 32 * _17447] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17447]
                        mem[mem[64] + 64] = (32 * _16595) + (32 * _17447) + 192
                        _18095 = mem[_12669]
                        mem[mem[64] + (32 * _16595) + (32 * _17447) + 192] = mem[_12669]
                        mem[mem[64] + (32 * _16595) + (32 * _17447) + 224 len 32 * _18095] = mem[_12669 + 32 len 32 * _18095]
                        mem[mem[64] + 96] = (32 * _16595) + (32 * _17447) + (32 * _18095) + 224
                        _18581 = mem[_15353]
                        mem[mem[64] + (32 * _16595) + (32 * _17447) + (32 * _18095) + 224] = mem[_15353]
                        mem[mem[64] + (32 * _16595) + (32 * _17447) + (32 * _18095) + 256 len 32 * _18581] = mem[_15353 + 32 len 32 * _18581]
                        return 128, 
                               (32 * _16595) + 160,
                               (32 * _16595) + (32 * _17447) + 192,
                               (32 * _16595) + (32 * _17447) + (32 * _18095) + 224,
                               mem[mem[64] + 128 len (32 * _16595) + (32 * _17447) + (32 * _18095) + (32 * _18581) + 128]
                    mem[_15353 + 32 len 32 * _15311] = call.data[calldata.size len 32 * _15311]
                    _16407 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16407:
                        if idx >= mem[_15353]:
                            revert with 0, 50
                        mem[(32 * idx) + _15353 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16407 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    mem[mem[64]] = 128
                    _16596 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16596] = mem[_7065 + 32 len 32 * _16596]
                    mem[mem[64] + 32] = (32 * _16596) + 160
                    _17448 = mem[_9876 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16596) + 160] = mem[_9876 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16596) + 192 len 32 * _17448] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17448]
                    var163001 = _17448
                    mem[mem[64] + 64] = (32 * _16596) + (32 * _17448) + 192
                    _18096 = mem[_12669]
                    mem[mem[64] + (32 * _16596) + (32 * _17448) + 192] = mem[_12669]
                    mem[mem[64] + (32 * _16596) + (32 * _17448) + 224 len 32 * _18096] = mem[_12669 + 32 len 32 * _18096]
                    mem[mem[64] + 96] = (32 * _16596) + (32 * _17448) + (32 * _18096) + 224
                    _18582 = mem[_15353]
                    mem[mem[64] + (32 * _16596) + (32 * _17448) + (32 * _18096) + 224] = mem[_15353]
                    mem[mem[64] + (32 * _16596) + (32 * _17448) + (32 * _18096) + 256 len 32 * _18582] = mem[_15353 + 32 len 32 * _18582]
                    return 128, 
                           (32 * _16596) + 160,
                           (32 * _16596) + (32 * _17448) + 192,
                           (32 * _16596) + (32 * _17448) + (32 * _18096) + 224,
                           mem[mem[64] + 128 len (32 * _16596) + (32 * _17448) + (32 * _18096) + (32 * _18582) + 128]
                _15284 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _15354 = mem[_15284]
                require mem[_15284] <= test266151307()
                require _15284 + return_data.size > _15284 + mem[_15284] + 31
                _15408 = mem[_15284 + mem[_15284]]
                if mem[_15284 + mem[_15284]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_15284 + mem[_15284]]) + 1 < 0 or _15284 + ceil32(return_data.size) + ceil32(32 * mem[_15284 + mem[_15284]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _15284 + ceil32(return_data.size) + ceil32(32 * mem[_15284 + mem[_15284]]) + 1
                mem[_15284 + ceil32(return_data.size)] = _15408
                require _15354 + (32 * _15408) + 32 <= return_data.size
                mem[_15284 + ceil32(return_data.size) + 32 len ceil32(32 * _15408)] = mem[_15284 + _15354 + 32 len ceil32(32 * _15408)]
                _16634 = mem[64]
                mem[mem[64]] = 128
                _16715 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16715] = mem[_7065 + 32 len 32 * _16715]
                mem[mem[64] + 32] = (32 * _16715) + 160
                _17449 = mem[_9876 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16715) + 160] = mem[_9876 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16715) + 192 len 32 * _17449] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17449]
                mem[mem[64] + 64] = (32 * _16715) + (32 * _17449) + 192
                _18097 = mem[_12669]
                mem[_16634 + (32 * _16715) + (32 * _17449) + 192] = mem[_12669]
                mem[_16634 + (32 * _16715) + (32 * _17449) + 224 len 32 * _18097] = mem[_12669 + 32 len 32 * _18097]
                mem[_16634 + 96] = (32 * _16715) + (32 * _17449) + (32 * _18097) + 224
                mem[_16634 + (32 * _16715) + (32 * _17449) + (32 * _18097) + 224] = _15408
                mem[_16634 + (32 * _16715) + (32 * _17449) + (32 * _18097) + 256 len 32 * _15408] = mem[_15284 + ceil32(return_data.size) + 32 len 32 * _15408]
                return memory
                  from mem[64]
                   len _16634 + (32 * _16715) + (32 * _17449) + (32 * _18097) + (32 * _15408) + -mem[64] + 256
            mem[_12669 + 32 len 32 * _12655] = call.data[calldata.size len 32 * _12655]
            _13966 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            idx = 0
            while idx < _13966:
                if idx >= mem[_12669]:
                    revert with 0, 50
                mem[(32 * idx) + _12669 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _13966 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = idx + 1
                continue 
            _14011 = mem[64]
            mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _14029 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
            t = mem[64] + 100
            while idx < _14029:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _14011 + (32 * _14029) + -mem[64] + 96]
            if not ext_call.success:
                _15312 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                    revert with 0, 65
                _15355 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[64] = mem[64] + (32 * _15312) + 32
                if not _15312:
                    _16408 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16408:
                        if idx >= mem[_15355]:
                            revert with 0, 50
                        mem[(32 * idx) + _15355 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16408 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    mem[mem[64]] = 128
                    _16597 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16597] = mem[_7065 + 32 len 32 * _16597]
                    mem[mem[64] + 32] = (32 * _16597) + 160
                    _17450 = mem[_9876 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16597) + 160] = mem[_9876 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16597) + 192 len 32 * _17450] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17450]
                    var163001 = _17450
                    mem[mem[64] + 64] = (32 * _16597) + (32 * _17450) + 192
                    _18098 = mem[_12669]
                    mem[mem[64] + (32 * _16597) + (32 * _17450) + 192] = mem[_12669]
                    mem[mem[64] + (32 * _16597) + (32 * _17450) + 224 len 32 * _18098] = mem[_12669 + 32 len 32 * _18098]
                    mem[mem[64] + 96] = (32 * _16597) + (32 * _17450) + (32 * _18098) + 224
                    _18584 = mem[_15355]
                    mem[mem[64] + (32 * _16597) + (32 * _17450) + (32 * _18098) + 224] = mem[_15355]
                    mem[mem[64] + (32 * _16597) + (32 * _17450) + (32 * _18098) + 256 len 32 * _18584] = mem[_15355 + 32 len 32 * _18584]
                    return 128, 
                           (32 * _16597) + 160,
                           (32 * _16597) + (32 * _17450) + 192,
                           (32 * _16597) + (32 * _17450) + (32 * _18098) + 224,
                           mem[mem[64] + 128 len (32 * _16597) + (32 * _17450) + (32 * _18098) + (32 * _18584) + 128]
                mem[_15355 + 32 len 32 * _15312] = call.data[calldata.size len 32 * _15312]
                _16409 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16409:
                    if idx >= mem[_15355]:
                        revert with 0, 50
                    mem[(32 * idx) + _15355 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16409 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                _16544 = mem[64]
                mem[mem[64]] = 128
                _16598 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16598] = mem[_7065 + 32 len 32 * _16598]
                mem[mem[64] + 32] = (32 * _16598) + 160
                _17451 = mem[_9876 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16598) + 160] = mem[_9876 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16598) + 192 len 32 * _17451] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17451]
                var164001 = _17451
                mem[mem[64] + 64] = (32 * _16598) + (32 * _17451) + 192
                _18099 = mem[_12669]
                mem[_16544 + (32 * _16598) + (32 * _17451) + 192] = mem[_12669]
                mem[_16544 + (32 * _16598) + (32 * _17451) + 224 len 32 * _18099] = mem[_12669 + 32 len 32 * _18099]
                mem[_16544 + 96] = (32 * _16598) + (32 * _17451) + (32 * _18099) + 224
                _18585 = mem[_15355]
                mem[_16544 + (32 * _16598) + (32 * _17451) + (32 * _18099) + 224] = mem[_15355]
                mem[_16544 + (32 * _16598) + (32 * _17451) + (32 * _18099) + 256 len 32 * _18585] = mem[_15355 + 32 len 32 * _18585]
                var174001 = _18585
                return memory
                  from mem[64]
                   len _16544 + (32 * _16598) + (32 * _17451) + (32 * _18099) + (32 * _18585) + -mem[64] + 256
            _15285 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _15356 = mem[_15285]
            require mem[_15285] <= test266151307()
            require _15285 + return_data.size > _15285 + mem[_15285] + 31
            _15410 = mem[_15285 + mem[_15285]]
            if mem[_15285 + mem[_15285]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_15285 + mem[_15285]]) + 1 < 0 or _15285 + ceil32(return_data.size) + ceil32(32 * mem[_15285 + mem[_15285]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _15285 + ceil32(return_data.size) + ceil32(32 * mem[_15285 + mem[_15285]]) + 1
            mem[_15285 + ceil32(return_data.size)] = _15410
            require _15356 + (32 * _15410) + 32 <= return_data.size
            mem[_15285 + ceil32(return_data.size) + 32 len ceil32(32 * _15410)] = mem[_15285 + _15356 + 32 len ceil32(32 * _15410)]
            _16635 = mem[64]
            mem[mem[64]] = 128
            _16716 = mem[_7065]
            mem[mem[64] + 128] = mem[_7065]
            mem[mem[64] + 160 len 32 * _16716] = mem[_7065 + 32 len 32 * _16716]
            mem[mem[64] + 32] = (32 * _16716) + 160
            _17452 = mem[_9876 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16716) + 160] = mem[_9876 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16716) + 192 len 32 * _17452] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17452]
            var174001 = _17452
            mem[mem[64] + 64] = (32 * _16716) + (32 * _17452) + 192
            _18100 = mem[_12669]
            mem[_16635 + (32 * _16716) + (32 * _17452) + 192] = mem[_12669]
            mem[_16635 + (32 * _16716) + (32 * _17452) + 224 len 32 * _18100] = mem[_12669 + 32 len 32 * _18100]
            mem[_16635 + 96] = (32 * _16716) + (32 * _17452) + (32 * _18100) + 224
            mem[_16635 + (32 * _16716) + (32 * _17452) + (32 * _18100) + 224] = _15410
            mem[_16635 + (32 * _16716) + (32 * _17452) + (32 * _18100) + 256 len 32 * _15410] = mem[_15285 + ceil32(return_data.size) + 32 len 32 * _15410]
            return memory
              from mem[64]
               len _16635 + (32 * _16716) + (32 * _17452) + (32 * _18100) + (32 * _15410) + -mem[64] + 256
        _12646 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _12670 = mem[_12646]
        require mem[_12646] <= test266151307()
        require _12646 + return_data.size > _12646 + mem[_12646] + 31
        _12688 = mem[_12646 + mem[_12646]]
        if mem[_12646 + mem[_12646]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_12646 + mem[_12646]]) + 1 < 0 or _12646 + ceil32(return_data.size) + ceil32(32 * mem[_12646 + mem[_12646]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _12646 + ceil32(return_data.size) + ceil32(32 * mem[_12646 + mem[_12646]]) + 1
        mem[_12646 + ceil32(return_data.size)] = _12688
        require _12670 + (32 * _12688) + 32 <= return_data.size
        mem[_12646 + ceil32(return_data.size) + 32 len ceil32(32 * _12688)] = mem[_12646 + _12670 + 32 len ceil32(32 * _12688)]
        var139002 = _12646 + ceil32(return_data.size) + ceil32(32 * _12688) + 32
        mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = cd[36]
        mem[mem[64] + 36] = 64
        _14068 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
        t = mem[64] + 100
        while idx < _14068:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args cd[36], 64, mem[mem[64] + 68 len (32 * _14068) + 32]
        if not ext_call.success:
            _15313 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                revert with 0, 65
            _15357 = mem[64]
            mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[64] = mem[64] + (32 * _15313) + 32
            if not _15313:
                _16410 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16410:
                    if idx >= mem[_15357]:
                        revert with 0, 50
                    mem[(32 * idx) + _15357 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16410 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                _16545 = mem[64]
                mem[mem[64]] = 128
                _16599 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16599] = mem[_7065 + 32 len 32 * _16599]
                mem[mem[64] + 32] = (32 * _16599) + 160
                _17453 = mem[_9876 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16599) + 160] = mem[_9876 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16599) + 192 len 32 * _17453] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17453]
                mem[mem[64] + 64] = (32 * _16599) + (32 * _17453) + 192
                _18101 = mem[_12646 + ceil32(return_data.size)]
                mem[_16545 + (32 * _16599) + (32 * _17453) + 192] = mem[_12646 + ceil32(return_data.size)]
                mem[_16545 + (32 * _16599) + (32 * _17453) + 224 len 32 * _18101] = mem[_12646 + ceil32(return_data.size) + 32 len 32 * _18101]
                mem[_16545 + 96] = (32 * _16599) + (32 * _17453) + (32 * _18101) + 224
                _18587 = mem[_15357]
                mem[_16545 + (32 * _16599) + (32 * _17453) + (32 * _18101) + 224] = mem[_15357]
                mem[_16545 + (32 * _16599) + (32 * _17453) + (32 * _18101) + 256 len 32 * _18587] = mem[_15357 + 32 len 32 * _18587]
                return memory
                  from mem[64]
                   len _16545 + (32 * _16599) + (32 * _17453) + (32 * _18101) + (32 * _18587) + -mem[64] + 256
            mem[_15357 + 32 len 32 * _15313] = call.data[calldata.size len 32 * _15313]
            _16411 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            while idx < _16411:
                if idx >= mem[_15357]:
                    revert with 0, 50
                mem[(32 * idx) + _15357 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _16411 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = idx + 1
                continue 
            mem[mem[64]] = 128
            _16600 = mem[_7065]
            mem[mem[64] + 128] = mem[_7065]
            mem[mem[64] + 160 len 32 * _16600] = mem[_7065 + 32 len 32 * _16600]
            mem[mem[64] + 32] = (32 * _16600) + 160
            _17454 = mem[_9876 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16600) + 160] = mem[_9876 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16600) + 192 len 32 * _17454] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17454]
            var174001 = _17454
            mem[mem[64] + 64] = (32 * _16600) + (32 * _17454) + 192
            _18102 = mem[_12646 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16600) + (32 * _17454) + 192] = mem[_12646 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16600) + (32 * _17454) + 224 len 32 * _18102] = mem[_12646 + ceil32(return_data.size) + 32 len 32 * _18102]
            mem[mem[64] + 96] = (32 * _16600) + (32 * _17454) + (32 * _18102) + 224
            _18588 = mem[_15357]
            mem[mem[64] + (32 * _16600) + (32 * _17454) + (32 * _18102) + 224] = mem[_15357]
            mem[mem[64] + (32 * _16600) + (32 * _17454) + (32 * _18102) + 256 len 32 * _18588] = mem[_15357 + 32 len 32 * _18588]
            return 128, 
                   (32 * _16600) + 160,
                   (32 * _16600) + (32 * _17454) + 192,
                   (32 * _16600) + (32 * _17454) + (32 * _18102) + 224,
                   mem[mem[64] + 128 len (32 * _16600) + (32 * _17454) + (32 * _18102) + (32 * _18588) + 128]
        _15286 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _15358 = mem[_15286]
        require mem[_15286] <= test266151307()
        require _15286 + return_data.size > _15286 + mem[_15286] + 31
        _15412 = mem[_15286 + mem[_15286]]
        if mem[_15286 + mem[_15286]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_15286 + mem[_15286]]) + 1 < 0 or _15286 + ceil32(return_data.size) + ceil32(32 * mem[_15286 + mem[_15286]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _15286 + ceil32(return_data.size) + ceil32(32 * mem[_15286 + mem[_15286]]) + 1
        mem[_15286 + ceil32(return_data.size)] = _15412
        require _15358 + (32 * _15412) + 32 <= return_data.size
        mem[_15286 + ceil32(return_data.size) + 32 len ceil32(32 * _15412)] = mem[_15286 + _15358 + 32 len ceil32(32 * _15412)]
        _16636 = mem[64]
        mem[mem[64]] = 128
        _16717 = mem[_7065]
        mem[mem[64] + 128] = mem[_7065]
        mem[mem[64] + 160 len 32 * _16717] = mem[_7065 + 32 len 32 * _16717]
        mem[mem[64] + 32] = (32 * _16717) + 160
        _17455 = mem[_9876 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _16717) + 160] = mem[_9876 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _16717) + 192 len 32 * _17455] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17455]
        mem[mem[64] + 64] = (32 * _16717) + (32 * _17455) + 192
        _18103 = mem[_12646 + ceil32(return_data.size)]
        mem[_16636 + (32 * _16717) + (32 * _17455) + 192] = mem[_12646 + ceil32(return_data.size)]
        mem[_16636 + (32 * _16717) + (32 * _17455) + 224 len 32 * _18103] = mem[_12646 + ceil32(return_data.size) + 32 len 32 * _18103]
        mem[_16636 + 96] = (32 * _16717) + (32 * _17455) + (32 * _18103) + 224
        mem[_16636 + (32 * _16717) + (32 * _17455) + (32 * _18103) + 224] = _15412
        mem[_16636 + (32 * _16717) + (32 * _17455) + (32 * _18103) + 256 len 32 * _15412] = mem[_15286 + ceil32(return_data.size) + 32 len 32 * _15412]
        return memory
          from mem[64]
           len _16636 + (32 * _16717) + (32 * _17455) + (32 * _18103) + (32 * _15412) + -mem[64] + 256
    _7063 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _7066 = mem[_7063]
    require mem[_7063] <= test266151307()
    require _7063 + return_data.size > _7063 + mem[_7063] + 31
    _7068 = mem[_7063 + mem[_7063]]
    if mem[_7063 + mem[_7063]] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[_7063 + mem[_7063]]) + 1 < 0 or _7063 + ceil32(return_data.size) + ceil32(32 * mem[_7063 + mem[_7063]]) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _7063 + ceil32(return_data.size) + ceil32(32 * mem[_7063 + mem[_7063]]) + 1
    mem[_7063 + ceil32(return_data.size)] = _7068
    require _7066 + (32 * _7068) + 32 <= return_data.size
    mem[_7063 + ceil32(return_data.size) + 32 len ceil32(32 * _7068)] = mem[_7063 + _7066 + 32 len ceil32(32 * _7068)]
    var91002 = _7063 + ceil32(return_data.size) + ceil32(32 * _7068) + 32
    mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = cd[36]
    mem[mem[64] + 36] = 64
    _8481 = mem[ceil32(32 * ('cd', 68).length) + 97]
    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
    idx = 0
    s = ceil32(32 * ('cd', 68).length) + 129
    t = mem[64] + 100
    while idx < _8481:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
            gas gas_remaining wei
           args cd[36], 64, mem[mem[64] + 68 len (32 * _8481) + 32]
    if not ext_call.success:
        _9880 = mem[ceil32(32 * ('cd', 68).length) + 97]
        if mem[ceil32(32 * ('cd', 68).length) + 97] > test266151307():
            revert with 0, 65
        _9885 = mem[64]
        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[64] = mem[64] + (32 * _9880) + 32
        if not _9880:
            _11262 = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            while idx < _11262:
                if idx >= mem[_9885]:
                    revert with 0, 50
                mem[(32 * idx) + _9885 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _11262 = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = idx + 1
                continue 
            mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _11283 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
            t = mem[64] + 100
            while idx < _11283:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args cd[36], 64, mem[mem[64] + 68 len (32 * _11283) + 32]
            if not ext_call.success:
                _12656 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
                    revert with 0, 65
                _12671 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                mem[64] = mem[64] + (32 * _12656) + 32
                if not _12656:
                    _13967 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = 0
                    while idx < _13967:
                        if idx >= mem[_12671]:
                            revert with 0, 50
                        mem[(32 * idx) + _12671 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _13967 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        idx = idx + 1
                        continue 
                    _14012 = mem[64]
                    mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 64
                    _14030 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                    t = mem[64] + 100
                    while idx < _14030:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _14012 + (32 * _14030) + -mem[64] + 96]
                    if not ext_call.success:
                        _15314 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                            revert with 0, 65
                        _15359 = mem[64]
                        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[64] = mem[64] + (32 * _15314) + 32
                        if not _15314:
                            _16412 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16412:
                                if idx >= mem[_15359]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15359 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16412 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            _16547 = mem[64]
                            mem[mem[64]] = 128
                            _16601 = mem[_7063 + ceil32(return_data.size)]
                            mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                            mem[mem[64] + 160 len 32 * _16601] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16601]
                            mem[mem[64] + 32] = (32 * _16601) + 160
                            _17456 = mem[_9885]
                            mem[mem[64] + (32 * _16601) + 160] = mem[_9885]
                            mem[mem[64] + (32 * _16601) + 192 len 32 * _17456] = mem[_9885 + 32 len 32 * _17456]
                            mem[mem[64] + 64] = (32 * _16601) + (32 * _17456) + 192
                            _18104 = mem[_12671]
                            mem[_16547 + (32 * _16601) + (32 * _17456) + 192] = mem[_12671]
                            mem[_16547 + (32 * _16601) + (32 * _17456) + 224 len 32 * _18104] = mem[_12671 + 32 len 32 * _18104]
                            mem[_16547 + 96] = (32 * _16601) + (32 * _17456) + (32 * _18104) + 224
                            _18590 = mem[_15359]
                            mem[_16547 + (32 * _16601) + (32 * _17456) + (32 * _18104) + 224] = mem[_15359]
                            mem[_16547 + (32 * _16601) + (32 * _17456) + (32 * _18104) + 256 len 32 * _18590] = mem[_15359 + 32 len 32 * _18590]
                            return memory
                              from mem[64]
                               len _16547 + (32 * _16601) + (32 * _17456) + (32 * _18104) + (32 * _18590) + -mem[64] + 256
                        mem[_15359 + 32 len 32 * _15314] = call.data[calldata.size len 32 * _15314]
                        _16413 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16413:
                            if idx >= mem[_15359]:
                                revert with 0, 50
                            mem[(32 * idx) + _15359 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16413 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16602 = mem[_7063 + ceil32(return_data.size)]
                        mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                        mem[mem[64] + 160 len 32 * _16602] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16602]
                        mem[mem[64] + 32] = (32 * _16602) + 160
                        _17457 = mem[_9885]
                        mem[mem[64] + (32 * _16602) + 160] = mem[_9885]
                        mem[mem[64] + (32 * _16602) + 192 len 32 * _17457] = mem[_9885 + 32 len 32 * _17457]
                        mem[mem[64] + 64] = (32 * _16602) + (32 * _17457) + 192
                        _18105 = mem[_12671]
                        mem[mem[64] + (32 * _16602) + (32 * _17457) + 192] = mem[_12671]
                        mem[mem[64] + (32 * _16602) + (32 * _17457) + 224 len 32 * _18105] = mem[_12671 + 32 len 32 * _18105]
                        mem[mem[64] + 96] = (32 * _16602) + (32 * _17457) + (32 * _18105) + 224
                        _18591 = mem[_15359]
                        mem[mem[64] + (32 * _16602) + (32 * _17457) + (32 * _18105) + 224] = mem[_15359]
                        mem[mem[64] + (32 * _16602) + (32 * _17457) + (32 * _18105) + 256 len 32 * _18591] = mem[_15359 + 32 len 32 * _18591]
                        return 128, 
                               (32 * _16602) + 160,
                               (32 * _16602) + (32 * _17457) + 192,
                               (32 * _16602) + (32 * _17457) + (32 * _18105) + 224,
                               mem[mem[64] + 128 len (32 * _16602) + (32 * _17457) + (32 * _18105) + (32 * _18591) + 128]
                    _15287 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _15360 = mem[_15287]
                    require mem[_15287] <= test266151307()
                    require _15287 + return_data.size > _15287 + mem[_15287] + 31
                    _15414 = mem[_15287 + mem[_15287]]
                    if mem[_15287 + mem[_15287]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_15287 + mem[_15287]]) + 1 < 0 or _15287 + ceil32(return_data.size) + ceil32(32 * mem[_15287 + mem[_15287]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _15287 + ceil32(return_data.size) + ceil32(32 * mem[_15287 + mem[_15287]]) + 1
                    mem[_15287 + ceil32(return_data.size)] = _15414
                    require _15360 + (32 * _15414) + 32 <= return_data.size
                    mem[_15287 + ceil32(return_data.size) + 32 len ceil32(32 * _15414)] = mem[_15287 + _15360 + 32 len ceil32(32 * _15414)]
                    _16637 = mem[64]
                    mem[mem[64]] = 128
                    _16718 = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 160 len 32 * _16718] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16718]
                    mem[mem[64] + 32] = (32 * _16718) + 160
                    _17458 = mem[_9885]
                    mem[mem[64] + (32 * _16718) + 160] = mem[_9885]
                    mem[mem[64] + (32 * _16718) + 192 len 32 * _17458] = mem[_9885 + 32 len 32 * _17458]
                    mem[mem[64] + 64] = (32 * _16718) + (32 * _17458) + 192
                    _18106 = mem[_12671]
                    mem[_16637 + (32 * _16718) + (32 * _17458) + 192] = mem[_12671]
                    mem[_16637 + (32 * _16718) + (32 * _17458) + 224 len 32 * _18106] = mem[_12671 + 32 len 32 * _18106]
                    mem[_16637 + 96] = (32 * _16718) + (32 * _17458) + (32 * _18106) + 224
                    mem[_16637 + (32 * _16718) + (32 * _17458) + (32 * _18106) + 224] = _15414
                    mem[_16637 + (32 * _16718) + (32 * _17458) + (32 * _18106) + 256 len 32 * _15414] = mem[_15287 + ceil32(return_data.size) + 32 len 32 * _15414]
                    return memory
                      from mem[64]
                       len _16637 + (32 * _16718) + (32 * _17458) + (32 * _18106) + (32 * _15414) + -mem[64] + 256
                mem[_12671 + 32 len 32 * _12656] = call.data[calldata.size len 32 * _12656]
                _13968 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = 0
                while idx < _13968:
                    if idx >= mem[_12671]:
                        revert with 0, 50
                    mem[(32 * idx) + _12671 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _13968 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = idx + 1
                    continue 
                mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _14031 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                t = mem[64] + 100
                while idx < _14031:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args cd[36], 64, mem[mem[64] + 68 len (32 * _14031) + 32]
                if not ext_call.success:
                    _15315 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                        revert with 0, 65
                    _15361 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[64] = mem[64] + (32 * _15315) + 32
                    if not _15315:
                        _16414 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16414:
                            if idx >= mem[_15361]:
                                revert with 0, 50
                            mem[(32 * idx) + _15361 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16414 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        _16549 = mem[64]
                        mem[mem[64]] = 128
                        _16603 = mem[_7063 + ceil32(return_data.size)]
                        mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                        mem[mem[64] + 160 len 32 * _16603] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16603]
                        mem[mem[64] + 32] = (32 * _16603) + 160
                        _17459 = mem[_9885]
                        mem[mem[64] + (32 * _16603) + 160] = mem[_9885]
                        mem[mem[64] + (32 * _16603) + 192 len 32 * _17459] = mem[_9885 + 32 len 32 * _17459]
                        mem[mem[64] + 64] = (32 * _16603) + (32 * _17459) + 192
                        _18107 = mem[_12671]
                        mem[_16549 + (32 * _16603) + (32 * _17459) + 192] = mem[_12671]
                        mem[_16549 + (32 * _16603) + (32 * _17459) + 224 len 32 * _18107] = mem[_12671 + 32 len 32 * _18107]
                        mem[_16549 + 96] = (32 * _16603) + (32 * _17459) + (32 * _18107) + 224
                        _18593 = mem[_15361]
                        mem[_16549 + (32 * _16603) + (32 * _17459) + (32 * _18107) + 224] = mem[_15361]
                        mem[_16549 + (32 * _16603) + (32 * _17459) + (32 * _18107) + 256 len 32 * _18593] = mem[_15361 + 32 len 32 * _18593]
                        return memory
                          from mem[64]
                           len _16549 + (32 * _16603) + (32 * _17459) + (32 * _18107) + (32 * _18593) + -mem[64] + 256
                    mem[_15361 + 32 len 32 * _15315] = call.data[calldata.size len 32 * _15315]
                    _16415 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16415:
                        if idx >= mem[_15361]:
                            revert with 0, 50
                        mem[(32 * idx) + _15361 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16415 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    mem[mem[64]] = 128
                    _16604 = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 160 len 32 * _16604] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16604]
                    mem[mem[64] + 32] = (32 * _16604) + 160
                    _17460 = mem[_9885]
                    mem[mem[64] + (32 * _16604) + 160] = mem[_9885]
                    mem[mem[64] + (32 * _16604) + 192 len 32 * _17460] = mem[_9885 + 32 len 32 * _17460]
                    var163001 = _17460
                    mem[mem[64] + 64] = (32 * _16604) + (32 * _17460) + 192
                    _18108 = mem[_12671]
                    mem[mem[64] + (32 * _16604) + (32 * _17460) + 192] = mem[_12671]
                    mem[mem[64] + (32 * _16604) + (32 * _17460) + 224 len 32 * _18108] = mem[_12671 + 32 len 32 * _18108]
                    mem[mem[64] + 96] = (32 * _16604) + (32 * _17460) + (32 * _18108) + 224
                    _18594 = mem[_15361]
                    mem[mem[64] + (32 * _16604) + (32 * _17460) + (32 * _18108) + 224] = mem[_15361]
                    mem[mem[64] + (32 * _16604) + (32 * _17460) + (32 * _18108) + 256 len 32 * _18594] = mem[_15361 + 32 len 32 * _18594]
                    return 128, 
                           (32 * _16604) + 160,
                           (32 * _16604) + (32 * _17460) + 192,
                           (32 * _16604) + (32 * _17460) + (32 * _18108) + 224,
                           mem[mem[64] + 128 len (32 * _16604) + (32 * _17460) + (32 * _18108) + (32 * _18594) + 128]
                _15288 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _15362 = mem[_15288]
                require mem[_15288] <= test266151307()
                require _15288 + return_data.size > _15288 + mem[_15288] + 31
                _15416 = mem[_15288 + mem[_15288]]
                if mem[_15288 + mem[_15288]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_15288 + mem[_15288]]) + 1 < 0 or _15288 + ceil32(return_data.size) + ceil32(32 * mem[_15288 + mem[_15288]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _15288 + ceil32(return_data.size) + ceil32(32 * mem[_15288 + mem[_15288]]) + 1
                mem[_15288 + ceil32(return_data.size)] = _15416
                require _15362 + (32 * _15416) + 32 <= return_data.size
                mem[_15288 + ceil32(return_data.size) + 32 len ceil32(32 * _15416)] = mem[_15288 + _15362 + 32 len ceil32(32 * _15416)]
                _16638 = mem[64]
                mem[mem[64]] = 128
                _16719 = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 160 len 32 * _16719] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16719]
                mem[mem[64] + 32] = (32 * _16719) + 160
                _17461 = mem[_9885]
                mem[mem[64] + (32 * _16719) + 160] = mem[_9885]
                mem[mem[64] + (32 * _16719) + 192 len 32 * _17461] = mem[_9885 + 32 len 32 * _17461]
                mem[mem[64] + 64] = (32 * _16719) + (32 * _17461) + 192
                _18109 = mem[_12671]
                mem[_16638 + (32 * _16719) + (32 * _17461) + 192] = mem[_12671]
                mem[_16638 + (32 * _16719) + (32 * _17461) + 224 len 32 * _18109] = mem[_12671 + 32 len 32 * _18109]
                mem[_16638 + 96] = (32 * _16719) + (32 * _17461) + (32 * _18109) + 224
                mem[_16638 + (32 * _16719) + (32 * _17461) + (32 * _18109) + 224] = _15416
                mem[_16638 + (32 * _16719) + (32 * _17461) + (32 * _18109) + 256 len 32 * _15416] = mem[_15288 + ceil32(return_data.size) + 32 len 32 * _15416]
                return memory
                  from mem[64]
                   len _16638 + (32 * _16719) + (32 * _17461) + (32 * _18109) + (32 * _15416) + -mem[64] + 256
            _12647 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _12672 = mem[_12647]
            require mem[_12647] <= test266151307()
            require _12647 + return_data.size > _12647 + mem[_12647] + 31
            _12690 = mem[_12647 + mem[_12647]]
            if mem[_12647 + mem[_12647]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_12647 + mem[_12647]]) + 1 < 0 or _12647 + ceil32(return_data.size) + ceil32(32 * mem[_12647 + mem[_12647]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _12647 + ceil32(return_data.size) + ceil32(32 * mem[_12647 + mem[_12647]]) + 1
            mem[_12647 + ceil32(return_data.size)] = _12690
            require _12672 + (32 * _12690) + 32 <= return_data.size
            mem[_12647 + ceil32(return_data.size) + 32 len ceil32(32 * _12690)] = mem[_12647 + _12672 + 32 len ceil32(32 * _12690)]
            var138002 = _12647 + ceil32(return_data.size) + ceil32(32 * _12690) + 32
            mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _14069 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
            t = mem[64] + 100
            while idx < _14069:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args cd[36], 64, mem[mem[64] + 68 len (32 * _14069) + 32]
            if not ext_call.success:
                _15316 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                    revert with 0, 65
                _15363 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[64] = mem[64] + (32 * _15316) + 32
                if not _15316:
                    _16416 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16416:
                        if idx >= mem[_15363]:
                            revert with 0, 50
                        mem[(32 * idx) + _15363 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16416 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    _16551 = mem[64]
                    mem[mem[64]] = 128
                    _16605 = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 160 len 32 * _16605] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16605]
                    mem[mem[64] + 32] = (32 * _16605) + 160
                    _17462 = mem[_9885]
                    mem[mem[64] + (32 * _16605) + 160] = mem[_9885]
                    mem[mem[64] + (32 * _16605) + 192 len 32 * _17462] = mem[_9885 + 32 len 32 * _17462]
                    mem[mem[64] + 64] = (32 * _16605) + (32 * _17462) + 192
                    _18110 = mem[_12647 + ceil32(return_data.size)]
                    mem[_16551 + (32 * _16605) + (32 * _17462) + 192] = mem[_12647 + ceil32(return_data.size)]
                    mem[_16551 + (32 * _16605) + (32 * _17462) + 224 len 32 * _18110] = mem[_12647 + ceil32(return_data.size) + 32 len 32 * _18110]
                    mem[_16551 + 96] = (32 * _16605) + (32 * _17462) + (32 * _18110) + 224
                    _18596 = mem[_15363]
                    mem[_16551 + (32 * _16605) + (32 * _17462) + (32 * _18110) + 224] = mem[_15363]
                    mem[_16551 + (32 * _16605) + (32 * _17462) + (32 * _18110) + 256 len 32 * _18596] = mem[_15363 + 32 len 32 * _18596]
                    return memory
                      from mem[64]
                       len _16551 + (32 * _16605) + (32 * _17462) + (32 * _18110) + (32 * _18596) + -mem[64] + 256
                mem[_15363 + 32 len 32 * _15316] = call.data[calldata.size len 32 * _15316]
                _16417 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16417:
                    if idx >= mem[_15363]:
                        revert with 0, 50
                    mem[(32 * idx) + _15363 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16417 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                mem[mem[64]] = 128
                _16606 = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 160 len 32 * _16606] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16606]
                mem[mem[64] + 32] = (32 * _16606) + 160
                _17463 = mem[_9885]
                mem[mem[64] + (32 * _16606) + 160] = mem[_9885]
                mem[mem[64] + (32 * _16606) + 192 len 32 * _17463] = mem[_9885 + 32 len 32 * _17463]
                mem[mem[64] + 64] = (32 * _16606) + (32 * _17463) + 192
                _18111 = mem[_12647 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16606) + (32 * _17463) + 192] = mem[_12647 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16606) + (32 * _17463) + 224 len 32 * _18111] = mem[_12647 + ceil32(return_data.size) + 32 len 32 * _18111]
                mem[mem[64] + 96] = (32 * _16606) + (32 * _17463) + (32 * _18111) + 224
                _18597 = mem[_15363]
                mem[mem[64] + (32 * _16606) + (32 * _17463) + (32 * _18111) + 224] = mem[_15363]
                mem[mem[64] + (32 * _16606) + (32 * _17463) + (32 * _18111) + 256 len 32 * _18597] = mem[_15363 + 32 len 32 * _18597]
                return 128, 
                       (32 * _16606) + 160,
                       (32 * _16606) + (32 * _17463) + 192,
                       (32 * _16606) + (32 * _17463) + (32 * _18111) + 224,
                       mem[mem[64] + 128 len (32 * _16606) + (32 * _17463) + (32 * _18111) + (32 * _18597) + 128]
            _15289 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _15364 = mem[_15289]
            require mem[_15289] <= test266151307()
            require _15289 + return_data.size > _15289 + mem[_15289] + 31
            _15418 = mem[_15289 + mem[_15289]]
            if mem[_15289 + mem[_15289]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_15289 + mem[_15289]]) + 1 < 0 or _15289 + ceil32(return_data.size) + ceil32(32 * mem[_15289 + mem[_15289]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _15289 + ceil32(return_data.size) + ceil32(32 * mem[_15289 + mem[_15289]]) + 1
            mem[_15289 + ceil32(return_data.size)] = _15418
            require _15364 + (32 * _15418) + 32 <= return_data.size
            mem[_15289 + ceil32(return_data.size) + 32 len ceil32(32 * _15418)] = mem[_15289 + _15364 + 32 len ceil32(32 * _15418)]
            mem[mem[64]] = 128
            _16720 = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 160 len 32 * _16720] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16720]
            mem[mem[64] + 32] = (32 * _16720) + 160
            _17464 = mem[_9885]
            mem[mem[64] + (32 * _16720) + 160] = mem[_9885]
            mem[mem[64] + (32 * _16720) + 192 len 32 * _17464] = mem[_9885 + 32 len 32 * _17464]
            mem[mem[64] + 64] = (32 * _16720) + (32 * _17464) + 192
            _18112 = mem[_12647 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16720) + (32 * _17464) + 192] = mem[_12647 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16720) + (32 * _17464) + 224 len 32 * _18112] = mem[_12647 + ceil32(return_data.size) + 32 len 32 * _18112]
            mem[mem[64] + 96] = (32 * _16720) + (32 * _17464) + (32 * _18112) + 224
            mem[mem[64] + (32 * _16720) + (32 * _17464) + (32 * _18112) + 224] = _15418
            mem[mem[64] + (32 * _16720) + (32 * _17464) + (32 * _18112) + 256 len 32 * _15418] = mem[_15289 + ceil32(return_data.size) + 32 len 32 * _15418]
            return Array(len=mem[mem[64] + 128 len (32 * _16720) + (32 * _17464) + (32 * _18112) + 96], data=_15418, mem[mem[64] + (32 * _16720) + (32 * _17464) + (32 * _18112) + 256 len 32 * _15418]), 
                   (32 * _16720) + 160,
                   (32 * _16720) + (32 * _17464) + 192,
                   (32 * _16720) + (32 * _17464) + (32 * _18112) + 224
        mem[_9885 + 32 len 32 * _9880] = call.data[calldata.size len 32 * _9880]
        _11263 = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        while idx < _11263:
            if idx >= mem[_9885]:
                revert with 0, 50
            mem[(32 * idx) + _9885 + 32] = 0
            if idx == -1:
                revert with 0, 17
            _11263 = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = idx + 1
            continue 
        mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = cd[36]
        mem[mem[64] + 36] = 64
        _11284 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
        t = mem[64] + 100
        while idx < _11284:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args cd[36], 64, mem[mem[64] + 68 len (32 * _11284) + 32]
        if not ext_call.success:
            _12657 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
                revert with 0, 65
            _12673 = mem[64]
            mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            mem[64] = mem[64] + (32 * _12657) + 32
            if not _12657:
                _13969 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = 0
                while idx < _13969:
                    if idx >= mem[_12673]:
                        revert with 0, 50
                    mem[(32 * idx) + _12673 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _13969 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = idx + 1
                    continue 
                _14014 = mem[64]
                mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _14032 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                t = mem[64] + 100
                while idx < _14032:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _14014 + (32 * _14032) + -mem[64] + 96]
                if not ext_call.success:
                    _15317 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                        revert with 0, 65
                    _15365 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[64] = mem[64] + (32 * _15317) + 32
                    if not _15317:
                        _16418 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16418:
                            if idx >= mem[_15365]:
                                revert with 0, 50
                            mem[(32 * idx) + _15365 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16418 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16607 = mem[_7063 + ceil32(return_data.size)]
                        mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                        mem[mem[64] + 160 len 32 * _16607] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16607]
                        mem[mem[64] + 32] = (32 * _16607) + 160
                        _17465 = mem[_9885]
                        mem[mem[64] + (32 * _16607) + 160] = mem[_9885]
                        mem[mem[64] + (32 * _16607) + 192 len 32 * _17465] = mem[_9885 + 32 len 32 * _17465]
                        mem[mem[64] + 64] = (32 * _16607) + (32 * _17465) + 192
                        _18113 = mem[_12673]
                        mem[mem[64] + (32 * _16607) + (32 * _17465) + 192] = mem[_12673]
                        mem[mem[64] + (32 * _16607) + (32 * _17465) + 224 len 32 * _18113] = mem[_12673 + 32 len 32 * _18113]
                        mem[mem[64] + 96] = (32 * _16607) + (32 * _17465) + (32 * _18113) + 224
                        _18599 = mem[_15365]
                        mem[mem[64] + (32 * _16607) + (32 * _17465) + (32 * _18113) + 224] = mem[_15365]
                        mem[mem[64] + (32 * _16607) + (32 * _17465) + (32 * _18113) + 256 len 32 * _18599] = mem[_15365 + 32 len 32 * _18599]
                        return 128, 
                               (32 * _16607) + 160,
                               (32 * _16607) + (32 * _17465) + 192,
                               (32 * _16607) + (32 * _17465) + (32 * _18113) + 224,
                               mem[mem[64] + 128 len (32 * _16607) + (32 * _17465) + (32 * _18113) + (32 * _18599) + 128]
                    mem[_15365 + 32 len 32 * _15317] = call.data[calldata.size len 32 * _15317]
                    _16419 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16419:
                        if idx >= mem[_15365]:
                            revert with 0, 50
                        mem[(32 * idx) + _15365 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16419 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    _16554 = mem[64]
                    mem[mem[64]] = 128
                    _16608 = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 160 len 32 * _16608] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16608]
                    mem[mem[64] + 32] = (32 * _16608) + 160
                    _17466 = mem[_9885]
                    mem[mem[64] + (32 * _16608) + 160] = mem[_9885]
                    mem[mem[64] + (32 * _16608) + 192 len 32 * _17466] = mem[_9885 + 32 len 32 * _17466]
                    var163001 = _17466
                    mem[mem[64] + 64] = (32 * _16608) + (32 * _17466) + 192
                    _18114 = mem[_12673]
                    mem[_16554 + (32 * _16608) + (32 * _17466) + 192] = mem[_12673]
                    mem[_16554 + (32 * _16608) + (32 * _17466) + 224 len 32 * _18114] = mem[_12673 + 32 len 32 * _18114]
                    mem[_16554 + 96] = (32 * _16608) + (32 * _17466) + (32 * _18114) + 224
                    _18600 = mem[_15365]
                    mem[_16554 + (32 * _16608) + (32 * _17466) + (32 * _18114) + 224] = mem[_15365]
                    mem[_16554 + (32 * _16608) + (32 * _17466) + (32 * _18114) + 256 len 32 * _18600] = mem[_15365 + 32 len 32 * _18600]
                    return memory
                      from mem[64]
                       len _16554 + (32 * _16608) + (32 * _17466) + (32 * _18114) + (32 * _18600) + -mem[64] + 256
                _15290 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _15366 = mem[_15290]
                require mem[_15290] <= test266151307()
                require _15290 + return_data.size > _15290 + mem[_15290] + 31
                _15420 = mem[_15290 + mem[_15290]]
                if mem[_15290 + mem[_15290]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_15290 + mem[_15290]]) + 1 < 0 or _15290 + ceil32(return_data.size) + ceil32(32 * mem[_15290 + mem[_15290]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _15290 + ceil32(return_data.size) + ceil32(32 * mem[_15290 + mem[_15290]]) + 1
                mem[_15290 + ceil32(return_data.size)] = _15420
                require _15366 + (32 * _15420) + 32 <= return_data.size
                mem[_15290 + ceil32(return_data.size) + 32 len ceil32(32 * _15420)] = mem[_15290 + _15366 + 32 len ceil32(32 * _15420)]
                _16640 = mem[64]
                mem[mem[64]] = 128
                _16721 = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 160 len 32 * _16721] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16721]
                mem[mem[64] + 32] = (32 * _16721) + 160
                _17467 = mem[_9885]
                mem[mem[64] + (32 * _16721) + 160] = mem[_9885]
                mem[mem[64] + (32 * _16721) + 192 len 32 * _17467] = mem[_9885 + 32 len 32 * _17467]
                mem[mem[64] + 64] = (32 * _16721) + (32 * _17467) + 192
                _18115 = mem[_12673]
                mem[_16640 + (32 * _16721) + (32 * _17467) + 192] = mem[_12673]
                mem[_16640 + (32 * _16721) + (32 * _17467) + 224 len 32 * _18115] = mem[_12673 + 32 len 32 * _18115]
                mem[_16640 + 96] = (32 * _16721) + (32 * _17467) + (32 * _18115) + 224
                mem[_16640 + (32 * _16721) + (32 * _17467) + (32 * _18115) + 224] = _15420
                mem[_16640 + (32 * _16721) + (32 * _17467) + (32 * _18115) + 256 len 32 * _15420] = mem[_15290 + ceil32(return_data.size) + 32 len 32 * _15420]
                return memory
                  from mem[64]
                   len _16640 + (32 * _16721) + (32 * _17467) + (32 * _18115) + (32 * _15420) + -mem[64] + 256
            mem[_12673 + 32 len 32 * _12657] = call.data[calldata.size len 32 * _12657]
            _13970 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            idx = 0
            while idx < _13970:
                if idx >= mem[_12673]:
                    revert with 0, 50
                mem[(32 * idx) + _12673 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _13970 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = idx + 1
                continue 
            mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _14033 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
            t = mem[64] + 100
            while idx < _14033:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args cd[36], 64, mem[mem[64] + 68 len (32 * _14033) + 32]
            if not ext_call.success:
                _15318 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                    revert with 0, 65
                _15367 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[64] = mem[64] + (32 * _15318) + 32
                if not _15318:
                    _16420 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16420:
                        if idx >= mem[_15367]:
                            revert with 0, 50
                        mem[(32 * idx) + _15367 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16420 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    _16555 = mem[64]
                    mem[mem[64]] = 128
                    _16609 = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 160 len 32 * _16609] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16609]
                    mem[mem[64] + 32] = (32 * _16609) + 160
                    _17468 = mem[_9885]
                    mem[mem[64] + (32 * _16609) + 160] = mem[_9885]
                    mem[mem[64] + (32 * _16609) + 192 len 32 * _17468] = mem[_9885 + 32 len 32 * _17468]
                    var163001 = _17468
                    mem[mem[64] + 64] = (32 * _16609) + (32 * _17468) + 192
                    _18116 = mem[_12673]
                    mem[_16555 + (32 * _16609) + (32 * _17468) + 192] = mem[_12673]
                    mem[_16555 + (32 * _16609) + (32 * _17468) + 224 len 32 * _18116] = mem[_12673 + 32 len 32 * _18116]
                    mem[_16555 + 96] = (32 * _16609) + (32 * _17468) + (32 * _18116) + 224
                    _18602 = mem[_15367]
                    mem[_16555 + (32 * _16609) + (32 * _17468) + (32 * _18116) + 224] = mem[_15367]
                    mem[_16555 + (32 * _16609) + (32 * _17468) + (32 * _18116) + 256 len 32 * _18602] = mem[_15367 + 32 len 32 * _18602]
                    return memory
                      from mem[64]
                       len _16555 + (32 * _16609) + (32 * _17468) + (32 * _18116) + (32 * _18602) + -mem[64] + 256
                mem[_15367 + 32 len 32 * _15318] = call.data[calldata.size len 32 * _15318]
                _16421 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16421:
                    if idx >= mem[_15367]:
                        revert with 0, 50
                    mem[(32 * idx) + _15367 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16421 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                _16556 = mem[64]
                mem[mem[64]] = 128
                _16610 = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 160 len 32 * _16610] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16610]
                mem[mem[64] + 32] = (32 * _16610) + 160
                _17469 = mem[_9885]
                mem[mem[64] + (32 * _16610) + 160] = mem[_9885]
                mem[mem[64] + (32 * _16610) + 192 len 32 * _17469] = mem[_9885 + 32 len 32 * _17469]
                var164001 = _17469
                mem[mem[64] + 64] = (32 * _16610) + (32 * _17469) + 192
                _18117 = mem[_12673]
                mem[_16556 + (32 * _16610) + (32 * _17469) + 192] = mem[_12673]
                mem[_16556 + (32 * _16610) + (32 * _17469) + 224 len 32 * _18117] = mem[_12673 + 32 len 32 * _18117]
                mem[_16556 + 96] = (32 * _16610) + (32 * _17469) + (32 * _18117) + 224
                _18603 = mem[_15367]
                mem[_16556 + (32 * _16610) + (32 * _17469) + (32 * _18117) + 224] = mem[_15367]
                mem[_16556 + (32 * _16610) + (32 * _17469) + (32 * _18117) + 256 len 32 * _18603] = mem[_15367 + 32 len 32 * _18603]
                var174001 = _18603
                return memory
                  from mem[64]
                   len _16556 + (32 * _16610) + (32 * _17469) + (32 * _18117) + (32 * _18603) + -mem[64] + 256
            _15291 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _15368 = mem[_15291]
            require mem[_15291] <= test266151307()
            require _15291 + return_data.size > _15291 + mem[_15291] + 31
            _15422 = mem[_15291 + mem[_15291]]
            if mem[_15291 + mem[_15291]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_15291 + mem[_15291]]) + 1 < 0 or _15291 + ceil32(return_data.size) + ceil32(32 * mem[_15291 + mem[_15291]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _15291 + ceil32(return_data.size) + ceil32(32 * mem[_15291 + mem[_15291]]) + 1
            mem[_15291 + ceil32(return_data.size)] = _15422
            require _15368 + (32 * _15422) + 32 <= return_data.size
            mem[_15291 + ceil32(return_data.size) + 32 len ceil32(32 * _15422)] = mem[_15291 + _15368 + 32 len ceil32(32 * _15422)]
            _16641 = mem[64]
            mem[mem[64]] = 128
            _16722 = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 160 len 32 * _16722] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16722]
            mem[mem[64] + 32] = (32 * _16722) + 160
            _17470 = mem[_9885]
            mem[mem[64] + (32 * _16722) + 160] = mem[_9885]
            mem[mem[64] + (32 * _16722) + 192 len 32 * _17470] = mem[_9885 + 32 len 32 * _17470]
            var174001 = _17470
            mem[mem[64] + 64] = (32 * _16722) + (32 * _17470) + 192
            _18118 = mem[_12673]
            mem[_16641 + (32 * _16722) + (32 * _17470) + 192] = mem[_12673]
            mem[_16641 + (32 * _16722) + (32 * _17470) + 224 len 32 * _18118] = mem[_12673 + 32 len 32 * _18118]
            mem[_16641 + 96] = (32 * _16722) + (32 * _17470) + (32 * _18118) + 224
            mem[_16641 + (32 * _16722) + (32 * _17470) + (32 * _18118) + 224] = _15422
            mem[_16641 + (32 * _16722) + (32 * _17470) + (32 * _18118) + 256 len 32 * _15422] = mem[_15291 + ceil32(return_data.size) + 32 len 32 * _15422]
            return memory
              from mem[64]
               len _16641 + (32 * _16722) + (32 * _17470) + (32 * _18118) + (32 * _15422) + -mem[64] + 256
        _12648 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _12674 = mem[_12648]
        require mem[_12648] <= test266151307()
        require _12648 + return_data.size > _12648 + mem[_12648] + 31
        _12692 = mem[_12648 + mem[_12648]]
        if mem[_12648 + mem[_12648]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_12648 + mem[_12648]]) + 1 < 0 or _12648 + ceil32(return_data.size) + ceil32(32 * mem[_12648 + mem[_12648]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _12648 + ceil32(return_data.size) + ceil32(32 * mem[_12648 + mem[_12648]]) + 1
        mem[_12648 + ceil32(return_data.size)] = _12692
        require _12674 + (32 * _12692) + 32 <= return_data.size
        mem[_12648 + ceil32(return_data.size) + 32 len ceil32(32 * _12692)] = mem[_12648 + _12674 + 32 len ceil32(32 * _12692)]
        var139002 = _12648 + ceil32(return_data.size) + ceil32(32 * _12692) + 32
        mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = cd[36]
        mem[mem[64] + 36] = 64
        _14070 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
        t = mem[64] + 100
        while idx < _14070:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getAmountsIn(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args cd[36], 64, mem[mem[64] + 68 len (32 * _14070) + 32]
        if not ext_call.success:
            _15319 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                revert with 0, 65
            _15369 = mem[64]
            mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[64] = mem[64] + (32 * _15319) + 32
            if not _15319:
                _16422 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16422:
                    if idx >= mem[_15369]:
                        revert with 0, 50
                    mem[(32 * idx) + _15369 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16422 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                _16557 = mem[64]
                mem[mem[64]] = 128
                _16611 = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 160 len 32 * _16611] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16611]
                mem[mem[64] + 32] = (32 * _16611) + 160
                _17471 = mem[_9885]
                mem[mem[64] + (32 * _16611) + 160] = mem[_9885]
                mem[mem[64] + (32 * _16611) + 192 len 32 * _17471] = mem[_9885 + 32 len 32 * _17471]
                mem[mem[64] + 64] = (32 * _16611) + (32 * _17471) + 192
                _18119 = mem[_12648 + ceil32(return_data.size)]
                mem[_16557 + (32 * _16611) + (32 * _17471) + 192] = mem[_12648 + ceil32(return_data.size)]
                mem[_16557 + (32 * _16611) + (32 * _17471) + 224 len 32 * _18119] = mem[_12648 + ceil32(return_data.size) + 32 len 32 * _18119]
                mem[_16557 + 96] = (32 * _16611) + (32 * _17471) + (32 * _18119) + 224
                _18605 = mem[_15369]
                mem[_16557 + (32 * _16611) + (32 * _17471) + (32 * _18119) + 224] = mem[_15369]
                mem[_16557 + (32 * _16611) + (32 * _17471) + (32 * _18119) + 256 len 32 * _18605] = mem[_15369 + 32 len 32 * _18605]
                return memory
                  from mem[64]
                   len _16557 + (32 * _16611) + (32 * _17471) + (32 * _18119) + (32 * _18605) + -mem[64] + 256
            mem[_15369 + 32 len 32 * _15319] = call.data[calldata.size len 32 * _15319]
            _16423 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            while idx < _16423:
                if idx >= mem[_15369]:
                    revert with 0, 50
                mem[(32 * idx) + _15369 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _16423 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = idx + 1
                continue 
            mem[mem[64]] = 128
            _16612 = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 160 len 32 * _16612] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16612]
            mem[mem[64] + 32] = (32 * _16612) + 160
            _17472 = mem[_9885]
            mem[mem[64] + (32 * _16612) + 160] = mem[_9885]
            mem[mem[64] + (32 * _16612) + 192 len 32 * _17472] = mem[_9885 + 32 len 32 * _17472]
            var174001 = _17472
            mem[mem[64] + 64] = (32 * _16612) + (32 * _17472) + 192
            _18120 = mem[_12648 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16612) + (32 * _17472) + 192] = mem[_12648 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16612) + (32 * _17472) + 224 len 32 * _18120] = mem[_12648 + ceil32(return_data.size) + 32 len 32 * _18120]
            mem[mem[64] + 96] = (32 * _16612) + (32 * _17472) + (32 * _18120) + 224
            _18606 = mem[_15369]
            mem[mem[64] + (32 * _16612) + (32 * _17472) + (32 * _18120) + 224] = mem[_15369]
            mem[mem[64] + (32 * _16612) + (32 * _17472) + (32 * _18120) + 256 len 32 * _18606] = mem[_15369 + 32 len 32 * _18606]
            return 128, 
                   (32 * _16612) + 160,
                   (32 * _16612) + (32 * _17472) + 192,
                   (32 * _16612) + (32 * _17472) + (32 * _18120) + 224,
                   mem[mem[64] + 128 len (32 * _16612) + (32 * _17472) + (32 * _18120) + (32 * _18606) + 128]
        _15292 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _15370 = mem[_15292]
        require mem[_15292] <= test266151307()
        require _15292 + return_data.size > _15292 + mem[_15292] + 31
        _15424 = mem[_15292 + mem[_15292]]
        if mem[_15292 + mem[_15292]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_15292 + mem[_15292]]) + 1 < 0 or _15292 + ceil32(return_data.size) + ceil32(32 * mem[_15292 + mem[_15292]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _15292 + ceil32(return_data.size) + ceil32(32 * mem[_15292 + mem[_15292]]) + 1
        mem[_15292 + ceil32(return_data.size)] = _15424
        require _15370 + (32 * _15424) + 32 <= return_data.size
        mem[_15292 + ceil32(return_data.size) + 32 len ceil32(32 * _15424)] = mem[_15292 + _15370 + 32 len ceil32(32 * _15424)]
        _16642 = mem[64]
        mem[mem[64]] = 128
        _16723 = mem[_7063 + ceil32(return_data.size)]
        mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
        mem[mem[64] + 160 len 32 * _16723] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16723]
        mem[mem[64] + 32] = (32 * _16723) + 160
        _17473 = mem[_9885]
        mem[mem[64] + (32 * _16723) + 160] = mem[_9885]
        mem[mem[64] + (32 * _16723) + 192 len 32 * _17473] = mem[_9885 + 32 len 32 * _17473]
        mem[mem[64] + 64] = (32 * _16723) + (32 * _17473) + 192
        _18121 = mem[_12648 + ceil32(return_data.size)]
        mem[_16642 + (32 * _16723) + (32 * _17473) + 192] = mem[_12648 + ceil32(return_data.size)]
        mem[_16642 + (32 * _16723) + (32 * _17473) + 224 len 32 * _18121] = mem[_12648 + ceil32(return_data.size) + 32 len 32 * _18121]
        mem[_16642 + 96] = (32 * _16723) + (32 * _17473) + (32 * _18121) + 224
        mem[_16642 + (32 * _16723) + (32 * _17473) + (32 * _18121) + 224] = _15424
        mem[_16642 + (32 * _16723) + (32 * _17473) + (32 * _18121) + 256 len 32 * _15424] = mem[_15292 + ceil32(return_data.size) + 32 len 32 * _15424]
        return memory
          from mem[64]
           len _16642 + (32 * _16723) + (32 * _17473) + (32 * _18121) + (32 * _15424) + -mem[64] + 256
    _9877 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _9886 = mem[_9877]
    require mem[_9877] <= test266151307()
    require _9877 + return_data.size > _9877 + mem[_9877] + 31
    _9892 = mem[_9877 + mem[_9877]]
    if mem[_9877 + mem[_9877]] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[_9877 + mem[_9877]]) + 1 < 0 or _9877 + ceil32(return_data.size) + ceil32(32 * mem[_9877 + mem[_9877]]) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _9877 + ceil32(return_data.size) + ceil32(32 * mem[_9877 + mem[_9877]]) + 1
    mem[_9877 + ceil32(return_data.size)] = _9892
    require _9886 + (32 * _9892) + 32 <= return_data.size
    mem[_9877 + ceil32(return_data.size) + 32 len ceil32(32 * _9892)] = mem[_9877 + _9886 + 32 len ceil32(32 * _9892)]
    var120002 = _9877 + ceil32(return_data.size) + ceil32(32 * _9892) + 32
    _11287 = mem[64]
    mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = cd[36]
    mem[mem[64] + 36] = 64
    _11296 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
    idx = 0
    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
    t = mem[64] + 100
    while idx < _11296:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).mem[mem[64] len 4] with:
            gas gas_remaining wei
           args mem[mem[64] + 4 len _11287 + (32 * _11296) + -mem[64] + 96]
    if not ext_call.success:
        _12658 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
            revert with 0, 65
        _12675 = mem[64]
        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
        mem[64] = mem[64] + (32 * _12658) + 32
        if not _12658:
            _13971 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            idx = 0
            while idx < _13971:
                if idx >= mem[_12675]:
                    revert with 0, 50
                mem[(32 * idx) + _12675 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _13971 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = idx + 1
                continue 
            _14016 = mem[64]
            mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _14034 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
            t = mem[64] + 100
            while idx < _14034:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _14016 + (32 * _14034) + -mem[64] + 96]
            if not ext_call.success:
                _15320 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                    revert with 0, 65
                _15371 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[64] = mem[64] + (32 * _15320) + 32
                if not _15320:
                    _16424 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16424:
                        if idx >= mem[_15371]:
                            revert with 0, 50
                        mem[(32 * idx) + _15371 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16424 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    mem[mem[64]] = 128
                    _16613 = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 160 len 32 * _16613] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16613]
                    mem[mem[64] + 32] = (32 * _16613) + 160
                    _17474 = mem[_9877 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16613) + 160] = mem[_9877 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16613) + 192 len 32 * _17474] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17474]
                    mem[mem[64] + 64] = (32 * _16613) + (32 * _17474) + 192
                    _18122 = mem[_12675]
                    mem[mem[64] + (32 * _16613) + (32 * _17474) + 192] = mem[_12675]
                    mem[mem[64] + (32 * _16613) + (32 * _17474) + 224 len 32 * _18122] = mem[_12675 + 32 len 32 * _18122]
                    mem[mem[64] + 96] = (32 * _16613) + (32 * _17474) + (32 * _18122) + 224
                    _18608 = mem[_15371]
                    mem[mem[64] + (32 * _16613) + (32 * _17474) + (32 * _18122) + 224] = mem[_15371]
                    mem[mem[64] + (32 * _16613) + (32 * _17474) + (32 * _18122) + 256 len 32 * _18608] = mem[_15371 + 32 len 32 * _18608]
                    return 128, 
                           (32 * _16613) + 160,
                           (32 * _16613) + (32 * _17474) + 192,
                           (32 * _16613) + (32 * _17474) + (32 * _18122) + 224,
                           mem[mem[64] + 128 len (32 * _16613) + (32 * _17474) + (32 * _18122) + (32 * _18608) + 128]
                mem[_15371 + 32 len 32 * _15320] = call.data[calldata.size len 32 * _15320]
                _16425 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16425:
                    if idx >= mem[_15371]:
                        revert with 0, 50
                    mem[(32 * idx) + _15371 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16425 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                _16560 = mem[64]
                mem[mem[64]] = 128
                _16614 = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 160 len 32 * _16614] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16614]
                mem[mem[64] + 32] = (32 * _16614) + 160
                _17475 = mem[_9877 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16614) + 160] = mem[_9877 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16614) + 192 len 32 * _17475] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17475]
                mem[mem[64] + 64] = (32 * _16614) + (32 * _17475) + 192
                _18123 = mem[_12675]
                mem[_16560 + (32 * _16614) + (32 * _17475) + 192] = mem[_12675]
                mem[_16560 + (32 * _16614) + (32 * _17475) + 224 len 32 * _18123] = mem[_12675 + 32 len 32 * _18123]
                mem[_16560 + 96] = (32 * _16614) + (32 * _17475) + (32 * _18123) + 224
                _18609 = mem[_15371]
                mem[_16560 + (32 * _16614) + (32 * _17475) + (32 * _18123) + 224] = mem[_15371]
                mem[_16560 + (32 * _16614) + (32 * _17475) + (32 * _18123) + 256 len 32 * _18609] = mem[_15371 + 32 len 32 * _18609]
                return memory
                  from mem[64]
                   len _16560 + (32 * _16614) + (32 * _17475) + (32 * _18123) + (32 * _18609) + -mem[64] + 256
            _15293 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _15372 = mem[_15293]
            require mem[_15293] <= test266151307()
            require _15293 + return_data.size > _15293 + mem[_15293] + 31
            _15426 = mem[_15293 + mem[_15293]]
            if mem[_15293 + mem[_15293]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_15293 + mem[_15293]]) + 1 < 0 or _15293 + ceil32(return_data.size) + ceil32(32 * mem[_15293 + mem[_15293]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _15293 + ceil32(return_data.size) + ceil32(32 * mem[_15293 + mem[_15293]]) + 1
            mem[_15293 + ceil32(return_data.size)] = _15426
            require _15372 + (32 * _15426) + 32 <= return_data.size
            mem[_15293 + ceil32(return_data.size) + 32 len ceil32(32 * _15426)] = mem[_15293 + _15372 + 32 len ceil32(32 * _15426)]
            _16643 = mem[64]
            mem[mem[64]] = 128
            _16724 = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 160 len 32 * _16724] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16724]
            mem[mem[64] + 32] = (32 * _16724) + 160
            _17476 = mem[_9877 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16724) + 160] = mem[_9877 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16724) + 192 len 32 * _17476] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17476]
            mem[mem[64] + 64] = (32 * _16724) + (32 * _17476) + 192
            _18124 = mem[_12675]
            mem[_16643 + (32 * _16724) + (32 * _17476) + 192] = mem[_12675]
            mem[_16643 + (32 * _16724) + (32 * _17476) + 224 len 32 * _18124] = mem[_12675 + 32 len 32 * _18124]
            mem[_16643 + 96] = (32 * _16724) + (32 * _17476) + (32 * _18124) + 224
            mem[_16643 + (32 * _16724) + (32 * _17476) + (32 * _18124) + 224] = _15426
            mem[_16643 + (32 * _16724) + (32 * _17476) + (32 * _18124) + 256 len 32 * _15426] = mem[_15293 + ceil32(return_data.size) + 32 len 32 * _15426]
            return memory
              from mem[64]
               len _16643 + (32 * _16724) + (32 * _17476) + (32 * _18124) + (32 * _15426) + -mem[64] + 256
        mem[_12675 + 32 len 32 * _12658] = call.data[calldata.size len 32 * _12658]
        _13972 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
        idx = 0
        while idx < _13972:
            if idx >= mem[_12675]:
                revert with 0, 50
            mem[(32 * idx) + _12675 + 32] = 0
            if idx == -1:
                revert with 0, 17
            _13972 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            idx = idx + 1
            continue 
        _14017 = mem[64]
        mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = cd[36]
        mem[mem[64] + 36] = 64
        _14035 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
        t = mem[64] + 100
        while idx < _14035:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _14017 + (32 * _14035) + -mem[64] + 96]
        if not ext_call.success:
            _15321 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                revert with 0, 65
            _15373 = mem[64]
            mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[64] = mem[64] + (32 * _15321) + 32
            if not _15321:
                _16426 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16426:
                    if idx >= mem[_15373]:
                        revert with 0, 50
                    mem[(32 * idx) + _15373 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16426 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                mem[mem[64]] = 128
                _16615 = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 160 len 32 * _16615] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16615]
                mem[mem[64] + 32] = (32 * _16615) + 160
                _17477 = mem[_9877 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16615) + 160] = mem[_9877 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16615) + 192 len 32 * _17477] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17477]
                mem[mem[64] + 64] = (32 * _16615) + (32 * _17477) + 192
                _18125 = mem[_12675]
                mem[mem[64] + (32 * _16615) + (32 * _17477) + 192] = mem[_12675]
                mem[mem[64] + (32 * _16615) + (32 * _17477) + 224 len 32 * _18125] = mem[_12675 + 32 len 32 * _18125]
                mem[mem[64] + 96] = (32 * _16615) + (32 * _17477) + (32 * _18125) + 224
                _18611 = mem[_15373]
                mem[mem[64] + (32 * _16615) + (32 * _17477) + (32 * _18125) + 224] = mem[_15373]
                mem[mem[64] + (32 * _16615) + (32 * _17477) + (32 * _18125) + 256 len 32 * _18611] = mem[_15373 + 32 len 32 * _18611]
                return 128, 
                       (32 * _16615) + 160,
                       (32 * _16615) + (32 * _17477) + 192,
                       (32 * _16615) + (32 * _17477) + (32 * _18125) + 224,
                       mem[mem[64] + 128 len (32 * _16615) + (32 * _17477) + (32 * _18125) + (32 * _18611) + 128]
            mem[_15373 + 32 len 32 * _15321] = call.data[calldata.size len 32 * _15321]
            _16427 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            while idx < _16427:
                if idx >= mem[_15373]:
                    revert with 0, 50
                mem[(32 * idx) + _15373 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _16427 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = idx + 1
                continue 
            mem[mem[64]] = 128
            _16616 = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 160 len 32 * _16616] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16616]
            mem[mem[64] + 32] = (32 * _16616) + 160
            _17478 = mem[_9877 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16616) + 160] = mem[_9877 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16616) + 192 len 32 * _17478] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17478]
            var174001 = _17478
            mem[mem[64] + 64] = (32 * _16616) + (32 * _17478) + 192
            _18126 = mem[_12675]
            mem[mem[64] + (32 * _16616) + (32 * _17478) + 192] = mem[_12675]
            mem[mem[64] + (32 * _16616) + (32 * _17478) + 224 len 32 * _18126] = mem[_12675 + 32 len 32 * _18126]
            mem[mem[64] + 96] = (32 * _16616) + (32 * _17478) + (32 * _18126) + 224
            _18612 = mem[_15373]
            mem[mem[64] + (32 * _16616) + (32 * _17478) + (32 * _18126) + 224] = mem[_15373]
            mem[mem[64] + (32 * _16616) + (32 * _17478) + (32 * _18126) + 256 len 32 * _18612] = mem[_15373 + 32 len 32 * _18612]
            return 128, 
                   (32 * _16616) + 160,
                   (32 * _16616) + (32 * _17478) + 192,
                   (32 * _16616) + (32 * _17478) + (32 * _18126) + 224,
                   mem[mem[64] + 128 len (32 * _16616) + (32 * _17478) + (32 * _18126) + (32 * _18612) + 128]
        _15294 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _15374 = mem[_15294]
        require mem[_15294] <= test266151307()
        require _15294 + return_data.size > _15294 + mem[_15294] + 31
        _15428 = mem[_15294 + mem[_15294]]
        if mem[_15294 + mem[_15294]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_15294 + mem[_15294]]) + 1 < 0 or _15294 + ceil32(return_data.size) + ceil32(32 * mem[_15294 + mem[_15294]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _15294 + ceil32(return_data.size) + ceil32(32 * mem[_15294 + mem[_15294]]) + 1
        mem[_15294 + ceil32(return_data.size)] = _15428
        require _15374 + (32 * _15428) + 32 <= return_data.size
        mem[_15294 + ceil32(return_data.size) + 32 len ceil32(32 * _15428)] = mem[_15294 + _15374 + 32 len ceil32(32 * _15428)]
        _16644 = mem[64]
        mem[mem[64]] = 128
        _16725 = mem[_7063 + ceil32(return_data.size)]
        mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
        mem[mem[64] + 160 len 32 * _16725] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16725]
        mem[mem[64] + 32] = (32 * _16725) + 160
        _17479 = mem[_9877 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _16725) + 160] = mem[_9877 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _16725) + 192 len 32 * _17479] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17479]
        mem[mem[64] + 64] = (32 * _16725) + (32 * _17479) + 192
        _18127 = mem[_12675]
        mem[_16644 + (32 * _16725) + (32 * _17479) + 192] = mem[_12675]
        mem[_16644 + (32 * _16725) + (32 * _17479) + 224 len 32 * _18127] = mem[_12675 + 32 len 32 * _18127]
        mem[_16644 + 96] = (32 * _16725) + (32 * _17479) + (32 * _18127) + 224
        mem[_16644 + (32 * _16725) + (32 * _17479) + (32 * _18127) + 224] = _15428
        mem[_16644 + (32 * _16725) + (32 * _17479) + (32 * _18127) + 256 len 32 * _15428] = mem[_15294 + ceil32(return_data.size) + 32 len 32 * _15428]
        return memory
          from mem[64]
           len _16644 + (32 * _16725) + (32 * _17479) + (32 * _18127) + (32 * _15428) + -mem[64] + 256
    _12649 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _12676 = mem[_12649]
    require mem[_12649] <= test266151307()
    require _12649 + return_data.size > _12649 + mem[_12649] + 31
    _12694 = mem[_12649 + mem[_12649]]
    if mem[_12649 + mem[_12649]] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[_12649 + mem[_12649]]) + 1 < 0 or _12649 + ceil32(return_data.size) + ceil32(32 * mem[_12649 + mem[_12649]]) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _12649 + ceil32(return_data.size) + ceil32(32 * mem[_12649 + mem[_12649]]) + 1
    mem[_12649 + ceil32(return_data.size)] = _12694
    require _12676 + (32 * _12694) + 32 <= return_data.size
    mem[_12649 + ceil32(return_data.size) + 32 len ceil32(32 * _12694)] = mem[_12649 + _12676 + 32 len ceil32(32 * _12694)]
    var149002 = _12649 + ceil32(return_data.size) + ceil32(32 * _12694) + 32
    _14044 = mem[64]
    mem[mem[64]] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = cd[36]
    mem[mem[64] + 36] = 64
    _14071 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
    idx = 0
    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
    t = mem[64] + 100
    while idx < _14071:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).mem[mem[64] len 4] with:
            gas gas_remaining wei
           args mem[mem[64] + 4 len _14044 + (32 * _14071) + -mem[64] + 96]
    if not ext_call.success:
        _15322 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
            revert with 0, 65
        _15375 = mem[64]
        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        mem[64] = mem[64] + (32 * _15322) + 32
        if not _15322:
            _16428 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            while idx < _16428:
                if idx >= mem[_15375]:
                    revert with 0, 50
                mem[(32 * idx) + _15375 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _16428 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = idx + 1
                continue 
            _16563 = mem[64]
            mem[mem[64]] = 128
            _16617 = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 160 len 32 * _16617] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16617]
            mem[mem[64] + 32] = (32 * _16617) + 160
            _17480 = mem[_9877 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16617) + 160] = mem[_9877 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16617) + 192 len 32 * _17480] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17480]
            mem[mem[64] + 64] = (32 * _16617) + (32 * _17480) + 192
            _18128 = mem[_12649 + ceil32(return_data.size)]
            mem[_16563 + (32 * _16617) + (32 * _17480) + 192] = mem[_12649 + ceil32(return_data.size)]
            mem[_16563 + (32 * _16617) + (32 * _17480) + 224 len 32 * _18128] = mem[_12649 + ceil32(return_data.size) + 32 len 32 * _18128]
            mem[_16563 + 96] = (32 * _16617) + (32 * _17480) + (32 * _18128) + 224
            _18614 = mem[_15375]
            mem[_16563 + (32 * _16617) + (32 * _17480) + (32 * _18128) + 224] = mem[_15375]
            mem[_16563 + (32 * _16617) + (32 * _17480) + (32 * _18128) + 256 len 32 * _18614] = mem[_15375 + 32 len 32 * _18614]
            return memory
              from mem[64]
               len _16563 + (32 * _16617) + (32 * _17480) + (32 * _18128) + (32 * _18614) + -mem[64] + 256
        mem[_15375 + 32 len 32 * _15322] = call.data[calldata.size len 32 * _15322]
        _16429 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        idx = 0
        while idx < _16429:
            if idx >= mem[_15375]:
                revert with 0, 50
            mem[(32 * idx) + _15375 + 32] = 0
            if idx == -1:
                revert with 0, 17
            _16429 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = idx + 1
            continue 
        mem[mem[64]] = 128
        _16618 = mem[_7063 + ceil32(return_data.size)]
        mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
        mem[mem[64] + 160 len 32 * _16618] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16618]
        mem[mem[64] + 32] = (32 * _16618) + 160
        _17481 = mem[_9877 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _16618) + 160] = mem[_9877 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _16618) + 192 len 32 * _17481] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17481]
        mem[mem[64] + 64] = (32 * _16618) + (32 * _17481) + 192
        _18129 = mem[_12649 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _16618) + (32 * _17481) + 192] = mem[_12649 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _16618) + (32 * _17481) + 224 len 32 * _18129] = mem[_12649 + ceil32(return_data.size) + 32 len 32 * _18129]
        mem[mem[64] + 96] = (32 * _16618) + (32 * _17481) + (32 * _18129) + 224
        _18615 = mem[_15375]
        mem[mem[64] + (32 * _16618) + (32 * _17481) + (32 * _18129) + 224] = mem[_15375]
        mem[mem[64] + (32 * _16618) + (32 * _17481) + (32 * _18129) + 256 len 32 * _18615] = mem[_15375 + 32 len 32 * _18615]
        return 128, 
               (32 * _16618) + 160,
               (32 * _16618) + (32 * _17481) + 192,
               (32 * _16618) + (32 * _17481) + (32 * _18129) + 224,
               mem[mem[64] + 128 len (32 * _16618) + (32 * _17481) + (32 * _18129) + (32 * _18615) + 128]
    _15295 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _15376 = mem[_15295]
    require mem[_15295] <= test266151307()
    require _15295 + return_data.size > _15295 + mem[_15295] + 31
    _15430 = mem[_15295 + mem[_15295]]
    if mem[_15295 + mem[_15295]] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[_15295 + mem[_15295]]) + 1 < 0 or _15295 + ceil32(return_data.size) + ceil32(32 * mem[_15295 + mem[_15295]]) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _15295 + ceil32(return_data.size) + ceil32(32 * mem[_15295 + mem[_15295]]) + 1
    mem[_15295 + ceil32(return_data.size)] = _15430
    require _15376 + (32 * _15430) + 32 <= return_data.size
    mem[_15295 + ceil32(return_data.size) + 32 len ceil32(32 * _15430)] = mem[_15295 + _15376 + 32 len ceil32(32 * _15430)]
    mem[mem[64]] = 128
    _16726 = mem[_7063 + ceil32(return_data.size)]
    mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
    mem[mem[64] + 160 len 32 * _16726] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16726]
    mem[mem[64] + 32] = (32 * _16726) + 160
    _17482 = mem[_9877 + ceil32(return_data.size)]
    mem[mem[64] + (32 * _16726) + 160] = mem[_9877 + ceil32(return_data.size)]
    mem[mem[64] + (32 * _16726) + 192 len 32 * _17482] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17482]
    mem[mem[64] + 64] = (32 * _16726) + (32 * _17482) + 192
    _18130 = mem[_12649 + ceil32(return_data.size)]
    mem[mem[64] + (32 * _16726) + (32 * _17482) + 192] = mem[_12649 + ceil32(return_data.size)]
    mem[mem[64] + (32 * _16726) + (32 * _17482) + 224 len 32 * _18130] = mem[_12649 + ceil32(return_data.size) + 32 len 32 * _18130]
    mem[mem[64] + 96] = (32 * _16726) + (32 * _17482) + (32 * _18130) + 224
    mem[mem[64] + (32 * _16726) + (32 * _17482) + (32 * _18130) + 224] = _15430
    mem[mem[64] + (32 * _16726) + (32 * _17482) + (32 * _18130) + 256 len 32 * _15430] = mem[_15295 + ceil32(return_data.size) + 32 len 32 * _15430]
    return Array(len=mem[mem[64] + 128 len (32 * _16726) + (32 * _17482) + (32 * _18130) + 96], data=_15430, mem[mem[64] + (32 * _16726) + (32 * _17482) + (32 * _18130) + 256 len 32 * _15430]), 
           (32 * _16726) + 160,
           (32 * _16726) + (32 * _17482) + 192,
           (32 * _16726) + (32 * _17482) + (32 * _18130) + 224
}

function sub_54d49b1b(?) {
    require calldata.size - 4 >= 192
    require cd[4] == address(cd[4])
    require cd[68] <= test266151307()
    require cd[68] + 35 < calldata.size
    if ('cd', 68).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 68).length) + 97 < 96 or ceil32(32 * ('cd', 68).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 68).length
    require cd[68] + (32 * ('cd', 68).length) + 36 <= calldata.size
    idx = cd[68] + 36
    s = 128
    while idx < cd[68] + (32 * ('cd', 68).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    require cd[100] <= test266151307()
    require cd[100] + 35 < calldata.size
    if ('cd', 100).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 100).length) + 98 < 97 or ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98 > test266151307():
        revert with 0, 65
    mem[ceil32(32 * ('cd', 68).length) + 97] = ('cd', 100).length
    require cd[100] + (32 * ('cd', 100).length) + 36 <= calldata.size
    idx = cd[100] + 36
    s = ceil32(32 * ('cd', 68).length) + 129
    while idx < cd[100] + (32 * ('cd', 100).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    require cd[132] <= test266151307()
    require cd[132] + 35 < calldata.size
    if ('cd', 132).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 132).length) + 99 < 98 or ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99 > test266151307():
        revert with 0, 65
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] = ('cd', 132).length
    require cd[132] + (32 * ('cd', 132).length) + 36 <= calldata.size
    idx = cd[132] + 36
    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
    while idx < cd[132] + (32 * ('cd', 132).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    require cd[164] <= test266151307()
    require cd[164] + 35 < calldata.size
    if ('cd', 164).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 164).length) + 100 < 99 or ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + ceil32(32 * ('cd', 164).length) + 100 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + ceil32(32 * ('cd', 164).length) + 100
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] = ('cd', 164).length
    require cd[164] + (32 * ('cd', 164).length) + 36 <= calldata.size
    idx = cd[164] + 36
    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
    while idx < cd[164] + (32 * ('cd', 164).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + ceil32(32 * ('cd', 164).length) + 100] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + ceil32(32 * ('cd', 164).length) + 104] = cd[36]
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + ceil32(32 * ('cd', 164).length) + 136] = 64
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + ceil32(32 * ('cd', 164).length) + 168] = ('cd', 68).length
    idx = 0
    s = 128
    t = mem[64] + 100
    while idx < ('cd', 68).length:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).mem[mem[64] len 4] with:
            gas gas_remaining wei
           args mem[mem[64] + 4 len ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + ceil32(32 * ('cd', 164).length) + (32 * ('cd', 68).length) + -mem[64] + 196]
    if not ext_call.success:
        _7064 = mem[96]
        if mem[96] > test266151307():
            revert with 0, 65
        _7065 = mem[64]
        mem[mem[64]] = mem[96]
        mem[64] = mem[64] + (32 * _7064) + 32
        if not _7064:
            _8469 = mem[96]
            idx = 0
            while idx < _8469:
                if idx >= mem[_7065]:
                    revert with 0, 50
                mem[(32 * idx) + _7065 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _8469 = mem[96]
                idx = idx + 1
                continue 
            _8474 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _8476 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 100
            while idx < _8476:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _8474 + (32 * _8476) + -mem[64] + 96]
            if not ext_call.success:
                _9878 = mem[ceil32(32 * ('cd', 68).length) + 97]
                if mem[ceil32(32 * ('cd', 68).length) + 97] > test266151307():
                    revert with 0, 65
                _9881 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[64] = mem[64] + (32 * _9878) + 32
                if not _9878:
                    _11258 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = 0
                    while idx < _11258:
                        if idx >= mem[_9881]:
                            revert with 0, 50
                        mem[(32 * idx) + _9881 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _11258 = mem[ceil32(32 * ('cd', 68).length) + 97]
                        idx = idx + 1
                        continue 
                    _11273 = mem[64]
                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 64
                    _11279 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
                    t = mem[64] + 100
                    while idx < _11279:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _11273 + (32 * _11279) + -mem[64] + 96]
                    if not ext_call.success:
                        _12650 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
                            revert with 0, 65
                        _12659 = mem[64]
                        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        mem[64] = mem[64] + (32 * _12650) + 32
                        if _12650:
                            mem[_12659 + 32 len 32 * _12650] = call.data[calldata.size len 32 * _12650]
                            _13956 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                            idx = 0
                            while idx < _13956:
                                if idx >= mem[_12659]:
                                    revert with 0, 50
                                mem[(32 * idx) + _12659 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _13956 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                                idx = idx + 1
                                continue 
                            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = cd[36]
                            mem[mem[64] + 36] = 64
                            _14019 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                            t = mem[64] + 100
                            while idx < _14019:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(cd[4]))
                            staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args cd[36], 64, mem[mem[64] + 68 len (32 * _14019) + 32]
                            if not ext_call.success:
                                _15297 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                                    revert with 0, 65
                                _15325 = mem[64]
                                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                mem[64] = mem[64] + (32 * _15297) + 32
                                if not _15297:
                                    _16378 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                    idx = 0
                                    while idx < _16378:
                                        if idx >= mem[_15325]:
                                            revert with 0, 50
                                        mem[(32 * idx) + _15325 + 32] = 0
                                        if idx == -1:
                                            revert with 0, 17
                                        _16378 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                        idx = idx + 1
                                        continue 
                                    mem[mem[64]] = 128
                                    _16567 = mem[_7065]
                                    mem[mem[64] + 128] = mem[_7065]
                                    mem[mem[64] + 160 len 32 * _16567] = mem[_7065 + 32 len 32 * _16567]
                                    var146001 = _16567
                                    mem[mem[64] + 32] = (32 * _16567) + 160
                                    _17405 = mem[_9881]
                                    mem[mem[64] + (32 * _16567) + 160] = mem[_9881]
                                    mem[mem[64] + (32 * _16567) + 192 len 32 * _17405] = mem[_9881 + 32 len 32 * _17405]
                                    mem[mem[64] + 64] = (32 * _16567) + (32 * _17405) + 192
                                    _18053 = mem[_12659]
                                    mem[mem[64] + (32 * _16567) + (32 * _17405) + 192] = mem[_12659]
                                    mem[mem[64] + (32 * _16567) + (32 * _17405) + 224 len 32 * _18053] = mem[_12659 + 32 len 32 * _18053]
                                    mem[mem[64] + 96] = (32 * _16567) + (32 * _17405) + (32 * _18053) + 224
                                    _18539 = mem[_15325]
                                    mem[mem[64] + (32 * _16567) + (32 * _17405) + (32 * _18053) + 224] = mem[_15325]
                                    mem[mem[64] + (32 * _16567) + (32 * _17405) + (32 * _18053) + 256 len 32 * _18539] = mem[_15325 + 32 len 32 * _18539]
                                    return 128, 
                                           (32 * _16567) + 160,
                                           (32 * _16567) + (32 * _17405) + 192,
                                           (32 * _16567) + (32 * _17405) + (32 * _18053) + 224,
                                           mem[mem[64] + 128 len (32 * _16567) + (32 * _17405) + (32 * _18053) + (32 * _18539) + 128]
                                mem[_15325 + 32 len 32 * _15297] = call.data[calldata.size len 32 * _15297]
                                _16379 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = 0
                                while idx < _16379:
                                    if idx >= mem[_15325]:
                                        revert with 0, 50
                                    mem[(32 * idx) + _15325 + 32] = 0
                                    if idx == -1:
                                        revert with 0, 17
                                    _16379 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                    idx = idx + 1
                                    continue 
                                _16514 = mem[64]
                                mem[mem[64]] = 128
                                _16568 = mem[_7065]
                                mem[mem[64] + 128] = mem[_7065]
                                mem[mem[64] + 160 len 32 * _16568] = mem[_7065 + 32 len 32 * _16568]
                                mem[mem[64] + 32] = (32 * _16568) + 160
                                _17406 = mem[_9881]
                                mem[mem[64] + (32 * _16568) + 160] = mem[_9881]
                                mem[mem[64] + (32 * _16568) + 192 len 32 * _17406] = mem[_9881 + 32 len 32 * _17406]
                                var152001 = _17406
                                mem[mem[64] + 64] = (32 * _16568) + (32 * _17406) + 192
                                _18054 = mem[_12659]
                                mem[_16514 + (32 * _16568) + (32 * _17406) + 192] = mem[_12659]
                                mem[_16514 + (32 * _16568) + (32 * _17406) + 224 len 32 * _18054] = mem[_12659 + 32 len 32 * _18054]
                                mem[_16514 + 96] = (32 * _16568) + (32 * _17406) + (32 * _18054) + 224
                                _18540 = mem[_15325]
                                mem[_16514 + (32 * _16568) + (32 * _17406) + (32 * _18054) + 224] = mem[_15325]
                                mem[_16514 + (32 * _16568) + (32 * _17406) + (32 * _18054) + 256 len 32 * _18540] = mem[_15325 + 32 len 32 * _18540]
                                return memory
                                  from mem[64]
                                   len _16514 + (32 * _16568) + (32 * _17406) + (32 * _18054) + (32 * _18540) + -mem[64] + 256
                            _15270 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15326 = mem[_15270]
                            require mem[_15270] <= test266151307()
                            require _15270 + return_data.size > _15270 + mem[_15270] + 31
                            _15380 = mem[_15270 + mem[_15270]]
                            if mem[_15270 + mem[_15270]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_15270 + mem[_15270]]) + 1 < 0 or _15270 + ceil32(return_data.size) + ceil32(32 * mem[_15270 + mem[_15270]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _15270 + ceil32(return_data.size) + ceil32(32 * mem[_15270 + mem[_15270]]) + 1
                            mem[_15270 + ceil32(return_data.size)] = _15380
                            require _15326 + (32 * _15380) + 32 <= return_data.size
                            mem[_15270 + ceil32(return_data.size) + 32 len ceil32(32 * _15380)] = mem[_15270 + _15326 + 32 len ceil32(32 * _15380)]
                            _16620 = mem[64]
                            mem[mem[64]] = 128
                            _16701 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16701] = mem[_7065 + 32 len 32 * _16701]
                            mem[mem[64] + 32] = (32 * _16701) + 160
                            _17407 = mem[_9881]
                            mem[mem[64] + (32 * _16701) + 160] = mem[_9881]
                            mem[mem[64] + (32 * _16701) + 192 len 32 * _17407] = mem[_9881 + 32 len 32 * _17407]
                            mem[mem[64] + 64] = (32 * _16701) + (32 * _17407) + 192
                            _18055 = mem[_12659]
                            mem[_16620 + (32 * _16701) + (32 * _17407) + 192] = mem[_12659]
                            mem[_16620 + (32 * _16701) + (32 * _17407) + 224 len 32 * _18055] = mem[_12659 + 32 len 32 * _18055]
                            mem[_16620 + 96] = (32 * _16701) + (32 * _17407) + (32 * _18055) + 224
                            mem[_16620 + (32 * _16701) + (32 * _17407) + (32 * _18055) + 224] = _15380
                            mem[_16620 + (32 * _16701) + (32 * _17407) + (32 * _18055) + 256 len 32 * _15380] = mem[_15270 + ceil32(return_data.size) + 32 len 32 * _15380]
                            return memory
                              from mem[64]
                               len _16620 + (32 * _16701) + (32 * _17407) + (32 * _18055) + (32 * _15380) + -mem[64] + 256
                        _13955 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        idx = 0
                        while idx < _13955:
                            if idx >= mem[_12659]:
                                revert with 0, 50
                            mem[(32 * idx) + _12659 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _13955 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = cd[36]
                        mem[mem[64] + 36] = 64
                        _14018 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                        t = mem[64] + 100
                        while idx < _14018:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args cd[36], 64, mem[mem[64] + 68 len (32 * _14018) + 32]
                        if ext_call.success:
                            _15269 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15324 = mem[_15269]
                            require mem[_15269] <= test266151307()
                            require _15269 + return_data.size > _15269 + mem[_15269] + 31
                            _15378 = mem[_15269 + mem[_15269]]
                            if mem[_15269 + mem[_15269]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_15269 + mem[_15269]]) + 1 < 0 or _15269 + ceil32(return_data.size) + ceil32(32 * mem[_15269 + mem[_15269]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _15269 + ceil32(return_data.size) + ceil32(32 * mem[_15269 + mem[_15269]]) + 1
                            mem[_15269 + ceil32(return_data.size)] = _15378
                            require _15324 + (32 * _15378) + 32 <= return_data.size
                            mem[_15269 + ceil32(return_data.size) + 32 len ceil32(32 * _15378)] = mem[_15269 + _15324 + 32 len ceil32(32 * _15378)]
                            _16619 = mem[64]
                            mem[mem[64]] = 128
                            _16700 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16700] = mem[_7065 + 32 len 32 * _16700]
                            mem[mem[64] + 32] = (32 * _16700) + 160
                            _17404 = mem[_9881]
                            mem[mem[64] + (32 * _16700) + 160] = mem[_9881]
                            mem[mem[64] + (32 * _16700) + 192 len 32 * _17404] = mem[_9881 + 32 len 32 * _17404]
                            mem[mem[64] + 64] = (32 * _16700) + (32 * _17404) + 192
                            _18052 = mem[_12659]
                            mem[_16619 + (32 * _16700) + (32 * _17404) + 192] = mem[_12659]
                            mem[_16619 + (32 * _16700) + (32 * _17404) + 224 len 32 * _18052] = mem[_12659 + 32 len 32 * _18052]
                            mem[_16619 + 96] = (32 * _16700) + (32 * _17404) + (32 * _18052) + 224
                            mem[_16619 + (32 * _16700) + (32 * _17404) + (32 * _18052) + 224] = _15378
                            mem[_16619 + (32 * _16700) + (32 * _17404) + (32 * _18052) + 256 len 32 * _15378] = mem[_15269 + ceil32(return_data.size) + 32 len 32 * _15378]
                            return memory
                              from mem[64]
                               len _16619 + (32 * _16700) + (32 * _17404) + (32 * _18052) + (32 * _15378) + -mem[64] + 256
                        _15296 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                            revert with 0, 65
                        _15323 = mem[64]
                        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[64] = mem[64] + (32 * _15296) + 32
                        if _15296:
                            mem[_15323 + 32 len 32 * _15296] = call.data[calldata.size len 32 * _15296]
                            _16377 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16377:
                                if idx >= mem[_15323]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15323 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16377 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            mem[mem[64]] = 128
                            _16566 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16566] = mem[_7065 + 32 len 32 * _16566]
                            var146001 = _16566
                            mem[mem[64] + 32] = (32 * _16566) + 160
                            _17403 = mem[_9881]
                            mem[mem[64] + (32 * _16566) + 160] = mem[_9881]
                            mem[mem[64] + (32 * _16566) + 192 len 32 * _17403] = mem[_9881 + 32 len 32 * _17403]
                            mem[mem[64] + 64] = (32 * _16566) + (32 * _17403) + 192
                            _18051 = mem[_12659]
                            mem[mem[64] + (32 * _16566) + (32 * _17403) + 192] = mem[_12659]
                            mem[mem[64] + (32 * _16566) + (32 * _17403) + 224 len 32 * _18051] = mem[_12659 + 32 len 32 * _18051]
                            mem[mem[64] + 96] = (32 * _16566) + (32 * _17403) + (32 * _18051) + 224
                            _18537 = mem[_15323]
                            mem[mem[64] + (32 * _16566) + (32 * _17403) + (32 * _18051) + 224] = mem[_15323]
                            mem[mem[64] + (32 * _16566) + (32 * _17403) + (32 * _18051) + 256 len 32 * _18537] = mem[_15323 + 32 len 32 * _18537]
                            return 128, 
                                   (32 * _16566) + 160,
                                   (32 * _16566) + (32 * _17403) + 192,
                                   (32 * _16566) + (32 * _17403) + (32 * _18051) + 224,
                                   mem[mem[64] + 128 len (32 * _16566) + (32 * _17403) + (32 * _18051) + (32 * _18537) + 128]
                        _16376 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16376:
                            if idx >= mem[_15323]:
                                revert with 0, 50
                            mem[(32 * idx) + _15323 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16376 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16565 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16565] = mem[_7065 + 32 len 32 * _16565]
                        var145001 = _16565
                        mem[mem[64] + 32] = (32 * _16565) + 160
                        _17402 = mem[_9881]
                        mem[mem[64] + (32 * _16565) + 160] = mem[_9881]
                        mem[mem[64] + (32 * _16565) + 192 len 32 * _17402] = mem[_9881 + 32 len 32 * _17402]
                        var150001 = _17402
                        var150002 = _9881 + (32 * _17402) + 32
                        var150007 = mem[64] + (32 * _16565) + (32 * _17402) + 192
                        mem[mem[64] + 64] = (32 * _16565) + (32 * _17402) + 192
                        _18050 = mem[_12659]
                        mem[mem[64] + (32 * _16565) + (32 * _17402) + 192] = mem[_12659]
                        mem[mem[64] + (32 * _16565) + (32 * _17402) + 224 len 32 * _18050] = mem[_12659 + 32 len 32 * _18050]
                        var155001 = _18050
                        mem[mem[64] + 96] = (32 * _16565) + (32 * _17402) + (32 * _18050) + 224
                        _18536 = mem[_15323]
                        mem[mem[64] + (32 * _16565) + (32 * _17402) + (32 * _18050) + 224] = mem[_15323]
                        mem[mem[64] + (32 * _16565) + (32 * _17402) + (32 * _18050) + 256 len 32 * _18536] = mem[_15323 + 32 len 32 * _18536]
                        var160001 = _18536
                        var160002 = _15323 + (32 * _18536) + 32
                        var160007 = mem[64] + (32 * _16565) + (32 * _17402) + (32 * _18050) + (32 * _18536) + 256
                        return 128, 
                               (32 * _16565) + 160,
                               (32 * _16565) + (32 * _17402) + 192,
                               (32 * _16565) + (32 * _17402) + (32 * _18050) + 224,
                               mem[mem[64] + 128 len (32 * _16565) + (32 * _17402) + (32 * _18050) + (32 * _18536) + 128]
                    _12641 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _12660 = mem[_12641]
                    require mem[_12641] <= test266151307()
                    require _12641 + return_data.size > _12641 + mem[_12641] + 31
                    _12678 = mem[_12641 + mem[_12641]]
                    if mem[_12641 + mem[_12641]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_12641 + mem[_12641]]) + 1 < 0 or _12641 + ceil32(return_data.size) + ceil32(32 * mem[_12641 + mem[_12641]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _12641 + ceil32(return_data.size) + ceil32(32 * mem[_12641 + mem[_12641]]) + 1
                    mem[_12641 + ceil32(return_data.size)] = _12678
                    require _12660 + (32 * _12678) + 32 <= return_data.size
                    mem[_12641 + ceil32(return_data.size) + 32 len ceil32(32 * _12678)] = mem[_12641 + _12660 + 32 len ceil32(32 * _12678)]
                    var127002 = _12641 + ceil32(return_data.size) + ceil32(32 * _12678) + 32
                    _14036 = mem[64]
                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 64
                    _14063 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                    t = mem[64] + 100
                    while idx < _14063:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _14036 + (32 * _14063) + -mem[64] + 96]
                    if not ext_call.success:
                        _15298 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                            revert with 0, 65
                        _15327 = mem[64]
                        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[64] = mem[64] + (32 * _15298) + 32
                        if not _15298:
                            _16380 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16380:
                                if idx >= mem[_15327]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15327 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16380 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            mem[mem[64]] = 128
                            _16569 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16569] = mem[_7065 + 32 len 32 * _16569]
                            mem[mem[64] + 32] = (32 * _16569) + 160
                            _17408 = mem[_9881]
                            mem[mem[64] + (32 * _16569) + 160] = mem[_9881]
                            mem[mem[64] + (32 * _16569) + 192 len 32 * _17408] = mem[_9881 + 32 len 32 * _17408]
                            mem[mem[64] + 64] = (32 * _16569) + (32 * _17408) + 192
                            _18056 = mem[_12641 + ceil32(return_data.size)]
                            mem[mem[64] + (32 * _16569) + (32 * _17408) + 192] = mem[_12641 + ceil32(return_data.size)]
                            mem[mem[64] + (32 * _16569) + (32 * _17408) + 224 len 32 * _18056] = mem[_12641 + ceil32(return_data.size) + 32 len 32 * _18056]
                            mem[mem[64] + 96] = (32 * _16569) + (32 * _17408) + (32 * _18056) + 224
                            _18542 = mem[_15327]
                            mem[mem[64] + (32 * _16569) + (32 * _17408) + (32 * _18056) + 224] = mem[_15327]
                            mem[mem[64] + (32 * _16569) + (32 * _17408) + (32 * _18056) + 256 len 32 * _18542] = mem[_15327 + 32 len 32 * _18542]
                            return 128, 
                                   (32 * _16569) + 160,
                                   (32 * _16569) + (32 * _17408) + 192,
                                   (32 * _16569) + (32 * _17408) + (32 * _18056) + 224,
                                   mem[mem[64] + 128 len (32 * _16569) + (32 * _17408) + (32 * _18056) + (32 * _18542) + 128]
                        mem[_15327 + 32 len 32 * _15298] = call.data[calldata.size len 32 * _15298]
                        _16381 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16381:
                            if idx >= mem[_15327]:
                                revert with 0, 50
                            mem[(32 * idx) + _15327 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16381 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16570 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16570] = mem[_7065 + 32 len 32 * _16570]
                        mem[mem[64] + 32] = (32 * _16570) + 160
                        _17409 = mem[_9881]
                        mem[mem[64] + (32 * _16570) + 160] = mem[_9881]
                        mem[mem[64] + (32 * _16570) + 192 len 32 * _17409] = mem[_9881 + 32 len 32 * _17409]
                        mem[mem[64] + 64] = (32 * _16570) + (32 * _17409) + 192
                        _18057 = mem[_12641 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16570) + (32 * _17409) + 192] = mem[_12641 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16570) + (32 * _17409) + 224 len 32 * _18057] = mem[_12641 + ceil32(return_data.size) + 32 len 32 * _18057]
                        mem[mem[64] + 96] = (32 * _16570) + (32 * _17409) + (32 * _18057) + 224
                        _18543 = mem[_15327]
                        mem[mem[64] + (32 * _16570) + (32 * _17409) + (32 * _18057) + 224] = mem[_15327]
                        mem[mem[64] + (32 * _16570) + (32 * _17409) + (32 * _18057) + 256 len 32 * _18543] = mem[_15327 + 32 len 32 * _18543]
                        return 128, 
                               (32 * _16570) + 160,
                               (32 * _16570) + (32 * _17409) + 192,
                               (32 * _16570) + (32 * _17409) + (32 * _18057) + 224,
                               mem[mem[64] + 128 len (32 * _16570) + (32 * _17409) + (32 * _18057) + (32 * _18543) + 128]
                    _15271 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _15328 = mem[_15271]
                    require mem[_15271] <= test266151307()
                    require _15271 + return_data.size > _15271 + mem[_15271] + 31
                    _15382 = mem[_15271 + mem[_15271]]
                    if mem[_15271 + mem[_15271]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_15271 + mem[_15271]]) + 1 < 0 or _15271 + ceil32(return_data.size) + ceil32(32 * mem[_15271 + mem[_15271]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _15271 + ceil32(return_data.size) + ceil32(32 * mem[_15271 + mem[_15271]]) + 1
                    mem[_15271 + ceil32(return_data.size)] = _15382
                    require _15328 + (32 * _15382) + 32 <= return_data.size
                    mem[_15271 + ceil32(return_data.size) + 32 len ceil32(32 * _15382)] = mem[_15271 + _15328 + 32 len ceil32(32 * _15382)]
                    mem[mem[64]] = 128
                    _16702 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16702] = mem[_7065 + 32 len 32 * _16702]
                    mem[mem[64] + 32] = (32 * _16702) + 160
                    _17410 = mem[_9881]
                    mem[mem[64] + (32 * _16702) + 160] = mem[_9881]
                    mem[mem[64] + (32 * _16702) + 192 len 32 * _17410] = mem[_9881 + 32 len 32 * _17410]
                    mem[mem[64] + 64] = (32 * _16702) + (32 * _17410) + 192
                    _18058 = mem[_12641 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16702) + (32 * _17410) + 192] = mem[_12641 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16702) + (32 * _17410) + 224 len 32 * _18058] = mem[_12641 + ceil32(return_data.size) + 32 len 32 * _18058]
                    mem[mem[64] + 96] = (32 * _16702) + (32 * _17410) + (32 * _18058) + 224
                    mem[mem[64] + (32 * _16702) + (32 * _17410) + (32 * _18058) + 224] = _15382
                    mem[mem[64] + (32 * _16702) + (32 * _17410) + (32 * _18058) + 256 len 32 * _15382] = mem[_15271 + ceil32(return_data.size) + 32 len 32 * _15382]
                    return Array(len=mem[mem[64] + 128 len (32 * _16702) + (32 * _17410) + (32 * _18058) + 96], data=_15382, mem[mem[64] + (32 * _16702) + (32 * _17410) + (32 * _18058) + 256 len 32 * _15382]), 
                           (32 * _16702) + 160,
                           (32 * _16702) + (32 * _17410) + 192,
                           (32 * _16702) + (32 * _17410) + (32 * _18058) + 224
                mem[_9881 + 32 len 32 * _9878] = call.data[calldata.size len 32 * _9878]
                _11259 = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                while idx < _11259:
                    if idx >= mem[_9881]:
                        revert with 0, 50
                    mem[(32 * idx) + _9881 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _11259 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = idx + 1
                    continue 
                _11274 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _11280 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
                t = mem[64] + 100
                while idx < _11280:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _11274 + (32 * _11280) + -mem[64] + 96]
                if not ext_call.success:
                    _12651 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
                        revert with 0, 65
                    _12661 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    mem[64] = mem[64] + (32 * _12651) + 32
                    if not _12651:
                        _13957 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        idx = 0
                        while idx < _13957:
                            if idx >= mem[_12661]:
                                revert with 0, 50
                            mem[(32 * idx) + _12661 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _13957 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = cd[36]
                        mem[mem[64] + 36] = 64
                        _14020 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                        t = mem[64] + 100
                        while idx < _14020:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args cd[36], 64, mem[mem[64] + 68 len (32 * _14020) + 32]
                        if not ext_call.success:
                            _15299 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                                revert with 0, 65
                            _15329 = mem[64]
                            mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            mem[64] = mem[64] + (32 * _15299) + 32
                            if not _15299:
                                _16382 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = 0
                                while idx < _16382:
                                    if idx >= mem[_15329]:
                                        revert with 0, 50
                                    mem[(32 * idx) + _15329 + 32] = 0
                                    if idx == -1:
                                        revert with 0, 17
                                    _16382 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                    idx = idx + 1
                                    continue 
                                mem[mem[64]] = 128
                                _16571 = mem[_7065]
                                mem[mem[64] + 128] = mem[_7065]
                                mem[mem[64] + 160 len 32 * _16571] = mem[_7065 + 32 len 32 * _16571]
                                var146001 = _16571
                                mem[mem[64] + 32] = (32 * _16571) + 160
                                _17411 = mem[_9881]
                                mem[mem[64] + (32 * _16571) + 160] = mem[_9881]
                                mem[mem[64] + (32 * _16571) + 192 len 32 * _17411] = mem[_9881 + 32 len 32 * _17411]
                                mem[mem[64] + 64] = (32 * _16571) + (32 * _17411) + 192
                                _18059 = mem[_12661]
                                mem[mem[64] + (32 * _16571) + (32 * _17411) + 192] = mem[_12661]
                                mem[mem[64] + (32 * _16571) + (32 * _17411) + 224 len 32 * _18059] = mem[_12661 + 32 len 32 * _18059]
                                mem[mem[64] + 96] = (32 * _16571) + (32 * _17411) + (32 * _18059) + 224
                                _18545 = mem[_15329]
                                mem[mem[64] + (32 * _16571) + (32 * _17411) + (32 * _18059) + 224] = mem[_15329]
                                mem[mem[64] + (32 * _16571) + (32 * _17411) + (32 * _18059) + 256 len 32 * _18545] = mem[_15329 + 32 len 32 * _18545]
                                return 128, 
                                       (32 * _16571) + 160,
                                       (32 * _16571) + (32 * _17411) + 192,
                                       (32 * _16571) + (32 * _17411) + (32 * _18059) + 224,
                                       mem[mem[64] + 128 len (32 * _16571) + (32 * _17411) + (32 * _18059) + (32 * _18545) + 128]
                            mem[_15329 + 32 len 32 * _15299] = call.data[calldata.size len 32 * _15299]
                            _16383 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16383:
                                if idx >= mem[_15329]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15329 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16383 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            mem[mem[64]] = 128
                            _16572 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16572] = mem[_7065 + 32 len 32 * _16572]
                            mem[mem[64] + 32] = (32 * _16572) + 160
                            _17412 = mem[_9881]
                            mem[mem[64] + (32 * _16572) + 160] = mem[_9881]
                            mem[mem[64] + (32 * _16572) + 192 len 32 * _17412] = mem[_9881 + 32 len 32 * _17412]
                            var152001 = _17412
                            mem[mem[64] + 64] = (32 * _16572) + (32 * _17412) + 192
                            _18060 = mem[_12661]
                            mem[mem[64] + (32 * _16572) + (32 * _17412) + 192] = mem[_12661]
                            mem[mem[64] + (32 * _16572) + (32 * _17412) + 224 len 32 * _18060] = mem[_12661 + 32 len 32 * _18060]
                            mem[mem[64] + 96] = (32 * _16572) + (32 * _17412) + (32 * _18060) + 224
                            _18546 = mem[_15329]
                            mem[mem[64] + (32 * _16572) + (32 * _17412) + (32 * _18060) + 224] = mem[_15329]
                            mem[mem[64] + (32 * _16572) + (32 * _17412) + (32 * _18060) + 256 len 32 * _18546] = mem[_15329 + 32 len 32 * _18546]
                            return 128, 
                                   (32 * _16572) + 160,
                                   (32 * _16572) + (32 * _17412) + 192,
                                   (32 * _16572) + (32 * _17412) + (32 * _18060) + 224,
                                   mem[mem[64] + 128 len (32 * _16572) + (32 * _17412) + (32 * _18060) + (32 * _18546) + 128]
                        _15272 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _15330 = mem[_15272]
                        require mem[_15272] <= test266151307()
                        require _15272 + return_data.size > _15272 + mem[_15272] + 31
                        _15384 = mem[_15272 + mem[_15272]]
                        if mem[_15272 + mem[_15272]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_15272 + mem[_15272]]) + 1 < 0 or _15272 + ceil32(return_data.size) + ceil32(32 * mem[_15272 + mem[_15272]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _15272 + ceil32(return_data.size) + ceil32(32 * mem[_15272 + mem[_15272]]) + 1
                        mem[_15272 + ceil32(return_data.size)] = _15384
                        require _15330 + (32 * _15384) + 32 <= return_data.size
                        mem[_15272 + ceil32(return_data.size) + 32 len ceil32(32 * _15384)] = mem[_15272 + _15330 + 32 len ceil32(32 * _15384)]
                        _16622 = mem[64]
                        mem[mem[64]] = 128
                        _16703 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16703] = mem[_7065 + 32 len 32 * _16703]
                        mem[mem[64] + 32] = (32 * _16703) + 160
                        _17413 = mem[_9881]
                        mem[mem[64] + (32 * _16703) + 160] = mem[_9881]
                        mem[mem[64] + (32 * _16703) + 192 len 32 * _17413] = mem[_9881 + 32 len 32 * _17413]
                        mem[mem[64] + 64] = (32 * _16703) + (32 * _17413) + 192
                        _18061 = mem[_12661]
                        mem[_16622 + (32 * _16703) + (32 * _17413) + 192] = mem[_12661]
                        mem[_16622 + (32 * _16703) + (32 * _17413) + 224 len 32 * _18061] = mem[_12661 + 32 len 32 * _18061]
                        mem[_16622 + 96] = (32 * _16703) + (32 * _17413) + (32 * _18061) + 224
                        mem[_16622 + (32 * _16703) + (32 * _17413) + (32 * _18061) + 224] = _15384
                        mem[_16622 + (32 * _16703) + (32 * _17413) + (32 * _18061) + 256 len 32 * _15384] = mem[_15272 + ceil32(return_data.size) + 32 len 32 * _15384]
                        return memory
                          from mem[64]
                           len _16622 + (32 * _16703) + (32 * _17413) + (32 * _18061) + (32 * _15384) + -mem[64] + 256
                    mem[_12661 + 32 len 32 * _12651] = call.data[calldata.size len 32 * _12651]
                    _13958 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = 0
                    while idx < _13958:
                        if idx >= mem[_12661]:
                            revert with 0, 50
                        mem[(32 * idx) + _12661 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _13958 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        idx = idx + 1
                        continue 
                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 64
                    _14021 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                    t = mem[64] + 100
                    while idx < _14021:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args cd[36], 64, mem[mem[64] + 68 len (32 * _14021) + 32]
                    if not ext_call.success:
                        _15300 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                            revert with 0, 65
                        _15331 = mem[64]
                        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[64] = mem[64] + (32 * _15300) + 32
                        if not _15300:
                            _16384 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16384:
                                if idx >= mem[_15331]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15331 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16384 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            mem[mem[64]] = 128
                            _16573 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16573] = mem[_7065 + 32 len 32 * _16573]
                            mem[mem[64] + 32] = (32 * _16573) + 160
                            _17414 = mem[_9881]
                            mem[mem[64] + (32 * _16573) + 160] = mem[_9881]
                            mem[mem[64] + (32 * _16573) + 192 len 32 * _17414] = mem[_9881 + 32 len 32 * _17414]
                            var152001 = _17414
                            mem[mem[64] + 64] = (32 * _16573) + (32 * _17414) + 192
                            _18062 = mem[_12661]
                            mem[mem[64] + (32 * _16573) + (32 * _17414) + 192] = mem[_12661]
                            mem[mem[64] + (32 * _16573) + (32 * _17414) + 224 len 32 * _18062] = mem[_12661 + 32 len 32 * _18062]
                            mem[mem[64] + 96] = (32 * _16573) + (32 * _17414) + (32 * _18062) + 224
                            _18548 = mem[_15331]
                            mem[mem[64] + (32 * _16573) + (32 * _17414) + (32 * _18062) + 224] = mem[_15331]
                            mem[mem[64] + (32 * _16573) + (32 * _17414) + (32 * _18062) + 256 len 32 * _18548] = mem[_15331 + 32 len 32 * _18548]
                            return 128, 
                                   (32 * _16573) + 160,
                                   (32 * _16573) + (32 * _17414) + 192,
                                   (32 * _16573) + (32 * _17414) + (32 * _18062) + 224,
                                   mem[mem[64] + 128 len (32 * _16573) + (32 * _17414) + (32 * _18062) + (32 * _18548) + 128]
                        mem[_15331 + 32 len 32 * _15300] = call.data[calldata.size len 32 * _15300]
                        _16385 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16385:
                            if idx >= mem[_15331]:
                                revert with 0, 50
                            mem[(32 * idx) + _15331 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16385 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        _16520 = mem[64]
                        mem[mem[64]] = 128
                        _16574 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16574] = mem[_7065 + 32 len 32 * _16574]
                        mem[mem[64] + 32] = (32 * _16574) + 160
                        _17415 = mem[_9881]
                        mem[mem[64] + (32 * _16574) + 160] = mem[_9881]
                        mem[mem[64] + (32 * _16574) + 192 len 32 * _17415] = mem[_9881 + 32 len 32 * _17415]
                        var153001 = _17415
                        mem[mem[64] + 64] = (32 * _16574) + (32 * _17415) + 192
                        _18063 = mem[_12661]
                        mem[_16520 + (32 * _16574) + (32 * _17415) + 192] = mem[_12661]
                        mem[_16520 + (32 * _16574) + (32 * _17415) + 224 len 32 * _18063] = mem[_12661 + 32 len 32 * _18063]
                        mem[_16520 + 96] = (32 * _16574) + (32 * _17415) + (32 * _18063) + 224
                        _18549 = mem[_15331]
                        mem[_16520 + (32 * _16574) + (32 * _17415) + (32 * _18063) + 224] = mem[_15331]
                        mem[_16520 + (32 * _16574) + (32 * _17415) + (32 * _18063) + 256 len 32 * _18549] = mem[_15331 + 32 len 32 * _18549]
                        var163001 = _18549
                        return memory
                          from mem[64]
                           len _16520 + (32 * _16574) + (32 * _17415) + (32 * _18063) + (32 * _18549) + -mem[64] + 256
                    _15273 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _15332 = mem[_15273]
                    require mem[_15273] <= test266151307()
                    require _15273 + return_data.size > _15273 + mem[_15273] + 31
                    _15386 = mem[_15273 + mem[_15273]]
                    if mem[_15273 + mem[_15273]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_15273 + mem[_15273]]) + 1 < 0 or _15273 + ceil32(return_data.size) + ceil32(32 * mem[_15273 + mem[_15273]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _15273 + ceil32(return_data.size) + ceil32(32 * mem[_15273 + mem[_15273]]) + 1
                    mem[_15273 + ceil32(return_data.size)] = _15386
                    require _15332 + (32 * _15386) + 32 <= return_data.size
                    mem[_15273 + ceil32(return_data.size) + 32 len ceil32(32 * _15386)] = mem[_15273 + _15332 + 32 len ceil32(32 * _15386)]
                    mem[mem[64]] = 128
                    _16704 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16704] = mem[_7065 + 32 len 32 * _16704]
                    mem[mem[64] + 32] = (32 * _16704) + 160
                    _17416 = mem[_9881]
                    mem[mem[64] + (32 * _16704) + 160] = mem[_9881]
                    mem[mem[64] + (32 * _16704) + 192 len 32 * _17416] = mem[_9881 + 32 len 32 * _17416]
                    var163001 = _17416
                    mem[mem[64] + 64] = (32 * _16704) + (32 * _17416) + 192
                    _18064 = mem[_12661]
                    mem[mem[64] + (32 * _16704) + (32 * _17416) + 192] = mem[_12661]
                    mem[mem[64] + (32 * _16704) + (32 * _17416) + 224 len 32 * _18064] = mem[_12661 + 32 len 32 * _18064]
                    mem[mem[64] + 96] = (32 * _16704) + (32 * _17416) + (32 * _18064) + 224
                    mem[mem[64] + (32 * _16704) + (32 * _17416) + (32 * _18064) + 224] = _15386
                    mem[mem[64] + (32 * _16704) + (32 * _17416) + (32 * _18064) + 256 len 32 * _15386] = mem[_15273 + ceil32(return_data.size) + 32 len 32 * _15386]
                    return Array(len=mem[mem[64] + 128 len (32 * _16704) + (32 * _17416) + (32 * _18064) + 96], data=_15386, mem[mem[64] + (32 * _16704) + (32 * _17416) + (32 * _18064) + 256 len 32 * _15386]), 
                           (32 * _16704) + 160,
                           (32 * _16704) + (32 * _17416) + 192,
                           (32 * _16704) + (32 * _17416) + (32 * _18064) + 224
                _12642 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _12662 = mem[_12642]
                require mem[_12642] <= test266151307()
                require _12642 + return_data.size > _12642 + mem[_12642] + 31
                _12680 = mem[_12642 + mem[_12642]]
                if mem[_12642 + mem[_12642]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_12642 + mem[_12642]]) + 1 < 0 or _12642 + ceil32(return_data.size) + ceil32(32 * mem[_12642 + mem[_12642]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _12642 + ceil32(return_data.size) + ceil32(32 * mem[_12642 + mem[_12642]]) + 1
                mem[_12642 + ceil32(return_data.size)] = _12680
                require _12662 + (32 * _12680) + 32 <= return_data.size
                mem[_12642 + ceil32(return_data.size) + 32 len ceil32(32 * _12680)] = mem[_12642 + _12662 + 32 len ceil32(32 * _12680)]
                var128002 = _12642 + ceil32(return_data.size) + ceil32(32 * _12680) + 32
                _14037 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _14064 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                t = mem[64] + 100
                while idx < _14064:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _14037 + (32 * _14064) + -mem[64] + 96]
                if not ext_call.success:
                    _15301 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                        revert with 0, 65
                    _15333 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[64] = mem[64] + (32 * _15301) + 32
                    if not _15301:
                        _16386 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16386:
                            if idx >= mem[_15333]:
                                revert with 0, 50
                            mem[(32 * idx) + _15333 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16386 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16575 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16575] = mem[_7065 + 32 len 32 * _16575]
                        mem[mem[64] + 32] = (32 * _16575) + 160
                        _17417 = mem[_9881]
                        mem[mem[64] + (32 * _16575) + 160] = mem[_9881]
                        mem[mem[64] + (32 * _16575) + 192 len 32 * _17417] = mem[_9881 + 32 len 32 * _17417]
                        mem[mem[64] + 64] = (32 * _16575) + (32 * _17417) + 192
                        _18065 = mem[_12642 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16575) + (32 * _17417) + 192] = mem[_12642 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16575) + (32 * _17417) + 224 len 32 * _18065] = mem[_12642 + ceil32(return_data.size) + 32 len 32 * _18065]
                        mem[mem[64] + 96] = (32 * _16575) + (32 * _17417) + (32 * _18065) + 224
                        _18551 = mem[_15333]
                        mem[mem[64] + (32 * _16575) + (32 * _17417) + (32 * _18065) + 224] = mem[_15333]
                        mem[mem[64] + (32 * _16575) + (32 * _17417) + (32 * _18065) + 256 len 32 * _18551] = mem[_15333 + 32 len 32 * _18551]
                        return 128, 
                               (32 * _16575) + 160,
                               (32 * _16575) + (32 * _17417) + 192,
                               (32 * _16575) + (32 * _17417) + (32 * _18065) + 224,
                               mem[mem[64] + 128 len (32 * _16575) + (32 * _17417) + (32 * _18065) + (32 * _18551) + 128]
                    mem[_15333 + 32 len 32 * _15301] = call.data[calldata.size len 32 * _15301]
                    _16387 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16387:
                        if idx >= mem[_15333]:
                            revert with 0, 50
                        mem[(32 * idx) + _15333 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16387 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    _16522 = mem[64]
                    mem[mem[64]] = 128
                    _16576 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16576] = mem[_7065 + 32 len 32 * _16576]
                    mem[mem[64] + 32] = (32 * _16576) + 160
                    _17418 = mem[_9881]
                    mem[mem[64] + (32 * _16576) + 160] = mem[_9881]
                    mem[mem[64] + (32 * _16576) + 192 len 32 * _17418] = mem[_9881 + 32 len 32 * _17418]
                    var163001 = _17418
                    mem[mem[64] + 64] = (32 * _16576) + (32 * _17418) + 192
                    _18066 = mem[_12642 + ceil32(return_data.size)]
                    mem[_16522 + (32 * _16576) + (32 * _17418) + 192] = mem[_12642 + ceil32(return_data.size)]
                    mem[_16522 + (32 * _16576) + (32 * _17418) + 224 len 32 * _18066] = mem[_12642 + ceil32(return_data.size) + 32 len 32 * _18066]
                    mem[_16522 + 96] = (32 * _16576) + (32 * _17418) + (32 * _18066) + 224
                    _18552 = mem[_15333]
                    mem[_16522 + (32 * _16576) + (32 * _17418) + (32 * _18066) + 224] = mem[_15333]
                    mem[_16522 + (32 * _16576) + (32 * _17418) + (32 * _18066) + 256 len 32 * _18552] = mem[_15333 + 32 len 32 * _18552]
                    return memory
                      from mem[64]
                       len _16522 + (32 * _16576) + (32 * _17418) + (32 * _18066) + (32 * _18552) + -mem[64] + 256
                _15274 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _15334 = mem[_15274]
                require mem[_15274] <= test266151307()
                require _15274 + return_data.size > _15274 + mem[_15274] + 31
                _15388 = mem[_15274 + mem[_15274]]
                if mem[_15274 + mem[_15274]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_15274 + mem[_15274]]) + 1 < 0 or _15274 + ceil32(return_data.size) + ceil32(32 * mem[_15274 + mem[_15274]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _15274 + ceil32(return_data.size) + ceil32(32 * mem[_15274 + mem[_15274]]) + 1
                mem[_15274 + ceil32(return_data.size)] = _15388
                require _15334 + (32 * _15388) + 32 <= return_data.size
                mem[_15274 + ceil32(return_data.size) + 32 len ceil32(32 * _15388)] = mem[_15274 + _15334 + 32 len ceil32(32 * _15388)]
                _16624 = mem[64]
                mem[mem[64]] = 128
                _16705 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16705] = mem[_7065 + 32 len 32 * _16705]
                mem[mem[64] + 32] = (32 * _16705) + 160
                _17419 = mem[_9881]
                mem[mem[64] + (32 * _16705) + 160] = mem[_9881]
                mem[mem[64] + (32 * _16705) + 192 len 32 * _17419] = mem[_9881 + 32 len 32 * _17419]
                mem[mem[64] + 64] = (32 * _16705) + (32 * _17419) + 192
                _18067 = mem[_12642 + ceil32(return_data.size)]
                mem[_16624 + (32 * _16705) + (32 * _17419) + 192] = mem[_12642 + ceil32(return_data.size)]
                mem[_16624 + (32 * _16705) + (32 * _17419) + 224 len 32 * _18067] = mem[_12642 + ceil32(return_data.size) + 32 len 32 * _18067]
                mem[_16624 + 96] = (32 * _16705) + (32 * _17419) + (32 * _18067) + 224
                mem[_16624 + (32 * _16705) + (32 * _17419) + (32 * _18067) + 224] = _15388
                mem[_16624 + (32 * _16705) + (32 * _17419) + (32 * _18067) + 256 len 32 * _15388] = mem[_15274 + ceil32(return_data.size) + 32 len 32 * _15388]
                return memory
                  from mem[64]
                   len _16624 + (32 * _16705) + (32 * _17419) + (32 * _18067) + (32 * _15388) + -mem[64] + 256
            _9875 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _9882 = mem[_9875]
            require mem[_9875] <= test266151307()
            require _9875 + return_data.size > _9875 + mem[_9875] + 31
            _9888 = mem[_9875 + mem[_9875]]
            if mem[_9875 + mem[_9875]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_9875 + mem[_9875]]) + 1 < 0 or _9875 + ceil32(return_data.size) + ceil32(32 * mem[_9875 + mem[_9875]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _9875 + ceil32(return_data.size) + ceil32(32 * mem[_9875 + mem[_9875]]) + 1
            mem[_9875 + ceil32(return_data.size)] = _9888
            require _9882 + (32 * _9888) + 32 <= return_data.size
            mem[_9875 + ceil32(return_data.size) + 32 len ceil32(32 * _9888)] = mem[_9875 + _9882 + 32 len ceil32(32 * _9888)]
            var109002 = _9875 + ceil32(return_data.size) + ceil32(32 * _9888) + 32
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _11294 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
            t = mem[64] + 100
            while idx < _11294:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args cd[36], 64, mem[mem[64] + 68 len (32 * _11294) + 32]
            if not ext_call.success:
                _12652 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
                    revert with 0, 65
                _12663 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                mem[64] = mem[64] + (32 * _12652) + 32
                if not _12652:
                    _13959 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = 0
                    while idx < _13959:
                        if idx >= mem[_12663]:
                            revert with 0, 50
                        mem[(32 * idx) + _12663 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _13959 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        idx = idx + 1
                        continue 
                    _14004 = mem[64]
                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 64
                    _14022 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                    t = mem[64] + 100
                    while idx < _14022:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _14004 + (32 * _14022) + -mem[64] + 96]
                    if not ext_call.success:
                        _15302 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                            revert with 0, 65
                        _15335 = mem[64]
                        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[64] = mem[64] + (32 * _15302) + 32
                        if not _15302:
                            _16388 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16388:
                                if idx >= mem[_15335]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15335 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16388 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            _16523 = mem[64]
                            mem[mem[64]] = 128
                            _16577 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16577] = mem[_7065 + 32 len 32 * _16577]
                            mem[mem[64] + 32] = (32 * _16577) + 160
                            _17420 = mem[_9875 + ceil32(return_data.size)]
                            mem[mem[64] + (32 * _16577) + 160] = mem[_9875 + ceil32(return_data.size)]
                            mem[mem[64] + (32 * _16577) + 192 len 32 * _17420] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17420]
                            mem[mem[64] + 64] = (32 * _16577) + (32 * _17420) + 192
                            _18068 = mem[_12663]
                            mem[_16523 + (32 * _16577) + (32 * _17420) + 192] = mem[_12663]
                            mem[_16523 + (32 * _16577) + (32 * _17420) + 224 len 32 * _18068] = mem[_12663 + 32 len 32 * _18068]
                            mem[_16523 + 96] = (32 * _16577) + (32 * _17420) + (32 * _18068) + 224
                            _18554 = mem[_15335]
                            mem[_16523 + (32 * _16577) + (32 * _17420) + (32 * _18068) + 224] = mem[_15335]
                            mem[_16523 + (32 * _16577) + (32 * _17420) + (32 * _18068) + 256 len 32 * _18554] = mem[_15335 + 32 len 32 * _18554]
                            return memory
                              from mem[64]
                               len _16523 + (32 * _16577) + (32 * _17420) + (32 * _18068) + (32 * _18554) + -mem[64] + 256
                        mem[_15335 + 32 len 32 * _15302] = call.data[calldata.size len 32 * _15302]
                        _16389 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16389:
                            if idx >= mem[_15335]:
                                revert with 0, 50
                            mem[(32 * idx) + _15335 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16389 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16578 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16578] = mem[_7065 + 32 len 32 * _16578]
                        mem[mem[64] + 32] = (32 * _16578) + 160
                        _17421 = mem[_9875 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16578) + 160] = mem[_9875 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16578) + 192 len 32 * _17421] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17421]
                        mem[mem[64] + 64] = (32 * _16578) + (32 * _17421) + 192
                        _18069 = mem[_12663]
                        mem[mem[64] + (32 * _16578) + (32 * _17421) + 192] = mem[_12663]
                        mem[mem[64] + (32 * _16578) + (32 * _17421) + 224 len 32 * _18069] = mem[_12663 + 32 len 32 * _18069]
                        mem[mem[64] + 96] = (32 * _16578) + (32 * _17421) + (32 * _18069) + 224
                        _18555 = mem[_15335]
                        mem[mem[64] + (32 * _16578) + (32 * _17421) + (32 * _18069) + 224] = mem[_15335]
                        mem[mem[64] + (32 * _16578) + (32 * _17421) + (32 * _18069) + 256 len 32 * _18555] = mem[_15335 + 32 len 32 * _18555]
                        return 128, 
                               (32 * _16578) + 160,
                               (32 * _16578) + (32 * _17421) + 192,
                               (32 * _16578) + (32 * _17421) + (32 * _18069) + 224,
                               mem[mem[64] + 128 len (32 * _16578) + (32 * _17421) + (32 * _18069) + (32 * _18555) + 128]
                    _15275 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _15336 = mem[_15275]
                    require mem[_15275] <= test266151307()
                    require _15275 + return_data.size > _15275 + mem[_15275] + 31
                    _15390 = mem[_15275 + mem[_15275]]
                    if mem[_15275 + mem[_15275]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_15275 + mem[_15275]]) + 1 < 0 or _15275 + ceil32(return_data.size) + ceil32(32 * mem[_15275 + mem[_15275]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _15275 + ceil32(return_data.size) + ceil32(32 * mem[_15275 + mem[_15275]]) + 1
                    mem[_15275 + ceil32(return_data.size)] = _15390
                    require _15336 + (32 * _15390) + 32 <= return_data.size
                    mem[_15275 + ceil32(return_data.size) + 32 len ceil32(32 * _15390)] = mem[_15275 + _15336 + 32 len ceil32(32 * _15390)]
                    _16625 = mem[64]
                    mem[mem[64]] = 128
                    _16706 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16706] = mem[_7065 + 32 len 32 * _16706]
                    mem[mem[64] + 32] = (32 * _16706) + 160
                    _17422 = mem[_9875 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16706) + 160] = mem[_9875 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16706) + 192 len 32 * _17422] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17422]
                    mem[mem[64] + 64] = (32 * _16706) + (32 * _17422) + 192
                    _18070 = mem[_12663]
                    mem[_16625 + (32 * _16706) + (32 * _17422) + 192] = mem[_12663]
                    mem[_16625 + (32 * _16706) + (32 * _17422) + 224 len 32 * _18070] = mem[_12663 + 32 len 32 * _18070]
                    mem[_16625 + 96] = (32 * _16706) + (32 * _17422) + (32 * _18070) + 224
                    mem[_16625 + (32 * _16706) + (32 * _17422) + (32 * _18070) + 224] = _15390
                    mem[_16625 + (32 * _16706) + (32 * _17422) + (32 * _18070) + 256 len 32 * _15390] = mem[_15275 + ceil32(return_data.size) + 32 len 32 * _15390]
                    return memory
                      from mem[64]
                       len _16625 + (32 * _16706) + (32 * _17422) + (32 * _18070) + (32 * _15390) + -mem[64] + 256
                mem[_12663 + 32 len 32 * _12652] = call.data[calldata.size len 32 * _12652]
                _13960 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = 0
                while idx < _13960:
                    if idx >= mem[_12663]:
                        revert with 0, 50
                    mem[(32 * idx) + _12663 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _13960 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = idx + 1
                    continue 
                _14005 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _14023 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                t = mem[64] + 100
                while idx < _14023:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _14005 + (32 * _14023) + -mem[64] + 96]
                if not ext_call.success:
                    _15303 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                        revert with 0, 65
                    _15337 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[64] = mem[64] + (32 * _15303) + 32
                    if not _15303:
                        _16390 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16390:
                            if idx >= mem[_15337]:
                                revert with 0, 50
                            mem[(32 * idx) + _15337 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16390 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        _16525 = mem[64]
                        mem[mem[64]] = 128
                        _16579 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16579] = mem[_7065 + 32 len 32 * _16579]
                        mem[mem[64] + 32] = (32 * _16579) + 160
                        _17423 = mem[_9875 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16579) + 160] = mem[_9875 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16579) + 192 len 32 * _17423] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17423]
                        mem[mem[64] + 64] = (32 * _16579) + (32 * _17423) + 192
                        _18071 = mem[_12663]
                        mem[_16525 + (32 * _16579) + (32 * _17423) + 192] = mem[_12663]
                        mem[_16525 + (32 * _16579) + (32 * _17423) + 224 len 32 * _18071] = mem[_12663 + 32 len 32 * _18071]
                        mem[_16525 + 96] = (32 * _16579) + (32 * _17423) + (32 * _18071) + 224
                        _18557 = mem[_15337]
                        mem[_16525 + (32 * _16579) + (32 * _17423) + (32 * _18071) + 224] = mem[_15337]
                        mem[_16525 + (32 * _16579) + (32 * _17423) + (32 * _18071) + 256 len 32 * _18557] = mem[_15337 + 32 len 32 * _18557]
                        return memory
                          from mem[64]
                           len _16525 + (32 * _16579) + (32 * _17423) + (32 * _18071) + (32 * _18557) + -mem[64] + 256
                    mem[_15337 + 32 len 32 * _15303] = call.data[calldata.size len 32 * _15303]
                    _16391 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16391:
                        if idx >= mem[_15337]:
                            revert with 0, 50
                        mem[(32 * idx) + _15337 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16391 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    _16526 = mem[64]
                    mem[mem[64]] = 128
                    _16580 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16580] = mem[_7065 + 32 len 32 * _16580]
                    mem[mem[64] + 32] = (32 * _16580) + 160
                    _17424 = mem[_9875 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16580) + 160] = mem[_9875 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16580) + 192 len 32 * _17424] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17424]
                    var163001 = _17424
                    mem[mem[64] + 64] = (32 * _16580) + (32 * _17424) + 192
                    _18072 = mem[_12663]
                    mem[_16526 + (32 * _16580) + (32 * _17424) + 192] = mem[_12663]
                    mem[_16526 + (32 * _16580) + (32 * _17424) + 224 len 32 * _18072] = mem[_12663 + 32 len 32 * _18072]
                    mem[_16526 + 96] = (32 * _16580) + (32 * _17424) + (32 * _18072) + 224
                    _18558 = mem[_15337]
                    mem[_16526 + (32 * _16580) + (32 * _17424) + (32 * _18072) + 224] = mem[_15337]
                    mem[_16526 + (32 * _16580) + (32 * _17424) + (32 * _18072) + 256 len 32 * _18558] = mem[_15337 + 32 len 32 * _18558]
                    return memory
                      from mem[64]
                       len _16526 + (32 * _16580) + (32 * _17424) + (32 * _18072) + (32 * _18558) + -mem[64] + 256
                _15276 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _15338 = mem[_15276]
                require mem[_15276] <= test266151307()
                require _15276 + return_data.size > _15276 + mem[_15276] + 31
                _15392 = mem[_15276 + mem[_15276]]
                if mem[_15276 + mem[_15276]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_15276 + mem[_15276]]) + 1 < 0 or _15276 + ceil32(return_data.size) + ceil32(32 * mem[_15276 + mem[_15276]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _15276 + ceil32(return_data.size) + ceil32(32 * mem[_15276 + mem[_15276]]) + 1
                mem[_15276 + ceil32(return_data.size)] = _15392
                require _15338 + (32 * _15392) + 32 <= return_data.size
                mem[_15276 + ceil32(return_data.size) + 32 len ceil32(32 * _15392)] = mem[_15276 + _15338 + 32 len ceil32(32 * _15392)]
                _16626 = mem[64]
                mem[mem[64]] = 128
                _16707 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16707] = mem[_7065 + 32 len 32 * _16707]
                mem[mem[64] + 32] = (32 * _16707) + 160
                _17425 = mem[_9875 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16707) + 160] = mem[_9875 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16707) + 192 len 32 * _17425] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17425]
                mem[mem[64] + 64] = (32 * _16707) + (32 * _17425) + 192
                _18073 = mem[_12663]
                mem[_16626 + (32 * _16707) + (32 * _17425) + 192] = mem[_12663]
                mem[_16626 + (32 * _16707) + (32 * _17425) + 224 len 32 * _18073] = mem[_12663 + 32 len 32 * _18073]
                mem[_16626 + 96] = (32 * _16707) + (32 * _17425) + (32 * _18073) + 224
                mem[_16626 + (32 * _16707) + (32 * _17425) + (32 * _18073) + 224] = _15392
                mem[_16626 + (32 * _16707) + (32 * _17425) + (32 * _18073) + 256 len 32 * _15392] = mem[_15276 + ceil32(return_data.size) + 32 len 32 * _15392]
                return memory
                  from mem[64]
                   len _16626 + (32 * _16707) + (32 * _17425) + (32 * _18073) + (32 * _15392) + -mem[64] + 256
            _12643 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _12664 = mem[_12643]
            require mem[_12643] <= test266151307()
            require _12643 + return_data.size > _12643 + mem[_12643] + 31
            _12682 = mem[_12643 + mem[_12643]]
            if mem[_12643 + mem[_12643]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_12643 + mem[_12643]]) + 1 < 0 or _12643 + ceil32(return_data.size) + ceil32(32 * mem[_12643 + mem[_12643]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _12643 + ceil32(return_data.size) + ceil32(32 * mem[_12643 + mem[_12643]]) + 1
            mem[_12643 + ceil32(return_data.size)] = _12682
            require _12664 + (32 * _12682) + 32 <= return_data.size
            mem[_12643 + ceil32(return_data.size) + 32 len ceil32(32 * _12682)] = mem[_12643 + _12664 + 32 len ceil32(32 * _12682)]
            var138002 = _12643 + ceil32(return_data.size) + ceil32(32 * _12682) + 32
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _14065 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
            t = mem[64] + 100
            while idx < _14065:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args cd[36], 64, mem[mem[64] + 68 len (32 * _14065) + 32]
            if not ext_call.success:
                _15304 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                    revert with 0, 65
                _15339 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[64] = mem[64] + (32 * _15304) + 32
                if not _15304:
                    _16392 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16392:
                        if idx >= mem[_15339]:
                            revert with 0, 50
                        mem[(32 * idx) + _15339 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16392 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    _16527 = mem[64]
                    mem[mem[64]] = 128
                    _16581 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16581] = mem[_7065 + 32 len 32 * _16581]
                    mem[mem[64] + 32] = (32 * _16581) + 160
                    _17426 = mem[_9875 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16581) + 160] = mem[_9875 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16581) + 192 len 32 * _17426] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17426]
                    mem[mem[64] + 64] = (32 * _16581) + (32 * _17426) + 192
                    _18074 = mem[_12643 + ceil32(return_data.size)]
                    mem[_16527 + (32 * _16581) + (32 * _17426) + 192] = mem[_12643 + ceil32(return_data.size)]
                    mem[_16527 + (32 * _16581) + (32 * _17426) + 224 len 32 * _18074] = mem[_12643 + ceil32(return_data.size) + 32 len 32 * _18074]
                    mem[_16527 + 96] = (32 * _16581) + (32 * _17426) + (32 * _18074) + 224
                    _18560 = mem[_15339]
                    mem[_16527 + (32 * _16581) + (32 * _17426) + (32 * _18074) + 224] = mem[_15339]
                    mem[_16527 + (32 * _16581) + (32 * _17426) + (32 * _18074) + 256 len 32 * _18560] = mem[_15339 + 32 len 32 * _18560]
                    return memory
                      from mem[64]
                       len _16527 + (32 * _16581) + (32 * _17426) + (32 * _18074) + (32 * _18560) + -mem[64] + 256
                mem[_15339 + 32 len 32 * _15304] = call.data[calldata.size len 32 * _15304]
                _16393 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16393:
                    if idx >= mem[_15339]:
                        revert with 0, 50
                    mem[(32 * idx) + _15339 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16393 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                _16528 = mem[64]
                mem[mem[64]] = 128
                _16582 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16582] = mem[_7065 + 32 len 32 * _16582]
                mem[mem[64] + 32] = (32 * _16582) + 160
                _17427 = mem[_9875 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16582) + 160] = mem[_9875 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16582) + 192 len 32 * _17427] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17427]
                mem[mem[64] + 64] = (32 * _16582) + (32 * _17427) + 192
                _18075 = mem[_12643 + ceil32(return_data.size)]
                mem[_16528 + (32 * _16582) + (32 * _17427) + 192] = mem[_12643 + ceil32(return_data.size)]
                mem[_16528 + (32 * _16582) + (32 * _17427) + 224 len 32 * _18075] = mem[_12643 + ceil32(return_data.size) + 32 len 32 * _18075]
                mem[_16528 + 96] = (32 * _16582) + (32 * _17427) + (32 * _18075) + 224
                _18561 = mem[_15339]
                mem[_16528 + (32 * _16582) + (32 * _17427) + (32 * _18075) + 224] = mem[_15339]
                mem[_16528 + (32 * _16582) + (32 * _17427) + (32 * _18075) + 256 len 32 * _18561] = mem[_15339 + 32 len 32 * _18561]
                return memory
                  from mem[64]
                   len _16528 + (32 * _16582) + (32 * _17427) + (32 * _18075) + (32 * _18561) + -mem[64] + 256
            _15277 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _15340 = mem[_15277]
            require mem[_15277] <= test266151307()
            require _15277 + return_data.size > _15277 + mem[_15277] + 31
            _15394 = mem[_15277 + mem[_15277]]
            if mem[_15277 + mem[_15277]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_15277 + mem[_15277]]) + 1 < 0 or _15277 + ceil32(return_data.size) + ceil32(32 * mem[_15277 + mem[_15277]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _15277 + ceil32(return_data.size) + ceil32(32 * mem[_15277 + mem[_15277]]) + 1
            mem[_15277 + ceil32(return_data.size)] = _15394
            require _15340 + (32 * _15394) + 32 <= return_data.size
            mem[_15277 + ceil32(return_data.size) + 32 len ceil32(32 * _15394)] = mem[_15277 + _15340 + 32 len ceil32(32 * _15394)]
            _16627 = mem[64]
            mem[mem[64]] = 128
            _16708 = mem[_7065]
            mem[mem[64] + 128] = mem[_7065]
            mem[mem[64] + 160 len 32 * _16708] = mem[_7065 + 32 len 32 * _16708]
            mem[mem[64] + 32] = (32 * _16708) + 160
            _17428 = mem[_9875 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16708) + 160] = mem[_9875 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16708) + 192 len 32 * _17428] = mem[_9875 + ceil32(return_data.size) + 32 len 32 * _17428]
            mem[mem[64] + 64] = (32 * _16708) + (32 * _17428) + 192
            _18076 = mem[_12643 + ceil32(return_data.size)]
            mem[_16627 + (32 * _16708) + (32 * _17428) + 192] = mem[_12643 + ceil32(return_data.size)]
            mem[_16627 + (32 * _16708) + (32 * _17428) + 224 len 32 * _18076] = mem[_12643 + ceil32(return_data.size) + 32 len 32 * _18076]
            mem[_16627 + 96] = (32 * _16708) + (32 * _17428) + (32 * _18076) + 224
            mem[_16627 + (32 * _16708) + (32 * _17428) + (32 * _18076) + 224] = _15394
            mem[_16627 + (32 * _16708) + (32 * _17428) + (32 * _18076) + 256 len 32 * _15394] = mem[_15277 + ceil32(return_data.size) + 32 len 32 * _15394]
            return memory
              from mem[64]
               len _16627 + (32 * _16708) + (32 * _17428) + (32 * _18076) + (32 * _15394) + -mem[64] + 256
        mem[_7065 + 32 len 32 * _7064] = call.data[calldata.size len 32 * _7064]
        _8470 = mem[96]
        idx = 0
        while idx < _8470:
            if idx >= mem[_7065]:
                revert with 0, 50
            mem[(32 * idx) + _7065 + 32] = 0
            if idx == -1:
                revert with 0, 17
            _8470 = mem[96]
            idx = idx + 1
            continue 
        _8475 = mem[64]
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = cd[36]
        mem[mem[64] + 36] = 64
        _8477 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 100
        while idx < _8477:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _8475 + (32 * _8477) + -mem[64] + 96]
        if not ext_call.success:
            _9879 = mem[ceil32(32 * ('cd', 68).length) + 97]
            if mem[ceil32(32 * ('cd', 68).length) + 97] > test266151307():
                revert with 0, 65
            _9883 = mem[64]
            mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[64] = mem[64] + (32 * _9879) + 32
            if not _9879:
                _11260 = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                while idx < _11260:
                    if idx >= mem[_9883]:
                        revert with 0, 50
                    mem[(32 * idx) + _9883 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _11260 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = idx + 1
                    continue 
                _11275 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _11281 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
                t = mem[64] + 100
                while idx < _11281:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _11275 + (32 * _11281) + -mem[64] + 96]
                if not ext_call.success:
                    _12653 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
                        revert with 0, 65
                    _12665 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    mem[64] = mem[64] + (32 * _12653) + 32
                    if not _12653:
                        _13961 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        idx = 0
                        while idx < _13961:
                            if idx >= mem[_12665]:
                                revert with 0, 50
                            mem[(32 * idx) + _12665 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _13961 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = cd[36]
                        mem[mem[64] + 36] = 64
                        _14024 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                        t = mem[64] + 100
                        while idx < _14024:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args cd[36], 64, mem[mem[64] + 68 len (32 * _14024) + 32]
                        if not ext_call.success:
                            _15305 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                                revert with 0, 65
                            _15341 = mem[64]
                            mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            mem[64] = mem[64] + (32 * _15305) + 32
                            if not _15305:
                                _16394 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = 0
                                while idx < _16394:
                                    if idx >= mem[_15341]:
                                        revert with 0, 50
                                    mem[(32 * idx) + _15341 + 32] = 0
                                    if idx == -1:
                                        revert with 0, 17
                                    _16394 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                    idx = idx + 1
                                    continue 
                                mem[mem[64]] = 128
                                _16583 = mem[_7065]
                                mem[mem[64] + 128] = mem[_7065]
                                mem[mem[64] + 160 len 32 * _16583] = mem[_7065 + 32 len 32 * _16583]
                                var146001 = _16583
                                mem[mem[64] + 32] = (32 * _16583) + 160
                                _17429 = mem[_9883]
                                mem[mem[64] + (32 * _16583) + 160] = mem[_9883]
                                mem[mem[64] + (32 * _16583) + 192 len 32 * _17429] = mem[_9883 + 32 len 32 * _17429]
                                mem[mem[64] + 64] = (32 * _16583) + (32 * _17429) + 192
                                _18077 = mem[_12665]
                                mem[mem[64] + (32 * _16583) + (32 * _17429) + 192] = mem[_12665]
                                mem[mem[64] + (32 * _16583) + (32 * _17429) + 224 len 32 * _18077] = mem[_12665 + 32 len 32 * _18077]
                                mem[mem[64] + 96] = (32 * _16583) + (32 * _17429) + (32 * _18077) + 224
                                _18563 = mem[_15341]
                                mem[mem[64] + (32 * _16583) + (32 * _17429) + (32 * _18077) + 224] = mem[_15341]
                                mem[mem[64] + (32 * _16583) + (32 * _17429) + (32 * _18077) + 256 len 32 * _18563] = mem[_15341 + 32 len 32 * _18563]
                                return 128, 
                                       (32 * _16583) + 160,
                                       (32 * _16583) + (32 * _17429) + 192,
                                       (32 * _16583) + (32 * _17429) + (32 * _18077) + 224,
                                       mem[mem[64] + 128 len (32 * _16583) + (32 * _17429) + (32 * _18077) + (32 * _18563) + 128]
                            mem[_15341 + 32 len 32 * _15305] = call.data[calldata.size len 32 * _15305]
                            _16395 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16395:
                                if idx >= mem[_15341]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15341 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16395 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            mem[mem[64]] = 128
                            _16584 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16584] = mem[_7065 + 32 len 32 * _16584]
                            mem[mem[64] + 32] = (32 * _16584) + 160
                            _17430 = mem[_9883]
                            mem[mem[64] + (32 * _16584) + 160] = mem[_9883]
                            mem[mem[64] + (32 * _16584) + 192 len 32 * _17430] = mem[_9883 + 32 len 32 * _17430]
                            var152001 = _17430
                            mem[mem[64] + 64] = (32 * _16584) + (32 * _17430) + 192
                            _18078 = mem[_12665]
                            mem[mem[64] + (32 * _16584) + (32 * _17430) + 192] = mem[_12665]
                            mem[mem[64] + (32 * _16584) + (32 * _17430) + 224 len 32 * _18078] = mem[_12665 + 32 len 32 * _18078]
                            mem[mem[64] + 96] = (32 * _16584) + (32 * _17430) + (32 * _18078) + 224
                            _18564 = mem[_15341]
                            mem[mem[64] + (32 * _16584) + (32 * _17430) + (32 * _18078) + 224] = mem[_15341]
                            mem[mem[64] + (32 * _16584) + (32 * _17430) + (32 * _18078) + 256 len 32 * _18564] = mem[_15341 + 32 len 32 * _18564]
                            return 128, 
                                   (32 * _16584) + 160,
                                   (32 * _16584) + (32 * _17430) + 192,
                                   (32 * _16584) + (32 * _17430) + (32 * _18078) + 224,
                                   mem[mem[64] + 128 len (32 * _16584) + (32 * _17430) + (32 * _18078) + (32 * _18564) + 128]
                        _15278 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _15342 = mem[_15278]
                        require mem[_15278] <= test266151307()
                        require _15278 + return_data.size > _15278 + mem[_15278] + 31
                        _15396 = mem[_15278 + mem[_15278]]
                        if mem[_15278 + mem[_15278]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_15278 + mem[_15278]]) + 1 < 0 or _15278 + ceil32(return_data.size) + ceil32(32 * mem[_15278 + mem[_15278]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _15278 + ceil32(return_data.size) + ceil32(32 * mem[_15278 + mem[_15278]]) + 1
                        mem[_15278 + ceil32(return_data.size)] = _15396
                        require _15342 + (32 * _15396) + 32 <= return_data.size
                        mem[_15278 + ceil32(return_data.size) + 32 len ceil32(32 * _15396)] = mem[_15278 + _15342 + 32 len ceil32(32 * _15396)]
                        _16628 = mem[64]
                        mem[mem[64]] = 128
                        _16709 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16709] = mem[_7065 + 32 len 32 * _16709]
                        mem[mem[64] + 32] = (32 * _16709) + 160
                        _17431 = mem[_9883]
                        mem[mem[64] + (32 * _16709) + 160] = mem[_9883]
                        mem[mem[64] + (32 * _16709) + 192 len 32 * _17431] = mem[_9883 + 32 len 32 * _17431]
                        mem[mem[64] + 64] = (32 * _16709) + (32 * _17431) + 192
                        _18079 = mem[_12665]
                        mem[_16628 + (32 * _16709) + (32 * _17431) + 192] = mem[_12665]
                        mem[_16628 + (32 * _16709) + (32 * _17431) + 224 len 32 * _18079] = mem[_12665 + 32 len 32 * _18079]
                        mem[_16628 + 96] = (32 * _16709) + (32 * _17431) + (32 * _18079) + 224
                        mem[_16628 + (32 * _16709) + (32 * _17431) + (32 * _18079) + 224] = _15396
                        mem[_16628 + (32 * _16709) + (32 * _17431) + (32 * _18079) + 256 len 32 * _15396] = mem[_15278 + ceil32(return_data.size) + 32 len 32 * _15396]
                        return memory
                          from mem[64]
                           len _16628 + (32 * _16709) + (32 * _17431) + (32 * _18079) + (32 * _15396) + -mem[64] + 256
                    mem[_12665 + 32 len 32 * _12653] = call.data[calldata.size len 32 * _12653]
                    _13962 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = 0
                    while idx < _13962:
                        if idx >= mem[_12665]:
                            revert with 0, 50
                        mem[(32 * idx) + _12665 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _13962 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        idx = idx + 1
                        continue 
                    _14007 = mem[64]
                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 64
                    _14025 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                    t = mem[64] + 100
                    while idx < _14025:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _14007 + (32 * _14025) + -mem[64] + 96]
                    if not ext_call.success:
                        _15306 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                            revert with 0, 65
                        _15343 = mem[64]
                        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[64] = mem[64] + (32 * _15306) + 32
                        if not _15306:
                            _16396 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16396:
                                if idx >= mem[_15343]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15343 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16396 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            _16531 = mem[64]
                            mem[mem[64]] = 128
                            _16585 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16585] = mem[_7065 + 32 len 32 * _16585]
                            mem[mem[64] + 32] = (32 * _16585) + 160
                            _17432 = mem[_9883]
                            mem[mem[64] + (32 * _16585) + 160] = mem[_9883]
                            mem[mem[64] + (32 * _16585) + 192 len 32 * _17432] = mem[_9883 + 32 len 32 * _17432]
                            var152001 = _17432
                            mem[mem[64] + 64] = (32 * _16585) + (32 * _17432) + 192
                            _18080 = mem[_12665]
                            mem[_16531 + (32 * _16585) + (32 * _17432) + 192] = mem[_12665]
                            mem[_16531 + (32 * _16585) + (32 * _17432) + 224 len 32 * _18080] = mem[_12665 + 32 len 32 * _18080]
                            mem[_16531 + 96] = (32 * _16585) + (32 * _17432) + (32 * _18080) + 224
                            _18566 = mem[_15343]
                            mem[_16531 + (32 * _16585) + (32 * _17432) + (32 * _18080) + 224] = mem[_15343]
                            mem[_16531 + (32 * _16585) + (32 * _17432) + (32 * _18080) + 256 len 32 * _18566] = mem[_15343 + 32 len 32 * _18566]
                            return memory
                              from mem[64]
                               len _16531 + (32 * _16585) + (32 * _17432) + (32 * _18080) + (32 * _18566) + -mem[64] + 256
                        mem[_15343 + 32 len 32 * _15306] = call.data[calldata.size len 32 * _15306]
                        _16397 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16397:
                            if idx >= mem[_15343]:
                                revert with 0, 50
                            mem[(32 * idx) + _15343 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16397 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16586 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16586] = mem[_7065 + 32 len 32 * _16586]
                        mem[mem[64] + 32] = (32 * _16586) + 160
                        _17433 = mem[_9883]
                        mem[mem[64] + (32 * _16586) + 160] = mem[_9883]
                        mem[mem[64] + (32 * _16586) + 192 len 32 * _17433] = mem[_9883 + 32 len 32 * _17433]
                        var153001 = _17433
                        mem[mem[64] + 64] = (32 * _16586) + (32 * _17433) + 192
                        _18081 = mem[_12665]
                        mem[mem[64] + (32 * _16586) + (32 * _17433) + 192] = mem[_12665]
                        mem[mem[64] + (32 * _16586) + (32 * _17433) + 224 len 32 * _18081] = mem[_12665 + 32 len 32 * _18081]
                        mem[mem[64] + 96] = (32 * _16586) + (32 * _17433) + (32 * _18081) + 224
                        _18567 = mem[_15343]
                        mem[mem[64] + (32 * _16586) + (32 * _17433) + (32 * _18081) + 224] = mem[_15343]
                        mem[mem[64] + (32 * _16586) + (32 * _17433) + (32 * _18081) + 256 len 32 * _18567] = mem[_15343 + 32 len 32 * _18567]
                        var163001 = _18567
                        return 128, 
                               (32 * _16586) + 160,
                               (32 * _16586) + (32 * _17433) + 192,
                               (32 * _16586) + (32 * _17433) + (32 * _18081) + 224,
                               mem[mem[64] + 128 len (32 * _16586) + (32 * _17433) + (32 * _18081) + (32 * _18567) + 128]
                    _15279 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _15344 = mem[_15279]
                    require mem[_15279] <= test266151307()
                    require _15279 + return_data.size > _15279 + mem[_15279] + 31
                    _15398 = mem[_15279 + mem[_15279]]
                    if mem[_15279 + mem[_15279]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_15279 + mem[_15279]]) + 1 < 0 or _15279 + ceil32(return_data.size) + ceil32(32 * mem[_15279 + mem[_15279]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _15279 + ceil32(return_data.size) + ceil32(32 * mem[_15279 + mem[_15279]]) + 1
                    mem[_15279 + ceil32(return_data.size)] = _15398
                    require _15344 + (32 * _15398) + 32 <= return_data.size
                    mem[_15279 + ceil32(return_data.size) + 32 len ceil32(32 * _15398)] = mem[_15279 + _15344 + 32 len ceil32(32 * _15398)]
                    _16629 = mem[64]
                    mem[mem[64]] = 128
                    _16710 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16710] = mem[_7065 + 32 len 32 * _16710]
                    mem[mem[64] + 32] = (32 * _16710) + 160
                    _17434 = mem[_9883]
                    mem[mem[64] + (32 * _16710) + 160] = mem[_9883]
                    mem[mem[64] + (32 * _16710) + 192 len 32 * _17434] = mem[_9883 + 32 len 32 * _17434]
                    var163001 = _17434
                    mem[mem[64] + 64] = (32 * _16710) + (32 * _17434) + 192
                    _18082 = mem[_12665]
                    mem[_16629 + (32 * _16710) + (32 * _17434) + 192] = mem[_12665]
                    mem[_16629 + (32 * _16710) + (32 * _17434) + 224 len 32 * _18082] = mem[_12665 + 32 len 32 * _18082]
                    mem[_16629 + 96] = (32 * _16710) + (32 * _17434) + (32 * _18082) + 224
                    mem[_16629 + (32 * _16710) + (32 * _17434) + (32 * _18082) + 224] = _15398
                    mem[_16629 + (32 * _16710) + (32 * _17434) + (32 * _18082) + 256 len 32 * _15398] = mem[_15279 + ceil32(return_data.size) + 32 len 32 * _15398]
                    return memory
                      from mem[64]
                       len _16629 + (32 * _16710) + (32 * _17434) + (32 * _18082) + (32 * _15398) + -mem[64] + 256
                _12644 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _12666 = mem[_12644]
                require mem[_12644] <= test266151307()
                require _12644 + return_data.size > _12644 + mem[_12644] + 31
                _12684 = mem[_12644 + mem[_12644]]
                if mem[_12644 + mem[_12644]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_12644 + mem[_12644]]) + 1 < 0 or _12644 + ceil32(return_data.size) + ceil32(32 * mem[_12644 + mem[_12644]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _12644 + ceil32(return_data.size) + ceil32(32 * mem[_12644 + mem[_12644]]) + 1
                mem[_12644 + ceil32(return_data.size)] = _12684
                require _12666 + (32 * _12684) + 32 <= return_data.size
                mem[_12644 + ceil32(return_data.size) + 32 len ceil32(32 * _12684)] = mem[_12644 + _12666 + 32 len ceil32(32 * _12684)]
                var128002 = _12644 + ceil32(return_data.size) + ceil32(32 * _12684) + 32
                _14039 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _14066 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                t = mem[64] + 100
                while idx < _14066:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _14039 + (32 * _14066) + -mem[64] + 96]
                if not ext_call.success:
                    _15307 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                        revert with 0, 65
                    _15345 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[64] = mem[64] + (32 * _15307) + 32
                    if not _15307:
                        _16398 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16398:
                            if idx >= mem[_15345]:
                                revert with 0, 50
                            mem[(32 * idx) + _15345 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16398 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        _16533 = mem[64]
                        mem[mem[64]] = 128
                        _16587 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16587] = mem[_7065 + 32 len 32 * _16587]
                        mem[mem[64] + 32] = (32 * _16587) + 160
                        _17435 = mem[_9883]
                        mem[mem[64] + (32 * _16587) + 160] = mem[_9883]
                        mem[mem[64] + (32 * _16587) + 192 len 32 * _17435] = mem[_9883 + 32 len 32 * _17435]
                        mem[mem[64] + 64] = (32 * _16587) + (32 * _17435) + 192
                        _18083 = mem[_12644 + ceil32(return_data.size)]
                        mem[_16533 + (32 * _16587) + (32 * _17435) + 192] = mem[_12644 + ceil32(return_data.size)]
                        mem[_16533 + (32 * _16587) + (32 * _17435) + 224 len 32 * _18083] = mem[_12644 + ceil32(return_data.size) + 32 len 32 * _18083]
                        mem[_16533 + 96] = (32 * _16587) + (32 * _17435) + (32 * _18083) + 224
                        _18569 = mem[_15345]
                        mem[_16533 + (32 * _16587) + (32 * _17435) + (32 * _18083) + 224] = mem[_15345]
                        mem[_16533 + (32 * _16587) + (32 * _17435) + (32 * _18083) + 256 len 32 * _18569] = mem[_15345 + 32 len 32 * _18569]
                        return memory
                          from mem[64]
                           len _16533 + (32 * _16587) + (32 * _17435) + (32 * _18083) + (32 * _18569) + -mem[64] + 256
                    mem[_15345 + 32 len 32 * _15307] = call.data[calldata.size len 32 * _15307]
                    _16399 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16399:
                        if idx >= mem[_15345]:
                            revert with 0, 50
                        mem[(32 * idx) + _15345 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16399 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    _16534 = mem[64]
                    mem[mem[64]] = 128
                    _16588 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16588] = mem[_7065 + 32 len 32 * _16588]
                    mem[mem[64] + 32] = (32 * _16588) + 160
                    _17436 = mem[_9883]
                    mem[mem[64] + (32 * _16588) + 160] = mem[_9883]
                    mem[mem[64] + (32 * _16588) + 192 len 32 * _17436] = mem[_9883 + 32 len 32 * _17436]
                    var163001 = _17436
                    mem[mem[64] + 64] = (32 * _16588) + (32 * _17436) + 192
                    _18084 = mem[_12644 + ceil32(return_data.size)]
                    mem[_16534 + (32 * _16588) + (32 * _17436) + 192] = mem[_12644 + ceil32(return_data.size)]
                    mem[_16534 + (32 * _16588) + (32 * _17436) + 224 len 32 * _18084] = mem[_12644 + ceil32(return_data.size) + 32 len 32 * _18084]
                    mem[_16534 + 96] = (32 * _16588) + (32 * _17436) + (32 * _18084) + 224
                    _18570 = mem[_15345]
                    mem[_16534 + (32 * _16588) + (32 * _17436) + (32 * _18084) + 224] = mem[_15345]
                    mem[_16534 + (32 * _16588) + (32 * _17436) + (32 * _18084) + 256 len 32 * _18570] = mem[_15345 + 32 len 32 * _18570]
                    return memory
                      from mem[64]
                       len _16534 + (32 * _16588) + (32 * _17436) + (32 * _18084) + (32 * _18570) + -mem[64] + 256
                _15280 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _15346 = mem[_15280]
                require mem[_15280] <= test266151307()
                require _15280 + return_data.size > _15280 + mem[_15280] + 31
                _15400 = mem[_15280 + mem[_15280]]
                if mem[_15280 + mem[_15280]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_15280 + mem[_15280]]) + 1 < 0 or _15280 + ceil32(return_data.size) + ceil32(32 * mem[_15280 + mem[_15280]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _15280 + ceil32(return_data.size) + ceil32(32 * mem[_15280 + mem[_15280]]) + 1
                mem[_15280 + ceil32(return_data.size)] = _15400
                require _15346 + (32 * _15400) + 32 <= return_data.size
                mem[_15280 + ceil32(return_data.size) + 32 len ceil32(32 * _15400)] = mem[_15280 + _15346 + 32 len ceil32(32 * _15400)]
                mem[mem[64]] = 128
                _16711 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16711] = mem[_7065 + 32 len 32 * _16711]
                mem[mem[64] + 32] = (32 * _16711) + 160
                _17437 = mem[_9883]
                mem[mem[64] + (32 * _16711) + 160] = mem[_9883]
                mem[mem[64] + (32 * _16711) + 192 len 32 * _17437] = mem[_9883 + 32 len 32 * _17437]
                mem[mem[64] + 64] = (32 * _16711) + (32 * _17437) + 192
                _18085 = mem[_12644 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16711) + (32 * _17437) + 192] = mem[_12644 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16711) + (32 * _17437) + 224 len 32 * _18085] = mem[_12644 + ceil32(return_data.size) + 32 len 32 * _18085]
                mem[mem[64] + 96] = (32 * _16711) + (32 * _17437) + (32 * _18085) + 224
                mem[mem[64] + (32 * _16711) + (32 * _17437) + (32 * _18085) + 224] = _15400
                mem[mem[64] + (32 * _16711) + (32 * _17437) + (32 * _18085) + 256 len 32 * _15400] = mem[_15280 + ceil32(return_data.size) + 32 len 32 * _15400]
                return Array(len=mem[mem[64] + 128 len (32 * _16711) + (32 * _17437) + (32 * _18085) + 96], data=_15400, mem[mem[64] + (32 * _16711) + (32 * _17437) + (32 * _18085) + 256 len 32 * _15400]), 
                       (32 * _16711) + 160,
                       (32 * _16711) + (32 * _17437) + 192,
                       (32 * _16711) + (32 * _17437) + (32 * _18085) + 224
            mem[_9883 + 32 len 32 * _9879] = call.data[calldata.size len 32 * _9879]
            _11261 = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            while idx < _11261:
                if idx >= mem[_9883]:
                    revert with 0, 50
                mem[(32 * idx) + _9883 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _11261 = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = idx + 1
                continue 
            _11276 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _11282 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
            t = mem[64] + 100
            while idx < _11282:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _11276 + (32 * _11282) + -mem[64] + 96]
            if not ext_call.success:
                _12654 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
                    revert with 0, 65
                _12667 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                mem[64] = mem[64] + (32 * _12654) + 32
                if not _12654:
                    _13963 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = 0
                    while idx < _13963:
                        if idx >= mem[_12667]:
                            revert with 0, 50
                        mem[(32 * idx) + _12667 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _13963 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        idx = idx + 1
                        continue 
                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 64
                    _14026 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                    t = mem[64] + 100
                    while idx < _14026:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args cd[36], 64, mem[mem[64] + 68 len (32 * _14026) + 32]
                    if not ext_call.success:
                        _15308 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                            revert with 0, 65
                        _15347 = mem[64]
                        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[64] = mem[64] + (32 * _15308) + 32
                        if not _15308:
                            _16400 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16400:
                                if idx >= mem[_15347]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15347 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16400 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            _16535 = mem[64]
                            mem[mem[64]] = 128
                            _16589 = mem[_7065]
                            mem[mem[64] + 128] = mem[_7065]
                            mem[mem[64] + 160 len 32 * _16589] = mem[_7065 + 32 len 32 * _16589]
                            mem[mem[64] + 32] = (32 * _16589) + 160
                            _17438 = mem[_9883]
                            mem[mem[64] + (32 * _16589) + 160] = mem[_9883]
                            mem[mem[64] + (32 * _16589) + 192 len 32 * _17438] = mem[_9883 + 32 len 32 * _17438]
                            var152001 = _17438
                            mem[mem[64] + 64] = (32 * _16589) + (32 * _17438) + 192
                            _18086 = mem[_12667]
                            mem[_16535 + (32 * _16589) + (32 * _17438) + 192] = mem[_12667]
                            mem[_16535 + (32 * _16589) + (32 * _17438) + 224 len 32 * _18086] = mem[_12667 + 32 len 32 * _18086]
                            mem[_16535 + 96] = (32 * _16589) + (32 * _17438) + (32 * _18086) + 224
                            _18572 = mem[_15347]
                            mem[_16535 + (32 * _16589) + (32 * _17438) + (32 * _18086) + 224] = mem[_15347]
                            mem[_16535 + (32 * _16589) + (32 * _17438) + (32 * _18086) + 256 len 32 * _18572] = mem[_15347 + 32 len 32 * _18572]
                            return memory
                              from mem[64]
                               len _16535 + (32 * _16589) + (32 * _17438) + (32 * _18086) + (32 * _18572) + -mem[64] + 256
                        mem[_15347 + 32 len 32 * _15308] = call.data[calldata.size len 32 * _15308]
                        _16401 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16401:
                            if idx >= mem[_15347]:
                                revert with 0, 50
                            mem[(32 * idx) + _15347 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16401 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        _16536 = mem[64]
                        mem[mem[64]] = 128
                        _16590 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16590] = mem[_7065 + 32 len 32 * _16590]
                        mem[mem[64] + 32] = (32 * _16590) + 160
                        _17439 = mem[_9883]
                        mem[mem[64] + (32 * _16590) + 160] = mem[_9883]
                        mem[mem[64] + (32 * _16590) + 192 len 32 * _17439] = mem[_9883 + 32 len 32 * _17439]
                        var153001 = _17439
                        mem[mem[64] + 64] = (32 * _16590) + (32 * _17439) + 192
                        _18087 = mem[_12667]
                        mem[_16536 + (32 * _16590) + (32 * _17439) + 192] = mem[_12667]
                        mem[_16536 + (32 * _16590) + (32 * _17439) + 224 len 32 * _18087] = mem[_12667 + 32 len 32 * _18087]
                        mem[_16536 + 96] = (32 * _16590) + (32 * _17439) + (32 * _18087) + 224
                        _18573 = mem[_15347]
                        mem[_16536 + (32 * _16590) + (32 * _17439) + (32 * _18087) + 224] = mem[_15347]
                        mem[_16536 + (32 * _16590) + (32 * _17439) + (32 * _18087) + 256 len 32 * _18573] = mem[_15347 + 32 len 32 * _18573]
                        var163001 = _18573
                        return memory
                          from mem[64]
                           len _16536 + (32 * _16590) + (32 * _17439) + (32 * _18087) + (32 * _18573) + -mem[64] + 256
                    _15281 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _15348 = mem[_15281]
                    require mem[_15281] <= test266151307()
                    require _15281 + return_data.size > _15281 + mem[_15281] + 31
                    _15402 = mem[_15281 + mem[_15281]]
                    if mem[_15281 + mem[_15281]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_15281 + mem[_15281]]) + 1 < 0 or _15281 + ceil32(return_data.size) + ceil32(32 * mem[_15281 + mem[_15281]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _15281 + ceil32(return_data.size) + ceil32(32 * mem[_15281 + mem[_15281]]) + 1
                    mem[_15281 + ceil32(return_data.size)] = _15402
                    require _15348 + (32 * _15402) + 32 <= return_data.size
                    mem[_15281 + ceil32(return_data.size) + 32 len ceil32(32 * _15402)] = mem[_15281 + _15348 + 32 len ceil32(32 * _15402)]
                    mem[mem[64]] = 128
                    _16712 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16712] = mem[_7065 + 32 len 32 * _16712]
                    mem[mem[64] + 32] = (32 * _16712) + 160
                    _17440 = mem[_9883]
                    mem[mem[64] + (32 * _16712) + 160] = mem[_9883]
                    mem[mem[64] + (32 * _16712) + 192 len 32 * _17440] = mem[_9883 + 32 len 32 * _17440]
                    var163001 = _17440
                    mem[mem[64] + 64] = (32 * _16712) + (32 * _17440) + 192
                    _18088 = mem[_12667]
                    mem[mem[64] + (32 * _16712) + (32 * _17440) + 192] = mem[_12667]
                    mem[mem[64] + (32 * _16712) + (32 * _17440) + 224 len 32 * _18088] = mem[_12667 + 32 len 32 * _18088]
                    mem[mem[64] + 96] = (32 * _16712) + (32 * _17440) + (32 * _18088) + 224
                    mem[mem[64] + (32 * _16712) + (32 * _17440) + (32 * _18088) + 224] = _15402
                    mem[mem[64] + (32 * _16712) + (32 * _17440) + (32 * _18088) + 256 len 32 * _15402] = mem[_15281 + ceil32(return_data.size) + 32 len 32 * _15402]
                    return Array(len=mem[mem[64] + 128 len (32 * _16712) + (32 * _17440) + (32 * _18088) + 96], data=_15402, mem[mem[64] + (32 * _16712) + (32 * _17440) + (32 * _18088) + 256 len 32 * _15402]), 
                           (32 * _16712) + 160,
                           (32 * _16712) + (32 * _17440) + 192,
                           (32 * _16712) + (32 * _17440) + (32 * _18088) + 224
                mem[_12667 + 32 len 32 * _12654] = call.data[calldata.size len 32 * _12654]
                _13964 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = 0
                while idx < _13964:
                    if idx >= mem[_12667]:
                        revert with 0, 50
                    mem[(32 * idx) + _12667 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _13964 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = idx + 1
                    continue 
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _14027 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                t = mem[64] + 100
                while idx < _14027:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args cd[36], 64, mem[mem[64] + 68 len (32 * _14027) + 32]
                if not ext_call.success:
                    _15309 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                        revert with 0, 65
                    _15349 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[64] = mem[64] + (32 * _15309) + 32
                    if not _15309:
                        _16402 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16402:
                            if idx >= mem[_15349]:
                                revert with 0, 50
                            mem[(32 * idx) + _15349 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16402 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16591 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16591] = mem[_7065 + 32 len 32 * _16591]
                        mem[mem[64] + 32] = (32 * _16591) + 160
                        _17441 = mem[_9883]
                        mem[mem[64] + (32 * _16591) + 160] = mem[_9883]
                        mem[mem[64] + (32 * _16591) + 192 len 32 * _17441] = mem[_9883 + 32 len 32 * _17441]
                        var153001 = _17441
                        mem[mem[64] + 64] = (32 * _16591) + (32 * _17441) + 192
                        _18089 = mem[_12667]
                        mem[mem[64] + (32 * _16591) + (32 * _17441) + 192] = mem[_12667]
                        mem[mem[64] + (32 * _16591) + (32 * _17441) + 224 len 32 * _18089] = mem[_12667 + 32 len 32 * _18089]
                        mem[mem[64] + 96] = (32 * _16591) + (32 * _17441) + (32 * _18089) + 224
                        _18575 = mem[_15349]
                        mem[mem[64] + (32 * _16591) + (32 * _17441) + (32 * _18089) + 224] = mem[_15349]
                        mem[mem[64] + (32 * _16591) + (32 * _17441) + (32 * _18089) + 256 len 32 * _18575] = mem[_15349 + 32 len 32 * _18575]
                        var163001 = _18575
                        return 128, 
                               (32 * _16591) + 160,
                               (32 * _16591) + (32 * _17441) + 192,
                               (32 * _16591) + (32 * _17441) + (32 * _18089) + 224,
                               mem[mem[64] + 128 len (32 * _16591) + (32 * _17441) + (32 * _18089) + (32 * _18575) + 128]
                    mem[_15349 + 32 len 32 * _15309] = call.data[calldata.size len 32 * _15309]
                    _16403 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16403:
                        if idx >= mem[_15349]:
                            revert with 0, 50
                        mem[(32 * idx) + _15349 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16403 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    _16538 = mem[64]
                    mem[mem[64]] = 128
                    _16592 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16592] = mem[_7065 + 32 len 32 * _16592]
                    var149001 = _16592
                    var149002 = _7065 + (32 * _16592) + 32
                    var149007 = mem[64] + (32 * _16592) + 160
                    mem[mem[64] + 32] = (32 * _16592) + 160
                    _17442 = mem[_9883]
                    mem[mem[64] + (32 * _16592) + 160] = mem[_9883]
                    mem[mem[64] + (32 * _16592) + 192 len 32 * _17442] = mem[_9883 + 32 len 32 * _17442]
                    var154001 = _17442
                    mem[mem[64] + 64] = (32 * _16592) + (32 * _17442) + 192
                    _18090 = mem[_12667]
                    mem[_16538 + (32 * _16592) + (32 * _17442) + 192] = mem[_12667]
                    mem[_16538 + (32 * _16592) + (32 * _17442) + 224 len 32 * _18090] = mem[_12667 + 32 len 32 * _18090]
                    mem[_16538 + 96] = (32 * _16592) + (32 * _17442) + (32 * _18090) + 224
                    _18576 = mem[_15349]
                    mem[_16538 + (32 * _16592) + (32 * _17442) + (32 * _18090) + 224] = mem[_15349]
                    mem[_16538 + (32 * _16592) + (32 * _17442) + (32 * _18090) + 256 len 32 * _18576] = mem[_15349 + 32 len 32 * _18576]
                    var164001 = _18576
                    return memory
                      from mem[64]
                       len _16538 + (32 * _16592) + (32 * _17442) + (32 * _18090) + (32 * _18576) + -mem[64] + 256
                _15282 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _15350 = mem[_15282]
                require mem[_15282] <= test266151307()
                require _15282 + return_data.size > _15282 + mem[_15282] + 31
                _15404 = mem[_15282 + mem[_15282]]
                if mem[_15282 + mem[_15282]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_15282 + mem[_15282]]) + 1 < 0 or _15282 + ceil32(return_data.size) + ceil32(32 * mem[_15282 + mem[_15282]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _15282 + ceil32(return_data.size) + ceil32(32 * mem[_15282 + mem[_15282]]) + 1
                mem[_15282 + ceil32(return_data.size)] = _15404
                require _15350 + (32 * _15404) + 32 <= return_data.size
                mem[_15282 + ceil32(return_data.size) + 32 len ceil32(32 * _15404)] = mem[_15282 + _15350 + 32 len ceil32(32 * _15404)]
                _16632 = mem[64]
                mem[mem[64]] = 128
                _16713 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16713] = mem[_7065 + 32 len 32 * _16713]
                mem[mem[64] + 32] = (32 * _16713) + 160
                _17443 = mem[_9883]
                mem[mem[64] + (32 * _16713) + 160] = mem[_9883]
                mem[mem[64] + (32 * _16713) + 192 len 32 * _17443] = mem[_9883 + 32 len 32 * _17443]
                var164001 = _17443
                mem[mem[64] + 64] = (32 * _16713) + (32 * _17443) + 192
                _18091 = mem[_12667]
                mem[_16632 + (32 * _16713) + (32 * _17443) + 192] = mem[_12667]
                mem[_16632 + (32 * _16713) + (32 * _17443) + 224 len 32 * _18091] = mem[_12667 + 32 len 32 * _18091]
                mem[_16632 + 96] = (32 * _16713) + (32 * _17443) + (32 * _18091) + 224
                mem[_16632 + (32 * _16713) + (32 * _17443) + (32 * _18091) + 224] = _15404
                mem[_16632 + (32 * _16713) + (32 * _17443) + (32 * _18091) + 256 len 32 * _15404] = mem[_15282 + ceil32(return_data.size) + 32 len 32 * _15404]
                var174001 = _15404
                return memory
                  from mem[64]
                   len _16632 + (32 * _16713) + (32 * _17443) + (32 * _18091) + (32 * _15404) + -mem[64] + 256
            _12645 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _12668 = mem[_12645]
            require mem[_12645] <= test266151307()
            require _12645 + return_data.size > _12645 + mem[_12645] + 31
            _12686 = mem[_12645 + mem[_12645]]
            if mem[_12645 + mem[_12645]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_12645 + mem[_12645]]) + 1 < 0 or _12645 + ceil32(return_data.size) + ceil32(32 * mem[_12645 + mem[_12645]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _12645 + ceil32(return_data.size) + ceil32(32 * mem[_12645 + mem[_12645]]) + 1
            mem[_12645 + ceil32(return_data.size)] = _12686
            require _12668 + (32 * _12686) + 32 <= return_data.size
            mem[_12645 + ceil32(return_data.size) + 32 len ceil32(32 * _12686)] = mem[_12645 + _12668 + 32 len ceil32(32 * _12686)]
            var129002 = _12645 + ceil32(return_data.size) + ceil32(32 * _12686) + 32
            _14040 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _14067 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
            t = mem[64] + 100
            while idx < _14067:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _14040 + (32 * _14067) + -mem[64] + 96]
            if not ext_call.success:
                _15310 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                    revert with 0, 65
                _15351 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[64] = mem[64] + (32 * _15310) + 32
                if not _15310:
                    _16404 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16404:
                        if idx >= mem[_15351]:
                            revert with 0, 50
                        mem[(32 * idx) + _15351 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16404 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    mem[mem[64]] = 128
                    _16593 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16593] = mem[_7065 + 32 len 32 * _16593]
                    mem[mem[64] + 32] = (32 * _16593) + 160
                    _17444 = mem[_9883]
                    mem[mem[64] + (32 * _16593) + 160] = mem[_9883]
                    mem[mem[64] + (32 * _16593) + 192 len 32 * _17444] = mem[_9883 + 32 len 32 * _17444]
                    var163001 = _17444
                    mem[mem[64] + 64] = (32 * _16593) + (32 * _17444) + 192
                    _18092 = mem[_12645 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16593) + (32 * _17444) + 192] = mem[_12645 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16593) + (32 * _17444) + 224 len 32 * _18092] = mem[_12645 + ceil32(return_data.size) + 32 len 32 * _18092]
                    mem[mem[64] + 96] = (32 * _16593) + (32 * _17444) + (32 * _18092) + 224
                    _18578 = mem[_15351]
                    mem[mem[64] + (32 * _16593) + (32 * _17444) + (32 * _18092) + 224] = mem[_15351]
                    mem[mem[64] + (32 * _16593) + (32 * _17444) + (32 * _18092) + 256 len 32 * _18578] = mem[_15351 + 32 len 32 * _18578]
                    return 128, 
                           (32 * _16593) + 160,
                           (32 * _16593) + (32 * _17444) + 192,
                           (32 * _16593) + (32 * _17444) + (32 * _18092) + 224,
                           mem[mem[64] + 128 len (32 * _16593) + (32 * _17444) + (32 * _18092) + (32 * _18578) + 128]
                mem[_15351 + 32 len 32 * _15310] = call.data[calldata.size len 32 * _15310]
                _16405 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16405:
                    if idx >= mem[_15351]:
                        revert with 0, 50
                    mem[(32 * idx) + _15351 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16405 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                _16540 = mem[64]
                mem[mem[64]] = 128
                _16594 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16594] = mem[_7065 + 32 len 32 * _16594]
                mem[mem[64] + 32] = (32 * _16594) + 160
                _17445 = mem[_9883]
                mem[mem[64] + (32 * _16594) + 160] = mem[_9883]
                mem[mem[64] + (32 * _16594) + 192 len 32 * _17445] = mem[_9883 + 32 len 32 * _17445]
                var164001 = _17445
                mem[mem[64] + 64] = (32 * _16594) + (32 * _17445) + 192
                _18093 = mem[_12645 + ceil32(return_data.size)]
                mem[_16540 + (32 * _16594) + (32 * _17445) + 192] = mem[_12645 + ceil32(return_data.size)]
                mem[_16540 + (32 * _16594) + (32 * _17445) + 224 len 32 * _18093] = mem[_12645 + ceil32(return_data.size) + 32 len 32 * _18093]
                mem[_16540 + 96] = (32 * _16594) + (32 * _17445) + (32 * _18093) + 224
                _18579 = mem[_15351]
                mem[_16540 + (32 * _16594) + (32 * _17445) + (32 * _18093) + 224] = mem[_15351]
                mem[_16540 + (32 * _16594) + (32 * _17445) + (32 * _18093) + 256 len 32 * _18579] = mem[_15351 + 32 len 32 * _18579]
                var174001 = _18579
                return memory
                  from mem[64]
                   len _16540 + (32 * _16594) + (32 * _17445) + (32 * _18093) + (32 * _18579) + -mem[64] + 256
            _15283 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _15352 = mem[_15283]
            require mem[_15283] <= test266151307()
            require _15283 + return_data.size > _15283 + mem[_15283] + 31
            _15406 = mem[_15283 + mem[_15283]]
            if mem[_15283 + mem[_15283]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_15283 + mem[_15283]]) + 1 < 0 or _15283 + ceil32(return_data.size) + ceil32(32 * mem[_15283 + mem[_15283]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _15283 + ceil32(return_data.size) + ceil32(32 * mem[_15283 + mem[_15283]]) + 1
            mem[_15283 + ceil32(return_data.size)] = _15406
            require _15352 + (32 * _15406) + 32 <= return_data.size
            mem[_15283 + ceil32(return_data.size) + 32 len ceil32(32 * _15406)] = mem[_15283 + _15352 + 32 len ceil32(32 * _15406)]
            _16633 = mem[64]
            mem[mem[64]] = 128
            _16714 = mem[_7065]
            mem[mem[64] + 128] = mem[_7065]
            mem[mem[64] + 160 len 32 * _16714] = mem[_7065 + 32 len 32 * _16714]
            mem[mem[64] + 32] = (32 * _16714) + 160
            _17446 = mem[_9883]
            mem[mem[64] + (32 * _16714) + 160] = mem[_9883]
            mem[mem[64] + (32 * _16714) + 192 len 32 * _17446] = mem[_9883 + 32 len 32 * _17446]
            var174001 = _17446
            mem[mem[64] + 64] = (32 * _16714) + (32 * _17446) + 192
            _18094 = mem[_12645 + ceil32(return_data.size)]
            mem[_16633 + (32 * _16714) + (32 * _17446) + 192] = mem[_12645 + ceil32(return_data.size)]
            mem[_16633 + (32 * _16714) + (32 * _17446) + 224 len 32 * _18094] = mem[_12645 + ceil32(return_data.size) + 32 len 32 * _18094]
            mem[_16633 + 96] = (32 * _16714) + (32 * _17446) + (32 * _18094) + 224
            mem[_16633 + (32 * _16714) + (32 * _17446) + (32 * _18094) + 224] = _15406
            mem[_16633 + (32 * _16714) + (32 * _17446) + (32 * _18094) + 256 len 32 * _15406] = mem[_15283 + ceil32(return_data.size) + 32 len 32 * _15406]
            return memory
              from mem[64]
               len _16633 + (32 * _16714) + (32 * _17446) + (32 * _18094) + (32 * _15406) + -mem[64] + 256
        _9876 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _9884 = mem[_9876]
        require mem[_9876] <= test266151307()
        require _9876 + return_data.size > _9876 + mem[_9876] + 31
        _9890 = mem[_9876 + mem[_9876]]
        if mem[_9876 + mem[_9876]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_9876 + mem[_9876]]) + 1 < 0 or _9876 + ceil32(return_data.size) + ceil32(32 * mem[_9876 + mem[_9876]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _9876 + ceil32(return_data.size) + ceil32(32 * mem[_9876 + mem[_9876]]) + 1
        mem[_9876 + ceil32(return_data.size)] = _9890
        require _9884 + (32 * _9890) + 32 <= return_data.size
        mem[_9876 + ceil32(return_data.size) + 32 len ceil32(32 * _9890)] = mem[_9876 + _9884 + 32 len ceil32(32 * _9890)]
        var110002 = _9876 + ceil32(return_data.size) + ceil32(32 * _9890) + 32
        _11286 = mem[64]
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = cd[36]
        mem[mem[64] + 36] = 64
        _11295 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
        t = mem[64] + 100
        while idx < _11295:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _11286 + (32 * _11295) + -mem[64] + 96]
        if not ext_call.success:
            _12655 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
                revert with 0, 65
            _12669 = mem[64]
            mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            mem[64] = mem[64] + (32 * _12655) + 32
            if not _12655:
                _13965 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = 0
                while idx < _13965:
                    if idx >= mem[_12669]:
                        revert with 0, 50
                    mem[(32 * idx) + _12669 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _13965 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = idx + 1
                    continue 
                _14010 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _14028 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                t = mem[64] + 100
                while idx < _14028:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _14010 + (32 * _14028) + -mem[64] + 96]
                if not ext_call.success:
                    _15311 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                        revert with 0, 65
                    _15353 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[64] = mem[64] + (32 * _15311) + 32
                    if not _15311:
                        _16406 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16406:
                            if idx >= mem[_15353]:
                                revert with 0, 50
                            mem[(32 * idx) + _15353 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16406 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16595 = mem[_7065]
                        mem[mem[64] + 128] = mem[_7065]
                        mem[mem[64] + 160 len 32 * _16595] = mem[_7065 + 32 len 32 * _16595]
                        mem[mem[64] + 32] = (32 * _16595) + 160
                        _17447 = mem[_9876 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16595) + 160] = mem[_9876 + ceil32(return_data.size)]
                        mem[mem[64] + (32 * _16595) + 192 len 32 * _17447] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17447]
                        mem[mem[64] + 64] = (32 * _16595) + (32 * _17447) + 192
                        _18095 = mem[_12669]
                        mem[mem[64] + (32 * _16595) + (32 * _17447) + 192] = mem[_12669]
                        mem[mem[64] + (32 * _16595) + (32 * _17447) + 224 len 32 * _18095] = mem[_12669 + 32 len 32 * _18095]
                        mem[mem[64] + 96] = (32 * _16595) + (32 * _17447) + (32 * _18095) + 224
                        _18581 = mem[_15353]
                        mem[mem[64] + (32 * _16595) + (32 * _17447) + (32 * _18095) + 224] = mem[_15353]
                        mem[mem[64] + (32 * _16595) + (32 * _17447) + (32 * _18095) + 256 len 32 * _18581] = mem[_15353 + 32 len 32 * _18581]
                        return 128, 
                               (32 * _16595) + 160,
                               (32 * _16595) + (32 * _17447) + 192,
                               (32 * _16595) + (32 * _17447) + (32 * _18095) + 224,
                               mem[mem[64] + 128 len (32 * _16595) + (32 * _17447) + (32 * _18095) + (32 * _18581) + 128]
                    mem[_15353 + 32 len 32 * _15311] = call.data[calldata.size len 32 * _15311]
                    _16407 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16407:
                        if idx >= mem[_15353]:
                            revert with 0, 50
                        mem[(32 * idx) + _15353 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16407 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    mem[mem[64]] = 128
                    _16596 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16596] = mem[_7065 + 32 len 32 * _16596]
                    mem[mem[64] + 32] = (32 * _16596) + 160
                    _17448 = mem[_9876 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16596) + 160] = mem[_9876 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16596) + 192 len 32 * _17448] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17448]
                    var163001 = _17448
                    mem[mem[64] + 64] = (32 * _16596) + (32 * _17448) + 192
                    _18096 = mem[_12669]
                    mem[mem[64] + (32 * _16596) + (32 * _17448) + 192] = mem[_12669]
                    mem[mem[64] + (32 * _16596) + (32 * _17448) + 224 len 32 * _18096] = mem[_12669 + 32 len 32 * _18096]
                    mem[mem[64] + 96] = (32 * _16596) + (32 * _17448) + (32 * _18096) + 224
                    _18582 = mem[_15353]
                    mem[mem[64] + (32 * _16596) + (32 * _17448) + (32 * _18096) + 224] = mem[_15353]
                    mem[mem[64] + (32 * _16596) + (32 * _17448) + (32 * _18096) + 256 len 32 * _18582] = mem[_15353 + 32 len 32 * _18582]
                    return 128, 
                           (32 * _16596) + 160,
                           (32 * _16596) + (32 * _17448) + 192,
                           (32 * _16596) + (32 * _17448) + (32 * _18096) + 224,
                           mem[mem[64] + 128 len (32 * _16596) + (32 * _17448) + (32 * _18096) + (32 * _18582) + 128]
                _15284 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _15354 = mem[_15284]
                require mem[_15284] <= test266151307()
                require _15284 + return_data.size > _15284 + mem[_15284] + 31
                _15408 = mem[_15284 + mem[_15284]]
                if mem[_15284 + mem[_15284]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_15284 + mem[_15284]]) + 1 < 0 or _15284 + ceil32(return_data.size) + ceil32(32 * mem[_15284 + mem[_15284]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _15284 + ceil32(return_data.size) + ceil32(32 * mem[_15284 + mem[_15284]]) + 1
                mem[_15284 + ceil32(return_data.size)] = _15408
                require _15354 + (32 * _15408) + 32 <= return_data.size
                mem[_15284 + ceil32(return_data.size) + 32 len ceil32(32 * _15408)] = mem[_15284 + _15354 + 32 len ceil32(32 * _15408)]
                _16634 = mem[64]
                mem[mem[64]] = 128
                _16715 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16715] = mem[_7065 + 32 len 32 * _16715]
                mem[mem[64] + 32] = (32 * _16715) + 160
                _17449 = mem[_9876 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16715) + 160] = mem[_9876 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16715) + 192 len 32 * _17449] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17449]
                mem[mem[64] + 64] = (32 * _16715) + (32 * _17449) + 192
                _18097 = mem[_12669]
                mem[_16634 + (32 * _16715) + (32 * _17449) + 192] = mem[_12669]
                mem[_16634 + (32 * _16715) + (32 * _17449) + 224 len 32 * _18097] = mem[_12669 + 32 len 32 * _18097]
                mem[_16634 + 96] = (32 * _16715) + (32 * _17449) + (32 * _18097) + 224
                mem[_16634 + (32 * _16715) + (32 * _17449) + (32 * _18097) + 224] = _15408
                mem[_16634 + (32 * _16715) + (32 * _17449) + (32 * _18097) + 256 len 32 * _15408] = mem[_15284 + ceil32(return_data.size) + 32 len 32 * _15408]
                return memory
                  from mem[64]
                   len _16634 + (32 * _16715) + (32 * _17449) + (32 * _18097) + (32 * _15408) + -mem[64] + 256
            mem[_12669 + 32 len 32 * _12655] = call.data[calldata.size len 32 * _12655]
            _13966 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            idx = 0
            while idx < _13966:
                if idx >= mem[_12669]:
                    revert with 0, 50
                mem[(32 * idx) + _12669 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _13966 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = idx + 1
                continue 
            _14011 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _14029 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
            t = mem[64] + 100
            while idx < _14029:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _14011 + (32 * _14029) + -mem[64] + 96]
            if not ext_call.success:
                _15312 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                    revert with 0, 65
                _15355 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[64] = mem[64] + (32 * _15312) + 32
                if not _15312:
                    _16408 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16408:
                        if idx >= mem[_15355]:
                            revert with 0, 50
                        mem[(32 * idx) + _15355 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16408 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    mem[mem[64]] = 128
                    _16597 = mem[_7065]
                    mem[mem[64] + 128] = mem[_7065]
                    mem[mem[64] + 160 len 32 * _16597] = mem[_7065 + 32 len 32 * _16597]
                    mem[mem[64] + 32] = (32 * _16597) + 160
                    _17450 = mem[_9876 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16597) + 160] = mem[_9876 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16597) + 192 len 32 * _17450] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17450]
                    var163001 = _17450
                    mem[mem[64] + 64] = (32 * _16597) + (32 * _17450) + 192
                    _18098 = mem[_12669]
                    mem[mem[64] + (32 * _16597) + (32 * _17450) + 192] = mem[_12669]
                    mem[mem[64] + (32 * _16597) + (32 * _17450) + 224 len 32 * _18098] = mem[_12669 + 32 len 32 * _18098]
                    mem[mem[64] + 96] = (32 * _16597) + (32 * _17450) + (32 * _18098) + 224
                    _18584 = mem[_15355]
                    mem[mem[64] + (32 * _16597) + (32 * _17450) + (32 * _18098) + 224] = mem[_15355]
                    mem[mem[64] + (32 * _16597) + (32 * _17450) + (32 * _18098) + 256 len 32 * _18584] = mem[_15355 + 32 len 32 * _18584]
                    return 128, 
                           (32 * _16597) + 160,
                           (32 * _16597) + (32 * _17450) + 192,
                           (32 * _16597) + (32 * _17450) + (32 * _18098) + 224,
                           mem[mem[64] + 128 len (32 * _16597) + (32 * _17450) + (32 * _18098) + (32 * _18584) + 128]
                mem[_15355 + 32 len 32 * _15312] = call.data[calldata.size len 32 * _15312]
                _16409 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16409:
                    if idx >= mem[_15355]:
                        revert with 0, 50
                    mem[(32 * idx) + _15355 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16409 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                _16544 = mem[64]
                mem[mem[64]] = 128
                _16598 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16598] = mem[_7065 + 32 len 32 * _16598]
                mem[mem[64] + 32] = (32 * _16598) + 160
                _17451 = mem[_9876 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16598) + 160] = mem[_9876 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16598) + 192 len 32 * _17451] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17451]
                var164001 = _17451
                mem[mem[64] + 64] = (32 * _16598) + (32 * _17451) + 192
                _18099 = mem[_12669]
                mem[_16544 + (32 * _16598) + (32 * _17451) + 192] = mem[_12669]
                mem[_16544 + (32 * _16598) + (32 * _17451) + 224 len 32 * _18099] = mem[_12669 + 32 len 32 * _18099]
                mem[_16544 + 96] = (32 * _16598) + (32 * _17451) + (32 * _18099) + 224
                _18585 = mem[_15355]
                mem[_16544 + (32 * _16598) + (32 * _17451) + (32 * _18099) + 224] = mem[_15355]
                mem[_16544 + (32 * _16598) + (32 * _17451) + (32 * _18099) + 256 len 32 * _18585] = mem[_15355 + 32 len 32 * _18585]
                var174001 = _18585
                return memory
                  from mem[64]
                   len _16544 + (32 * _16598) + (32 * _17451) + (32 * _18099) + (32 * _18585) + -mem[64] + 256
            _15285 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _15356 = mem[_15285]
            require mem[_15285] <= test266151307()
            require _15285 + return_data.size > _15285 + mem[_15285] + 31
            _15410 = mem[_15285 + mem[_15285]]
            if mem[_15285 + mem[_15285]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_15285 + mem[_15285]]) + 1 < 0 or _15285 + ceil32(return_data.size) + ceil32(32 * mem[_15285 + mem[_15285]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _15285 + ceil32(return_data.size) + ceil32(32 * mem[_15285 + mem[_15285]]) + 1
            mem[_15285 + ceil32(return_data.size)] = _15410
            require _15356 + (32 * _15410) + 32 <= return_data.size
            mem[_15285 + ceil32(return_data.size) + 32 len ceil32(32 * _15410)] = mem[_15285 + _15356 + 32 len ceil32(32 * _15410)]
            _16635 = mem[64]
            mem[mem[64]] = 128
            _16716 = mem[_7065]
            mem[mem[64] + 128] = mem[_7065]
            mem[mem[64] + 160 len 32 * _16716] = mem[_7065 + 32 len 32 * _16716]
            mem[mem[64] + 32] = (32 * _16716) + 160
            _17452 = mem[_9876 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16716) + 160] = mem[_9876 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16716) + 192 len 32 * _17452] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17452]
            var174001 = _17452
            mem[mem[64] + 64] = (32 * _16716) + (32 * _17452) + 192
            _18100 = mem[_12669]
            mem[_16635 + (32 * _16716) + (32 * _17452) + 192] = mem[_12669]
            mem[_16635 + (32 * _16716) + (32 * _17452) + 224 len 32 * _18100] = mem[_12669 + 32 len 32 * _18100]
            mem[_16635 + 96] = (32 * _16716) + (32 * _17452) + (32 * _18100) + 224
            mem[_16635 + (32 * _16716) + (32 * _17452) + (32 * _18100) + 224] = _15410
            mem[_16635 + (32 * _16716) + (32 * _17452) + (32 * _18100) + 256 len 32 * _15410] = mem[_15285 + ceil32(return_data.size) + 32 len 32 * _15410]
            return memory
              from mem[64]
               len _16635 + (32 * _16716) + (32 * _17452) + (32 * _18100) + (32 * _15410) + -mem[64] + 256
        _12646 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _12670 = mem[_12646]
        require mem[_12646] <= test266151307()
        require _12646 + return_data.size > _12646 + mem[_12646] + 31
        _12688 = mem[_12646 + mem[_12646]]
        if mem[_12646 + mem[_12646]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_12646 + mem[_12646]]) + 1 < 0 or _12646 + ceil32(return_data.size) + ceil32(32 * mem[_12646 + mem[_12646]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _12646 + ceil32(return_data.size) + ceil32(32 * mem[_12646 + mem[_12646]]) + 1
        mem[_12646 + ceil32(return_data.size)] = _12688
        require _12670 + (32 * _12688) + 32 <= return_data.size
        mem[_12646 + ceil32(return_data.size) + 32 len ceil32(32 * _12688)] = mem[_12646 + _12670 + 32 len ceil32(32 * _12688)]
        var139002 = _12646 + ceil32(return_data.size) + ceil32(32 * _12688) + 32
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = cd[36]
        mem[mem[64] + 36] = 64
        _14068 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
        t = mem[64] + 100
        while idx < _14068:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args cd[36], 64, mem[mem[64] + 68 len (32 * _14068) + 32]
        if not ext_call.success:
            _15313 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                revert with 0, 65
            _15357 = mem[64]
            mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[64] = mem[64] + (32 * _15313) + 32
            if not _15313:
                _16410 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16410:
                    if idx >= mem[_15357]:
                        revert with 0, 50
                    mem[(32 * idx) + _15357 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16410 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                _16545 = mem[64]
                mem[mem[64]] = 128
                _16599 = mem[_7065]
                mem[mem[64] + 128] = mem[_7065]
                mem[mem[64] + 160 len 32 * _16599] = mem[_7065 + 32 len 32 * _16599]
                mem[mem[64] + 32] = (32 * _16599) + 160
                _17453 = mem[_9876 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16599) + 160] = mem[_9876 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16599) + 192 len 32 * _17453] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17453]
                mem[mem[64] + 64] = (32 * _16599) + (32 * _17453) + 192
                _18101 = mem[_12646 + ceil32(return_data.size)]
                mem[_16545 + (32 * _16599) + (32 * _17453) + 192] = mem[_12646 + ceil32(return_data.size)]
                mem[_16545 + (32 * _16599) + (32 * _17453) + 224 len 32 * _18101] = mem[_12646 + ceil32(return_data.size) + 32 len 32 * _18101]
                mem[_16545 + 96] = (32 * _16599) + (32 * _17453) + (32 * _18101) + 224
                _18587 = mem[_15357]
                mem[_16545 + (32 * _16599) + (32 * _17453) + (32 * _18101) + 224] = mem[_15357]
                mem[_16545 + (32 * _16599) + (32 * _17453) + (32 * _18101) + 256 len 32 * _18587] = mem[_15357 + 32 len 32 * _18587]
                return memory
                  from mem[64]
                   len _16545 + (32 * _16599) + (32 * _17453) + (32 * _18101) + (32 * _18587) + -mem[64] + 256
            mem[_15357 + 32 len 32 * _15313] = call.data[calldata.size len 32 * _15313]
            _16411 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            while idx < _16411:
                if idx >= mem[_15357]:
                    revert with 0, 50
                mem[(32 * idx) + _15357 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _16411 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = idx + 1
                continue 
            mem[mem[64]] = 128
            _16600 = mem[_7065]
            mem[mem[64] + 128] = mem[_7065]
            mem[mem[64] + 160 len 32 * _16600] = mem[_7065 + 32 len 32 * _16600]
            mem[mem[64] + 32] = (32 * _16600) + 160
            _17454 = mem[_9876 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16600) + 160] = mem[_9876 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16600) + 192 len 32 * _17454] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17454]
            var174001 = _17454
            mem[mem[64] + 64] = (32 * _16600) + (32 * _17454) + 192
            _18102 = mem[_12646 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16600) + (32 * _17454) + 192] = mem[_12646 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16600) + (32 * _17454) + 224 len 32 * _18102] = mem[_12646 + ceil32(return_data.size) + 32 len 32 * _18102]
            mem[mem[64] + 96] = (32 * _16600) + (32 * _17454) + (32 * _18102) + 224
            _18588 = mem[_15357]
            mem[mem[64] + (32 * _16600) + (32 * _17454) + (32 * _18102) + 224] = mem[_15357]
            mem[mem[64] + (32 * _16600) + (32 * _17454) + (32 * _18102) + 256 len 32 * _18588] = mem[_15357 + 32 len 32 * _18588]
            return 128, 
                   (32 * _16600) + 160,
                   (32 * _16600) + (32 * _17454) + 192,
                   (32 * _16600) + (32 * _17454) + (32 * _18102) + 224,
                   mem[mem[64] + 128 len (32 * _16600) + (32 * _17454) + (32 * _18102) + (32 * _18588) + 128]
        _15286 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _15358 = mem[_15286]
        require mem[_15286] <= test266151307()
        require _15286 + return_data.size > _15286 + mem[_15286] + 31
        _15412 = mem[_15286 + mem[_15286]]
        if mem[_15286 + mem[_15286]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_15286 + mem[_15286]]) + 1 < 0 or _15286 + ceil32(return_data.size) + ceil32(32 * mem[_15286 + mem[_15286]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _15286 + ceil32(return_data.size) + ceil32(32 * mem[_15286 + mem[_15286]]) + 1
        mem[_15286 + ceil32(return_data.size)] = _15412
        require _15358 + (32 * _15412) + 32 <= return_data.size
        mem[_15286 + ceil32(return_data.size) + 32 len ceil32(32 * _15412)] = mem[_15286 + _15358 + 32 len ceil32(32 * _15412)]
        _16636 = mem[64]
        mem[mem[64]] = 128
        _16717 = mem[_7065]
        mem[mem[64] + 128] = mem[_7065]
        mem[mem[64] + 160 len 32 * _16717] = mem[_7065 + 32 len 32 * _16717]
        mem[mem[64] + 32] = (32 * _16717) + 160
        _17455 = mem[_9876 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _16717) + 160] = mem[_9876 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _16717) + 192 len 32 * _17455] = mem[_9876 + ceil32(return_data.size) + 32 len 32 * _17455]
        mem[mem[64] + 64] = (32 * _16717) + (32 * _17455) + 192
        _18103 = mem[_12646 + ceil32(return_data.size)]
        mem[_16636 + (32 * _16717) + (32 * _17455) + 192] = mem[_12646 + ceil32(return_data.size)]
        mem[_16636 + (32 * _16717) + (32 * _17455) + 224 len 32 * _18103] = mem[_12646 + ceil32(return_data.size) + 32 len 32 * _18103]
        mem[_16636 + 96] = (32 * _16717) + (32 * _17455) + (32 * _18103) + 224
        mem[_16636 + (32 * _16717) + (32 * _17455) + (32 * _18103) + 224] = _15412
        mem[_16636 + (32 * _16717) + (32 * _17455) + (32 * _18103) + 256 len 32 * _15412] = mem[_15286 + ceil32(return_data.size) + 32 len 32 * _15412]
        return memory
          from mem[64]
           len _16636 + (32 * _16717) + (32 * _17455) + (32 * _18103) + (32 * _15412) + -mem[64] + 256
    _7063 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _7066 = mem[_7063]
    require mem[_7063] <= test266151307()
    require _7063 + return_data.size > _7063 + mem[_7063] + 31
    _7068 = mem[_7063 + mem[_7063]]
    if mem[_7063 + mem[_7063]] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[_7063 + mem[_7063]]) + 1 < 0 or _7063 + ceil32(return_data.size) + ceil32(32 * mem[_7063 + mem[_7063]]) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _7063 + ceil32(return_data.size) + ceil32(32 * mem[_7063 + mem[_7063]]) + 1
    mem[_7063 + ceil32(return_data.size)] = _7068
    require _7066 + (32 * _7068) + 32 <= return_data.size
    mem[_7063 + ceil32(return_data.size) + 32 len ceil32(32 * _7068)] = mem[_7063 + _7066 + 32 len ceil32(32 * _7068)]
    var91002 = _7063 + ceil32(return_data.size) + ceil32(32 * _7068) + 32
    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = cd[36]
    mem[mem[64] + 36] = 64
    _8481 = mem[ceil32(32 * ('cd', 68).length) + 97]
    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
    idx = 0
    s = ceil32(32 * ('cd', 68).length) + 129
    t = mem[64] + 100
    while idx < _8481:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
            gas gas_remaining wei
           args cd[36], 64, mem[mem[64] + 68 len (32 * _8481) + 32]
    if not ext_call.success:
        _9880 = mem[ceil32(32 * ('cd', 68).length) + 97]
        if mem[ceil32(32 * ('cd', 68).length) + 97] > test266151307():
            revert with 0, 65
        _9885 = mem[64]
        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[64] = mem[64] + (32 * _9880) + 32
        if not _9880:
            _11262 = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            while idx < _11262:
                if idx >= mem[_9885]:
                    revert with 0, 50
                mem[(32 * idx) + _9885 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _11262 = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = idx + 1
                continue 
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _11283 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
            t = mem[64] + 100
            while idx < _11283:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args cd[36], 64, mem[mem[64] + 68 len (32 * _11283) + 32]
            if not ext_call.success:
                _12656 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
                    revert with 0, 65
                _12671 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                mem[64] = mem[64] + (32 * _12656) + 32
                if not _12656:
                    _13967 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = 0
                    while idx < _13967:
                        if idx >= mem[_12671]:
                            revert with 0, 50
                        mem[(32 * idx) + _12671 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _13967 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                        idx = idx + 1
                        continue 
                    _14012 = mem[64]
                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 64
                    _14030 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                    t = mem[64] + 100
                    while idx < _14030:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _14012 + (32 * _14030) + -mem[64] + 96]
                    if not ext_call.success:
                        _15314 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                            revert with 0, 65
                        _15359 = mem[64]
                        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        mem[64] = mem[64] + (32 * _15314) + 32
                        if not _15314:
                            _16412 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = 0
                            while idx < _16412:
                                if idx >= mem[_15359]:
                                    revert with 0, 50
                                mem[(32 * idx) + _15359 + 32] = 0
                                if idx == -1:
                                    revert with 0, 17
                                _16412 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                                idx = idx + 1
                                continue 
                            _16547 = mem[64]
                            mem[mem[64]] = 128
                            _16601 = mem[_7063 + ceil32(return_data.size)]
                            mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                            mem[mem[64] + 160 len 32 * _16601] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16601]
                            mem[mem[64] + 32] = (32 * _16601) + 160
                            _17456 = mem[_9885]
                            mem[mem[64] + (32 * _16601) + 160] = mem[_9885]
                            mem[mem[64] + (32 * _16601) + 192 len 32 * _17456] = mem[_9885 + 32 len 32 * _17456]
                            mem[mem[64] + 64] = (32 * _16601) + (32 * _17456) + 192
                            _18104 = mem[_12671]
                            mem[_16547 + (32 * _16601) + (32 * _17456) + 192] = mem[_12671]
                            mem[_16547 + (32 * _16601) + (32 * _17456) + 224 len 32 * _18104] = mem[_12671 + 32 len 32 * _18104]
                            mem[_16547 + 96] = (32 * _16601) + (32 * _17456) + (32 * _18104) + 224
                            _18590 = mem[_15359]
                            mem[_16547 + (32 * _16601) + (32 * _17456) + (32 * _18104) + 224] = mem[_15359]
                            mem[_16547 + (32 * _16601) + (32 * _17456) + (32 * _18104) + 256 len 32 * _18590] = mem[_15359 + 32 len 32 * _18590]
                            return memory
                              from mem[64]
                               len _16547 + (32 * _16601) + (32 * _17456) + (32 * _18104) + (32 * _18590) + -mem[64] + 256
                        mem[_15359 + 32 len 32 * _15314] = call.data[calldata.size len 32 * _15314]
                        _16413 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16413:
                            if idx >= mem[_15359]:
                                revert with 0, 50
                            mem[(32 * idx) + _15359 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16413 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16602 = mem[_7063 + ceil32(return_data.size)]
                        mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                        mem[mem[64] + 160 len 32 * _16602] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16602]
                        mem[mem[64] + 32] = (32 * _16602) + 160
                        _17457 = mem[_9885]
                        mem[mem[64] + (32 * _16602) + 160] = mem[_9885]
                        mem[mem[64] + (32 * _16602) + 192 len 32 * _17457] = mem[_9885 + 32 len 32 * _17457]
                        mem[mem[64] + 64] = (32 * _16602) + (32 * _17457) + 192
                        _18105 = mem[_12671]
                        mem[mem[64] + (32 * _16602) + (32 * _17457) + 192] = mem[_12671]
                        mem[mem[64] + (32 * _16602) + (32 * _17457) + 224 len 32 * _18105] = mem[_12671 + 32 len 32 * _18105]
                        mem[mem[64] + 96] = (32 * _16602) + (32 * _17457) + (32 * _18105) + 224
                        _18591 = mem[_15359]
                        mem[mem[64] + (32 * _16602) + (32 * _17457) + (32 * _18105) + 224] = mem[_15359]
                        mem[mem[64] + (32 * _16602) + (32 * _17457) + (32 * _18105) + 256 len 32 * _18591] = mem[_15359 + 32 len 32 * _18591]
                        return 128, 
                               (32 * _16602) + 160,
                               (32 * _16602) + (32 * _17457) + 192,
                               (32 * _16602) + (32 * _17457) + (32 * _18105) + 224,
                               mem[mem[64] + 128 len (32 * _16602) + (32 * _17457) + (32 * _18105) + (32 * _18591) + 128]
                    _15287 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _15360 = mem[_15287]
                    require mem[_15287] <= test266151307()
                    require _15287 + return_data.size > _15287 + mem[_15287] + 31
                    _15414 = mem[_15287 + mem[_15287]]
                    if mem[_15287 + mem[_15287]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_15287 + mem[_15287]]) + 1 < 0 or _15287 + ceil32(return_data.size) + ceil32(32 * mem[_15287 + mem[_15287]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _15287 + ceil32(return_data.size) + ceil32(32 * mem[_15287 + mem[_15287]]) + 1
                    mem[_15287 + ceil32(return_data.size)] = _15414
                    require _15360 + (32 * _15414) + 32 <= return_data.size
                    mem[_15287 + ceil32(return_data.size) + 32 len ceil32(32 * _15414)] = mem[_15287 + _15360 + 32 len ceil32(32 * _15414)]
                    _16637 = mem[64]
                    mem[mem[64]] = 128
                    _16718 = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 160 len 32 * _16718] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16718]
                    mem[mem[64] + 32] = (32 * _16718) + 160
                    _17458 = mem[_9885]
                    mem[mem[64] + (32 * _16718) + 160] = mem[_9885]
                    mem[mem[64] + (32 * _16718) + 192 len 32 * _17458] = mem[_9885 + 32 len 32 * _17458]
                    mem[mem[64] + 64] = (32 * _16718) + (32 * _17458) + 192
                    _18106 = mem[_12671]
                    mem[_16637 + (32 * _16718) + (32 * _17458) + 192] = mem[_12671]
                    mem[_16637 + (32 * _16718) + (32 * _17458) + 224 len 32 * _18106] = mem[_12671 + 32 len 32 * _18106]
                    mem[_16637 + 96] = (32 * _16718) + (32 * _17458) + (32 * _18106) + 224
                    mem[_16637 + (32 * _16718) + (32 * _17458) + (32 * _18106) + 224] = _15414
                    mem[_16637 + (32 * _16718) + (32 * _17458) + (32 * _18106) + 256 len 32 * _15414] = mem[_15287 + ceil32(return_data.size) + 32 len 32 * _15414]
                    return memory
                      from mem[64]
                       len _16637 + (32 * _16718) + (32 * _17458) + (32 * _18106) + (32 * _15414) + -mem[64] + 256
                mem[_12671 + 32 len 32 * _12656] = call.data[calldata.size len 32 * _12656]
                _13968 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = 0
                while idx < _13968:
                    if idx >= mem[_12671]:
                        revert with 0, 50
                    mem[(32 * idx) + _12671 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _13968 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = idx + 1
                    continue 
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _14031 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                t = mem[64] + 100
                while idx < _14031:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args cd[36], 64, mem[mem[64] + 68 len (32 * _14031) + 32]
                if not ext_call.success:
                    _15315 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                        revert with 0, 65
                    _15361 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[64] = mem[64] + (32 * _15315) + 32
                    if not _15315:
                        _16414 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16414:
                            if idx >= mem[_15361]:
                                revert with 0, 50
                            mem[(32 * idx) + _15361 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16414 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        _16549 = mem[64]
                        mem[mem[64]] = 128
                        _16603 = mem[_7063 + ceil32(return_data.size)]
                        mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                        mem[mem[64] + 160 len 32 * _16603] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16603]
                        mem[mem[64] + 32] = (32 * _16603) + 160
                        _17459 = mem[_9885]
                        mem[mem[64] + (32 * _16603) + 160] = mem[_9885]
                        mem[mem[64] + (32 * _16603) + 192 len 32 * _17459] = mem[_9885 + 32 len 32 * _17459]
                        mem[mem[64] + 64] = (32 * _16603) + (32 * _17459) + 192
                        _18107 = mem[_12671]
                        mem[_16549 + (32 * _16603) + (32 * _17459) + 192] = mem[_12671]
                        mem[_16549 + (32 * _16603) + (32 * _17459) + 224 len 32 * _18107] = mem[_12671 + 32 len 32 * _18107]
                        mem[_16549 + 96] = (32 * _16603) + (32 * _17459) + (32 * _18107) + 224
                        _18593 = mem[_15361]
                        mem[_16549 + (32 * _16603) + (32 * _17459) + (32 * _18107) + 224] = mem[_15361]
                        mem[_16549 + (32 * _16603) + (32 * _17459) + (32 * _18107) + 256 len 32 * _18593] = mem[_15361 + 32 len 32 * _18593]
                        return memory
                          from mem[64]
                           len _16549 + (32 * _16603) + (32 * _17459) + (32 * _18107) + (32 * _18593) + -mem[64] + 256
                    mem[_15361 + 32 len 32 * _15315] = call.data[calldata.size len 32 * _15315]
                    _16415 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16415:
                        if idx >= mem[_15361]:
                            revert with 0, 50
                        mem[(32 * idx) + _15361 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16415 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    mem[mem[64]] = 128
                    _16604 = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 160 len 32 * _16604] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16604]
                    mem[mem[64] + 32] = (32 * _16604) + 160
                    _17460 = mem[_9885]
                    mem[mem[64] + (32 * _16604) + 160] = mem[_9885]
                    mem[mem[64] + (32 * _16604) + 192 len 32 * _17460] = mem[_9885 + 32 len 32 * _17460]
                    var163001 = _17460
                    mem[mem[64] + 64] = (32 * _16604) + (32 * _17460) + 192
                    _18108 = mem[_12671]
                    mem[mem[64] + (32 * _16604) + (32 * _17460) + 192] = mem[_12671]
                    mem[mem[64] + (32 * _16604) + (32 * _17460) + 224 len 32 * _18108] = mem[_12671 + 32 len 32 * _18108]
                    mem[mem[64] + 96] = (32 * _16604) + (32 * _17460) + (32 * _18108) + 224
                    _18594 = mem[_15361]
                    mem[mem[64] + (32 * _16604) + (32 * _17460) + (32 * _18108) + 224] = mem[_15361]
                    mem[mem[64] + (32 * _16604) + (32 * _17460) + (32 * _18108) + 256 len 32 * _18594] = mem[_15361 + 32 len 32 * _18594]
                    return 128, 
                           (32 * _16604) + 160,
                           (32 * _16604) + (32 * _17460) + 192,
                           (32 * _16604) + (32 * _17460) + (32 * _18108) + 224,
                           mem[mem[64] + 128 len (32 * _16604) + (32 * _17460) + (32 * _18108) + (32 * _18594) + 128]
                _15288 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _15362 = mem[_15288]
                require mem[_15288] <= test266151307()
                require _15288 + return_data.size > _15288 + mem[_15288] + 31
                _15416 = mem[_15288 + mem[_15288]]
                if mem[_15288 + mem[_15288]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_15288 + mem[_15288]]) + 1 < 0 or _15288 + ceil32(return_data.size) + ceil32(32 * mem[_15288 + mem[_15288]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _15288 + ceil32(return_data.size) + ceil32(32 * mem[_15288 + mem[_15288]]) + 1
                mem[_15288 + ceil32(return_data.size)] = _15416
                require _15362 + (32 * _15416) + 32 <= return_data.size
                mem[_15288 + ceil32(return_data.size) + 32 len ceil32(32 * _15416)] = mem[_15288 + _15362 + 32 len ceil32(32 * _15416)]
                _16638 = mem[64]
                mem[mem[64]] = 128
                _16719 = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 160 len 32 * _16719] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16719]
                mem[mem[64] + 32] = (32 * _16719) + 160
                _17461 = mem[_9885]
                mem[mem[64] + (32 * _16719) + 160] = mem[_9885]
                mem[mem[64] + (32 * _16719) + 192 len 32 * _17461] = mem[_9885 + 32 len 32 * _17461]
                mem[mem[64] + 64] = (32 * _16719) + (32 * _17461) + 192
                _18109 = mem[_12671]
                mem[_16638 + (32 * _16719) + (32 * _17461) + 192] = mem[_12671]
                mem[_16638 + (32 * _16719) + (32 * _17461) + 224 len 32 * _18109] = mem[_12671 + 32 len 32 * _18109]
                mem[_16638 + 96] = (32 * _16719) + (32 * _17461) + (32 * _18109) + 224
                mem[_16638 + (32 * _16719) + (32 * _17461) + (32 * _18109) + 224] = _15416
                mem[_16638 + (32 * _16719) + (32 * _17461) + (32 * _18109) + 256 len 32 * _15416] = mem[_15288 + ceil32(return_data.size) + 32 len 32 * _15416]
                return memory
                  from mem[64]
                   len _16638 + (32 * _16719) + (32 * _17461) + (32 * _18109) + (32 * _15416) + -mem[64] + 256
            _12647 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _12672 = mem[_12647]
            require mem[_12647] <= test266151307()
            require _12647 + return_data.size > _12647 + mem[_12647] + 31
            _12690 = mem[_12647 + mem[_12647]]
            if mem[_12647 + mem[_12647]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_12647 + mem[_12647]]) + 1 < 0 or _12647 + ceil32(return_data.size) + ceil32(32 * mem[_12647 + mem[_12647]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _12647 + ceil32(return_data.size) + ceil32(32 * mem[_12647 + mem[_12647]]) + 1
            mem[_12647 + ceil32(return_data.size)] = _12690
            require _12672 + (32 * _12690) + 32 <= return_data.size
            mem[_12647 + ceil32(return_data.size) + 32 len ceil32(32 * _12690)] = mem[_12647 + _12672 + 32 len ceil32(32 * _12690)]
            var138002 = _12647 + ceil32(return_data.size) + ceil32(32 * _12690) + 32
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _14069 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
            t = mem[64] + 100
            while idx < _14069:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args cd[36], 64, mem[mem[64] + 68 len (32 * _14069) + 32]
            if not ext_call.success:
                _15316 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                    revert with 0, 65
                _15363 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[64] = mem[64] + (32 * _15316) + 32
                if not _15316:
                    _16416 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16416:
                        if idx >= mem[_15363]:
                            revert with 0, 50
                        mem[(32 * idx) + _15363 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16416 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    _16551 = mem[64]
                    mem[mem[64]] = 128
                    _16605 = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 160 len 32 * _16605] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16605]
                    mem[mem[64] + 32] = (32 * _16605) + 160
                    _17462 = mem[_9885]
                    mem[mem[64] + (32 * _16605) + 160] = mem[_9885]
                    mem[mem[64] + (32 * _16605) + 192 len 32 * _17462] = mem[_9885 + 32 len 32 * _17462]
                    mem[mem[64] + 64] = (32 * _16605) + (32 * _17462) + 192
                    _18110 = mem[_12647 + ceil32(return_data.size)]
                    mem[_16551 + (32 * _16605) + (32 * _17462) + 192] = mem[_12647 + ceil32(return_data.size)]
                    mem[_16551 + (32 * _16605) + (32 * _17462) + 224 len 32 * _18110] = mem[_12647 + ceil32(return_data.size) + 32 len 32 * _18110]
                    mem[_16551 + 96] = (32 * _16605) + (32 * _17462) + (32 * _18110) + 224
                    _18596 = mem[_15363]
                    mem[_16551 + (32 * _16605) + (32 * _17462) + (32 * _18110) + 224] = mem[_15363]
                    mem[_16551 + (32 * _16605) + (32 * _17462) + (32 * _18110) + 256 len 32 * _18596] = mem[_15363 + 32 len 32 * _18596]
                    return memory
                      from mem[64]
                       len _16551 + (32 * _16605) + (32 * _17462) + (32 * _18110) + (32 * _18596) + -mem[64] + 256
                mem[_15363 + 32 len 32 * _15316] = call.data[calldata.size len 32 * _15316]
                _16417 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16417:
                    if idx >= mem[_15363]:
                        revert with 0, 50
                    mem[(32 * idx) + _15363 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16417 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                mem[mem[64]] = 128
                _16606 = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 160 len 32 * _16606] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16606]
                mem[mem[64] + 32] = (32 * _16606) + 160
                _17463 = mem[_9885]
                mem[mem[64] + (32 * _16606) + 160] = mem[_9885]
                mem[mem[64] + (32 * _16606) + 192 len 32 * _17463] = mem[_9885 + 32 len 32 * _17463]
                mem[mem[64] + 64] = (32 * _16606) + (32 * _17463) + 192
                _18111 = mem[_12647 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16606) + (32 * _17463) + 192] = mem[_12647 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16606) + (32 * _17463) + 224 len 32 * _18111] = mem[_12647 + ceil32(return_data.size) + 32 len 32 * _18111]
                mem[mem[64] + 96] = (32 * _16606) + (32 * _17463) + (32 * _18111) + 224
                _18597 = mem[_15363]
                mem[mem[64] + (32 * _16606) + (32 * _17463) + (32 * _18111) + 224] = mem[_15363]
                mem[mem[64] + (32 * _16606) + (32 * _17463) + (32 * _18111) + 256 len 32 * _18597] = mem[_15363 + 32 len 32 * _18597]
                return 128, 
                       (32 * _16606) + 160,
                       (32 * _16606) + (32 * _17463) + 192,
                       (32 * _16606) + (32 * _17463) + (32 * _18111) + 224,
                       mem[mem[64] + 128 len (32 * _16606) + (32 * _17463) + (32 * _18111) + (32 * _18597) + 128]
            _15289 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _15364 = mem[_15289]
            require mem[_15289] <= test266151307()
            require _15289 + return_data.size > _15289 + mem[_15289] + 31
            _15418 = mem[_15289 + mem[_15289]]
            if mem[_15289 + mem[_15289]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_15289 + mem[_15289]]) + 1 < 0 or _15289 + ceil32(return_data.size) + ceil32(32 * mem[_15289 + mem[_15289]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _15289 + ceil32(return_data.size) + ceil32(32 * mem[_15289 + mem[_15289]]) + 1
            mem[_15289 + ceil32(return_data.size)] = _15418
            require _15364 + (32 * _15418) + 32 <= return_data.size
            mem[_15289 + ceil32(return_data.size) + 32 len ceil32(32 * _15418)] = mem[_15289 + _15364 + 32 len ceil32(32 * _15418)]
            mem[mem[64]] = 128
            _16720 = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 160 len 32 * _16720] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16720]
            mem[mem[64] + 32] = (32 * _16720) + 160
            _17464 = mem[_9885]
            mem[mem[64] + (32 * _16720) + 160] = mem[_9885]
            mem[mem[64] + (32 * _16720) + 192 len 32 * _17464] = mem[_9885 + 32 len 32 * _17464]
            mem[mem[64] + 64] = (32 * _16720) + (32 * _17464) + 192
            _18112 = mem[_12647 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16720) + (32 * _17464) + 192] = mem[_12647 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16720) + (32 * _17464) + 224 len 32 * _18112] = mem[_12647 + ceil32(return_data.size) + 32 len 32 * _18112]
            mem[mem[64] + 96] = (32 * _16720) + (32 * _17464) + (32 * _18112) + 224
            mem[mem[64] + (32 * _16720) + (32 * _17464) + (32 * _18112) + 224] = _15418
            mem[mem[64] + (32 * _16720) + (32 * _17464) + (32 * _18112) + 256 len 32 * _15418] = mem[_15289 + ceil32(return_data.size) + 32 len 32 * _15418]
            return Array(len=mem[mem[64] + 128 len (32 * _16720) + (32 * _17464) + (32 * _18112) + 96], data=_15418, mem[mem[64] + (32 * _16720) + (32 * _17464) + (32 * _18112) + 256 len 32 * _15418]), 
                   (32 * _16720) + 160,
                   (32 * _16720) + (32 * _17464) + 192,
                   (32 * _16720) + (32 * _17464) + (32 * _18112) + 224
        mem[_9885 + 32 len 32 * _9880] = call.data[calldata.size len 32 * _9880]
        _11263 = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        while idx < _11263:
            if idx >= mem[_9885]:
                revert with 0, 50
            mem[(32 * idx) + _9885 + 32] = 0
            if idx == -1:
                revert with 0, 17
            _11263 = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = idx + 1
            continue 
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = cd[36]
        mem[mem[64] + 36] = 64
        _11284 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
        t = mem[64] + 100
        while idx < _11284:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args cd[36], 64, mem[mem[64] + 68 len (32 * _11284) + 32]
        if not ext_call.success:
            _12657 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
                revert with 0, 65
            _12673 = mem[64]
            mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            mem[64] = mem[64] + (32 * _12657) + 32
            if not _12657:
                _13969 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = 0
                while idx < _13969:
                    if idx >= mem[_12673]:
                        revert with 0, 50
                    mem[(32 * idx) + _12673 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _13969 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                    idx = idx + 1
                    continue 
                _14014 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _14032 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
                t = mem[64] + 100
                while idx < _14032:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _14014 + (32 * _14032) + -mem[64] + 96]
                if not ext_call.success:
                    _15317 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                        revert with 0, 65
                    _15365 = mem[64]
                    mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    mem[64] = mem[64] + (32 * _15317) + 32
                    if not _15317:
                        _16418 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = 0
                        while idx < _16418:
                            if idx >= mem[_15365]:
                                revert with 0, 50
                            mem[(32 * idx) + _15365 + 32] = 0
                            if idx == -1:
                                revert with 0, 17
                            _16418 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                            idx = idx + 1
                            continue 
                        mem[mem[64]] = 128
                        _16607 = mem[_7063 + ceil32(return_data.size)]
                        mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                        mem[mem[64] + 160 len 32 * _16607] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16607]
                        mem[mem[64] + 32] = (32 * _16607) + 160
                        _17465 = mem[_9885]
                        mem[mem[64] + (32 * _16607) + 160] = mem[_9885]
                        mem[mem[64] + (32 * _16607) + 192 len 32 * _17465] = mem[_9885 + 32 len 32 * _17465]
                        mem[mem[64] + 64] = (32 * _16607) + (32 * _17465) + 192
                        _18113 = mem[_12673]
                        mem[mem[64] + (32 * _16607) + (32 * _17465) + 192] = mem[_12673]
                        mem[mem[64] + (32 * _16607) + (32 * _17465) + 224 len 32 * _18113] = mem[_12673 + 32 len 32 * _18113]
                        mem[mem[64] + 96] = (32 * _16607) + (32 * _17465) + (32 * _18113) + 224
                        _18599 = mem[_15365]
                        mem[mem[64] + (32 * _16607) + (32 * _17465) + (32 * _18113) + 224] = mem[_15365]
                        mem[mem[64] + (32 * _16607) + (32 * _17465) + (32 * _18113) + 256 len 32 * _18599] = mem[_15365 + 32 len 32 * _18599]
                        return 128, 
                               (32 * _16607) + 160,
                               (32 * _16607) + (32 * _17465) + 192,
                               (32 * _16607) + (32 * _17465) + (32 * _18113) + 224,
                               mem[mem[64] + 128 len (32 * _16607) + (32 * _17465) + (32 * _18113) + (32 * _18599) + 128]
                    mem[_15365 + 32 len 32 * _15317] = call.data[calldata.size len 32 * _15317]
                    _16419 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16419:
                        if idx >= mem[_15365]:
                            revert with 0, 50
                        mem[(32 * idx) + _15365 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16419 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    _16554 = mem[64]
                    mem[mem[64]] = 128
                    _16608 = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 160 len 32 * _16608] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16608]
                    mem[mem[64] + 32] = (32 * _16608) + 160
                    _17466 = mem[_9885]
                    mem[mem[64] + (32 * _16608) + 160] = mem[_9885]
                    mem[mem[64] + (32 * _16608) + 192 len 32 * _17466] = mem[_9885 + 32 len 32 * _17466]
                    var163001 = _17466
                    mem[mem[64] + 64] = (32 * _16608) + (32 * _17466) + 192
                    _18114 = mem[_12673]
                    mem[_16554 + (32 * _16608) + (32 * _17466) + 192] = mem[_12673]
                    mem[_16554 + (32 * _16608) + (32 * _17466) + 224 len 32 * _18114] = mem[_12673 + 32 len 32 * _18114]
                    mem[_16554 + 96] = (32 * _16608) + (32 * _17466) + (32 * _18114) + 224
                    _18600 = mem[_15365]
                    mem[_16554 + (32 * _16608) + (32 * _17466) + (32 * _18114) + 224] = mem[_15365]
                    mem[_16554 + (32 * _16608) + (32 * _17466) + (32 * _18114) + 256 len 32 * _18600] = mem[_15365 + 32 len 32 * _18600]
                    return memory
                      from mem[64]
                       len _16554 + (32 * _16608) + (32 * _17466) + (32 * _18114) + (32 * _18600) + -mem[64] + 256
                _15290 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _15366 = mem[_15290]
                require mem[_15290] <= test266151307()
                require _15290 + return_data.size > _15290 + mem[_15290] + 31
                _15420 = mem[_15290 + mem[_15290]]
                if mem[_15290 + mem[_15290]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_15290 + mem[_15290]]) + 1 < 0 or _15290 + ceil32(return_data.size) + ceil32(32 * mem[_15290 + mem[_15290]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _15290 + ceil32(return_data.size) + ceil32(32 * mem[_15290 + mem[_15290]]) + 1
                mem[_15290 + ceil32(return_data.size)] = _15420
                require _15366 + (32 * _15420) + 32 <= return_data.size
                mem[_15290 + ceil32(return_data.size) + 32 len ceil32(32 * _15420)] = mem[_15290 + _15366 + 32 len ceil32(32 * _15420)]
                _16640 = mem[64]
                mem[mem[64]] = 128
                _16721 = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 160 len 32 * _16721] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16721]
                mem[mem[64] + 32] = (32 * _16721) + 160
                _17467 = mem[_9885]
                mem[mem[64] + (32 * _16721) + 160] = mem[_9885]
                mem[mem[64] + (32 * _16721) + 192 len 32 * _17467] = mem[_9885 + 32 len 32 * _17467]
                mem[mem[64] + 64] = (32 * _16721) + (32 * _17467) + 192
                _18115 = mem[_12673]
                mem[_16640 + (32 * _16721) + (32 * _17467) + 192] = mem[_12673]
                mem[_16640 + (32 * _16721) + (32 * _17467) + 224 len 32 * _18115] = mem[_12673 + 32 len 32 * _18115]
                mem[_16640 + 96] = (32 * _16721) + (32 * _17467) + (32 * _18115) + 224
                mem[_16640 + (32 * _16721) + (32 * _17467) + (32 * _18115) + 224] = _15420
                mem[_16640 + (32 * _16721) + (32 * _17467) + (32 * _18115) + 256 len 32 * _15420] = mem[_15290 + ceil32(return_data.size) + 32 len 32 * _15420]
                return memory
                  from mem[64]
                   len _16640 + (32 * _16721) + (32 * _17467) + (32 * _18115) + (32 * _15420) + -mem[64] + 256
            mem[_12673 + 32 len 32 * _12657] = call.data[calldata.size len 32 * _12657]
            _13970 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            idx = 0
            while idx < _13970:
                if idx >= mem[_12673]:
                    revert with 0, 50
                mem[(32 * idx) + _12673 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _13970 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = idx + 1
                continue 
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _14033 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
            t = mem[64] + 100
            while idx < _14033:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args cd[36], 64, mem[mem[64] + 68 len (32 * _14033) + 32]
            if not ext_call.success:
                _15318 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                    revert with 0, 65
                _15367 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[64] = mem[64] + (32 * _15318) + 32
                if not _15318:
                    _16420 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16420:
                        if idx >= mem[_15367]:
                            revert with 0, 50
                        mem[(32 * idx) + _15367 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16420 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    _16555 = mem[64]
                    mem[mem[64]] = 128
                    _16609 = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 160 len 32 * _16609] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16609]
                    mem[mem[64] + 32] = (32 * _16609) + 160
                    _17468 = mem[_9885]
                    mem[mem[64] + (32 * _16609) + 160] = mem[_9885]
                    mem[mem[64] + (32 * _16609) + 192 len 32 * _17468] = mem[_9885 + 32 len 32 * _17468]
                    var163001 = _17468
                    mem[mem[64] + 64] = (32 * _16609) + (32 * _17468) + 192
                    _18116 = mem[_12673]
                    mem[_16555 + (32 * _16609) + (32 * _17468) + 192] = mem[_12673]
                    mem[_16555 + (32 * _16609) + (32 * _17468) + 224 len 32 * _18116] = mem[_12673 + 32 len 32 * _18116]
                    mem[_16555 + 96] = (32 * _16609) + (32 * _17468) + (32 * _18116) + 224
                    _18602 = mem[_15367]
                    mem[_16555 + (32 * _16609) + (32 * _17468) + (32 * _18116) + 224] = mem[_15367]
                    mem[_16555 + (32 * _16609) + (32 * _17468) + (32 * _18116) + 256 len 32 * _18602] = mem[_15367 + 32 len 32 * _18602]
                    return memory
                      from mem[64]
                       len _16555 + (32 * _16609) + (32 * _17468) + (32 * _18116) + (32 * _18602) + -mem[64] + 256
                mem[_15367 + 32 len 32 * _15318] = call.data[calldata.size len 32 * _15318]
                _16421 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16421:
                    if idx >= mem[_15367]:
                        revert with 0, 50
                    mem[(32 * idx) + _15367 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16421 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                _16556 = mem[64]
                mem[mem[64]] = 128
                _16610 = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 160 len 32 * _16610] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16610]
                mem[mem[64] + 32] = (32 * _16610) + 160
                _17469 = mem[_9885]
                mem[mem[64] + (32 * _16610) + 160] = mem[_9885]
                mem[mem[64] + (32 * _16610) + 192 len 32 * _17469] = mem[_9885 + 32 len 32 * _17469]
                var164001 = _17469
                mem[mem[64] + 64] = (32 * _16610) + (32 * _17469) + 192
                _18117 = mem[_12673]
                mem[_16556 + (32 * _16610) + (32 * _17469) + 192] = mem[_12673]
                mem[_16556 + (32 * _16610) + (32 * _17469) + 224 len 32 * _18117] = mem[_12673 + 32 len 32 * _18117]
                mem[_16556 + 96] = (32 * _16610) + (32 * _17469) + (32 * _18117) + 224
                _18603 = mem[_15367]
                mem[_16556 + (32 * _16610) + (32 * _17469) + (32 * _18117) + 224] = mem[_15367]
                mem[_16556 + (32 * _16610) + (32 * _17469) + (32 * _18117) + 256 len 32 * _18603] = mem[_15367 + 32 len 32 * _18603]
                var174001 = _18603
                return memory
                  from mem[64]
                   len _16556 + (32 * _16610) + (32 * _17469) + (32 * _18117) + (32 * _18603) + -mem[64] + 256
            _15291 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _15368 = mem[_15291]
            require mem[_15291] <= test266151307()
            require _15291 + return_data.size > _15291 + mem[_15291] + 31
            _15422 = mem[_15291 + mem[_15291]]
            if mem[_15291 + mem[_15291]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_15291 + mem[_15291]]) + 1 < 0 or _15291 + ceil32(return_data.size) + ceil32(32 * mem[_15291 + mem[_15291]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _15291 + ceil32(return_data.size) + ceil32(32 * mem[_15291 + mem[_15291]]) + 1
            mem[_15291 + ceil32(return_data.size)] = _15422
            require _15368 + (32 * _15422) + 32 <= return_data.size
            mem[_15291 + ceil32(return_data.size) + 32 len ceil32(32 * _15422)] = mem[_15291 + _15368 + 32 len ceil32(32 * _15422)]
            _16641 = mem[64]
            mem[mem[64]] = 128
            _16722 = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 160 len 32 * _16722] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16722]
            mem[mem[64] + 32] = (32 * _16722) + 160
            _17470 = mem[_9885]
            mem[mem[64] + (32 * _16722) + 160] = mem[_9885]
            mem[mem[64] + (32 * _16722) + 192 len 32 * _17470] = mem[_9885 + 32 len 32 * _17470]
            var174001 = _17470
            mem[mem[64] + 64] = (32 * _16722) + (32 * _17470) + 192
            _18118 = mem[_12673]
            mem[_16641 + (32 * _16722) + (32 * _17470) + 192] = mem[_12673]
            mem[_16641 + (32 * _16722) + (32 * _17470) + 224 len 32 * _18118] = mem[_12673 + 32 len 32 * _18118]
            mem[_16641 + 96] = (32 * _16722) + (32 * _17470) + (32 * _18118) + 224
            mem[_16641 + (32 * _16722) + (32 * _17470) + (32 * _18118) + 224] = _15422
            mem[_16641 + (32 * _16722) + (32 * _17470) + (32 * _18118) + 256 len 32 * _15422] = mem[_15291 + ceil32(return_data.size) + 32 len 32 * _15422]
            return memory
              from mem[64]
               len _16641 + (32 * _16722) + (32 * _17470) + (32 * _18118) + (32 * _15422) + -mem[64] + 256
        _12648 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _12674 = mem[_12648]
        require mem[_12648] <= test266151307()
        require _12648 + return_data.size > _12648 + mem[_12648] + 31
        _12692 = mem[_12648 + mem[_12648]]
        if mem[_12648 + mem[_12648]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_12648 + mem[_12648]]) + 1 < 0 or _12648 + ceil32(return_data.size) + ceil32(32 * mem[_12648 + mem[_12648]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _12648 + ceil32(return_data.size) + ceil32(32 * mem[_12648 + mem[_12648]]) + 1
        mem[_12648 + ceil32(return_data.size)] = _12692
        require _12674 + (32 * _12692) + 32 <= return_data.size
        mem[_12648 + ceil32(return_data.size) + 32 len ceil32(32 * _12692)] = mem[_12648 + _12674 + 32 len ceil32(32 * _12692)]
        var139002 = _12648 + ceil32(return_data.size) + ceil32(32 * _12692) + 32
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = cd[36]
        mem[mem[64] + 36] = 64
        _14070 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
        t = mem[64] + 100
        while idx < _14070:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args cd[36], 64, mem[mem[64] + 68 len (32 * _14070) + 32]
        if not ext_call.success:
            _15319 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                revert with 0, 65
            _15369 = mem[64]
            mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[64] = mem[64] + (32 * _15319) + 32
            if not _15319:
                _16422 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16422:
                    if idx >= mem[_15369]:
                        revert with 0, 50
                    mem[(32 * idx) + _15369 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16422 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                _16557 = mem[64]
                mem[mem[64]] = 128
                _16611 = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 160 len 32 * _16611] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16611]
                mem[mem[64] + 32] = (32 * _16611) + 160
                _17471 = mem[_9885]
                mem[mem[64] + (32 * _16611) + 160] = mem[_9885]
                mem[mem[64] + (32 * _16611) + 192 len 32 * _17471] = mem[_9885 + 32 len 32 * _17471]
                mem[mem[64] + 64] = (32 * _16611) + (32 * _17471) + 192
                _18119 = mem[_12648 + ceil32(return_data.size)]
                mem[_16557 + (32 * _16611) + (32 * _17471) + 192] = mem[_12648 + ceil32(return_data.size)]
                mem[_16557 + (32 * _16611) + (32 * _17471) + 224 len 32 * _18119] = mem[_12648 + ceil32(return_data.size) + 32 len 32 * _18119]
                mem[_16557 + 96] = (32 * _16611) + (32 * _17471) + (32 * _18119) + 224
                _18605 = mem[_15369]
                mem[_16557 + (32 * _16611) + (32 * _17471) + (32 * _18119) + 224] = mem[_15369]
                mem[_16557 + (32 * _16611) + (32 * _17471) + (32 * _18119) + 256 len 32 * _18605] = mem[_15369 + 32 len 32 * _18605]
                return memory
                  from mem[64]
                   len _16557 + (32 * _16611) + (32 * _17471) + (32 * _18119) + (32 * _18605) + -mem[64] + 256
            mem[_15369 + 32 len 32 * _15319] = call.data[calldata.size len 32 * _15319]
            _16423 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            while idx < _16423:
                if idx >= mem[_15369]:
                    revert with 0, 50
                mem[(32 * idx) + _15369 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _16423 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = idx + 1
                continue 
            mem[mem[64]] = 128
            _16612 = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 160 len 32 * _16612] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16612]
            mem[mem[64] + 32] = (32 * _16612) + 160
            _17472 = mem[_9885]
            mem[mem[64] + (32 * _16612) + 160] = mem[_9885]
            mem[mem[64] + (32 * _16612) + 192 len 32 * _17472] = mem[_9885 + 32 len 32 * _17472]
            var174001 = _17472
            mem[mem[64] + 64] = (32 * _16612) + (32 * _17472) + 192
            _18120 = mem[_12648 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16612) + (32 * _17472) + 192] = mem[_12648 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16612) + (32 * _17472) + 224 len 32 * _18120] = mem[_12648 + ceil32(return_data.size) + 32 len 32 * _18120]
            mem[mem[64] + 96] = (32 * _16612) + (32 * _17472) + (32 * _18120) + 224
            _18606 = mem[_15369]
            mem[mem[64] + (32 * _16612) + (32 * _17472) + (32 * _18120) + 224] = mem[_15369]
            mem[mem[64] + (32 * _16612) + (32 * _17472) + (32 * _18120) + 256 len 32 * _18606] = mem[_15369 + 32 len 32 * _18606]
            return 128, 
                   (32 * _16612) + 160,
                   (32 * _16612) + (32 * _17472) + 192,
                   (32 * _16612) + (32 * _17472) + (32 * _18120) + 224,
                   mem[mem[64] + 128 len (32 * _16612) + (32 * _17472) + (32 * _18120) + (32 * _18606) + 128]
        _15292 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _15370 = mem[_15292]
        require mem[_15292] <= test266151307()
        require _15292 + return_data.size > _15292 + mem[_15292] + 31
        _15424 = mem[_15292 + mem[_15292]]
        if mem[_15292 + mem[_15292]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_15292 + mem[_15292]]) + 1 < 0 or _15292 + ceil32(return_data.size) + ceil32(32 * mem[_15292 + mem[_15292]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _15292 + ceil32(return_data.size) + ceil32(32 * mem[_15292 + mem[_15292]]) + 1
        mem[_15292 + ceil32(return_data.size)] = _15424
        require _15370 + (32 * _15424) + 32 <= return_data.size
        mem[_15292 + ceil32(return_data.size) + 32 len ceil32(32 * _15424)] = mem[_15292 + _15370 + 32 len ceil32(32 * _15424)]
        _16642 = mem[64]
        mem[mem[64]] = 128
        _16723 = mem[_7063 + ceil32(return_data.size)]
        mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
        mem[mem[64] + 160 len 32 * _16723] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16723]
        mem[mem[64] + 32] = (32 * _16723) + 160
        _17473 = mem[_9885]
        mem[mem[64] + (32 * _16723) + 160] = mem[_9885]
        mem[mem[64] + (32 * _16723) + 192 len 32 * _17473] = mem[_9885 + 32 len 32 * _17473]
        mem[mem[64] + 64] = (32 * _16723) + (32 * _17473) + 192
        _18121 = mem[_12648 + ceil32(return_data.size)]
        mem[_16642 + (32 * _16723) + (32 * _17473) + 192] = mem[_12648 + ceil32(return_data.size)]
        mem[_16642 + (32 * _16723) + (32 * _17473) + 224 len 32 * _18121] = mem[_12648 + ceil32(return_data.size) + 32 len 32 * _18121]
        mem[_16642 + 96] = (32 * _16723) + (32 * _17473) + (32 * _18121) + 224
        mem[_16642 + (32 * _16723) + (32 * _17473) + (32 * _18121) + 224] = _15424
        mem[_16642 + (32 * _16723) + (32 * _17473) + (32 * _18121) + 256 len 32 * _15424] = mem[_15292 + ceil32(return_data.size) + 32 len 32 * _15424]
        return memory
          from mem[64]
           len _16642 + (32 * _16723) + (32 * _17473) + (32 * _18121) + (32 * _15424) + -mem[64] + 256
    _9877 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _9886 = mem[_9877]
    require mem[_9877] <= test266151307()
    require _9877 + return_data.size > _9877 + mem[_9877] + 31
    _9892 = mem[_9877 + mem[_9877]]
    if mem[_9877 + mem[_9877]] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[_9877 + mem[_9877]]) + 1 < 0 or _9877 + ceil32(return_data.size) + ceil32(32 * mem[_9877 + mem[_9877]]) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _9877 + ceil32(return_data.size) + ceil32(32 * mem[_9877 + mem[_9877]]) + 1
    mem[_9877 + ceil32(return_data.size)] = _9892
    require _9886 + (32 * _9892) + 32 <= return_data.size
    mem[_9877 + ceil32(return_data.size) + 32 len ceil32(32 * _9892)] = mem[_9877 + _9886 + 32 len ceil32(32 * _9892)]
    var120002 = _9877 + ceil32(return_data.size) + ceil32(32 * _9892) + 32
    _11287 = mem[64]
    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = cd[36]
    mem[mem[64] + 36] = 64
    _11296 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
    idx = 0
    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130
    t = mem[64] + 100
    while idx < _11296:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).mem[mem[64] len 4] with:
            gas gas_remaining wei
           args mem[mem[64] + 4 len _11287 + (32 * _11296) + -mem[64] + 96]
    if not ext_call.success:
        _12658 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] > test266151307():
            revert with 0, 65
        _12675 = mem[64]
        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
        mem[64] = mem[64] + (32 * _12658) + 32
        if not _12658:
            _13971 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            idx = 0
            while idx < _13971:
                if idx >= mem[_12675]:
                    revert with 0, 50
                mem[(32 * idx) + _12675 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _13971 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
                idx = idx + 1
                continue 
            _14016 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _14034 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
            t = mem[64] + 100
            while idx < _14034:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _14016 + (32 * _14034) + -mem[64] + 96]
            if not ext_call.success:
                _15320 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                    revert with 0, 65
                _15371 = mem[64]
                mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                mem[64] = mem[64] + (32 * _15320) + 32
                if not _15320:
                    _16424 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = 0
                    while idx < _16424:
                        if idx >= mem[_15371]:
                            revert with 0, 50
                        mem[(32 * idx) + _15371 + 32] = 0
                        if idx == -1:
                            revert with 0, 17
                        _16424 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                        idx = idx + 1
                        continue 
                    mem[mem[64]] = 128
                    _16613 = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                    mem[mem[64] + 160 len 32 * _16613] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16613]
                    mem[mem[64] + 32] = (32 * _16613) + 160
                    _17474 = mem[_9877 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16613) + 160] = mem[_9877 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _16613) + 192 len 32 * _17474] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17474]
                    mem[mem[64] + 64] = (32 * _16613) + (32 * _17474) + 192
                    _18122 = mem[_12675]
                    mem[mem[64] + (32 * _16613) + (32 * _17474) + 192] = mem[_12675]
                    mem[mem[64] + (32 * _16613) + (32 * _17474) + 224 len 32 * _18122] = mem[_12675 + 32 len 32 * _18122]
                    mem[mem[64] + 96] = (32 * _16613) + (32 * _17474) + (32 * _18122) + 224
                    _18608 = mem[_15371]
                    mem[mem[64] + (32 * _16613) + (32 * _17474) + (32 * _18122) + 224] = mem[_15371]
                    mem[mem[64] + (32 * _16613) + (32 * _17474) + (32 * _18122) + 256 len 32 * _18608] = mem[_15371 + 32 len 32 * _18608]
                    return 128, 
                           (32 * _16613) + 160,
                           (32 * _16613) + (32 * _17474) + 192,
                           (32 * _16613) + (32 * _17474) + (32 * _18122) + 224,
                           mem[mem[64] + 128 len (32 * _16613) + (32 * _17474) + (32 * _18122) + (32 * _18608) + 128]
                mem[_15371 + 32 len 32 * _15320] = call.data[calldata.size len 32 * _15320]
                _16425 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16425:
                    if idx >= mem[_15371]:
                        revert with 0, 50
                    mem[(32 * idx) + _15371 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16425 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                _16560 = mem[64]
                mem[mem[64]] = 128
                _16614 = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 160 len 32 * _16614] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16614]
                mem[mem[64] + 32] = (32 * _16614) + 160
                _17475 = mem[_9877 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16614) + 160] = mem[_9877 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16614) + 192 len 32 * _17475] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17475]
                mem[mem[64] + 64] = (32 * _16614) + (32 * _17475) + 192
                _18123 = mem[_12675]
                mem[_16560 + (32 * _16614) + (32 * _17475) + 192] = mem[_12675]
                mem[_16560 + (32 * _16614) + (32 * _17475) + 224 len 32 * _18123] = mem[_12675 + 32 len 32 * _18123]
                mem[_16560 + 96] = (32 * _16614) + (32 * _17475) + (32 * _18123) + 224
                _18609 = mem[_15371]
                mem[_16560 + (32 * _16614) + (32 * _17475) + (32 * _18123) + 224] = mem[_15371]
                mem[_16560 + (32 * _16614) + (32 * _17475) + (32 * _18123) + 256 len 32 * _18609] = mem[_15371 + 32 len 32 * _18609]
                return memory
                  from mem[64]
                   len _16560 + (32 * _16614) + (32 * _17475) + (32 * _18123) + (32 * _18609) + -mem[64] + 256
            _15293 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _15372 = mem[_15293]
            require mem[_15293] <= test266151307()
            require _15293 + return_data.size > _15293 + mem[_15293] + 31
            _15426 = mem[_15293 + mem[_15293]]
            if mem[_15293 + mem[_15293]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_15293 + mem[_15293]]) + 1 < 0 or _15293 + ceil32(return_data.size) + ceil32(32 * mem[_15293 + mem[_15293]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _15293 + ceil32(return_data.size) + ceil32(32 * mem[_15293 + mem[_15293]]) + 1
            mem[_15293 + ceil32(return_data.size)] = _15426
            require _15372 + (32 * _15426) + 32 <= return_data.size
            mem[_15293 + ceil32(return_data.size) + 32 len ceil32(32 * _15426)] = mem[_15293 + _15372 + 32 len ceil32(32 * _15426)]
            _16643 = mem[64]
            mem[mem[64]] = 128
            _16724 = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 160 len 32 * _16724] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16724]
            mem[mem[64] + 32] = (32 * _16724) + 160
            _17476 = mem[_9877 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16724) + 160] = mem[_9877 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16724) + 192 len 32 * _17476] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17476]
            mem[mem[64] + 64] = (32 * _16724) + (32 * _17476) + 192
            _18124 = mem[_12675]
            mem[_16643 + (32 * _16724) + (32 * _17476) + 192] = mem[_12675]
            mem[_16643 + (32 * _16724) + (32 * _17476) + 224 len 32 * _18124] = mem[_12675 + 32 len 32 * _18124]
            mem[_16643 + 96] = (32 * _16724) + (32 * _17476) + (32 * _18124) + 224
            mem[_16643 + (32 * _16724) + (32 * _17476) + (32 * _18124) + 224] = _15426
            mem[_16643 + (32 * _16724) + (32 * _17476) + (32 * _18124) + 256 len 32 * _15426] = mem[_15293 + ceil32(return_data.size) + 32 len 32 * _15426]
            return memory
              from mem[64]
               len _16643 + (32 * _16724) + (32 * _17476) + (32 * _18124) + (32 * _15426) + -mem[64] + 256
        mem[_12675 + 32 len 32 * _12658] = call.data[calldata.size len 32 * _12658]
        _13972 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
        idx = 0
        while idx < _13972:
            if idx >= mem[_12675]:
                revert with 0, 50
            mem[(32 * idx) + _12675 + 32] = 0
            if idx == -1:
                revert with 0, 17
            _13972 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98]
            idx = idx + 1
            continue 
        _14017 = mem[64]
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = cd[36]
        mem[mem[64] + 36] = 64
        _14035 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
        t = mem[64] + 100
        while idx < _14035:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _14017 + (32 * _14035) + -mem[64] + 96]
        if not ext_call.success:
            _15321 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
                revert with 0, 65
            _15373 = mem[64]
            mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            mem[64] = mem[64] + (32 * _15321) + 32
            if not _15321:
                _16426 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = 0
                while idx < _16426:
                    if idx >= mem[_15373]:
                        revert with 0, 50
                    mem[(32 * idx) + _15373 + 32] = 0
                    if idx == -1:
                        revert with 0, 17
                    _16426 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                    idx = idx + 1
                    continue 
                mem[mem[64]] = 128
                _16615 = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
                mem[mem[64] + 160 len 32 * _16615] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16615]
                mem[mem[64] + 32] = (32 * _16615) + 160
                _17477 = mem[_9877 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16615) + 160] = mem[_9877 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _16615) + 192 len 32 * _17477] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17477]
                mem[mem[64] + 64] = (32 * _16615) + (32 * _17477) + 192
                _18125 = mem[_12675]
                mem[mem[64] + (32 * _16615) + (32 * _17477) + 192] = mem[_12675]
                mem[mem[64] + (32 * _16615) + (32 * _17477) + 224 len 32 * _18125] = mem[_12675 + 32 len 32 * _18125]
                mem[mem[64] + 96] = (32 * _16615) + (32 * _17477) + (32 * _18125) + 224
                _18611 = mem[_15373]
                mem[mem[64] + (32 * _16615) + (32 * _17477) + (32 * _18125) + 224] = mem[_15373]
                mem[mem[64] + (32 * _16615) + (32 * _17477) + (32 * _18125) + 256 len 32 * _18611] = mem[_15373 + 32 len 32 * _18611]
                return 128, 
                       (32 * _16615) + 160,
                       (32 * _16615) + (32 * _17477) + 192,
                       (32 * _16615) + (32 * _17477) + (32 * _18125) + 224,
                       mem[mem[64] + 128 len (32 * _16615) + (32 * _17477) + (32 * _18125) + (32 * _18611) + 128]
            mem[_15373 + 32 len 32 * _15321] = call.data[calldata.size len 32 * _15321]
            _16427 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            while idx < _16427:
                if idx >= mem[_15373]:
                    revert with 0, 50
                mem[(32 * idx) + _15373 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _16427 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = idx + 1
                continue 
            mem[mem[64]] = 128
            _16616 = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 160 len 32 * _16616] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16616]
            mem[mem[64] + 32] = (32 * _16616) + 160
            _17478 = mem[_9877 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16616) + 160] = mem[_9877 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16616) + 192 len 32 * _17478] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17478]
            var174001 = _17478
            mem[mem[64] + 64] = (32 * _16616) + (32 * _17478) + 192
            _18126 = mem[_12675]
            mem[mem[64] + (32 * _16616) + (32 * _17478) + 192] = mem[_12675]
            mem[mem[64] + (32 * _16616) + (32 * _17478) + 224 len 32 * _18126] = mem[_12675 + 32 len 32 * _18126]
            mem[mem[64] + 96] = (32 * _16616) + (32 * _17478) + (32 * _18126) + 224
            _18612 = mem[_15373]
            mem[mem[64] + (32 * _16616) + (32 * _17478) + (32 * _18126) + 224] = mem[_15373]
            mem[mem[64] + (32 * _16616) + (32 * _17478) + (32 * _18126) + 256 len 32 * _18612] = mem[_15373 + 32 len 32 * _18612]
            return 128, 
                   (32 * _16616) + 160,
                   (32 * _16616) + (32 * _17478) + 192,
                   (32 * _16616) + (32 * _17478) + (32 * _18126) + 224,
                   mem[mem[64] + 128 len (32 * _16616) + (32 * _17478) + (32 * _18126) + (32 * _18612) + 128]
        _15294 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _15374 = mem[_15294]
        require mem[_15294] <= test266151307()
        require _15294 + return_data.size > _15294 + mem[_15294] + 31
        _15428 = mem[_15294 + mem[_15294]]
        if mem[_15294 + mem[_15294]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_15294 + mem[_15294]]) + 1 < 0 or _15294 + ceil32(return_data.size) + ceil32(32 * mem[_15294 + mem[_15294]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _15294 + ceil32(return_data.size) + ceil32(32 * mem[_15294 + mem[_15294]]) + 1
        mem[_15294 + ceil32(return_data.size)] = _15428
        require _15374 + (32 * _15428) + 32 <= return_data.size
        mem[_15294 + ceil32(return_data.size) + 32 len ceil32(32 * _15428)] = mem[_15294 + _15374 + 32 len ceil32(32 * _15428)]
        _16644 = mem[64]
        mem[mem[64]] = 128
        _16725 = mem[_7063 + ceil32(return_data.size)]
        mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
        mem[mem[64] + 160 len 32 * _16725] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16725]
        mem[mem[64] + 32] = (32 * _16725) + 160
        _17479 = mem[_9877 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _16725) + 160] = mem[_9877 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _16725) + 192 len 32 * _17479] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17479]
        mem[mem[64] + 64] = (32 * _16725) + (32 * _17479) + 192
        _18127 = mem[_12675]
        mem[_16644 + (32 * _16725) + (32 * _17479) + 192] = mem[_12675]
        mem[_16644 + (32 * _16725) + (32 * _17479) + 224 len 32 * _18127] = mem[_12675 + 32 len 32 * _18127]
        mem[_16644 + 96] = (32 * _16725) + (32 * _17479) + (32 * _18127) + 224
        mem[_16644 + (32 * _16725) + (32 * _17479) + (32 * _18127) + 224] = _15428
        mem[_16644 + (32 * _16725) + (32 * _17479) + (32 * _18127) + 256 len 32 * _15428] = mem[_15294 + ceil32(return_data.size) + 32 len 32 * _15428]
        return memory
          from mem[64]
           len _16644 + (32 * _16725) + (32 * _17479) + (32 * _18127) + (32 * _15428) + -mem[64] + 256
    _12649 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _12676 = mem[_12649]
    require mem[_12649] <= test266151307()
    require _12649 + return_data.size > _12649 + mem[_12649] + 31
    _12694 = mem[_12649 + mem[_12649]]
    if mem[_12649 + mem[_12649]] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[_12649 + mem[_12649]]) + 1 < 0 or _12649 + ceil32(return_data.size) + ceil32(32 * mem[_12649 + mem[_12649]]) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _12649 + ceil32(return_data.size) + ceil32(32 * mem[_12649 + mem[_12649]]) + 1
    mem[_12649 + ceil32(return_data.size)] = _12694
    require _12676 + (32 * _12694) + 32 <= return_data.size
    mem[_12649 + ceil32(return_data.size) + 32 len ceil32(32 * _12694)] = mem[_12649 + _12676 + 32 len ceil32(32 * _12694)]
    var149002 = _12649 + ceil32(return_data.size) + ceil32(32 * _12694) + 32
    _14044 = mem[64]
    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = cd[36]
    mem[mem[64] + 36] = 64
    _14071 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
    idx = 0
    s = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 131
    t = mem[64] + 100
    while idx < _14071:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).mem[mem[64] len 4] with:
            gas gas_remaining wei
           args mem[mem[64] + 4 len _14044 + (32 * _14071) + -mem[64] + 96]
    if not ext_call.success:
        _15322 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        if mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99] > test266151307():
            revert with 0, 65
        _15375 = mem[64]
        mem[mem[64]] = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        mem[64] = mem[64] + (32 * _15322) + 32
        if not _15322:
            _16428 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = 0
            while idx < _16428:
                if idx >= mem[_15375]:
                    revert with 0, 50
                mem[(32 * idx) + _15375 + 32] = 0
                if idx == -1:
                    revert with 0, 17
                _16428 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
                idx = idx + 1
                continue 
            _16563 = mem[64]
            mem[mem[64]] = 128
            _16617 = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
            mem[mem[64] + 160 len 32 * _16617] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16617]
            mem[mem[64] + 32] = (32 * _16617) + 160
            _17480 = mem[_9877 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16617) + 160] = mem[_9877 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _16617) + 192 len 32 * _17480] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17480]
            mem[mem[64] + 64] = (32 * _16617) + (32 * _17480) + 192
            _18128 = mem[_12649 + ceil32(return_data.size)]
            mem[_16563 + (32 * _16617) + (32 * _17480) + 192] = mem[_12649 + ceil32(return_data.size)]
            mem[_16563 + (32 * _16617) + (32 * _17480) + 224 len 32 * _18128] = mem[_12649 + ceil32(return_data.size) + 32 len 32 * _18128]
            mem[_16563 + 96] = (32 * _16617) + (32 * _17480) + (32 * _18128) + 224
            _18614 = mem[_15375]
            mem[_16563 + (32 * _16617) + (32 * _17480) + (32 * _18128) + 224] = mem[_15375]
            mem[_16563 + (32 * _16617) + (32 * _17480) + (32 * _18128) + 256 len 32 * _18614] = mem[_15375 + 32 len 32 * _18614]
            return memory
              from mem[64]
               len _16563 + (32 * _16617) + (32 * _17480) + (32 * _18128) + (32 * _18614) + -mem[64] + 256
        mem[_15375 + 32 len 32 * _15322] = call.data[calldata.size len 32 * _15322]
        _16429 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
        idx = 0
        while idx < _16429:
            if idx >= mem[_15375]:
                revert with 0, 50
            mem[(32 * idx) + _15375 + 32] = 0
            if idx == -1:
                revert with 0, 17
            _16429 = mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(32 * ('cd', 132).length) + 99]
            idx = idx + 1
            continue 
        mem[mem[64]] = 128
        _16618 = mem[_7063 + ceil32(return_data.size)]
        mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
        mem[mem[64] + 160 len 32 * _16618] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16618]
        mem[mem[64] + 32] = (32 * _16618) + 160
        _17481 = mem[_9877 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _16618) + 160] = mem[_9877 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _16618) + 192 len 32 * _17481] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17481]
        mem[mem[64] + 64] = (32 * _16618) + (32 * _17481) + 192
        _18129 = mem[_12649 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _16618) + (32 * _17481) + 192] = mem[_12649 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _16618) + (32 * _17481) + 224 len 32 * _18129] = mem[_12649 + ceil32(return_data.size) + 32 len 32 * _18129]
        mem[mem[64] + 96] = (32 * _16618) + (32 * _17481) + (32 * _18129) + 224
        _18615 = mem[_15375]
        mem[mem[64] + (32 * _16618) + (32 * _17481) + (32 * _18129) + 224] = mem[_15375]
        mem[mem[64] + (32 * _16618) + (32 * _17481) + (32 * _18129) + 256 len 32 * _18615] = mem[_15375 + 32 len 32 * _18615]
        return 128, 
               (32 * _16618) + 160,
               (32 * _16618) + (32 * _17481) + 192,
               (32 * _16618) + (32 * _17481) + (32 * _18129) + 224,
               mem[mem[64] + 128 len (32 * _16618) + (32 * _17481) + (32 * _18129) + (32 * _18615) + 128]
    _15295 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _15376 = mem[_15295]
    require mem[_15295] <= test266151307()
    require _15295 + return_data.size > _15295 + mem[_15295] + 31
    _15430 = mem[_15295 + mem[_15295]]
    if mem[_15295 + mem[_15295]] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[_15295 + mem[_15295]]) + 1 < 0 or _15295 + ceil32(return_data.size) + ceil32(32 * mem[_15295 + mem[_15295]]) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _15295 + ceil32(return_data.size) + ceil32(32 * mem[_15295 + mem[_15295]]) + 1
    mem[_15295 + ceil32(return_data.size)] = _15430
    require _15376 + (32 * _15430) + 32 <= return_data.size
    mem[_15295 + ceil32(return_data.size) + 32 len ceil32(32 * _15430)] = mem[_15295 + _15376 + 32 len ceil32(32 * _15430)]
    mem[mem[64]] = 128
    _16726 = mem[_7063 + ceil32(return_data.size)]
    mem[mem[64] + 128] = mem[_7063 + ceil32(return_data.size)]
    mem[mem[64] + 160 len 32 * _16726] = mem[_7063 + ceil32(return_data.size) + 32 len 32 * _16726]
    mem[mem[64] + 32] = (32 * _16726) + 160
    _17482 = mem[_9877 + ceil32(return_data.size)]
    mem[mem[64] + (32 * _16726) + 160] = mem[_9877 + ceil32(return_data.size)]
    mem[mem[64] + (32 * _16726) + 192 len 32 * _17482] = mem[_9877 + ceil32(return_data.size) + 32 len 32 * _17482]
    mem[mem[64] + 64] = (32 * _16726) + (32 * _17482) + 192
    _18130 = mem[_12649 + ceil32(return_data.size)]
    mem[mem[64] + (32 * _16726) + (32 * _17482) + 192] = mem[_12649 + ceil32(return_data.size)]
    mem[mem[64] + (32 * _16726) + (32 * _17482) + 224 len 32 * _18130] = mem[_12649 + ceil32(return_data.size) + 32 len 32 * _18130]
    mem[mem[64] + 96] = (32 * _16726) + (32 * _17482) + (32 * _18130) + 224
    mem[mem[64] + (32 * _16726) + (32 * _17482) + (32 * _18130) + 224] = _15430
    mem[mem[64] + (32 * _16726) + (32 * _17482) + (32 * _18130) + 256 len 32 * _15430] = mem[_15295 + ceil32(return_data.size) + 32 len 32 * _15430]
    return Array(len=mem[mem[64] + 128 len (32 * _16726) + (32 * _17482) + (32 * _18130) + 96], data=_15430, mem[mem[64] + (32 * _16726) + (32 * _17482) + (32 * _18130) + 256 len 32 * _15430]), 
           (32 * _16726) + 160,
           (32 * _16726) + (32 * _17482) + 192,
           (32 * _16726) + (32 * _17482) + (32 * _18130) + 224
}

function sub_87f6425a(?) {
    require calldata.size - 4 >= 128
    require cd[4] == address(cd[4])
    require cd[68] <= test266151307()
    require cd[68] + 35 < calldata.size
    if ('cd', 68).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 68).length) + 97 < 96 or ceil32(32 * ('cd', 68).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 68).length
    require cd[68] + (32 * ('cd', 68).length) + 36 <= calldata.size
    idx = cd[68] + 36
    s = 128
    while idx < cd[68] + (32 * ('cd', 68).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    require cd[100] <= test266151307()
    require cd[100] + 35 < calldata.size
    if ('cd', 100).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 100).length) + 98 < 97 or ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98 > test266151307():
        revert with 0, 65
    mem[ceil32(32 * ('cd', 68).length) + 97] = ('cd', 100).length
    require cd[100] + (32 * ('cd', 100).length) + 36 <= calldata.size
    idx = cd[100] + 36
    s = ceil32(32 * ('cd', 68).length) + 129
    while idx < cd[100] + (32 * ('cd', 100).length) + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    if 0 >= ('cd', 68).length:
        revert with 0, 50
    _5937 = mem[128]
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 134] = msg.sender
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 166] = this.address
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 198] = cd[36]
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 98] = 100
    mem[64] = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 230
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 130 len 4] = unknown_0x23b872dd(?????)
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 230 len 128] = 0, msg.sender, address(this.address), cd[36], mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 230 len 28]
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 330] = 0
    call address(_5937) with:
         gas gas_remaining wei
        args mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 234 len 96]
    if not return_data.size:
        if not ext_call.success:
            revert with 0, 'TRANSFER_FROM_FAILED'
        if not ('cd', 68).length:
            mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 230] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 234] = cd[36]
            mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 266] = 64
            mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 298] = ('cd', 68).length
            idx = 0
            s = 128
            t = mem[64] + 100
            while idx < mem[96]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len (32 * ('cd', 68).length) + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _13065 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _13073 = mem[_13065]
            require mem[_13065] <= test266151307()
            require _13065 + return_data.size > _13065 + mem[_13065] + 31
            _13081 = mem[_13065 + mem[_13065]]
            if mem[_13065 + mem[_13065]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_13065 + mem[_13065]]) + 1 < 0 or _13065 + ceil32(return_data.size) + ceil32(32 * mem[_13065 + mem[_13065]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _13065 + ceil32(return_data.size) + ceil32(32 * mem[_13065 + mem[_13065]]) + 1
            mem[_13065 + ceil32(return_data.size)] = _13081
            require _13073 + (32 * _13081) + 32 <= return_data.size
            mem[_13065 + ceil32(return_data.size) + 32 len ceil32(32 * _13081)] = mem[_13065 + _13073 + 32 len ceil32(32 * _13081)]
            if _13081 < 1:
                revert with 0, 17
            if _13081 - 1 >= _13081:
                revert with 0, 50
            _16837 = mem[(32 * _13081 - 1) + _13065 + ceil32(return_data.size) + 32]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _16857 = mem[ceil32(32 * ('cd', 68).length) + 129]
            require ext_code.size(mem[ceil32(32 * ('cd', 68).length) + 141 len 20])
            staticcall mem[ceil32(32 * ('cd', 68).length) + 141 len 20].0x7d1db4a5 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if ext_call.success:
                _16873 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _16897 = mem[_16873]
                if mem[_16873] >= _16837:
                    _16957 = mem[64]
                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 64
                    _16997 = mem[96]
                    mem[mem[64] + 68] = mem[96]
                    idx = 0
                    s = 128
                    t = mem[64] + 100
                    while idx < _16997:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _16957 + (32 * _16997) + -mem[64] + 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _20689 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _20737 = mem[_20689]
                    require mem[_20689] <= test266151307()
                    require _20689 + return_data.size > _20689 + mem[_20689] + 31
                    _20785 = mem[_20689 + mem[_20689]]
                    if mem[_20689 + mem[_20689]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_20689 + mem[_20689]]) + 1 < 0 or _20689 + ceil32(return_data.size) + ceil32(32 * mem[_20689 + mem[_20689]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _20689 + ceil32(return_data.size) + ceil32(32 * mem[_20689 + mem[_20689]]) + 1
                    mem[_20689 + ceil32(return_data.size)] = _20785
                    require _20737 + (32 * _20785) + 32 <= return_data.size
                    mem[_20689 + ceil32(return_data.size) + 32 len ceil32(32 * _20785)] = mem[_20689 + _20737 + 32 len ceil32(32 * _20785)]
                    if _20785 < 1:
                        revert with 0, 17
                    if _20785 - 1 >= _20785:
                        revert with 0, 50
                    _24303 = mem[(32 * _20785 - 1) + _20689 + ceil32(return_data.size) + 32]
                    if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                        revert with 0, 50
                    _24375 = mem[ceil32(32 * ('cd', 68).length) + 129]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_24375))
                    staticcall address(_24375).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _24443 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _24491 = mem[_24443]
                    if 0 >= mem[96]:
                        revert with 0, 50
                    _24591 = mem[128]
                    mem[mem[64] + 4] = address(cd[4])
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_24591))
                    call address(_24591).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(cd[4]), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _24659 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_24659] == bool(mem[_24659])
                    _24779 = mem[64]
                    mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 1
                    mem[mem[64] + 68] = 160
                    _24817 = mem[96]
                    mem[mem[64] + 164] = mem[96]
                    idx = 0
                    s = 128
                    t = mem[64] + 196
                    while idx < _24817:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    mem[_24779 + 100] = this.address
                    mem[_24779 + 132] = block.timestamp
                    require ext_code.size(address(cd[4]))
                    call address(cd[4]).mem[mem[64] len 4] with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _24779 + (32 * _24817) + -mem[64] + 192]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                        revert with 0, 50
                    _27581 = mem[ceil32(32 * ('cd', 68).length) + 129]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_27581))
                    staticcall address(_27581).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _27649 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _27683 = mem[_27649]
                    if mem[_27649] < _24491:
                        revert with 0, 17
                    if _24303 < mem[_27649] - _24491:
                        revert with 0, 17
                    if _24303 - mem[_27649] + _24491 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if not _24303:
                        revert with 0, 18
                    if mem[_27649] < _24491:
                        revert with 0, 17
                    _27947 = mem[64]
                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _27683 - _24491
                    mem[mem[64] + 36] = 64
                    _28009 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + 129
                    t = mem[64] + 100
                    while idx < _28009:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _27947 + (32 * _28009) + -mem[64] + 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _30193 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _30317 = mem[_30193]
                    require mem[_30193] <= test266151307()
                    require _30193 + return_data.size > _30193 + mem[_30193] + 31
                    _30385 = mem[_30193 + mem[_30193]]
                    if mem[_30193 + mem[_30193]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_30193 + mem[_30193]]) + 1 < 0 or _30193 + ceil32(return_data.size) + ceil32(32 * mem[_30193 + mem[_30193]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _30193 + ceil32(return_data.size) + ceil32(32 * mem[_30193 + mem[_30193]]) + 1
                    mem[_30193 + ceil32(return_data.size)] = _30385
                    require _30317 + (32 * _30385) + 32 <= return_data.size
                    mem[_30193 + ceil32(return_data.size) + 32 len ceil32(32 * _30385)] = mem[_30193 + _30317 + 32 len ceil32(32 * _30385)]
                    if _30385 < 1:
                        revert with 0, 17
                    if _30385 - 1 >= _30385:
                        revert with 0, 50
                    _32535 = mem[(32 * _30385 - 1) + _30193 + ceil32(return_data.size) + 32]
                    if 0 >= mem[96]:
                        revert with 0, 50
                    _32649 = mem[128]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_32649))
                    staticcall address(_32649).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _32737 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _32785 = mem[_32737]
                    if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                        revert with 0, 50
                    _32857 = mem[ceil32(32 * ('cd', 68).length) + 129]
                    mem[mem[64] + 4] = address(cd[4])
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_32857))
                    call address(_32857).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(cd[4]), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _32915 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_32915] == bool(mem[_32915])
                    if _27683 < _24491:
                        revert with 0, 17
                    mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _27683 - _24491
                    mem[mem[64] + 36] = 1
                    mem[mem[64] + 68] = 160
                    _33011 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + 129
                    t = mem[64] + 196
                    while idx < _33011:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    mem[mem[64] + 100] = this.address
                    mem[mem[64] + 132] = block.timestamp
                    require ext_code.size(address(cd[4]))
                    call address(cd[4]).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args _27683 - _24491, 1, 160, address(this.address), block.timestamp, mem[mem[64] + 164 len (32 * _33011) + 32]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if 0 >= mem[96]:
                        revert with 0, 50
                    _34301 = mem[128]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_34301))
                    staticcall address(_34301).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _34369 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_34369] < _32785:
                        revert with 0, 17
                    if _32535 < mem[_34369] - _32785:
                        revert with 0, 17
                    if _32535 - mem[_34369] + _32785 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if not _32535:
                        revert with 0, 18
                    return (100 * _24303) - (100 * _27683) + (100 * _24491) / _24303, 
                           (100 * _32535) - (100 * mem[_34369]) + (100 * _32785) / _32535,
                           cd[36]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _16897
                mem[mem[64] + 36] = 64
                _16958 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 100
                while idx < _16958:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args _16897, 64, mem[mem[64] + 68 len (32 * _16958) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _20690 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _20738 = mem[_20690]
                require mem[_20690] <= test266151307()
                require _20690 + return_data.size > _20690 + mem[_20690] + 31
                _20786 = mem[_20690 + mem[_20690]]
                if mem[_20690 + mem[_20690]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_20690 + mem[_20690]]) + 1 < 0 or _20690 + ceil32(return_data.size) + ceil32(32 * mem[_20690 + mem[_20690]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _20690 + ceil32(return_data.size) + ceil32(32 * mem[_20690 + mem[_20690]]) + 1
                mem[_20690 + ceil32(return_data.size)] = _20786
                require _20738 + (32 * _20786) + 32 <= return_data.size
                mem[_20690 + ceil32(return_data.size) + 32 len ceil32(32 * _20786)] = mem[_20690 + _20738 + 32 len ceil32(32 * _20786)]
                if _20786 < 1:
                    revert with 0, 17
                if _20786 - 1 >= _20786:
                    revert with 0, 50
                _24305 = mem[(32 * _20786 - 1) + _20690 + ceil32(return_data.size) + 32]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _24305
                mem[mem[64] + 36] = 64
                _24467 = mem[96]
                mem[mem[64] + 68] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 100
                while idx < mem[96]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len (32 * _24467) + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _27491 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _27584 = mem[_27491]
                require mem[_27491] <= test266151307()
                require _27491 + return_data.size > _27491 + mem[_27491] + 31
                _27650 = mem[_27491 + mem[_27491]]
                if mem[_27491 + mem[_27491]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_27491 + mem[_27491]]) + 1 < 0 or _27491 + ceil32(return_data.size) + ceil32(32 * mem[_27491 + mem[_27491]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _27491 + ceil32(return_data.size) + ceil32(32 * mem[_27491 + mem[_27491]]) + 1
                mem[_27491 + ceil32(return_data.size)] = _27650
                require _27584 + (32 * _27650) + 32 <= return_data.size
                mem[_27491 + ceil32(return_data.size) + 32 len ceil32(32 * _27650)] = mem[_27491 + _27584 + 32 len ceil32(32 * _27650)]
                if _27650 < 1:
                    revert with 0, 17
                if _27650 - 1 >= _27650:
                    revert with 0, 50
                _30241 = mem[(32 * _27650 - 1) + _27491 + ceil32(return_data.size) + 32]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _30318 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_30318))
                staticcall address(_30318).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _30386 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _30419 = mem[_30386]
                if 0 >= mem[96]:
                    revert with 0, 50
                _30510 = mem[128]
                mem[mem[64] + 4] = address(cd[4])
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_30510))
                call address(_30510).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(cd[4]), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _30563 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_30563] == bool(mem[_30563])
                mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _24305
                mem[mem[64] + 36] = 1
                mem[mem[64] + 68] = 160
                _30800 = mem[96]
                mem[mem[64] + 164] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 196
                while idx < mem[96]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[mem[64] + 100] = this.address
                mem[mem[64] + 132] = block.timestamp
                require ext_code.size(address(cd[4]))
                call address(cd[4]).mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len 96], address(this.address), block.timestamp, mem[mem[64] + 164 len (32 * _30800) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _32652 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_32652))
                staticcall address(_32652).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _32738 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _32786 = mem[_32738]
                if mem[_32738] < _30419:
                    revert with 0, 17
                if _30241 < mem[_32738] - _30419:
                    revert with 0, 17
                if _30241 - mem[_32738] + _30419 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not _30241:
                    revert with 0, 18
                if mem[_32738] < _30419:
                    revert with 0, 17
                _32987 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _32786 - _30419
                mem[mem[64] + 36] = 64
                _33035 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 100
                while idx < _33035:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _32987 + (32 * _33035) + -mem[64] + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _34211 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _34304 = mem[_34211]
                require mem[_34211] <= test266151307()
                require _34211 + return_data.size > _34211 + mem[_34211] + 31
                _34370 = mem[_34211 + mem[_34211]]
                if mem[_34211 + mem[_34211]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_34211 + mem[_34211]]) + 1 < 0 or _34211 + ceil32(return_data.size) + ceil32(32 * mem[_34211 + mem[_34211]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _34211 + ceil32(return_data.size) + ceil32(32 * mem[_34211 + mem[_34211]]) + 1
                mem[_34211 + ceil32(return_data.size)] = _34370
                require _34304 + (32 * _34370) + 32 <= return_data.size
                mem[_34211 + ceil32(return_data.size) + 32 len ceil32(32 * _34370)] = mem[_34211 + _34304 + 32 len ceil32(32 * _34370)]
                if _34370 < 1:
                    revert with 0, 17
                if _34370 - 1 >= _34370:
                    revert with 0, 50
                _35257 = mem[(32 * _34370 - 1) + _34211 + ceil32(return_data.size) + 32]
                if 0 >= mem[96]:
                    revert with 0, 50
                _35319 = mem[128]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_35319))
                staticcall address(_35319).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _35363 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _35387 = mem[_35363]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _35449 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = address(cd[4])
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_35449))
                call address(_35449).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(cd[4]), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _35507 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_35507] == bool(mem[_35507])
                if _32786 < _30419:
                    revert with 0, 17
                _35555 = mem[64]
                mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _32786 - _30419
                mem[mem[64] + 36] = 1
                mem[mem[64] + 68] = 160
                _35579 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 196
                while idx < _35579:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_35555 + 100] = this.address
                mem[_35555 + 132] = block.timestamp
                require ext_code.size(address(cd[4]))
                call address(cd[4]).mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _35555 + (32 * _35579) + -mem[64] + 192]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if 0 >= mem[96]:
                    revert with 0, 50
                _35943 = mem[128]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_35943))
                staticcall address(_35943).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _35987 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if mem[_35987] < _35387:
                    revert with 0, 17
                if _35257 < mem[_35987] - _35387:
                    revert with 0, 17
                if _35257 - mem[_35987] + _35387 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not _35257:
                    revert with 0, 18
                return (100 * _30241) - (100 * _32786) + (100 * _30419) / _30241, 
                       (100 * _35257) - (100 * mem[_35987]) + (100 * _35387) / _35257,
                       _24305
            require ext_code.size(address(_16857))
            staticcall address(_16857).maxTxAmount() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                if _16837 >= _16837:
                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 64
                    _16977 = mem[96]
                    mem[mem[64] + 68] = mem[96]
                    idx = 0
                    s = 128
                    t = mem[64] + 100
                    while idx < mem[96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (32 * _16977) + 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _20685 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _20733 = mem[_20685]
                    require mem[_20685] <= test266151307()
                    require _20685 + return_data.size > _20685 + mem[_20685] + 31
                    _20781 = mem[_20685 + mem[_20685]]
                    if mem[_20685 + mem[_20685]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_20685 + mem[_20685]]) + 1 < 0 or _20685 + ceil32(return_data.size) + ceil32(32 * mem[_20685 + mem[_20685]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _20685 + ceil32(return_data.size) + ceil32(32 * mem[_20685 + mem[_20685]]) + 1
                    mem[_20685 + ceil32(return_data.size)] = _20781
                    require _20733 + (32 * _20781) + 32 <= return_data.size
                    mem[_20685 + ceil32(return_data.size) + 32 len ceil32(32 * _20781)] = mem[_20685 + _20733 + 32 len ceil32(32 * _20781)]
                    if _20781 < 1:
                        revert with 0, 17
                    if _20781 - 1 >= _20781:
                        revert with 0, 50
                    _24297 = mem[(32 * _20781 - 1) + _20685 + ceil32(return_data.size) + 32]
                    if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                        revert with 0, 50
                    _24369 = mem[ceil32(32 * ('cd', 68).length) + 129]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_24369))
                    staticcall address(_24369).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _24441 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _24489 = mem[_24441]
                    if 0 >= mem[96]:
                        revert with 0, 50
                    _24585 = mem[128]
                    mem[mem[64] + 4] = address(cd[4])
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_24585))
                    call address(_24585).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(cd[4]), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _24657 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_24657] == bool(mem[_24657])
                    _24777 = mem[64]
                    mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = cd[36]
                    mem[mem[64] + 36] = 1
                    mem[mem[64] + 68] = 160
                    _24813 = mem[96]
                    mem[mem[64] + 164] = mem[96]
                    idx = 0
                    s = 128
                    t = mem[64] + 196
                    while idx < _24813:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    mem[_24777 + 100] = this.address
                    mem[_24777 + 132] = block.timestamp
                    require ext_code.size(address(cd[4]))
                    call address(cd[4]).mem[mem[64] len 4] with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _24777 + (32 * _24813) + -mem[64] + 192]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                        revert with 0, 50
                    _27573 = mem[ceil32(32 * ('cd', 68).length) + 129]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_27573))
                    staticcall address(_27573).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _27645 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _27681 = mem[_27645]
                    if mem[_27645] < _24489:
                        revert with 0, 17
                    if _24297 < mem[_27645] - _24489:
                        revert with 0, 17
                    if _24297 - mem[_27645] + _24489 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if not _24297:
                        revert with 0, 18
                    if mem[_27645] < _24489:
                        revert with 0, 17
                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _27681 - _24489
                    mem[mem[64] + 36] = 64
                    _28005 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + 129
                    t = mem[64] + 100
                    while idx < _28005:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args _27681 - _24489, 64, mem[mem[64] + 68 len (32 * _28005) + 32]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _30189 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _30309 = mem[_30189]
                    require mem[_30189] <= test266151307()
                    require _30189 + return_data.size > _30189 + mem[_30189] + 31
                    _30381 = mem[_30189 + mem[_30189]]
                    if mem[_30189 + mem[_30189]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_30189 + mem[_30189]]) + 1 < 0 or _30189 + ceil32(return_data.size) + ceil32(32 * mem[_30189 + mem[_30189]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _30189 + ceil32(return_data.size) + ceil32(32 * mem[_30189 + mem[_30189]]) + 1
                    mem[_30189 + ceil32(return_data.size)] = _30381
                    require _30309 + (32 * _30381) + 32 <= return_data.size
                    mem[_30189 + ceil32(return_data.size) + 32 len ceil32(32 * _30381)] = mem[_30189 + _30309 + 32 len ceil32(32 * _30381)]
                    if _30381 < 1:
                        revert with 0, 17
                    if _30381 - 1 >= _30381:
                        revert with 0, 50
                    _32529 = mem[(32 * _30381 - 1) + _30189 + ceil32(return_data.size) + 32]
                    if 0 >= mem[96]:
                        revert with 0, 50
                    _32637 = mem[128]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_32637))
                    staticcall address(_32637).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _32733 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _32781 = mem[_32733]
                    if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                        revert with 0, 50
                    _32853 = mem[ceil32(32 * ('cd', 68).length) + 129]
                    mem[mem[64] + 4] = address(cd[4])
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_32853))
                    call address(_32853).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(cd[4]), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _32913 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_32913] == bool(mem[_32913])
                    if _27681 < _24489:
                        revert with 0, 17
                    _32961 = mem[64]
                    mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _27681 - _24489
                    mem[mem[64] + 36] = 1
                    mem[mem[64] + 68] = 160
                    _33009 = mem[ceil32(32 * ('cd', 68).length) + 97]
                    mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
                    idx = 0
                    s = ceil32(32 * ('cd', 68).length) + 129
                    t = mem[64] + 196
                    while idx < _33009:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    mem[_32961 + 100] = this.address
                    mem[_32961 + 132] = block.timestamp
                    require ext_code.size(address(cd[4]))
                    call address(cd[4]).mem[mem[64] len 4] with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _32961 + (32 * _33009) + -mem[64] + 192]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if 0 >= mem[96]:
                        revert with 0, 50
                    _34293 = mem[128]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_34293))
                    staticcall address(_34293).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _34365 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_34365] < _32781:
                        revert with 0, 17
                    if _32529 < mem[_34365] - _32781:
                        revert with 0, 17
                    if _32529 - mem[_34365] + _32781 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if not _32529:
                        revert with 0, 18
                    return (100 * _24297) - (100 * _27681) + (100 * _24489) / _24297, 
                           (100 * _32529) - (100 * mem[_34365]) + (100 * _32781) / _32529,
                           cd[36]
                _16921 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _16837
                mem[mem[64] + 36] = 64
                _16942 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 100
                while idx < _16942:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _16921 + (32 * _16942) + -mem[64] + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _20686 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _20734 = mem[_20686]
                require mem[_20686] <= test266151307()
                require _20686 + return_data.size > _20686 + mem[_20686] + 31
                _20782 = mem[_20686 + mem[_20686]]
                if mem[_20686 + mem[_20686]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_20686 + mem[_20686]]) + 1 < 0 or _20686 + ceil32(return_data.size) + ceil32(32 * mem[_20686 + mem[_20686]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _20686 + ceil32(return_data.size) + ceil32(32 * mem[_20686 + mem[_20686]]) + 1
                mem[_20686 + ceil32(return_data.size)] = _20782
                require _20734 + (32 * _20782) + 32 <= return_data.size
                mem[_20686 + ceil32(return_data.size) + 32 len ceil32(32 * _20782)] = mem[_20686 + _20734 + 32 len ceil32(32 * _20782)]
                if _20782 < 1:
                    revert with 0, 17
                if _20782 - 1 >= _20782:
                    revert with 0, 50
                _24299 = mem[(32 * _20782 - 1) + _20686 + ceil32(return_data.size) + 32]
                _24417 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _24299
                mem[mem[64] + 36] = 64
                _24465 = mem[96]
                mem[mem[64] + 68] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 100
                while idx < _24465:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _24417 + (32 * _24465) + -mem[64] + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _27489 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _27576 = mem[_27489]
                require mem[_27489] <= test266151307()
                require _27489 + return_data.size > _27489 + mem[_27489] + 31
                _27646 = mem[_27489 + mem[_27489]]
                if mem[_27489 + mem[_27489]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_27489 + mem[_27489]]) + 1 < 0 or _27489 + ceil32(return_data.size) + ceil32(32 * mem[_27489 + mem[_27489]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _27489 + ceil32(return_data.size) + ceil32(32 * mem[_27489 + mem[_27489]]) + 1
                mem[_27489 + ceil32(return_data.size)] = _27646
                require _27576 + (32 * _27646) + 32 <= return_data.size
                mem[_27489 + ceil32(return_data.size) + 32 len ceil32(32 * _27646)] = mem[_27489 + _27576 + 32 len ceil32(32 * _27646)]
                if _27646 < 1:
                    revert with 0, 17
                if _27646 - 1 >= _27646:
                    revert with 0, 50
                _30237 = mem[(32 * _27646 - 1) + _27489 + ceil32(return_data.size) + 32]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _30310 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_30310))
                staticcall address(_30310).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _30382 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _30417 = mem[_30382]
                if 0 >= mem[96]:
                    revert with 0, 50
                _30502 = mem[128]
                mem[mem[64] + 4] = address(cd[4])
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_30502))
                call address(_30502).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(cd[4]), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _30561 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_30561] == bool(mem[_30561])
                _30670 = mem[64]
                mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _24299
                mem[mem[64] + 36] = 1
                mem[mem[64] + 68] = 160
                _30792 = mem[96]
                mem[mem[64] + 164] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 196
                while idx < _30792:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_30670 + 100] = this.address
                mem[_30670 + 132] = block.timestamp
                require ext_code.size(address(cd[4]))
                call address(cd[4]).mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _30670 + (32 * _30792) + -mem[64] + 192]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _32640 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_32640))
                staticcall address(_32640).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _32734 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _32782 = mem[_32734]
                if mem[_32734] < _30417:
                    revert with 0, 17
                if _30237 < mem[_32734] - _30417:
                    revert with 0, 17
                if _30237 - mem[_32734] + _30417 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not _30237:
                    revert with 0, 18
                if mem[_32734] < _30417:
                    revert with 0, 17
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _32782 - _30417
                mem[mem[64] + 36] = 64
                _33033 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 100
                while idx < _33033:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args _32782 - _30417, 64, mem[mem[64] + 68 len (32 * _33033) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _34209 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _34296 = mem[_34209]
                require mem[_34209] <= test266151307()
                require _34209 + return_data.size > _34209 + mem[_34209] + 31
                _34366 = mem[_34209 + mem[_34209]]
                if mem[_34209 + mem[_34209]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_34209 + mem[_34209]]) + 1 < 0 or _34209 + ceil32(return_data.size) + ceil32(32 * mem[_34209 + mem[_34209]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _34209 + ceil32(return_data.size) + ceil32(32 * mem[_34209 + mem[_34209]]) + 1
                mem[_34209 + ceil32(return_data.size)] = _34366
                require _34296 + (32 * _34366) + 32 <= return_data.size
                mem[_34209 + ceil32(return_data.size) + 32 len ceil32(32 * _34366)] = mem[_34209 + _34296 + 32 len ceil32(32 * _34366)]
                if _34366 < 1:
                    revert with 0, 17
                if _34366 - 1 >= _34366:
                    revert with 0, 50
                _35253 = mem[(32 * _34366 - 1) + _34209 + ceil32(return_data.size) + 32]
                if 0 >= mem[96]:
                    revert with 0, 50
                _35313 = mem[128]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_35313))
                staticcall address(_35313).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _35361 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _35385 = mem[_35361]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _35445 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = address(cd[4])
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_35445))
                call address(_35445).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(cd[4]), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _35505 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_35505] == bool(mem[_35505])
                if _32782 < _30417:
                    revert with 0, 17
                mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _32782 - _30417
                mem[mem[64] + 36] = 1
                mem[mem[64] + 68] = 160
                _35577 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 196
                while idx < _35577:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[mem[64] + 100] = this.address
                mem[mem[64] + 132] = block.timestamp
                require ext_code.size(address(cd[4]))
                call address(cd[4]).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args _32782 - _30417, 1, 160, address(this.address), block.timestamp, mem[mem[64] + 164 len (32 * _35577) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if 0 >= mem[96]:
                    revert with 0, 50
                _35937 = mem[128]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_35937))
                staticcall address(_35937).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _35985 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if mem[_35985] < _35385:
                    revert with 0, 17
                if _35253 < mem[_35985] - _35385:
                    revert with 0, 17
                if _35253 - mem[_35985] + _35385 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not _35253:
                    revert with 0, 18
                return (100 * _30237) - (100 * _32782) + (100 * _30417) / _30237, 
                       (100 * _35253) - (100 * mem[_35985]) + (100 * _35385) / _35253,
                       _24299
            _16905 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _16913 = mem[_16905]
            if mem[_16905] >= _16837:
                _17023 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _17071 = mem[96]
                mem[mem[64] + 68] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 100
                while idx < _17071:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _17023 + (32 * _17071) + -mem[64] + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _20687 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _20735 = mem[_20687]
                require mem[_20687] <= test266151307()
                require _20687 + return_data.size > _20687 + mem[_20687] + 31
                _20783 = mem[_20687 + mem[_20687]]
                if mem[_20687 + mem[_20687]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_20687 + mem[_20687]]) + 1 < 0 or _20687 + ceil32(return_data.size) + ceil32(32 * mem[_20687 + mem[_20687]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _20687 + ceil32(return_data.size) + ceil32(32 * mem[_20687 + mem[_20687]]) + 1
                mem[_20687 + ceil32(return_data.size)] = _20783
                require _20735 + (32 * _20783) + 32 <= return_data.size
                mem[_20687 + ceil32(return_data.size) + 32 len ceil32(32 * _20783)] = mem[_20687 + _20735 + 32 len ceil32(32 * _20783)]
                if _20783 < 1:
                    revert with 0, 17
                if _20783 - 1 >= _20783:
                    revert with 0, 50
                _24300 = mem[(32 * _20783 - 1) + _20687 + ceil32(return_data.size) + 32]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _24372 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_24372))
                staticcall address(_24372).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _24442 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _24490 = mem[_24442]
                if 0 >= mem[96]:
                    revert with 0, 50
                _24588 = mem[128]
                mem[mem[64] + 4] = address(cd[4])
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_24588))
                call address(_24588).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(cd[4]), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _24658 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_24658] == bool(mem[_24658])
                _24778 = mem[64]
                mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 1
                mem[mem[64] + 68] = 160
                _24815 = mem[96]
                mem[mem[64] + 164] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 196
                while idx < _24815:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_24778 + 100] = this.address
                mem[_24778 + 132] = block.timestamp
                require ext_code.size(address(cd[4]))
                call address(cd[4]).mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _24778 + (32 * _24815) + -mem[64] + 192]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _27577 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_27577))
                staticcall address(_27577).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _27647 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _27682 = mem[_27647]
                if mem[_27647] < _24490:
                    revert with 0, 17
                if _24300 < mem[_27647] - _24490:
                    revert with 0, 17
                if _24300 - mem[_27647] + _24490 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not _24300:
                    revert with 0, 18
                if mem[_27647] < _24490:
                    revert with 0, 17
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _27682 - _24490
                mem[mem[64] + 36] = 64
                _28007 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 100
                while idx < _28007:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args _27682 - _24490, 64, mem[mem[64] + 68 len (32 * _28007) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _30191 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _30313 = mem[_30191]
                require mem[_30191] <= test266151307()
                require _30191 + return_data.size > _30191 + mem[_30191] + 31
                _30383 = mem[_30191 + mem[_30191]]
                if mem[_30191 + mem[_30191]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_30191 + mem[_30191]]) + 1 < 0 or _30191 + ceil32(return_data.size) + ceil32(32 * mem[_30191 + mem[_30191]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _30191 + ceil32(return_data.size) + ceil32(32 * mem[_30191 + mem[_30191]]) + 1
                mem[_30191 + ceil32(return_data.size)] = _30383
                require _30313 + (32 * _30383) + 32 <= return_data.size
                mem[_30191 + ceil32(return_data.size) + 32 len ceil32(32 * _30383)] = mem[_30191 + _30313 + 32 len ceil32(32 * _30383)]
                if _30383 < 1:
                    revert with 0, 17
                if _30383 - 1 >= _30383:
                    revert with 0, 50
                _32532 = mem[(32 * _30383 - 1) + _30191 + ceil32(return_data.size) + 32]
                if 0 >= mem[96]:
                    revert with 0, 50
                _32643 = mem[128]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_32643))
                staticcall address(_32643).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _32735 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _32783 = mem[_32735]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _32855 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = address(cd[4])
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_32855))
                call address(_32855).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(cd[4]), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _32914 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_32914] == bool(mem[_32914])
                if _27682 < _24490:
                    revert with 0, 17
                mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _27682 - _24490
                mem[mem[64] + 36] = 1
                mem[mem[64] + 68] = 160
                _33010 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 196
                while idx < _33010:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[mem[64] + 100] = this.address
                mem[mem[64] + 132] = block.timestamp
                require ext_code.size(address(cd[4]))
                call address(cd[4]).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args _27682 - _24490, 1, 160, address(this.address), block.timestamp, mem[mem[64] + 164 len (32 * _33010) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if 0 >= mem[96]:
                    revert with 0, 50
                _34297 = mem[128]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_34297))
                staticcall address(_34297).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _34367 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if mem[_34367] < _32783:
                    revert with 0, 17
                if _32532 < mem[_34367] - _32783:
                    revert with 0, 17
                if _32532 - mem[_34367] + _32783 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not _32532:
                    revert with 0, 18
                return (100 * _24300) - (100 * _27682) + (100 * _24490) / _24300, 
                       (100 * _32532) - (100 * mem[_34367]) + (100 * _32783) / _32532,
                       cd[36]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _16913
            mem[mem[64] + 36] = 64
            _17024 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 100
            while idx < _17024:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args _16913, 64, mem[mem[64] + 68 len (32 * _17024) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _20688 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _20736 = mem[_20688]
            require mem[_20688] <= test266151307()
            require _20688 + return_data.size > _20688 + mem[_20688] + 31
            _20784 = mem[_20688 + mem[_20688]]
            if mem[_20688 + mem[_20688]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_20688 + mem[_20688]]) + 1 < 0 or _20688 + ceil32(return_data.size) + ceil32(32 * mem[_20688 + mem[_20688]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _20688 + ceil32(return_data.size) + ceil32(32 * mem[_20688 + mem[_20688]]) + 1
            mem[_20688 + ceil32(return_data.size)] = _20784
            require _20736 + (32 * _20784) + 32 <= return_data.size
            mem[_20688 + ceil32(return_data.size) + 32 len ceil32(32 * _20784)] = mem[_20688 + _20736 + 32 len ceil32(32 * _20784)]
            if _20784 < 1:
                revert with 0, 17
            if _20784 - 1 >= _20784:
                revert with 0, 50
            _24302 = mem[(32 * _20784 - 1) + _20688 + ceil32(return_data.size) + 32]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _24302
            mem[mem[64] + 36] = 64
            _24466 = mem[96]
            mem[mem[64] + 68] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 100
            while idx < mem[96]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len (32 * _24466) + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _27490 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _27580 = mem[_27490]
            require mem[_27490] <= test266151307()
            require _27490 + return_data.size > _27490 + mem[_27490] + 31
            _27648 = mem[_27490 + mem[_27490]]
            if mem[_27490 + mem[_27490]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_27490 + mem[_27490]]) + 1 < 0 or _27490 + ceil32(return_data.size) + ceil32(32 * mem[_27490 + mem[_27490]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _27490 + ceil32(return_data.size) + ceil32(32 * mem[_27490 + mem[_27490]]) + 1
            mem[_27490 + ceil32(return_data.size)] = _27648
            require _27580 + (32 * _27648) + 32 <= return_data.size
            mem[_27490 + ceil32(return_data.size) + 32 len ceil32(32 * _27648)] = mem[_27490 + _27580 + 32 len ceil32(32 * _27648)]
            var148002 = _27490 + ceil32(return_data.size) + ceil32(32 * _27648) + 32
            if _27648 < 1:
                revert with 0, 17
            if _27648 - 1 >= _27648:
                revert with 0, 50
            _30239 = mem[(32 * _27648 - 1) + _27490 + ceil32(return_data.size) + 32]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _30314 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_30314))
            staticcall address(_30314).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _30384 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _30418 = mem[_30384]
            if 0 >= mem[96]:
                revert with 0, 50
            _30506 = mem[128]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_30506))
            call address(_30506).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _30562 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_30562] == bool(mem[_30562])
            _30672 = mem[64]
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _24302
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _30796 = mem[96]
            mem[mem[64] + 164] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 196
            while idx < _30796:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_30672 + 100] = this.address
            mem[_30672 + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _30672 + (32 * _30796) + -mem[64] + 192]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _32646 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_32646))
            staticcall address(_32646).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _32736 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _32784 = mem[_32736]
            if mem[_32736] < _30418:
                revert with 0, 17
            if _30239 < mem[_32736] - _30418:
                revert with 0, 17
            if _30239 - mem[_32736] + _30418 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _30239:
                revert with 0, 18
            if mem[_32736] < _30418:
                revert with 0, 17
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _32784 - _30418
            mem[mem[64] + 36] = 64
            _33034 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 100
            while idx < _33034:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args _32784 - _30418, 64, mem[mem[64] + 68 len (32 * _33034) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _34210 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _34300 = mem[_34210]
            require mem[_34210] <= test266151307()
            require _34210 + return_data.size > _34210 + mem[_34210] + 31
            _34368 = mem[_34210 + mem[_34210]]
            if mem[_34210 + mem[_34210]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_34210 + mem[_34210]]) + 1 < 0 or _34210 + ceil32(return_data.size) + ceil32(32 * mem[_34210 + mem[_34210]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _34210 + ceil32(return_data.size) + ceil32(32 * mem[_34210 + mem[_34210]]) + 1
            mem[_34210 + ceil32(return_data.size)] = _34368
            require _34300 + (32 * _34368) + 32 <= return_data.size
            mem[_34210 + ceil32(return_data.size) + 32 len ceil32(32 * _34368)] = mem[_34210 + _34300 + 32 len ceil32(32 * _34368)]
            if _34368 < 1:
                revert with 0, 17
            if _34368 - 1 >= _34368:
                revert with 0, 50
            _35255 = mem[(32 * _34368 - 1) + _34210 + ceil32(return_data.size) + 32]
            if 0 >= mem[96]:
                revert with 0, 50
            _35316 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_35316))
            staticcall address(_35316).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _35362 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _35386 = mem[_35362]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _35447 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_35447))
            call address(_35447).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _35506 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_35506] == bool(mem[_35506])
            if _32784 < _30418:
                revert with 0, 17
            _35554 = mem[64]
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _32784 - _30418
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _35578 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 196
            while idx < _35578:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_35554 + 100] = this.address
            mem[_35554 + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _35554 + (32 * _35578) + -mem[64] + 192]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[96]:
                revert with 0, 50
            _35940 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_35940))
            staticcall address(_35940).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _35986 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if mem[_35986] < _35386:
                revert with 0, 17
            if _35255 < mem[_35986] - _35386:
                revert with 0, 17
            if _35255 - mem[_35986] + _35386 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _35255:
                revert with 0, 18
            return (100 * _30239) - (100 * _32784) + (100 * _30418) / _30239, 
                   (100 * _35255) - (100 * mem[_35986]) + (100 * _35386) / _35255,
                   _24302
        require ('cd', 68).length >= 32
        require mem[128] == bool(mem[128])
        if not mem[128]:
            revert with 0, 'TRANSFER_FROM_FAILED'
        mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 230] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 234] = cd[36]
        mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 266] = 64
        mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 298] = ('cd', 68).length
        idx = 0
        s = 128
        t = mem[64] + 100
        while idx < mem[96]:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len (32 * ('cd', 68).length) + 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _13066 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _13074 = mem[_13066]
        require mem[_13066] <= test266151307()
        require _13066 + return_data.size > _13066 + mem[_13066] + 31
        _13082 = mem[_13066 + mem[_13066]]
        if mem[_13066 + mem[_13066]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_13066 + mem[_13066]]) + 1 < 0 or _13066 + ceil32(return_data.size) + ceil32(32 * mem[_13066 + mem[_13066]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _13066 + ceil32(return_data.size) + ceil32(32 * mem[_13066 + mem[_13066]]) + 1
        mem[_13066 + ceil32(return_data.size)] = _13082
        require _13074 + (32 * _13082) + 32 <= return_data.size
        mem[_13066 + ceil32(return_data.size) + 32 len ceil32(32 * _13082)] = mem[_13066 + _13074 + 32 len ceil32(32 * _13082)]
        if _13082 < 1:
            revert with 0, 17
        if _13082 - 1 >= _13082:
            revert with 0, 50
        _16839 = mem[(32 * _13082 - 1) + _13066 + ceil32(return_data.size) + 32]
        if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
            revert with 0, 50
        _16860 = mem[ceil32(32 * ('cd', 68).length) + 129]
        require ext_code.size(mem[ceil32(32 * ('cd', 68).length) + 141 len 20])
        staticcall mem[ceil32(32 * ('cd', 68).length) + 141 len 20].0x7d1db4a5 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if ext_call.success:
            _16874 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _16898 = mem[_16874]
            if mem[_16874] >= _16839:
                _16959 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _16999 = mem[96]
                mem[mem[64] + 68] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 100
                while idx < _16999:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _16959 + (32 * _16999) + -mem[64] + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _20695 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _20743 = mem[_20695]
                require mem[_20695] <= test266151307()
                require _20695 + return_data.size > _20695 + mem[_20695] + 31
                _20791 = mem[_20695 + mem[_20695]]
                if mem[_20695 + mem[_20695]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_20695 + mem[_20695]]) + 1 < 0 or _20695 + ceil32(return_data.size) + ceil32(32 * mem[_20695 + mem[_20695]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _20695 + ceil32(return_data.size) + ceil32(32 * mem[_20695 + mem[_20695]]) + 1
                mem[_20695 + ceil32(return_data.size)] = _20791
                require _20743 + (32 * _20791) + 32 <= return_data.size
                mem[_20695 + ceil32(return_data.size) + 32 len ceil32(32 * _20791)] = mem[_20695 + _20743 + 32 len ceil32(32 * _20791)]
                if _20791 < 1:
                    revert with 0, 17
                if _20791 - 1 >= _20791:
                    revert with 0, 50
                _24312 = mem[(32 * _20791 - 1) + _20695 + ceil32(return_data.size) + 32]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _24384 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_24384))
                staticcall address(_24384).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _24446 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _24494 = mem[_24446]
                if 0 >= mem[96]:
                    revert with 0, 50
                _24600 = mem[128]
                mem[mem[64] + 4] = address(cd[4])
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_24600))
                call address(_24600).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(cd[4]), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _24662 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_24662] == bool(mem[_24662])
                _24782 = mem[64]
                mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 1
                mem[mem[64] + 68] = 160
                _24823 = mem[96]
                mem[mem[64] + 164] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 196
                while idx < _24823:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_24782 + 100] = this.address
                mem[_24782 + 132] = block.timestamp
                require ext_code.size(address(cd[4]))
                call address(cd[4]).mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _24782 + (32 * _24823) + -mem[64] + 192]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _27593 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_27593))
                staticcall address(_27593).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _27655 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _27686 = mem[_27655]
                if mem[_27655] < _24494:
                    revert with 0, 17
                if _24312 < mem[_27655] - _24494:
                    revert with 0, 17
                if _24312 - mem[_27655] + _24494 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not _24312:
                    revert with 0, 18
                if mem[_27655] < _24494:
                    revert with 0, 17
                _27950 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _27686 - _24494
                mem[mem[64] + 36] = 64
                _28015 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 100
                while idx < _28015:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _27950 + (32 * _28015) + -mem[64] + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _30199 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _30329 = mem[_30199]
                require mem[_30199] <= test266151307()
                require _30199 + return_data.size > _30199 + mem[_30199] + 31
                _30391 = mem[_30199 + mem[_30199]]
                if mem[_30199 + mem[_30199]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_30199 + mem[_30199]]) + 1 < 0 or _30199 + ceil32(return_data.size) + ceil32(32 * mem[_30199 + mem[_30199]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _30199 + ceil32(return_data.size) + ceil32(32 * mem[_30199 + mem[_30199]]) + 1
                mem[_30199 + ceil32(return_data.size)] = _30391
                require _30329 + (32 * _30391) + 32 <= return_data.size
                mem[_30199 + ceil32(return_data.size) + 32 len ceil32(32 * _30391)] = mem[_30199 + _30329 + 32 len ceil32(32 * _30391)]
                if _30391 < 1:
                    revert with 0, 17
                if _30391 - 1 >= _30391:
                    revert with 0, 50
                _32544 = mem[(32 * _30391 - 1) + _30199 + ceil32(return_data.size) + 32]
                if 0 >= mem[96]:
                    revert with 0, 50
                _32667 = mem[128]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_32667))
                staticcall address(_32667).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _32743 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _32791 = mem[_32743]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _32863 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = address(cd[4])
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_32863))
                call address(_32863).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(cd[4]), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _32918 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_32918] == bool(mem[_32918])
                if _27686 < _24494:
                    revert with 0, 17
                _32966 = mem[64]
                mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _27686 - _24494
                mem[mem[64] + 36] = 1
                mem[mem[64] + 68] = 160
                _33014 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 196
                while idx < _33014:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_32966 + 100] = this.address
                mem[_32966 + 132] = block.timestamp
                require ext_code.size(address(cd[4]))
                call address(cd[4]).mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _32966 + (32 * _33014) + -mem[64] + 192]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if 0 >= mem[96]:
                    revert with 0, 50
                _34313 = mem[128]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_34313))
                staticcall address(_34313).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _34375 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if mem[_34375] < _32791:
                    revert with 0, 17
                if _32544 < mem[_34375] - _32791:
                    revert with 0, 17
                if _32544 - mem[_34375] + _32791 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not _32544:
                    revert with 0, 18
                return (100 * _24312) - (100 * _27686) + (100 * _24494) / _24312, 
                       (100 * _32544) - (100 * mem[_34375]) + (100 * _32791) / _32544,
                       cd[36]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _16898
            mem[mem[64] + 36] = 64
            _16960 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 100
            while idx < _16960:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args _16898, 64, mem[mem[64] + 68 len (32 * _16960) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _20696 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _20744 = mem[_20696]
            require mem[_20696] <= test266151307()
            require _20696 + return_data.size > _20696 + mem[_20696] + 31
            _20792 = mem[_20696 + mem[_20696]]
            if mem[_20696 + mem[_20696]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_20696 + mem[_20696]]) + 1 < 0 or _20696 + ceil32(return_data.size) + ceil32(32 * mem[_20696 + mem[_20696]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _20696 + ceil32(return_data.size) + ceil32(32 * mem[_20696 + mem[_20696]]) + 1
            mem[_20696 + ceil32(return_data.size)] = _20792
            require _20744 + (32 * _20792) + 32 <= return_data.size
            mem[_20696 + ceil32(return_data.size) + 32 len ceil32(32 * _20792)] = mem[_20696 + _20744 + 32 len ceil32(32 * _20792)]
            if _20792 < 1:
                revert with 0, 17
            if _20792 - 1 >= _20792:
                revert with 0, 50
            _24314 = mem[(32 * _20792 - 1) + _20696 + ceil32(return_data.size) + 32]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _24314
            mem[mem[64] + 36] = 64
            _24470 = mem[96]
            mem[mem[64] + 68] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 100
            while idx < mem[96]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len (32 * _24470) + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _27494 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _27596 = mem[_27494]
            require mem[_27494] <= test266151307()
            require _27494 + return_data.size > _27494 + mem[_27494] + 31
            _27656 = mem[_27494 + mem[_27494]]
            if mem[_27494 + mem[_27494]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_27494 + mem[_27494]]) + 1 < 0 or _27494 + ceil32(return_data.size) + ceil32(32 * mem[_27494 + mem[_27494]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _27494 + ceil32(return_data.size) + ceil32(32 * mem[_27494 + mem[_27494]]) + 1
            mem[_27494 + ceil32(return_data.size)] = _27656
            require _27596 + (32 * _27656) + 32 <= return_data.size
            mem[_27494 + ceil32(return_data.size) + 32 len ceil32(32 * _27656)] = mem[_27494 + _27596 + 32 len ceil32(32 * _27656)]
            if _27656 < 1:
                revert with 0, 17
            if _27656 - 1 >= _27656:
                revert with 0, 50
            _30247 = mem[(32 * _27656 - 1) + _27494 + ceil32(return_data.size) + 32]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _30330 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_30330))
            staticcall address(_30330).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _30392 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _30422 = mem[_30392]
            if 0 >= mem[96]:
                revert with 0, 50
            _30522 = mem[128]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_30522))
            call address(_30522).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _30566 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_30566] == bool(mem[_30566])
            _30680 = mem[64]
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _24314
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _30812 = mem[96]
            mem[mem[64] + 164] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 196
            while idx < _30812:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_30680 + 100] = this.address
            mem[_30680 + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _30680 + (32 * _30812) + -mem[64] + 192]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _32670 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_32670))
            staticcall address(_32670).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _32744 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _32792 = mem[_32744]
            if mem[_32744] < _30422:
                revert with 0, 17
            if _30247 < mem[_32744] - _30422:
                revert with 0, 17
            if _30247 - mem[_32744] + _30422 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _30247:
                revert with 0, 18
            if mem[_32744] < _30422:
                revert with 0, 17
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _32792 - _30422
            mem[mem[64] + 36] = 64
            _33038 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 100
            while idx < _33038:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args _32792 - _30422, 64, mem[mem[64] + 68 len (32 * _33038) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _34214 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _34316 = mem[_34214]
            require mem[_34214] <= test266151307()
            require _34214 + return_data.size > _34214 + mem[_34214] + 31
            _34376 = mem[_34214 + mem[_34214]]
            if mem[_34214 + mem[_34214]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_34214 + mem[_34214]]) + 1 < 0 or _34214 + ceil32(return_data.size) + ceil32(32 * mem[_34214 + mem[_34214]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _34214 + ceil32(return_data.size) + ceil32(32 * mem[_34214 + mem[_34214]]) + 1
            mem[_34214 + ceil32(return_data.size)] = _34376
            require _34316 + (32 * _34376) + 32 <= return_data.size
            mem[_34214 + ceil32(return_data.size) + 32 len ceil32(32 * _34376)] = mem[_34214 + _34316 + 32 len ceil32(32 * _34376)]
            if _34376 < 1:
                revert with 0, 17
            if _34376 - 1 >= _34376:
                revert with 0, 50
            _35263 = mem[(32 * _34376 - 1) + _34214 + ceil32(return_data.size) + 32]
            if 0 >= mem[96]:
                revert with 0, 50
            _35328 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_35328))
            staticcall address(_35328).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _35366 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _35390 = mem[_35366]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _35455 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_35455))
            call address(_35455).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _35510 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_35510] == bool(mem[_35510])
            if _32792 < _30422:
                revert with 0, 17
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _32792 - _30422
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _35582 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 196
            while idx < _35582:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[mem[64] + 100] = this.address
            mem[mem[64] + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args _32792 - _30422, 1, 160, address(this.address), block.timestamp, mem[mem[64] + 164 len (32 * _35582) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[96]:
                revert with 0, 50
            _35952 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_35952))
            staticcall address(_35952).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _35990 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if mem[_35990] < _35390:
                revert with 0, 17
            if _35263 < mem[_35990] - _35390:
                revert with 0, 17
            if _35263 - mem[_35990] + _35390 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _35263:
                revert with 0, 18
            return (100 * _30247) - (100 * _32792) + (100 * _30422) / _30247, 
                   (100 * _35263) - (100 * mem[_35990]) + (100 * _35390) / _35263,
                   _24314
        require ext_code.size(address(_16860))
        staticcall address(_16860).maxTxAmount() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            if _16839 >= _16839:
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _16980 = mem[96]
                mem[mem[64] + 68] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 100
                while idx < mem[96]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len (32 * _16980) + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _20691 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _20739 = mem[_20691]
                require mem[_20691] <= test266151307()
                require _20691 + return_data.size > _20691 + mem[_20691] + 31
                _20787 = mem[_20691 + mem[_20691]]
                if mem[_20691 + mem[_20691]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_20691 + mem[_20691]]) + 1 < 0 or _20691 + ceil32(return_data.size) + ceil32(32 * mem[_20691 + mem[_20691]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _20691 + ceil32(return_data.size) + ceil32(32 * mem[_20691 + mem[_20691]]) + 1
                mem[_20691 + ceil32(return_data.size)] = _20787
                require _20739 + (32 * _20787) + 32 <= return_data.size
                mem[_20691 + ceil32(return_data.size) + 32 len ceil32(32 * _20787)] = mem[_20691 + _20739 + 32 len ceil32(32 * _20787)]
                if _20787 < 1:
                    revert with 0, 17
                if _20787 - 1 >= _20787:
                    revert with 0, 50
                _24306 = mem[(32 * _20787 - 1) + _20691 + ceil32(return_data.size) + 32]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _24378 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_24378))
                staticcall address(_24378).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _24444 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _24492 = mem[_24444]
                if 0 >= mem[96]:
                    revert with 0, 50
                _24594 = mem[128]
                mem[mem[64] + 4] = address(cd[4])
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_24594))
                call address(_24594).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(cd[4]), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _24660 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_24660] == bool(mem[_24660])
                _24780 = mem[64]
                mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 1
                mem[mem[64] + 68] = 160
                _24819 = mem[96]
                mem[mem[64] + 164] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 196
                while idx < _24819:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_24780 + 100] = this.address
                mem[_24780 + 132] = block.timestamp
                require ext_code.size(address(cd[4]))
                call address(cd[4]).mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _24780 + (32 * _24819) + -mem[64] + 192]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _27585 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_27585))
                staticcall address(_27585).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _27651 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _27684 = mem[_27651]
                if mem[_27651] < _24492:
                    revert with 0, 17
                if _24306 < mem[_27651] - _24492:
                    revert with 0, 17
                if _24306 - mem[_27651] + _24492 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not _24306:
                    revert with 0, 18
                if mem[_27651] < _24492:
                    revert with 0, 17
                _27948 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _27684 - _24492
                mem[mem[64] + 36] = 64
                _28011 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 100
                while idx < _28011:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _27948 + (32 * _28011) + -mem[64] + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _30195 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _30321 = mem[_30195]
                require mem[_30195] <= test266151307()
                require _30195 + return_data.size > _30195 + mem[_30195] + 31
                _30387 = mem[_30195 + mem[_30195]]
                if mem[_30195 + mem[_30195]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_30195 + mem[_30195]]) + 1 < 0 or _30195 + ceil32(return_data.size) + ceil32(32 * mem[_30195 + mem[_30195]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _30195 + ceil32(return_data.size) + ceil32(32 * mem[_30195 + mem[_30195]]) + 1
                mem[_30195 + ceil32(return_data.size)] = _30387
                require _30321 + (32 * _30387) + 32 <= return_data.size
                mem[_30195 + ceil32(return_data.size) + 32 len ceil32(32 * _30387)] = mem[_30195 + _30321 + 32 len ceil32(32 * _30387)]
                if _30387 < 1:
                    revert with 0, 17
                if _30387 - 1 >= _30387:
                    revert with 0, 50
                _32538 = mem[(32 * _30387 - 1) + _30195 + ceil32(return_data.size) + 32]
                if 0 >= mem[96]:
                    revert with 0, 50
                _32655 = mem[128]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_32655))
                staticcall address(_32655).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _32739 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _32787 = mem[_32739]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _32859 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = address(cd[4])
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_32859))
                call address(_32859).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(cd[4]), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _32916 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_32916] == bool(mem[_32916])
                if _27684 < _24492:
                    revert with 0, 17
                _32964 = mem[64]
                mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _27684 - _24492
                mem[mem[64] + 36] = 1
                mem[mem[64] + 68] = 160
                _33012 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 196
                while idx < _33012:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_32964 + 100] = this.address
                mem[_32964 + 132] = block.timestamp
                require ext_code.size(address(cd[4]))
                call address(cd[4]).mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _32964 + (32 * _33012) + -mem[64] + 192]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if 0 >= mem[96]:
                    revert with 0, 50
                _34305 = mem[128]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_34305))
                staticcall address(_34305).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _34371 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if mem[_34371] < _32787:
                    revert with 0, 17
                if _32538 < mem[_34371] - _32787:
                    revert with 0, 17
                if _32538 - mem[_34371] + _32787 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not _32538:
                    revert with 0, 18
                return (100 * _24306) - (100 * _27684) + (100 * _24492) / _24306, 
                       (100 * _32538) - (100 * mem[_34371]) + (100 * _32787) / _32538,
                       cd[36]
            _16922 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _16839
            mem[mem[64] + 36] = 64
            _16944 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 100
            while idx < _16944:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _16922 + (32 * _16944) + -mem[64] + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _20692 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _20740 = mem[_20692]
            require mem[_20692] <= test266151307()
            require _20692 + return_data.size > _20692 + mem[_20692] + 31
            _20788 = mem[_20692 + mem[_20692]]
            if mem[_20692 + mem[_20692]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_20692 + mem[_20692]]) + 1 < 0 or _20692 + ceil32(return_data.size) + ceil32(32 * mem[_20692 + mem[_20692]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _20692 + ceil32(return_data.size) + ceil32(32 * mem[_20692 + mem[_20692]]) + 1
            mem[_20692 + ceil32(return_data.size)] = _20788
            require _20740 + (32 * _20788) + 32 <= return_data.size
            mem[_20692 + ceil32(return_data.size) + 32 len ceil32(32 * _20788)] = mem[_20692 + _20740 + 32 len ceil32(32 * _20788)]
            if _20788 < 1:
                revert with 0, 17
            if _20788 - 1 >= _20788:
                revert with 0, 50
            _24308 = mem[(32 * _20788 - 1) + _20692 + ceil32(return_data.size) + 32]
            _24420 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _24308
            mem[mem[64] + 36] = 64
            _24468 = mem[96]
            mem[mem[64] + 68] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 100
            while idx < _24468:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _24420 + (32 * _24468) + -mem[64] + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _27492 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _27588 = mem[_27492]
            require mem[_27492] <= test266151307()
            require _27492 + return_data.size > _27492 + mem[_27492] + 31
            _27652 = mem[_27492 + mem[_27492]]
            if mem[_27492 + mem[_27492]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_27492 + mem[_27492]]) + 1 < 0 or _27492 + ceil32(return_data.size) + ceil32(32 * mem[_27492 + mem[_27492]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _27492 + ceil32(return_data.size) + ceil32(32 * mem[_27492 + mem[_27492]]) + 1
            mem[_27492 + ceil32(return_data.size)] = _27652
            require _27588 + (32 * _27652) + 32 <= return_data.size
            mem[_27492 + ceil32(return_data.size) + 32 len ceil32(32 * _27652)] = mem[_27492 + _27588 + 32 len ceil32(32 * _27652)]
            if _27652 < 1:
                revert with 0, 17
            if _27652 - 1 >= _27652:
                revert with 0, 50
            _30243 = mem[(32 * _27652 - 1) + _27492 + ceil32(return_data.size) + 32]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _30322 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_30322))
            staticcall address(_30322).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _30388 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _30420 = mem[_30388]
            if 0 >= mem[96]:
                revert with 0, 50
            _30514 = mem[128]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_30514))
            call address(_30514).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _30564 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_30564] == bool(mem[_30564])
            _30676 = mem[64]
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _24308
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _30804 = mem[96]
            mem[mem[64] + 164] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 196
            while idx < _30804:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_30676 + 100] = this.address
            mem[_30676 + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _30676 + (32 * _30804) + -mem[64] + 192]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _32658 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_32658))
            staticcall address(_32658).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _32740 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _32788 = mem[_32740]
            if mem[_32740] < _30420:
                revert with 0, 17
            if _30243 < mem[_32740] - _30420:
                revert with 0, 17
            if _30243 - mem[_32740] + _30420 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _30243:
                revert with 0, 18
            if mem[_32740] < _30420:
                revert with 0, 17
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _32788 - _30420
            mem[mem[64] + 36] = 64
            _33036 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 100
            while idx < _33036:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args _32788 - _30420, 64, mem[mem[64] + 68 len (32 * _33036) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _34212 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _34308 = mem[_34212]
            require mem[_34212] <= test266151307()
            require _34212 + return_data.size > _34212 + mem[_34212] + 31
            _34372 = mem[_34212 + mem[_34212]]
            if mem[_34212 + mem[_34212]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_34212 + mem[_34212]]) + 1 < 0 or _34212 + ceil32(return_data.size) + ceil32(32 * mem[_34212 + mem[_34212]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _34212 + ceil32(return_data.size) + ceil32(32 * mem[_34212 + mem[_34212]]) + 1
            mem[_34212 + ceil32(return_data.size)] = _34372
            require _34308 + (32 * _34372) + 32 <= return_data.size
            mem[_34212 + ceil32(return_data.size) + 32 len ceil32(32 * _34372)] = mem[_34212 + _34308 + 32 len ceil32(32 * _34372)]
            var225002 = _34212 + ceil32(return_data.size) + ceil32(32 * _34372) + 32
            if _34372 < 1:
                revert with 0, 17
            if _34372 - 1 >= _34372:
                revert with 0, 50
            _35259 = mem[(32 * _34372 - 1) + _34212 + ceil32(return_data.size) + 32]
            if 0 >= mem[96]:
                revert with 0, 50
            _35322 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_35322))
            staticcall address(_35322).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _35364 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _35388 = mem[_35364]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _35451 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_35451))
            call address(_35451).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _35508 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_35508] == bool(mem[_35508])
            if _32788 < _30420:
                revert with 0, 17
            _35556 = mem[64]
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _32788 - _30420
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _35580 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 196
            while idx < _35580:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_35556 + 100] = this.address
            mem[_35556 + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _35556 + (32 * _35580) + -mem[64] + 192]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[96]:
                revert with 0, 50
            _35946 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_35946))
            staticcall address(_35946).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _35988 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if mem[_35988] < _35388:
                revert with 0, 17
            if _35259 < mem[_35988] - _35388:
                revert with 0, 17
            if _35259 - mem[_35988] + _35388 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _35259:
                revert with 0, 18
            return (100 * _30243) - (100 * _32788) + (100 * _30420) / _30243, 
                   (100 * _35259) - (100 * mem[_35988]) + (100 * _35388) / _35259,
                   _24308
        _16906 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _16914 = mem[_16906]
        if mem[_16906] >= _16839:
            _17027 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _17075 = mem[96]
            mem[mem[64] + 68] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 100
            while idx < _17075:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _17027 + (32 * _17075) + -mem[64] + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _20693 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _20741 = mem[_20693]
            require mem[_20693] <= test266151307()
            require _20693 + return_data.size > _20693 + mem[_20693] + 31
            _20789 = mem[_20693 + mem[_20693]]
            if mem[_20693 + mem[_20693]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_20693 + mem[_20693]]) + 1 < 0 or _20693 + ceil32(return_data.size) + ceil32(32 * mem[_20693 + mem[_20693]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _20693 + ceil32(return_data.size) + ceil32(32 * mem[_20693 + mem[_20693]]) + 1
            mem[_20693 + ceil32(return_data.size)] = _20789
            require _20741 + (32 * _20789) + 32 <= return_data.size
            mem[_20693 + ceil32(return_data.size) + 32 len ceil32(32 * _20789)] = mem[_20693 + _20741 + 32 len ceil32(32 * _20789)]
            var126002 = _20693 + ceil32(return_data.size) + ceil32(32 * _20789) + 32
            if _20789 < 1:
                revert with 0, 17
            if _20789 - 1 >= _20789:
                revert with 0, 50
            _24309 = mem[(32 * _20789 - 1) + _20693 + ceil32(return_data.size) + 32]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _24381 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_24381))
            staticcall address(_24381).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _24445 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _24493 = mem[_24445]
            if 0 >= mem[96]:
                revert with 0, 50
            _24597 = mem[128]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_24597))
            call address(_24597).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _24661 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_24661] == bool(mem[_24661])
            _24781 = mem[64]
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _24821 = mem[96]
            mem[mem[64] + 164] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 196
            while idx < _24821:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_24781 + 100] = this.address
            mem[_24781 + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _24781 + (32 * _24821) + -mem[64] + 192]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _27589 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_27589))
            staticcall address(_27589).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _27653 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _27685 = mem[_27653]
            if mem[_27653] < _24493:
                revert with 0, 17
            if _24309 < mem[_27653] - _24493:
                revert with 0, 17
            if _24309 - mem[_27653] + _24493 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _24309:
                revert with 0, 18
            if mem[_27653] < _24493:
                revert with 0, 17
            _27949 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _27685 - _24493
            mem[mem[64] + 36] = 64
            _28013 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 100
            while idx < _28013:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _27949 + (32 * _28013) + -mem[64] + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _30197 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _30325 = mem[_30197]
            require mem[_30197] <= test266151307()
            require _30197 + return_data.size > _30197 + mem[_30197] + 31
            _30389 = mem[_30197 + mem[_30197]]
            if mem[_30197 + mem[_30197]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_30197 + mem[_30197]]) + 1 < 0 or _30197 + ceil32(return_data.size) + ceil32(32 * mem[_30197 + mem[_30197]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _30197 + ceil32(return_data.size) + ceil32(32 * mem[_30197 + mem[_30197]]) + 1
            mem[_30197 + ceil32(return_data.size)] = _30389
            require _30325 + (32 * _30389) + 32 <= return_data.size
            mem[_30197 + ceil32(return_data.size) + 32 len ceil32(32 * _30389)] = mem[_30197 + _30325 + 32 len ceil32(32 * _30389)]
            var201002 = _30197 + ceil32(return_data.size) + ceil32(32 * _30389) + 32
            if _30389 < 1:
                revert with 0, 17
            if _30389 - 1 >= _30389:
                revert with 0, 50
            _32541 = mem[(32 * _30389 - 1) + _30197 + ceil32(return_data.size) + 32]
            if 0 >= mem[96]:
                revert with 0, 50
            _32661 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_32661))
            staticcall address(_32661).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _32741 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _32789 = mem[_32741]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _32861 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_32861))
            call address(_32861).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _32917 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_32917] == bool(mem[_32917])
            if _27685 < _24493:
                revert with 0, 17
            _32965 = mem[64]
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _27685 - _24493
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _33013 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 196
            while idx < _33013:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_32965 + 100] = this.address
            mem[_32965 + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _32965 + (32 * _33013) + -mem[64] + 192]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[96]:
                revert with 0, 50
            _34309 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_34309))
            staticcall address(_34309).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _34373 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if mem[_34373] < _32789:
                revert with 0, 17
            if _32541 < mem[_34373] - _32789:
                revert with 0, 17
            if _32541 - mem[_34373] + _32789 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _32541:
                revert with 0, 18
            return (100 * _24309) - (100 * _27685) + (100 * _24493) / _24309, 
                   (100 * _32541) - (100 * mem[_34373]) + (100 * _32789) / _32541,
                   cd[36]
        _16982 = mem[64]
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _16914
        mem[mem[64] + 36] = 64
        _17028 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 100
        while idx < _17028:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _16982 + (32 * _17028) + -mem[64] + 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _20694 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _20742 = mem[_20694]
        require mem[_20694] <= test266151307()
        require _20694 + return_data.size > _20694 + mem[_20694] + 31
        _20790 = mem[_20694 + mem[_20694]]
        if mem[_20694 + mem[_20694]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_20694 + mem[_20694]]) + 1 < 0 or _20694 + ceil32(return_data.size) + ceil32(32 * mem[_20694 + mem[_20694]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _20694 + ceil32(return_data.size) + ceil32(32 * mem[_20694 + mem[_20694]]) + 1
        mem[_20694 + ceil32(return_data.size)] = _20790
        require _20742 + (32 * _20790) + 32 <= return_data.size
        mem[_20694 + ceil32(return_data.size) + 32 len ceil32(32 * _20790)] = mem[_20694 + _20742 + 32 len ceil32(32 * _20790)]
        if _20790 < 1:
            revert with 0, 17
        if _20790 - 1 >= _20790:
            revert with 0, 50
        _24311 = mem[(32 * _20790 - 1) + _20694 + ceil32(return_data.size) + 32]
        _24421 = mem[64]
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _24311
        mem[mem[64] + 36] = 64
        _24469 = mem[96]
        mem[mem[64] + 68] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 100
        while idx < _24469:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _24421 + (32 * _24469) + -mem[64] + 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _27493 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _27592 = mem[_27493]
        require mem[_27493] <= test266151307()
        require _27493 + return_data.size > _27493 + mem[_27493] + 31
        _27654 = mem[_27493 + mem[_27493]]
        if mem[_27493 + mem[_27493]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_27493 + mem[_27493]]) + 1 < 0 or _27493 + ceil32(return_data.size) + ceil32(32 * mem[_27493 + mem[_27493]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _27493 + ceil32(return_data.size) + ceil32(32 * mem[_27493 + mem[_27493]]) + 1
        mem[_27493 + ceil32(return_data.size)] = _27654
        require _27592 + (32 * _27654) + 32 <= return_data.size
        mem[_27493 + ceil32(return_data.size) + 32 len ceil32(32 * _27654)] = mem[_27493 + _27592 + 32 len ceil32(32 * _27654)]
        if _27654 < 1:
            revert with 0, 17
        if _27654 - 1 >= _27654:
            revert with 0, 50
        _30245 = mem[(32 * _27654 - 1) + _27493 + ceil32(return_data.size) + 32]
        if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
            revert with 0, 50
        _30326 = mem[ceil32(32 * ('cd', 68).length) + 129]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_30326))
        staticcall address(_30326).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _30390 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _30421 = mem[_30390]
        if 0 >= mem[96]:
            revert with 0, 50
        _30518 = mem[128]
        mem[mem[64] + 4] = address(cd[4])
        mem[mem[64] + 36] = -1
        require ext_code.size(address(_30518))
        call address(_30518).approve(address arg1, uint256 arg2) with:
             gas gas_remaining wei
            args address(cd[4]), -1
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _30565 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_30565] == bool(mem[_30565])
        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _24311
        mem[mem[64] + 36] = 1
        mem[mem[64] + 68] = 160
        _30808 = mem[96]
        mem[mem[64] + 164] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 196
        while idx < mem[96]:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[mem[64] + 100] = this.address
        mem[mem[64] + 132] = block.timestamp
        require ext_code.size(address(cd[4]))
        call address(cd[4]).mem[mem[64] len 4] with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len 96], address(this.address), block.timestamp, mem[mem[64] + 164 len (32 * _30808) + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
            revert with 0, 50
        _32664 = mem[ceil32(32 * ('cd', 68).length) + 129]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_32664))
        staticcall address(_32664).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _32742 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _32790 = mem[_32742]
        if mem[_32742] < _30421:
            revert with 0, 17
        if _30245 < mem[_32742] - _30421:
            revert with 0, 17
        if _30245 - mem[_32742] + _30421 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
            revert with 0, 17
        if not _30245:
            revert with 0, 18
        if mem[_32742] < _30421:
            revert with 0, 17
        _32989 = mem[64]
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _32790 - _30421
        mem[mem[64] + 36] = 64
        _33037 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 100
        while idx < _33037:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _32989 + (32 * _33037) + -mem[64] + 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _34213 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _34312 = mem[_34213]
        require mem[_34213] <= test266151307()
        require _34213 + return_data.size > _34213 + mem[_34213] + 31
        _34374 = mem[_34213 + mem[_34213]]
        if mem[_34213 + mem[_34213]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_34213 + mem[_34213]]) + 1 < 0 or _34213 + ceil32(return_data.size) + ceil32(32 * mem[_34213 + mem[_34213]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _34213 + ceil32(return_data.size) + ceil32(32 * mem[_34213 + mem[_34213]]) + 1
        mem[_34213 + ceil32(return_data.size)] = _34374
        require _34312 + (32 * _34374) + 32 <= return_data.size
        mem[_34213 + ceil32(return_data.size) + 32 len ceil32(32 * _34374)] = mem[_34213 + _34312 + 32 len ceil32(32 * _34374)]
        if _34374 < 1:
            revert with 0, 17
        if _34374 - 1 >= _34374:
            revert with 0, 50
        _35261 = mem[(32 * _34374 - 1) + _34213 + ceil32(return_data.size) + 32]
        if 0 >= mem[96]:
            revert with 0, 50
        _35325 = mem[128]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_35325))
        staticcall address(_35325).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _35365 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _35389 = mem[_35365]
        if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
            revert with 0, 50
        _35453 = mem[ceil32(32 * ('cd', 68).length) + 129]
        mem[mem[64] + 4] = address(cd[4])
        mem[mem[64] + 36] = -1
        require ext_code.size(address(_35453))
        call address(_35453).approve(address arg1, uint256 arg2) with:
             gas gas_remaining wei
            args address(cd[4]), -1
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _35509 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_35509] == bool(mem[_35509])
        if _32790 < _30421:
            revert with 0, 17
        _35557 = mem[64]
        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _32790 - _30421
        mem[mem[64] + 36] = 1
        mem[mem[64] + 68] = 160
        _35581 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 196
        while idx < _35581:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[_35557 + 100] = this.address
        mem[_35557 + 132] = block.timestamp
        require ext_code.size(address(cd[4]))
        call address(cd[4]).mem[mem[64] len 4] with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len _35557 + (32 * _35581) + -mem[64] + 192]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        if 0 >= mem[96]:
            revert with 0, 50
        _35949 = mem[128]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_35949))
        staticcall address(_35949).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _35989 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if mem[_35989] < _35389:
            revert with 0, 17
        if _35261 < mem[_35989] - _35389:
            revert with 0, 17
        if _35261 - mem[_35989] + _35389 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
            revert with 0, 17
        if not _35261:
            revert with 0, 18
        return (100 * _30245) - (100 * _32790) + (100 * _30421) / _30245, 
               (100 * _35261) - (100 * mem[_35989]) + (100 * _35389) / _35261,
               _24311
    mem[64] = ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 231
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 230] = return_data.size
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 262 len return_data.size] = ext_call.return_data[0 len return_data.size]
    if not ext_call.success:
        revert with 0, 'TRANSFER_FROM_FAILED'
    if not return_data.size:
        mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 231] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 235] = cd[36]
        mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 267] = 64
        mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 299] = ('cd', 68).length
        idx = 0
        s = 128
        t = mem[64] + 100
        while idx < ('cd', 68).length:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + (32 * ('cd', 68).length) + -mem[64] + 327]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _13067 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _13075 = mem[_13067]
        require mem[_13067] <= test266151307()
        require _13067 + return_data.size > _13067 + mem[_13067] + 31
        _13083 = mem[_13067 + mem[_13067]]
        if mem[_13067 + mem[_13067]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_13067 + mem[_13067]]) + 1 < 0 or _13067 + ceil32(return_data.size) + ceil32(32 * mem[_13067 + mem[_13067]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _13067 + ceil32(return_data.size) + ceil32(32 * mem[_13067 + mem[_13067]]) + 1
        mem[_13067 + ceil32(return_data.size)] = _13083
        require _13075 + (32 * _13083) + 32 <= return_data.size
        mem[_13067 + ceil32(return_data.size) + 32 len ceil32(32 * _13083)] = mem[_13067 + _13075 + 32 len ceil32(32 * _13083)]
        if _13083 < 1:
            revert with 0, 17
        if _13083 - 1 >= _13083:
            revert with 0, 50
        _16841 = mem[(32 * _13083 - 1) + _13067 + ceil32(return_data.size) + 32]
        if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
            revert with 0, 50
        _16863 = mem[ceil32(32 * ('cd', 68).length) + 129]
        require ext_code.size(mem[ceil32(32 * ('cd', 68).length) + 141 len 20])
        staticcall mem[ceil32(32 * ('cd', 68).length) + 141 len 20].0x7d1db4a5 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if ext_call.success:
            _16875 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _16899 = mem[_16875]
            if mem[_16875] >= _16841:
                _16961 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _17001 = mem[96]
                mem[mem[64] + 68] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 100
                while idx < _17001:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _16961 + (32 * _17001) + -mem[64] + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _20701 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _20749 = mem[_20701]
                require mem[_20701] <= test266151307()
                require _20701 + return_data.size > _20701 + mem[_20701] + 31
                _20797 = mem[_20701 + mem[_20701]]
                if mem[_20701 + mem[_20701]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_20701 + mem[_20701]]) + 1 < 0 or _20701 + ceil32(return_data.size) + ceil32(32 * mem[_20701 + mem[_20701]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _20701 + ceil32(return_data.size) + ceil32(32 * mem[_20701 + mem[_20701]]) + 1
                mem[_20701 + ceil32(return_data.size)] = _20797
                require _20749 + (32 * _20797) + 32 <= return_data.size
                mem[_20701 + ceil32(return_data.size) + 32 len ceil32(32 * _20797)] = mem[_20701 + _20749 + 32 len ceil32(32 * _20797)]
                if _20797 < 1:
                    revert with 0, 17
                if _20797 - 1 >= _20797:
                    revert with 0, 50
                _24321 = mem[(32 * _20797 - 1) + _20701 + ceil32(return_data.size) + 32]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _24393 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_24393))
                staticcall address(_24393).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _24449 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _24497 = mem[_24449]
                if 0 >= mem[96]:
                    revert with 0, 50
                _24609 = mem[128]
                mem[mem[64] + 4] = address(cd[4])
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_24609))
                call address(_24609).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(cd[4]), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _24665 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_24665] == bool(mem[_24665])
                _24785 = mem[64]
                mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 1
                mem[mem[64] + 68] = 160
                _24829 = mem[96]
                mem[mem[64] + 164] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 196
                while idx < _24829:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_24785 + 100] = this.address
                mem[_24785 + 132] = block.timestamp
                require ext_code.size(address(cd[4]))
                call address(cd[4]).mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _24785 + (32 * _24829) + -mem[64] + 192]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _27605 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_27605))
                staticcall address(_27605).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _27661 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _27689 = mem[_27661]
                if mem[_27661] < _24497:
                    revert with 0, 17
                if _24321 < mem[_27661] - _24497:
                    revert with 0, 17
                if _24321 - mem[_27661] + _24497 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not _24321:
                    revert with 0, 18
                if mem[_27661] < _24497:
                    revert with 0, 17
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _27689 - _24497
                mem[mem[64] + 36] = 64
                _28021 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 100
                while idx < _28021:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args _27689 - _24497, 64, mem[mem[64] + 68 len (32 * _28021) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _30205 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _30341 = mem[_30205]
                require mem[_30205] <= test266151307()
                require _30205 + return_data.size > _30205 + mem[_30205] + 31
                _30397 = mem[_30205 + mem[_30205]]
                if mem[_30205 + mem[_30205]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_30205 + mem[_30205]]) + 1 < 0 or _30205 + ceil32(return_data.size) + ceil32(32 * mem[_30205 + mem[_30205]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _30205 + ceil32(return_data.size) + ceil32(32 * mem[_30205 + mem[_30205]]) + 1
                mem[_30205 + ceil32(return_data.size)] = _30397
                require _30341 + (32 * _30397) + 32 <= return_data.size
                mem[_30205 + ceil32(return_data.size) + 32 len ceil32(32 * _30397)] = mem[_30205 + _30341 + 32 len ceil32(32 * _30397)]
                if _30397 < 1:
                    revert with 0, 17
                if _30397 - 1 >= _30397:
                    revert with 0, 50
                _32553 = mem[(32 * _30397 - 1) + _30205 + ceil32(return_data.size) + 32]
                if 0 >= mem[96]:
                    revert with 0, 50
                _32685 = mem[128]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_32685))
                staticcall address(_32685).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _32749 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _32797 = mem[_32749]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _32869 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = address(cd[4])
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_32869))
                call address(_32869).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(cd[4]), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _32921 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_32921] == bool(mem[_32921])
                if _27689 < _24497:
                    revert with 0, 17
                mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _27689 - _24497
                mem[mem[64] + 36] = 1
                mem[mem[64] + 68] = 160
                _33017 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 196
                while idx < _33017:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[mem[64] + 100] = this.address
                mem[mem[64] + 132] = block.timestamp
                require ext_code.size(address(cd[4]))
                call address(cd[4]).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args _27689 - _24497, 1, 160, address(this.address), block.timestamp, mem[mem[64] + 164 len (32 * _33017) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if 0 >= mem[96]:
                    revert with 0, 50
                _34325 = mem[128]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_34325))
                staticcall address(_34325).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _34381 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if mem[_34381] < _32797:
                    revert with 0, 17
                if _32553 < mem[_34381] - _32797:
                    revert with 0, 17
                if _32553 - mem[_34381] + _32797 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not _32553:
                    revert with 0, 18
                return (100 * _24321) - (100 * _27689) + (100 * _24497) / _24321, 
                       (100 * _32553) - (100 * mem[_34381]) + (100 * _32797) / _32553,
                       cd[36]
            _16931 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _16899
            mem[mem[64] + 36] = 64
            _16962 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 100
            while idx < _16962:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _16931 + (32 * _16962) + -mem[64] + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _20702 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _20750 = mem[_20702]
            require mem[_20702] <= test266151307()
            require _20702 + return_data.size > _20702 + mem[_20702] + 31
            _20798 = mem[_20702 + mem[_20702]]
            if mem[_20702 + mem[_20702]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_20702 + mem[_20702]]) + 1 < 0 or _20702 + ceil32(return_data.size) + ceil32(32 * mem[_20702 + mem[_20702]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _20702 + ceil32(return_data.size) + ceil32(32 * mem[_20702 + mem[_20702]]) + 1
            mem[_20702 + ceil32(return_data.size)] = _20798
            require _20750 + (32 * _20798) + 32 <= return_data.size
            mem[_20702 + ceil32(return_data.size) + 32 len ceil32(32 * _20798)] = mem[_20702 + _20750 + 32 len ceil32(32 * _20798)]
            if _20798 < 1:
                revert with 0, 17
            if _20798 - 1 >= _20798:
                revert with 0, 50
            _24323 = mem[(32 * _20798 - 1) + _20702 + ceil32(return_data.size) + 32]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _24323
            mem[mem[64] + 36] = 64
            _24473 = mem[96]
            mem[mem[64] + 68] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 100
            while idx < mem[96]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len (32 * _24473) + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _27497 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _27608 = mem[_27497]
            require mem[_27497] <= test266151307()
            require _27497 + return_data.size > _27497 + mem[_27497] + 31
            _27662 = mem[_27497 + mem[_27497]]
            if mem[_27497 + mem[_27497]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_27497 + mem[_27497]]) + 1 < 0 or _27497 + ceil32(return_data.size) + ceil32(32 * mem[_27497 + mem[_27497]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _27497 + ceil32(return_data.size) + ceil32(32 * mem[_27497 + mem[_27497]]) + 1
            mem[_27497 + ceil32(return_data.size)] = _27662
            require _27608 + (32 * _27662) + 32 <= return_data.size
            mem[_27497 + ceil32(return_data.size) + 32 len ceil32(32 * _27662)] = mem[_27497 + _27608 + 32 len ceil32(32 * _27662)]
            if _27662 < 1:
                revert with 0, 17
            if _27662 - 1 >= _27662:
                revert with 0, 50
            _30253 = mem[(32 * _27662 - 1) + _27497 + ceil32(return_data.size) + 32]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _30342 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_30342))
            staticcall address(_30342).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _30398 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _30425 = mem[_30398]
            if 0 >= mem[96]:
                revert with 0, 50
            _30534 = mem[128]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_30534))
            call address(_30534).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _30569 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_30569] == bool(mem[_30569])
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _24323
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _30824 = mem[96]
            mem[mem[64] + 164] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 196
            while idx < mem[96]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[mem[64] + 100] = this.address
            mem[mem[64] + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len 96], address(this.address), block.timestamp, mem[mem[64] + 164 len (32 * _30824) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _32688 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_32688))
            staticcall address(_32688).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _32750 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _32798 = mem[_32750]
            if mem[_32750] < _30425:
                revert with 0, 17
            if _30253 < mem[_32750] - _30425:
                revert with 0, 17
            if _30253 - mem[_32750] + _30425 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _30253:
                revert with 0, 18
            if mem[_32750] < _30425:
                revert with 0, 17
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _32798 - _30425
            mem[mem[64] + 36] = 64
            _33041 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 100
            while idx < _33041:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args _32798 - _30425, 64, mem[mem[64] + 68 len (32 * _33041) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _34217 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _34328 = mem[_34217]
            require mem[_34217] <= test266151307()
            require _34217 + return_data.size > _34217 + mem[_34217] + 31
            _34382 = mem[_34217 + mem[_34217]]
            if mem[_34217 + mem[_34217]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_34217 + mem[_34217]]) + 1 < 0 or _34217 + ceil32(return_data.size) + ceil32(32 * mem[_34217 + mem[_34217]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _34217 + ceil32(return_data.size) + ceil32(32 * mem[_34217 + mem[_34217]]) + 1
            mem[_34217 + ceil32(return_data.size)] = _34382
            require _34328 + (32 * _34382) + 32 <= return_data.size
            mem[_34217 + ceil32(return_data.size) + 32 len ceil32(32 * _34382)] = mem[_34217 + _34328 + 32 len ceil32(32 * _34382)]
            if _34382 < 1:
                revert with 0, 17
            if _34382 - 1 >= _34382:
                revert with 0, 50
            _35269 = mem[(32 * _34382 - 1) + _34217 + ceil32(return_data.size) + 32]
            if 0 >= mem[96]:
                revert with 0, 50
            _35337 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_35337))
            staticcall address(_35337).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _35369 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _35393 = mem[_35369]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _35461 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_35461))
            call address(_35461).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _35513 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_35513] == bool(mem[_35513])
            if _32798 < _30425:
                revert with 0, 17
            _35561 = mem[64]
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _32798 - _30425
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _35585 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 196
            while idx < _35585:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_35561 + 100] = this.address
            mem[_35561 + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _35561 + (32 * _35585) + -mem[64] + 192]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[96]:
                revert with 0, 50
            _35961 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_35961))
            staticcall address(_35961).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _35993 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if mem[_35993] < _35393:
                revert with 0, 17
            if _35269 < mem[_35993] - _35393:
                revert with 0, 17
            if _35269 - mem[_35993] + _35393 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _35269:
                revert with 0, 18
            return (100 * _30253) - (100 * _32798) + (100 * _30425) / _30253, 
                   (100 * _35269) - (100 * mem[_35993]) + (100 * _35393) / _35269,
                   _24323
        require ext_code.size(address(_16863))
        staticcall address(_16863).maxTxAmount() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            if _16841 >= _16841:
                _16945 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 64
                _16983 = mem[96]
                mem[mem[64] + 68] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 100
                while idx < _16983:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _16945 + (32 * _16983) + -mem[64] + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _20697 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _20745 = mem[_20697]
                require mem[_20697] <= test266151307()
                require _20697 + return_data.size > _20697 + mem[_20697] + 31
                _20793 = mem[_20697 + mem[_20697]]
                if mem[_20697 + mem[_20697]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_20697 + mem[_20697]]) + 1 < 0 or _20697 + ceil32(return_data.size) + ceil32(32 * mem[_20697 + mem[_20697]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _20697 + ceil32(return_data.size) + ceil32(32 * mem[_20697 + mem[_20697]]) + 1
                mem[_20697 + ceil32(return_data.size)] = _20793
                require _20745 + (32 * _20793) + 32 <= return_data.size
                mem[_20697 + ceil32(return_data.size) + 32 len ceil32(32 * _20793)] = mem[_20697 + _20745 + 32 len ceil32(32 * _20793)]
                if _20793 < 1:
                    revert with 0, 17
                if _20793 - 1 >= _20793:
                    revert with 0, 50
                _24315 = mem[(32 * _20793 - 1) + _20697 + ceil32(return_data.size) + 32]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _24387 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_24387))
                staticcall address(_24387).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _24447 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _24495 = mem[_24447]
                if 0 >= mem[96]:
                    revert with 0, 50
                _24603 = mem[128]
                mem[mem[64] + 4] = address(cd[4])
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_24603))
                call address(_24603).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(cd[4]), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _24663 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_24663] == bool(mem[_24663])
                mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = cd[36]
                mem[mem[64] + 36] = 1
                mem[mem[64] + 68] = 160
                _24825 = mem[96]
                mem[mem[64] + 164] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 196
                while idx < mem[96]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[mem[64] + 100] = this.address
                mem[mem[64] + 132] = block.timestamp
                require ext_code.size(address(cd[4]))
                call address(cd[4]).mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len 96], address(this.address), block.timestamp, mem[mem[64] + 164 len (32 * _24825) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _27597 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_27597))
                staticcall address(_27597).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _27657 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _27687 = mem[_27657]
                if mem[_27657] < _24495:
                    revert with 0, 17
                if _24315 < mem[_27657] - _24495:
                    revert with 0, 17
                if _24315 - mem[_27657] + _24495 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not _24315:
                    revert with 0, 18
                if mem[_27657] < _24495:
                    revert with 0, 17
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _27687 - _24495
                mem[mem[64] + 36] = 64
                _28017 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 100
                while idx < _28017:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args _27687 - _24495, 64, mem[mem[64] + 68 len (32 * _28017) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _30201 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _30333 = mem[_30201]
                require mem[_30201] <= test266151307()
                require _30201 + return_data.size > _30201 + mem[_30201] + 31
                _30393 = mem[_30201 + mem[_30201]]
                if mem[_30201 + mem[_30201]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_30201 + mem[_30201]]) + 1 < 0 or _30201 + ceil32(return_data.size) + ceil32(32 * mem[_30201 + mem[_30201]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _30201 + ceil32(return_data.size) + ceil32(32 * mem[_30201 + mem[_30201]]) + 1
                mem[_30201 + ceil32(return_data.size)] = _30393
                require _30333 + (32 * _30393) + 32 <= return_data.size
                mem[_30201 + ceil32(return_data.size) + 32 len ceil32(32 * _30393)] = mem[_30201 + _30333 + 32 len ceil32(32 * _30393)]
                if _30393 < 1:
                    revert with 0, 17
                if _30393 - 1 >= _30393:
                    revert with 0, 50
                _32547 = mem[(32 * _30393 - 1) + _30201 + ceil32(return_data.size) + 32]
                if 0 >= mem[96]:
                    revert with 0, 50
                _32673 = mem[128]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_32673))
                staticcall address(_32673).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _32745 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _32793 = mem[_32745]
                if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                    revert with 0, 50
                _32865 = mem[ceil32(32 * ('cd', 68).length) + 129]
                mem[mem[64] + 4] = address(cd[4])
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_32865))
                call address(_32865).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(cd[4]), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _32919 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_32919] == bool(mem[_32919])
                if _27687 < _24495:
                    revert with 0, 17
                _32967 = mem[64]
                mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _27687 - _24495
                mem[mem[64] + 36] = 1
                mem[mem[64] + 68] = 160
                _33015 = mem[ceil32(32 * ('cd', 68).length) + 97]
                mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
                idx = 0
                s = ceil32(32 * ('cd', 68).length) + 129
                t = mem[64] + 196
                while idx < _33015:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_32967 + 100] = this.address
                mem[_32967 + 132] = block.timestamp
                require ext_code.size(address(cd[4]))
                call address(cd[4]).mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _32967 + (32 * _33015) + -mem[64] + 192]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if 0 >= mem[96]:
                    revert with 0, 50
                _34317 = mem[128]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_34317))
                staticcall address(_34317).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _34377 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if mem[_34377] < _32793:
                    revert with 0, 17
                if _32547 < mem[_34377] - _32793:
                    revert with 0, 17
                if _32547 - mem[_34377] + _32793 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not _32547:
                    revert with 0, 18
                return (100 * _24315) - (100 * _27687) + (100 * _24495) / _24315, 
                       (100 * _32547) - (100 * mem[_34377]) + (100 * _32793) / _32547,
                       cd[36]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _16841
            mem[mem[64] + 36] = 64
            _16946 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 100
            while idx < _16946:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args _16841, 64, mem[mem[64] + 68 len (32 * _16946) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _20698 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _20746 = mem[_20698]
            require mem[_20698] <= test266151307()
            require _20698 + return_data.size > _20698 + mem[_20698] + 31
            _20794 = mem[_20698 + mem[_20698]]
            if mem[_20698 + mem[_20698]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_20698 + mem[_20698]]) + 1 < 0 or _20698 + ceil32(return_data.size) + ceil32(32 * mem[_20698 + mem[_20698]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _20698 + ceil32(return_data.size) + ceil32(32 * mem[_20698 + mem[_20698]]) + 1
            mem[_20698 + ceil32(return_data.size)] = _20794
            require _20746 + (32 * _20794) + 32 <= return_data.size
            mem[_20698 + ceil32(return_data.size) + 32 len ceil32(32 * _20794)] = mem[_20698 + _20746 + 32 len ceil32(32 * _20794)]
            if _20794 < 1:
                revert with 0, 17
            if _20794 - 1 >= _20794:
                revert with 0, 50
            _24317 = mem[(32 * _20794 - 1) + _20698 + ceil32(return_data.size) + 32]
            _24423 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _24317
            mem[mem[64] + 36] = 64
            _24471 = mem[96]
            mem[mem[64] + 68] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 100
            while idx < _24471:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _24423 + (32 * _24471) + -mem[64] + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _27495 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _27600 = mem[_27495]
            require mem[_27495] <= test266151307()
            require _27495 + return_data.size > _27495 + mem[_27495] + 31
            _27658 = mem[_27495 + mem[_27495]]
            if mem[_27495 + mem[_27495]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_27495 + mem[_27495]]) + 1 < 0 or _27495 + ceil32(return_data.size) + ceil32(32 * mem[_27495 + mem[_27495]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _27495 + ceil32(return_data.size) + ceil32(32 * mem[_27495 + mem[_27495]]) + 1
            mem[_27495 + ceil32(return_data.size)] = _27658
            require _27600 + (32 * _27658) + 32 <= return_data.size
            mem[_27495 + ceil32(return_data.size) + 32 len ceil32(32 * _27658)] = mem[_27495 + _27600 + 32 len ceil32(32 * _27658)]
            if _27658 < 1:
                revert with 0, 17
            if _27658 - 1 >= _27658:
                revert with 0, 50
            _30249 = mem[(32 * _27658 - 1) + _27495 + ceil32(return_data.size) + 32]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _30334 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_30334))
            staticcall address(_30334).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _30394 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _30423 = mem[_30394]
            if 0 >= mem[96]:
                revert with 0, 50
            _30526 = mem[128]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_30526))
            call address(_30526).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _30567 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_30567] == bool(mem[_30567])
            _30682 = mem[64]
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _24317
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _30816 = mem[96]
            mem[mem[64] + 164] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 196
            while idx < _30816:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_30682 + 100] = this.address
            mem[_30682 + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _30682 + (32 * _30816) + -mem[64] + 192]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _32676 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_32676))
            staticcall address(_32676).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _32746 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _32794 = mem[_32746]
            if mem[_32746] < _30423:
                revert with 0, 17
            if _30249 < mem[_32746] - _30423:
                revert with 0, 17
            if _30249 - mem[_32746] + _30423 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _30249:
                revert with 0, 18
            if mem[_32746] < _30423:
                revert with 0, 17
            _32991 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _32794 - _30423
            mem[mem[64] + 36] = 64
            _33039 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 100
            while idx < _33039:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _32991 + (32 * _33039) + -mem[64] + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _34215 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _34320 = mem[_34215]
            require mem[_34215] <= test266151307()
            require _34215 + return_data.size > _34215 + mem[_34215] + 31
            _34378 = mem[_34215 + mem[_34215]]
            if mem[_34215 + mem[_34215]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_34215 + mem[_34215]]) + 1 < 0 or _34215 + ceil32(return_data.size) + ceil32(32 * mem[_34215 + mem[_34215]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _34215 + ceil32(return_data.size) + ceil32(32 * mem[_34215 + mem[_34215]]) + 1
            mem[_34215 + ceil32(return_data.size)] = _34378
            require _34320 + (32 * _34378) + 32 <= return_data.size
            mem[_34215 + ceil32(return_data.size) + 32 len ceil32(32 * _34378)] = mem[_34215 + _34320 + 32 len ceil32(32 * _34378)]
            if _34378 < 1:
                revert with 0, 17
            if _34378 - 1 >= _34378:
                revert with 0, 50
            _35265 = mem[(32 * _34378 - 1) + _34215 + ceil32(return_data.size) + 32]
            if 0 >= mem[96]:
                revert with 0, 50
            _35331 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_35331))
            staticcall address(_35331).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _35367 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _35391 = mem[_35367]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _35457 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_35457))
            call address(_35457).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _35511 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_35511] == bool(mem[_35511])
            if _32794 < _30423:
                revert with 0, 17
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _32794 - _30423
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _35583 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 196
            while idx < _35583:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[mem[64] + 100] = this.address
            mem[mem[64] + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args _32794 - _30423, 1, 160, address(this.address), block.timestamp, mem[mem[64] + 164 len (32 * _35583) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[96]:
                revert with 0, 50
            _35955 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_35955))
            staticcall address(_35955).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _35991 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if mem[_35991] < _35391:
                revert with 0, 17
            if _35265 < mem[_35991] - _35391:
                revert with 0, 17
            if _35265 - mem[_35991] + _35391 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _35265:
                revert with 0, 18
            return (100 * _30249) - (100 * _32794) + (100 * _30423) / _30249, 
                   (100 * _35265) - (100 * mem[_35991]) + (100 * _35391) / _35265,
                   _24317
        _16907 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _16915 = mem[_16907]
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        if mem[_16907] >= _16841:
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _17079 = mem[96]
            mem[mem[64] + 68] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 100
            while idx < mem[96]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len (32 * _17079) + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _20699 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _20747 = mem[_20699]
            require mem[_20699] <= test266151307()
            require _20699 + return_data.size > _20699 + mem[_20699] + 31
            _20795 = mem[_20699 + mem[_20699]]
            if mem[_20699 + mem[_20699]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_20699 + mem[_20699]]) + 1 < 0 or _20699 + ceil32(return_data.size) + ceil32(32 * mem[_20699 + mem[_20699]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _20699 + ceil32(return_data.size) + ceil32(32 * mem[_20699 + mem[_20699]]) + 1
            mem[_20699 + ceil32(return_data.size)] = _20795
            require _20747 + (32 * _20795) + 32 <= return_data.size
            mem[_20699 + ceil32(return_data.size) + 32 len ceil32(32 * _20795)] = mem[_20699 + _20747 + 32 len ceil32(32 * _20795)]
            if _20795 < 1:
                revert with 0, 17
            if _20795 - 1 >= _20795:
                revert with 0, 50
            _24318 = mem[(32 * _20795 - 1) + _20699 + ceil32(return_data.size) + 32]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _24390 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_24390))
            staticcall address(_24390).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _24448 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _24496 = mem[_24448]
            if 0 >= mem[96]:
                revert with 0, 50
            _24606 = mem[128]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_24606))
            call address(_24606).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _24664 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_24664] == bool(mem[_24664])
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _24827 = mem[96]
            mem[mem[64] + 164] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 196
            while idx < mem[96]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[mem[64] + 100] = this.address
            mem[mem[64] + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len 96], address(this.address), block.timestamp, mem[mem[64] + 164 len (32 * _24827) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _27601 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_27601))
            staticcall address(_27601).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _27659 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _27688 = mem[_27659]
            if mem[_27659] < _24496:
                revert with 0, 17
            if _24318 < mem[_27659] - _24496:
                revert with 0, 17
            if _24318 - mem[_27659] + _24496 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _24318:
                revert with 0, 18
            if mem[_27659] < _24496:
                revert with 0, 17
            _27952 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _27688 - _24496
            mem[mem[64] + 36] = 64
            _28019 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 100
            while idx < _28019:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _27952 + (32 * _28019) + -mem[64] + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _30203 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _30337 = mem[_30203]
            require mem[_30203] <= test266151307()
            require _30203 + return_data.size > _30203 + mem[_30203] + 31
            _30395 = mem[_30203 + mem[_30203]]
            if mem[_30203 + mem[_30203]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_30203 + mem[_30203]]) + 1 < 0 or _30203 + ceil32(return_data.size) + ceil32(32 * mem[_30203 + mem[_30203]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _30203 + ceil32(return_data.size) + ceil32(32 * mem[_30203 + mem[_30203]]) + 1
            mem[_30203 + ceil32(return_data.size)] = _30395
            require _30337 + (32 * _30395) + 32 <= return_data.size
            mem[_30203 + ceil32(return_data.size) + 32 len ceil32(32 * _30395)] = mem[_30203 + _30337 + 32 len ceil32(32 * _30395)]
            if _30395 < 1:
                revert with 0, 17
            if _30395 - 1 >= _30395:
                revert with 0, 50
            _32550 = mem[(32 * _30395 - 1) + _30203 + ceil32(return_data.size) + 32]
            if 0 >= mem[96]:
                revert with 0, 50
            _32679 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_32679))
            staticcall address(_32679).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _32747 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _32795 = mem[_32747]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _32867 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_32867))
            call address(_32867).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _32920 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_32920] == bool(mem[_32920])
            if _27688 < _24496:
                revert with 0, 17
            _32968 = mem[64]
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _27688 - _24496
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _33016 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 196
            while idx < _33016:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_32968 + 100] = this.address
            mem[_32968 + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _32968 + (32 * _33016) + -mem[64] + 192]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[96]:
                revert with 0, 50
            _34321 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_34321))
            staticcall address(_34321).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _34379 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if mem[_34379] < _32795:
                revert with 0, 17
            if _32550 < mem[_34379] - _32795:
                revert with 0, 17
            if _32550 - mem[_34379] + _32795 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _32550:
                revert with 0, 18
            return (100 * _24318) - (100 * _27688) + (100 * _24496) / _24318, 
                   (100 * _32550) - (100 * mem[_34379]) + (100 * _32795) / _32550,
                   cd[36]
        mem[mem[64] + 4] = _16915
        mem[mem[64] + 36] = 64
        _17032 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 100
        while idx < _17032:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args _16915, 64, mem[mem[64] + 68 len (32 * _17032) + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _20700 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _20748 = mem[_20700]
        require mem[_20700] <= test266151307()
        require _20700 + return_data.size > _20700 + mem[_20700] + 31
        _20796 = mem[_20700 + mem[_20700]]
        if mem[_20700 + mem[_20700]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_20700 + mem[_20700]]) + 1 < 0 or _20700 + ceil32(return_data.size) + ceil32(32 * mem[_20700 + mem[_20700]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _20700 + ceil32(return_data.size) + ceil32(32 * mem[_20700 + mem[_20700]]) + 1
        mem[_20700 + ceil32(return_data.size)] = _20796
        require _20748 + (32 * _20796) + 32 <= return_data.size
        mem[_20700 + ceil32(return_data.size) + 32 len ceil32(32 * _20796)] = mem[_20700 + _20748 + 32 len ceil32(32 * _20796)]
        if _20796 < 1:
            revert with 0, 17
        if _20796 - 1 >= _20796:
            revert with 0, 50
        _24320 = mem[(32 * _20796 - 1) + _20700 + ceil32(return_data.size) + 32]
        _24424 = mem[64]
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _24320
        mem[mem[64] + 36] = 64
        _24472 = mem[96]
        mem[mem[64] + 68] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 100
        while idx < _24472:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _24424 + (32 * _24472) + -mem[64] + 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _27496 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _27604 = mem[_27496]
        require mem[_27496] <= test266151307()
        require _27496 + return_data.size > _27496 + mem[_27496] + 31
        _27660 = mem[_27496 + mem[_27496]]
        if mem[_27496 + mem[_27496]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_27496 + mem[_27496]]) + 1 < 0 or _27496 + ceil32(return_data.size) + ceil32(32 * mem[_27496 + mem[_27496]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _27496 + ceil32(return_data.size) + ceil32(32 * mem[_27496 + mem[_27496]]) + 1
        mem[_27496 + ceil32(return_data.size)] = _27660
        require _27604 + (32 * _27660) + 32 <= return_data.size
        mem[_27496 + ceil32(return_data.size) + 32 len ceil32(32 * _27660)] = mem[_27496 + _27604 + 32 len ceil32(32 * _27660)]
        var148002 = _27496 + ceil32(return_data.size) + ceil32(32 * _27660) + 32
        if _27660 < 1:
            revert with 0, 17
        if _27660 - 1 >= _27660:
            revert with 0, 50
        _30251 = mem[(32 * _27660 - 1) + _27496 + ceil32(return_data.size) + 32]
        if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
            revert with 0, 50
        _30338 = mem[ceil32(32 * ('cd', 68).length) + 129]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_30338))
        staticcall address(_30338).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _30396 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _30424 = mem[_30396]
        if 0 >= mem[96]:
            revert with 0, 50
        _30530 = mem[128]
        mem[mem[64] + 4] = address(cd[4])
        mem[mem[64] + 36] = -1
        require ext_code.size(address(_30530))
        call address(_30530).approve(address arg1, uint256 arg2) with:
             gas gas_remaining wei
            args address(cd[4]), -1
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _30568 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_30568] == bool(mem[_30568])
        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _24320
        mem[mem[64] + 36] = 1
        mem[mem[64] + 68] = 160
        _30820 = mem[96]
        mem[mem[64] + 164] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 196
        while idx < mem[96]:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[mem[64] + 100] = this.address
        mem[mem[64] + 132] = block.timestamp
        require ext_code.size(address(cd[4]))
        call address(cd[4]).mem[mem[64] len 4] with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len 96], address(this.address), block.timestamp, mem[mem[64] + 164 len (32 * _30820) + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
            revert with 0, 50
        _32682 = mem[ceil32(32 * ('cd', 68).length) + 129]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_32682))
        staticcall address(_32682).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _32748 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _32796 = mem[_32748]
        if mem[_32748] < _30424:
            revert with 0, 17
        if _30251 < mem[_32748] - _30424:
            revert with 0, 17
        if _30251 - mem[_32748] + _30424 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
            revert with 0, 17
        if not _30251:
            revert with 0, 18
        if mem[_32748] < _30424:
            revert with 0, 17
        _32992 = mem[64]
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _32796 - _30424
        mem[mem[64] + 36] = 64
        _33040 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 100
        while idx < _33040:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _32992 + (32 * _33040) + -mem[64] + 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _34216 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _34324 = mem[_34216]
        require mem[_34216] <= test266151307()
        require _34216 + return_data.size > _34216 + mem[_34216] + 31
        _34380 = mem[_34216 + mem[_34216]]
        if mem[_34216 + mem[_34216]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_34216 + mem[_34216]]) + 1 < 0 or _34216 + ceil32(return_data.size) + ceil32(32 * mem[_34216 + mem[_34216]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _34216 + ceil32(return_data.size) + ceil32(32 * mem[_34216 + mem[_34216]]) + 1
        mem[_34216 + ceil32(return_data.size)] = _34380
        require _34324 + (32 * _34380) + 32 <= return_data.size
        mem[_34216 + ceil32(return_data.size) + 32 len ceil32(32 * _34380)] = mem[_34216 + _34324 + 32 len ceil32(32 * _34380)]
        if _34380 < 1:
            revert with 0, 17
        if _34380 - 1 >= _34380:
            revert with 0, 50
        _35267 = mem[(32 * _34380 - 1) + _34216 + ceil32(return_data.size) + 32]
        if 0 >= mem[96]:
            revert with 0, 50
        _35334 = mem[128]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_35334))
        staticcall address(_35334).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _35368 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _35392 = mem[_35368]
        if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
            revert with 0, 50
        _35459 = mem[ceil32(32 * ('cd', 68).length) + 129]
        mem[mem[64] + 4] = address(cd[4])
        mem[mem[64] + 36] = -1
        require ext_code.size(address(_35459))
        call address(_35459).approve(address arg1, uint256 arg2) with:
             gas gas_remaining wei
            args address(cd[4]), -1
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _35512 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_35512] == bool(mem[_35512])
        if _32796 < _30424:
            revert with 0, 17
        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _32796 - _30424
        mem[mem[64] + 36] = 1
        mem[mem[64] + 68] = 160
        _35584 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 196
        while idx < _35584:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[mem[64] + 100] = this.address
        mem[mem[64] + 132] = block.timestamp
        require ext_code.size(address(cd[4]))
        call address(cd[4]).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args _32796 - _30424, 1, 160, address(this.address), block.timestamp, mem[mem[64] + 164 len (32 * _35584) + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        if 0 >= mem[96]:
            revert with 0, 50
        _35958 = mem[128]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_35958))
        staticcall address(_35958).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _35992 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if mem[_35992] < _35392:
            revert with 0, 17
        if _35267 < mem[_35992] - _35392:
            revert with 0, 17
        if _35267 - mem[_35992] + _35392 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
            revert with 0, 17
        if not _35267:
            revert with 0, 18
        return (100 * _30251) - (100 * _32796) + (100 * _30424) / _30251, 
               (100 * _35267) - (100 * mem[_35992]) + (100 * _35392) / _35267,
               _24320
    require return_data.size >= 32
    require mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 262] == bool(mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 262])
    if not mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + 262]:
        revert with 0, 'TRANSFER_FROM_FAILED'
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 231] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 235] = cd[36]
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 267] = 64
    mem[ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 299] = ('cd', 68).length
    idx = 0
    s = 128
    t = mem[64] + 100
    while idx < ('cd', 68).length:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).mem[mem[64] len 4] with:
            gas gas_remaining wei
           args mem[mem[64] + 4 len ceil32(32 * ('cd', 68).length) + ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + (32 * ('cd', 68).length) + -mem[64] + 327]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _13068 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _13076 = mem[_13068]
    require mem[_13068] <= test266151307()
    require _13068 + return_data.size > _13068 + mem[_13068] + 31
    _13084 = mem[_13068 + mem[_13068]]
    if mem[_13068 + mem[_13068]] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[_13068 + mem[_13068]]) + 1 < 0 or _13068 + ceil32(return_data.size) + ceil32(32 * mem[_13068 + mem[_13068]]) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _13068 + ceil32(return_data.size) + ceil32(32 * mem[_13068 + mem[_13068]]) + 1
    mem[_13068 + ceil32(return_data.size)] = _13084
    require _13076 + (32 * _13084) + 32 <= return_data.size
    mem[_13068 + ceil32(return_data.size) + 32 len ceil32(32 * _13084)] = mem[_13068 + _13076 + 32 len ceil32(32 * _13084)]
    if _13084 < 1:
        revert with 0, 17
    if _13084 - 1 >= _13084:
        revert with 0, 50
    _16843 = mem[(32 * _13084 - 1) + _13068 + ceil32(return_data.size) + 32]
    if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
        revert with 0, 50
    _16866 = mem[ceil32(32 * ('cd', 68).length) + 129]
    require ext_code.size(mem[ceil32(32 * ('cd', 68).length) + 141 len 20])
    staticcall mem[ceil32(32 * ('cd', 68).length) + 141 len 20].0x7d1db4a5 with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if ext_call.success:
        _16876 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _16900 = mem[_16876]
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        if mem[_16876] >= _16843:
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _17003 = mem[96]
            mem[mem[64] + 68] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 100
            while idx < mem[96]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len (32 * _17003) + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _20707 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _20755 = mem[_20707]
            require mem[_20707] <= test266151307()
            require _20707 + return_data.size > _20707 + mem[_20707] + 31
            _20803 = mem[_20707 + mem[_20707]]
            if mem[_20707 + mem[_20707]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_20707 + mem[_20707]]) + 1 < 0 or _20707 + ceil32(return_data.size) + ceil32(32 * mem[_20707 + mem[_20707]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _20707 + ceil32(return_data.size) + ceil32(32 * mem[_20707 + mem[_20707]]) + 1
            mem[_20707 + ceil32(return_data.size)] = _20803
            require _20755 + (32 * _20803) + 32 <= return_data.size
            mem[_20707 + ceil32(return_data.size) + 32 len ceil32(32 * _20803)] = mem[_20707 + _20755 + 32 len ceil32(32 * _20803)]
            if _20803 < 1:
                revert with 0, 17
            if _20803 - 1 >= _20803:
                revert with 0, 50
            _24330 = mem[(32 * _20803 - 1) + _20707 + ceil32(return_data.size) + 32]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _24402 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_24402))
            staticcall address(_24402).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _24452 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _24500 = mem[_24452]
            if 0 >= mem[96]:
                revert with 0, 50
            _24618 = mem[128]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_24618))
            call address(_24618).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _24668 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_24668] == bool(mem[_24668])
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _24835 = mem[96]
            mem[mem[64] + 164] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 196
            while idx < mem[96]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[mem[64] + 100] = this.address
            mem[mem[64] + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len 96], address(this.address), block.timestamp, mem[mem[64] + 164 len (32 * _24835) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _27617 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_27617))
            staticcall address(_27617).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _27667 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _27692 = mem[_27667]
            if mem[_27667] < _24500:
                revert with 0, 17
            if _24330 < mem[_27667] - _24500:
                revert with 0, 17
            if _24330 - mem[_27667] + _24500 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _24330:
                revert with 0, 18
            if mem[_27667] < _24500:
                revert with 0, 17
            _27956 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _27692 - _24500
            mem[mem[64] + 36] = 64
            _28027 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 100
            while idx < _28027:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _27956 + (32 * _28027) + -mem[64] + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _30211 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _30353 = mem[_30211]
            require mem[_30211] <= test266151307()
            require _30211 + return_data.size > _30211 + mem[_30211] + 31
            _30403 = mem[_30211 + mem[_30211]]
            if mem[_30211 + mem[_30211]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_30211 + mem[_30211]]) + 1 < 0 or _30211 + ceil32(return_data.size) + ceil32(32 * mem[_30211 + mem[_30211]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _30211 + ceil32(return_data.size) + ceil32(32 * mem[_30211 + mem[_30211]]) + 1
            mem[_30211 + ceil32(return_data.size)] = _30403
            require _30353 + (32 * _30403) + 32 <= return_data.size
            mem[_30211 + ceil32(return_data.size) + 32 len ceil32(32 * _30403)] = mem[_30211 + _30353 + 32 len ceil32(32 * _30403)]
            if _30403 < 1:
                revert with 0, 17
            if _30403 - 1 >= _30403:
                revert with 0, 50
            _32562 = mem[(32 * _30403 - 1) + _30211 + ceil32(return_data.size) + 32]
            if 0 >= mem[96]:
                revert with 0, 50
            _32703 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_32703))
            staticcall address(_32703).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _32755 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _32803 = mem[_32755]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _32875 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_32875))
            call address(_32875).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _32924 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_32924] == bool(mem[_32924])
            if _27692 < _24500:
                revert with 0, 17
            _32972 = mem[64]
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _27692 - _24500
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _33020 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 196
            while idx < _33020:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_32972 + 100] = this.address
            mem[_32972 + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _32972 + (32 * _33020) + -mem[64] + 192]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[96]:
                revert with 0, 50
            _34337 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_34337))
            staticcall address(_34337).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _34387 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if mem[_34387] < _32803:
                revert with 0, 17
            if _32562 < mem[_34387] - _32803:
                revert with 0, 17
            if _32562 - mem[_34387] + _32803 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _32562:
                revert with 0, 18
            return (100 * _24330) - (100 * _27692) + (100 * _24500) / _24330, 
                   (100 * _32562) - (100 * mem[_34387]) + (100 * _32803) / _32562,
                   cd[36]
        mem[mem[64] + 4] = _16900
        mem[mem[64] + 36] = 64
        _16964 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 100
        while idx < _16964:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args _16900, 64, mem[mem[64] + 68 len (32 * _16964) + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _20708 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _20756 = mem[_20708]
        require mem[_20708] <= test266151307()
        require _20708 + return_data.size > _20708 + mem[_20708] + 31
        _20804 = mem[_20708 + mem[_20708]]
        if mem[_20708 + mem[_20708]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_20708 + mem[_20708]]) + 1 < 0 or _20708 + ceil32(return_data.size) + ceil32(32 * mem[_20708 + mem[_20708]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _20708 + ceil32(return_data.size) + ceil32(32 * mem[_20708 + mem[_20708]]) + 1
        mem[_20708 + ceil32(return_data.size)] = _20804
        require _20756 + (32 * _20804) + 32 <= return_data.size
        mem[_20708 + ceil32(return_data.size) + 32 len ceil32(32 * _20804)] = mem[_20708 + _20756 + 32 len ceil32(32 * _20804)]
        if _20804 < 1:
            revert with 0, 17
        if _20804 - 1 >= _20804:
            revert with 0, 50
        _24332 = mem[(32 * _20804 - 1) + _20708 + ceil32(return_data.size) + 32]
        _24428 = mem[64]
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _24332
        mem[mem[64] + 36] = 64
        _24476 = mem[96]
        mem[mem[64] + 68] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 100
        while idx < _24476:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _24428 + (32 * _24476) + -mem[64] + 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _27500 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _27620 = mem[_27500]
        require mem[_27500] <= test266151307()
        require _27500 + return_data.size > _27500 + mem[_27500] + 31
        _27668 = mem[_27500 + mem[_27500]]
        if mem[_27500 + mem[_27500]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_27500 + mem[_27500]]) + 1 < 0 or _27500 + ceil32(return_data.size) + ceil32(32 * mem[_27500 + mem[_27500]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _27500 + ceil32(return_data.size) + ceil32(32 * mem[_27500 + mem[_27500]]) + 1
        mem[_27500 + ceil32(return_data.size)] = _27668
        require _27620 + (32 * _27668) + 32 <= return_data.size
        mem[_27500 + ceil32(return_data.size) + 32 len ceil32(32 * _27668)] = mem[_27500 + _27620 + 32 len ceil32(32 * _27668)]
        if _27668 < 1:
            revert with 0, 17
        if _27668 - 1 >= _27668:
            revert with 0, 50
        _30259 = mem[(32 * _27668 - 1) + _27500 + ceil32(return_data.size) + 32]
        if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
            revert with 0, 50
        _30354 = mem[ceil32(32 * ('cd', 68).length) + 129]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_30354))
        staticcall address(_30354).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _30404 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _30428 = mem[_30404]
        if 0 >= mem[96]:
            revert with 0, 50
        _30546 = mem[128]
        mem[mem[64] + 4] = address(cd[4])
        mem[mem[64] + 36] = -1
        require ext_code.size(address(_30546))
        call address(_30546).approve(address arg1, uint256 arg2) with:
             gas gas_remaining wei
            args address(cd[4]), -1
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _30572 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_30572] == bool(mem[_30572])
        _30692 = mem[64]
        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _24332
        mem[mem[64] + 36] = 1
        mem[mem[64] + 68] = 160
        _30836 = mem[96]
        mem[mem[64] + 164] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 196
        while idx < _30836:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[_30692 + 100] = this.address
        mem[_30692 + 132] = block.timestamp
        require ext_code.size(address(cd[4]))
        call address(cd[4]).mem[mem[64] len 4] with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len _30692 + (32 * _30836) + -mem[64] + 192]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
            revert with 0, 50
        _32706 = mem[ceil32(32 * ('cd', 68).length) + 129]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_32706))
        staticcall address(_32706).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _32756 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _32804 = mem[_32756]
        if mem[_32756] < _30428:
            revert with 0, 17
        if _30259 < mem[_32756] - _30428:
            revert with 0, 17
        if _30259 - mem[_32756] + _30428 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
            revert with 0, 17
        if not _30259:
            revert with 0, 18
        if mem[_32756] < _30428:
            revert with 0, 17
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _32804 - _30428
        mem[mem[64] + 36] = 64
        _33044 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 100
        while idx < _33044:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args _32804 - _30428, 64, mem[mem[64] + 68 len (32 * _33044) + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _34220 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _34340 = mem[_34220]
        require mem[_34220] <= test266151307()
        require _34220 + return_data.size > _34220 + mem[_34220] + 31
        _34388 = mem[_34220 + mem[_34220]]
        if mem[_34220 + mem[_34220]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_34220 + mem[_34220]]) + 1 < 0 or _34220 + ceil32(return_data.size) + ceil32(32 * mem[_34220 + mem[_34220]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _34220 + ceil32(return_data.size) + ceil32(32 * mem[_34220 + mem[_34220]]) + 1
        mem[_34220 + ceil32(return_data.size)] = _34388
        require _34340 + (32 * _34388) + 32 <= return_data.size
        mem[_34220 + ceil32(return_data.size) + 32 len ceil32(32 * _34388)] = mem[_34220 + _34340 + 32 len ceil32(32 * _34388)]
        if _34388 < 1:
            revert with 0, 17
        if _34388 - 1 >= _34388:
            revert with 0, 50
        _35275 = mem[(32 * _34388 - 1) + _34220 + ceil32(return_data.size) + 32]
        if 0 >= mem[96]:
            revert with 0, 50
        _35346 = mem[128]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_35346))
        staticcall address(_35346).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _35372 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _35396 = mem[_35372]
        if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
            revert with 0, 50
        _35467 = mem[ceil32(32 * ('cd', 68).length) + 129]
        mem[mem[64] + 4] = address(cd[4])
        mem[mem[64] + 36] = -1
        require ext_code.size(address(_35467))
        call address(_35467).approve(address arg1, uint256 arg2) with:
             gas gas_remaining wei
            args address(cd[4]), -1
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _35516 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_35516] == bool(mem[_35516])
        if _32804 < _30428:
            revert with 0, 17
        _35564 = mem[64]
        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _32804 - _30428
        mem[mem[64] + 36] = 1
        mem[mem[64] + 68] = 160
        _35588 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 196
        while idx < _35588:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[_35564 + 100] = this.address
        mem[_35564 + 132] = block.timestamp
        require ext_code.size(address(cd[4]))
        call address(cd[4]).mem[mem[64] len 4] with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len _35564 + (32 * _35588) + -mem[64] + 192]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        if 0 >= mem[96]:
            revert with 0, 50
        _35970 = mem[128]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_35970))
        staticcall address(_35970).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _35996 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if mem[_35996] < _35396:
            revert with 0, 17
        if _35275 < mem[_35996] - _35396:
            revert with 0, 17
        if _35275 - mem[_35996] + _35396 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
            revert with 0, 17
        if not _35275:
            revert with 0, 18
        return (100 * _30259) - (100 * _32804) + (100 * _30428) / _30259, 
               (100 * _35275) - (100 * mem[_35996]) + (100 * _35396) / _35275,
               _24332
    require ext_code.size(address(_16866))
    staticcall address(_16866).maxTxAmount() with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        if _16843 >= _16843:
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 64
            _16986 = mem[96]
            mem[mem[64] + 68] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 100
            while idx < mem[96]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len (32 * _16986) + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _20703 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _20751 = mem[_20703]
            require mem[_20703] <= test266151307()
            require _20703 + return_data.size > _20703 + mem[_20703] + 31
            _20799 = mem[_20703 + mem[_20703]]
            if mem[_20703 + mem[_20703]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_20703 + mem[_20703]]) + 1 < 0 or _20703 + ceil32(return_data.size) + ceil32(32 * mem[_20703 + mem[_20703]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _20703 + ceil32(return_data.size) + ceil32(32 * mem[_20703 + mem[_20703]]) + 1
            mem[_20703 + ceil32(return_data.size)] = _20799
            require _20751 + (32 * _20799) + 32 <= return_data.size
            mem[_20703 + ceil32(return_data.size) + 32 len ceil32(32 * _20799)] = mem[_20703 + _20751 + 32 len ceil32(32 * _20799)]
            if _20799 < 1:
                revert with 0, 17
            if _20799 - 1 >= _20799:
                revert with 0, 50
            _24324 = mem[(32 * _20799 - 1) + _20703 + ceil32(return_data.size) + 32]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _24396 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_24396))
            staticcall address(_24396).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _24450 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _24498 = mem[_24450]
            if 0 >= mem[96]:
                revert with 0, 50
            _24612 = mem[128]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_24612))
            call address(_24612).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _24666 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_24666] == bool(mem[_24666])
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[36]
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _24831 = mem[96]
            mem[mem[64] + 164] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 196
            while idx < mem[96]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[mem[64] + 100] = this.address
            mem[mem[64] + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len 96], address(this.address), block.timestamp, mem[mem[64] + 164 len (32 * _24831) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _27609 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_27609))
            staticcall address(_27609).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _27663 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _27690 = mem[_27663]
            if mem[_27663] < _24498:
                revert with 0, 17
            if _24324 < mem[_27663] - _24498:
                revert with 0, 17
            if _24324 - mem[_27663] + _24498 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _24324:
                revert with 0, 18
            if mem[_27663] < _24498:
                revert with 0, 17
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _27690 - _24498
            mem[mem[64] + 36] = 64
            _28023 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 100
            while idx < _28023:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args _27690 - _24498, 64, mem[mem[64] + 68 len (32 * _28023) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _30207 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _30345 = mem[_30207]
            require mem[_30207] <= test266151307()
            require _30207 + return_data.size > _30207 + mem[_30207] + 31
            _30399 = mem[_30207 + mem[_30207]]
            if mem[_30207 + mem[_30207]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_30207 + mem[_30207]]) + 1 < 0 or _30207 + ceil32(return_data.size) + ceil32(32 * mem[_30207 + mem[_30207]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _30207 + ceil32(return_data.size) + ceil32(32 * mem[_30207 + mem[_30207]]) + 1
            mem[_30207 + ceil32(return_data.size)] = _30399
            require _30345 + (32 * _30399) + 32 <= return_data.size
            mem[_30207 + ceil32(return_data.size) + 32 len ceil32(32 * _30399)] = mem[_30207 + _30345 + 32 len ceil32(32 * _30399)]
            if _30399 < 1:
                revert with 0, 17
            if _30399 - 1 >= _30399:
                revert with 0, 50
            _32556 = mem[(32 * _30399 - 1) + _30207 + ceil32(return_data.size) + 32]
            if 0 >= mem[96]:
                revert with 0, 50
            _32691 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_32691))
            staticcall address(_32691).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _32751 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _32799 = mem[_32751]
            if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
                revert with 0, 50
            _32871 = mem[ceil32(32 * ('cd', 68).length) + 129]
            mem[mem[64] + 4] = address(cd[4])
            mem[mem[64] + 36] = -1
            require ext_code.size(address(_32871))
            call address(_32871).approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(cd[4]), -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _32922 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_32922] == bool(mem[_32922])
            if _27690 < _24498:
                revert with 0, 17
            _32970 = mem[64]
            mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _27690 - _24498
            mem[mem[64] + 36] = 1
            mem[mem[64] + 68] = 160
            _33018 = mem[ceil32(32 * ('cd', 68).length) + 97]
            mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
            idx = 0
            s = ceil32(32 * ('cd', 68).length) + 129
            t = mem[64] + 196
            while idx < _33018:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_32970 + 100] = this.address
            mem[_32970 + 132] = block.timestamp
            require ext_code.size(address(cd[4]))
            call address(cd[4]).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _32970 + (32 * _33018) + -mem[64] + 192]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if 0 >= mem[96]:
                revert with 0, 50
            _34329 = mem[128]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_34329))
            staticcall address(_34329).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _34383 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if mem[_34383] < _32799:
                revert with 0, 17
            if _32556 < mem[_34383] - _32799:
                revert with 0, 17
            if _32556 - mem[_34383] + _32799 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if not _32556:
                revert with 0, 18
            return (100 * _24324) - (100 * _27690) + (100 * _24498) / _24324, 
                   (100 * _32556) - (100 * mem[_34383]) + (100 * _32799) / _32556,
                   cd[36]
        mem[mem[64] + 4] = _16843
        mem[mem[64] + 36] = 64
        _16948 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 100
        while idx < _16948:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args _16843, 64, mem[mem[64] + 68 len (32 * _16948) + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _20704 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _20752 = mem[_20704]
        require mem[_20704] <= test266151307()
        require _20704 + return_data.size > _20704 + mem[_20704] + 31
        _20800 = mem[_20704 + mem[_20704]]
        if mem[_20704 + mem[_20704]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_20704 + mem[_20704]]) + 1 < 0 or _20704 + ceil32(return_data.size) + ceil32(32 * mem[_20704 + mem[_20704]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _20704 + ceil32(return_data.size) + ceil32(32 * mem[_20704 + mem[_20704]]) + 1
        mem[_20704 + ceil32(return_data.size)] = _20800
        require _20752 + (32 * _20800) + 32 <= return_data.size
        mem[_20704 + ceil32(return_data.size) + 32 len ceil32(32 * _20800)] = mem[_20704 + _20752 + 32 len ceil32(32 * _20800)]
        if _20800 < 1:
            revert with 0, 17
        if _20800 - 1 >= _20800:
            revert with 0, 50
        _24326 = mem[(32 * _20800 - 1) + _20704 + ceil32(return_data.size) + 32]
        _24426 = mem[64]
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _24326
        mem[mem[64] + 36] = 64
        _24474 = mem[96]
        mem[mem[64] + 68] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 100
        while idx < _24474:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _24426 + (32 * _24474) + -mem[64] + 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _27498 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _27612 = mem[_27498]
        require mem[_27498] <= test266151307()
        require _27498 + return_data.size > _27498 + mem[_27498] + 31
        _27664 = mem[_27498 + mem[_27498]]
        if mem[_27498 + mem[_27498]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_27498 + mem[_27498]]) + 1 < 0 or _27498 + ceil32(return_data.size) + ceil32(32 * mem[_27498 + mem[_27498]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _27498 + ceil32(return_data.size) + ceil32(32 * mem[_27498 + mem[_27498]]) + 1
        mem[_27498 + ceil32(return_data.size)] = _27664
        require _27612 + (32 * _27664) + 32 <= return_data.size
        mem[_27498 + ceil32(return_data.size) + 32 len ceil32(32 * _27664)] = mem[_27498 + _27612 + 32 len ceil32(32 * _27664)]
        if _27664 < 1:
            revert with 0, 17
        if _27664 - 1 >= _27664:
            revert with 0, 50
        _30255 = mem[(32 * _27664 - 1) + _27498 + ceil32(return_data.size) + 32]
        if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
            revert with 0, 50
        _30346 = mem[ceil32(32 * ('cd', 68).length) + 129]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_30346))
        staticcall address(_30346).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _30400 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _30426 = mem[_30400]
        if 0 >= mem[96]:
            revert with 0, 50
        _30538 = mem[128]
        mem[mem[64] + 4] = address(cd[4])
        mem[mem[64] + 36] = -1
        require ext_code.size(address(_30538))
        call address(_30538).approve(address arg1, uint256 arg2) with:
             gas gas_remaining wei
            args address(cd[4]), -1
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _30570 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_30570] == bool(mem[_30570])
        _30688 = mem[64]
        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _24326
        mem[mem[64] + 36] = 1
        mem[mem[64] + 68] = 160
        _30828 = mem[96]
        mem[mem[64] + 164] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 196
        while idx < _30828:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[_30688 + 100] = this.address
        mem[_30688 + 132] = block.timestamp
        require ext_code.size(address(cd[4]))
        call address(cd[4]).mem[mem[64] len 4] with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len _30688 + (32 * _30828) + -mem[64] + 192]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
            revert with 0, 50
        _32694 = mem[ceil32(32 * ('cd', 68).length) + 129]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_32694))
        staticcall address(_32694).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _32752 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _32800 = mem[_32752]
        if mem[_32752] < _30426:
            revert with 0, 17
        if _30255 < mem[_32752] - _30426:
            revert with 0, 17
        if _30255 - mem[_32752] + _30426 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
            revert with 0, 17
        if not _30255:
            revert with 0, 18
        if mem[_32752] < _30426:
            revert with 0, 17
        _32994 = mem[64]
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _32800 - _30426
        mem[mem[64] + 36] = 64
        _33042 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 100
        while idx < _33042:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _32994 + (32 * _33042) + -mem[64] + 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _34218 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _34332 = mem[_34218]
        require mem[_34218] <= test266151307()
        require _34218 + return_data.size > _34218 + mem[_34218] + 31
        _34384 = mem[_34218 + mem[_34218]]
        if mem[_34218 + mem[_34218]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_34218 + mem[_34218]]) + 1 < 0 or _34218 + ceil32(return_data.size) + ceil32(32 * mem[_34218 + mem[_34218]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _34218 + ceil32(return_data.size) + ceil32(32 * mem[_34218 + mem[_34218]]) + 1
        mem[_34218 + ceil32(return_data.size)] = _34384
        require _34332 + (32 * _34384) + 32 <= return_data.size
        mem[_34218 + ceil32(return_data.size) + 32 len ceil32(32 * _34384)] = mem[_34218 + _34332 + 32 len ceil32(32 * _34384)]
        var225002 = _34218 + ceil32(return_data.size) + ceil32(32 * _34384) + 32
        if _34384 < 1:
            revert with 0, 17
        if _34384 - 1 >= _34384:
            revert with 0, 50
        _35271 = mem[(32 * _34384 - 1) + _34218 + ceil32(return_data.size) + 32]
        if 0 >= mem[96]:
            revert with 0, 50
        _35340 = mem[128]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_35340))
        staticcall address(_35340).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _35370 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _35394 = mem[_35370]
        if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
            revert with 0, 50
        _35463 = mem[ceil32(32 * ('cd', 68).length) + 129]
        mem[mem[64] + 4] = address(cd[4])
        mem[mem[64] + 36] = -1
        require ext_code.size(address(_35463))
        call address(_35463).approve(address arg1, uint256 arg2) with:
             gas gas_remaining wei
            args address(cd[4]), -1
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _35514 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_35514] == bool(mem[_35514])
        if _32800 < _30426:
            revert with 0, 17
        _35562 = mem[64]
        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _32800 - _30426
        mem[mem[64] + 36] = 1
        mem[mem[64] + 68] = 160
        _35586 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 196
        while idx < _35586:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[_35562 + 100] = this.address
        mem[_35562 + 132] = block.timestamp
        require ext_code.size(address(cd[4]))
        call address(cd[4]).mem[mem[64] len 4] with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len _35562 + (32 * _35586) + -mem[64] + 192]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        if 0 >= mem[96]:
            revert with 0, 50
        _35964 = mem[128]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_35964))
        staticcall address(_35964).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _35994 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if mem[_35994] < _35394:
            revert with 0, 17
        if _35271 < mem[_35994] - _35394:
            revert with 0, 17
        if _35271 - mem[_35994] + _35394 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
            revert with 0, 17
        if not _35271:
            revert with 0, 18
        return (100 * _30255) - (100 * _32800) + (100 * _30426) / _30255, 
               (100 * _35271) - (100 * mem[_35994]) + (100 * _35394) / _35271,
               _24326
    _16908 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _16916 = mem[_16908]
    if mem[_16908] >= _16843:
        _17035 = mem[64]
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = cd[36]
        mem[mem[64] + 36] = 64
        _17083 = mem[96]
        mem[mem[64] + 68] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 100
        while idx < _17083:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _17035 + (32 * _17083) + -mem[64] + 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _20705 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _20753 = mem[_20705]
        require mem[_20705] <= test266151307()
        require _20705 + return_data.size > _20705 + mem[_20705] + 31
        _20801 = mem[_20705 + mem[_20705]]
        if mem[_20705 + mem[_20705]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_20705 + mem[_20705]]) + 1 < 0 or _20705 + ceil32(return_data.size) + ceil32(32 * mem[_20705 + mem[_20705]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _20705 + ceil32(return_data.size) + ceil32(32 * mem[_20705 + mem[_20705]]) + 1
        mem[_20705 + ceil32(return_data.size)] = _20801
        require _20753 + (32 * _20801) + 32 <= return_data.size
        mem[_20705 + ceil32(return_data.size) + 32 len ceil32(32 * _20801)] = mem[_20705 + _20753 + 32 len ceil32(32 * _20801)]
        var126002 = _20705 + ceil32(return_data.size) + ceil32(32 * _20801) + 32
        if _20801 < 1:
            revert with 0, 17
        if _20801 - 1 >= _20801:
            revert with 0, 50
        _24327 = mem[(32 * _20801 - 1) + _20705 + ceil32(return_data.size) + 32]
        if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
            revert with 0, 50
        _24399 = mem[ceil32(32 * ('cd', 68).length) + 129]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_24399))
        staticcall address(_24399).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _24451 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _24499 = mem[_24451]
        if 0 >= mem[96]:
            revert with 0, 50
        _24615 = mem[128]
        mem[mem[64] + 4] = address(cd[4])
        mem[mem[64] + 36] = -1
        require ext_code.size(address(_24615))
        call address(_24615).approve(address arg1, uint256 arg2) with:
             gas gas_remaining wei
            args address(cd[4]), -1
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _24667 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_24667] == bool(mem[_24667])
        _24787 = mem[64]
        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = cd[36]
        mem[mem[64] + 36] = 1
        mem[mem[64] + 68] = 160
        _24833 = mem[96]
        mem[mem[64] + 164] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 196
        while idx < _24833:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[_24787 + 100] = this.address
        mem[_24787 + 132] = block.timestamp
        require ext_code.size(address(cd[4]))
        call address(cd[4]).mem[mem[64] len 4] with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len _24787 + (32 * _24833) + -mem[64] + 192]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
            revert with 0, 50
        _27613 = mem[ceil32(32 * ('cd', 68).length) + 129]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_27613))
        staticcall address(_27613).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _27665 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _27691 = mem[_27665]
        if mem[_27665] < _24499:
            revert with 0, 17
        if _24327 < mem[_27665] - _24499:
            revert with 0, 17
        if _24327 - mem[_27665] + _24499 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
            revert with 0, 17
        if not _24327:
            revert with 0, 18
        if mem[_27665] < _24499:
            revert with 0, 17
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _27691 - _24499
        mem[mem[64] + 36] = 64
        _28025 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 100
        while idx < _28025:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args _27691 - _24499, 64, mem[mem[64] + 68 len (32 * _28025) + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _30209 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _30349 = mem[_30209]
        require mem[_30209] <= test266151307()
        require _30209 + return_data.size > _30209 + mem[_30209] + 31
        _30401 = mem[_30209 + mem[_30209]]
        if mem[_30209 + mem[_30209]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_30209 + mem[_30209]]) + 1 < 0 or _30209 + ceil32(return_data.size) + ceil32(32 * mem[_30209 + mem[_30209]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _30209 + ceil32(return_data.size) + ceil32(32 * mem[_30209 + mem[_30209]]) + 1
        mem[_30209 + ceil32(return_data.size)] = _30401
        require _30349 + (32 * _30401) + 32 <= return_data.size
        mem[_30209 + ceil32(return_data.size) + 32 len ceil32(32 * _30401)] = mem[_30209 + _30349 + 32 len ceil32(32 * _30401)]
        var201002 = _30209 + ceil32(return_data.size) + ceil32(32 * _30401) + 32
        if _30401 < 1:
            revert with 0, 17
        if _30401 - 1 >= _30401:
            revert with 0, 50
        _32559 = mem[(32 * _30401 - 1) + _30209 + ceil32(return_data.size) + 32]
        if 0 >= mem[96]:
            revert with 0, 50
        _32697 = mem[128]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_32697))
        staticcall address(_32697).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _32753 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _32801 = mem[_32753]
        if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
            revert with 0, 50
        _32873 = mem[ceil32(32 * ('cd', 68).length) + 129]
        mem[mem[64] + 4] = address(cd[4])
        mem[mem[64] + 36] = -1
        require ext_code.size(address(_32873))
        call address(_32873).approve(address arg1, uint256 arg2) with:
             gas gas_remaining wei
            args address(cd[4]), -1
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _32923 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_32923] == bool(mem[_32923])
        if _27691 < _24499:
            revert with 0, 17
        _32971 = mem[64]
        mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _27691 - _24499
        mem[mem[64] + 36] = 1
        mem[mem[64] + 68] = 160
        _33019 = mem[ceil32(32 * ('cd', 68).length) + 97]
        mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 68).length) + 129
        t = mem[64] + 196
        while idx < _33019:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[_32971 + 100] = this.address
        mem[_32971 + 132] = block.timestamp
        require ext_code.size(address(cd[4]))
        call address(cd[4]).mem[mem[64] len 4] with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len _32971 + (32 * _33019) + -mem[64] + 192]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        if 0 >= mem[96]:
            revert with 0, 50
        _34333 = mem[128]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_34333))
        staticcall address(_34333).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _34385 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if mem[_34385] < _32801:
            revert with 0, 17
        if _32559 < mem[_34385] - _32801:
            revert with 0, 17
        if _32559 - mem[_34385] + _32801 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
            revert with 0, 17
        if not _32559:
            revert with 0, 18
        return (100 * _24327) - (100 * _27691) + (100 * _24499) / _24327, 
               (100 * _32559) - (100 * mem[_34385]) + (100 * _32801) / _32559,
               cd[36]
    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = _16916
    mem[mem[64] + 36] = 64
    _17036 = mem[ceil32(32 * ('cd', 68).length) + 97]
    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
    idx = 0
    s = ceil32(32 * ('cd', 68).length) + 129
    t = mem[64] + 100
    while idx < _17036:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
            gas gas_remaining wei
           args _16916, 64, mem[mem[64] + 68 len (32 * _17036) + 32]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _20706 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _20754 = mem[_20706]
    require mem[_20706] <= test266151307()
    require _20706 + return_data.size > _20706 + mem[_20706] + 31
    _20802 = mem[_20706 + mem[_20706]]
    if mem[_20706 + mem[_20706]] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[_20706 + mem[_20706]]) + 1 < 0 or _20706 + ceil32(return_data.size) + ceil32(32 * mem[_20706 + mem[_20706]]) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _20706 + ceil32(return_data.size) + ceil32(32 * mem[_20706 + mem[_20706]]) + 1
    mem[_20706 + ceil32(return_data.size)] = _20802
    require _20754 + (32 * _20802) + 32 <= return_data.size
    mem[_20706 + ceil32(return_data.size) + 32 len ceil32(32 * _20802)] = mem[_20706 + _20754 + 32 len ceil32(32 * _20802)]
    if _20802 < 1:
        revert with 0, 17
    if _20802 - 1 >= _20802:
        revert with 0, 50
    _24329 = mem[(32 * _20802 - 1) + _20706 + ceil32(return_data.size) + 32]
    _24427 = mem[64]
    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = _24329
    mem[mem[64] + 36] = 64
    _24475 = mem[96]
    mem[mem[64] + 68] = mem[96]
    idx = 0
    s = 128
    t = mem[64] + 100
    while idx < _24475:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).mem[mem[64] len 4] with:
            gas gas_remaining wei
           args mem[mem[64] + 4 len _24427 + (32 * _24475) + -mem[64] + 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _27499 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _27616 = mem[_27499]
    require mem[_27499] <= test266151307()
    require _27499 + return_data.size > _27499 + mem[_27499] + 31
    _27666 = mem[_27499 + mem[_27499]]
    if mem[_27499 + mem[_27499]] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[_27499 + mem[_27499]]) + 1 < 0 or _27499 + ceil32(return_data.size) + ceil32(32 * mem[_27499 + mem[_27499]]) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _27499 + ceil32(return_data.size) + ceil32(32 * mem[_27499 + mem[_27499]]) + 1
    mem[_27499 + ceil32(return_data.size)] = _27666
    require _27616 + (32 * _27666) + 32 <= return_data.size
    mem[_27499 + ceil32(return_data.size) + 32 len ceil32(32 * _27666)] = mem[_27499 + _27616 + 32 len ceil32(32 * _27666)]
    if _27666 < 1:
        revert with 0, 17
    if _27666 - 1 >= _27666:
        revert with 0, 50
    _30257 = mem[(32 * _27666 - 1) + _27499 + ceil32(return_data.size) + 32]
    if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
        revert with 0, 50
    _30350 = mem[ceil32(32 * ('cd', 68).length) + 129]
    mem[mem[64] + 4] = this.address
    require ext_code.size(address(_30350))
    staticcall address(_30350).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _30402 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _30427 = mem[_30402]
    if 0 >= mem[96]:
        revert with 0, 50
    _30542 = mem[128]
    mem[mem[64] + 4] = address(cd[4])
    mem[mem[64] + 36] = -1
    require ext_code.size(address(_30542))
    call address(_30542).approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args address(cd[4]), -1
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _30571 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    require mem[_30571] == bool(mem[_30571])
    mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = _24329
    mem[mem[64] + 36] = 1
    mem[mem[64] + 68] = 160
    _30832 = mem[96]
    mem[mem[64] + 164] = mem[96]
    idx = 0
    s = 128
    t = mem[64] + 196
    while idx < mem[96]:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[mem[64] + 100] = this.address
    mem[mem[64] + 132] = block.timestamp
    require ext_code.size(address(cd[4]))
    call address(cd[4]).mem[mem[64] len 4] with:
         gas gas_remaining wei
        args mem[mem[64] + 4 len 96], address(this.address), block.timestamp, mem[mem[64] + 164 len (32 * _30832) + 32]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
        revert with 0, 50
    _32700 = mem[ceil32(32 * ('cd', 68).length) + 129]
    mem[mem[64] + 4] = this.address
    require ext_code.size(address(_32700))
    staticcall address(_32700).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _32754 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _32802 = mem[_32754]
    if mem[_32754] < _30427:
        revert with 0, 17
    if _30257 < mem[_32754] - _30427:
        revert with 0, 17
    if _30257 - mem[_32754] + _30427 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
        revert with 0, 17
    if not _30257:
        revert with 0, 18
    if mem[_32754] < _30427:
        revert with 0, 17
    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = _32802 - _30427
    mem[mem[64] + 36] = 64
    _33043 = mem[ceil32(32 * ('cd', 68).length) + 97]
    mem[mem[64] + 68] = mem[ceil32(32 * ('cd', 68).length) + 97]
    idx = 0
    s = ceil32(32 * ('cd', 68).length) + 129
    t = mem[64] + 100
    while idx < _33043:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).getAmountsOut(uint256 arg1, address[] arg2) with:
            gas gas_remaining wei
           args _32802 - _30427, 64, mem[mem[64] + 68 len (32 * _33043) + 32]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _34219 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _34336 = mem[_34219]
    require mem[_34219] <= test266151307()
    require _34219 + return_data.size > _34219 + mem[_34219] + 31
    _34386 = mem[_34219 + mem[_34219]]
    if mem[_34219 + mem[_34219]] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[_34219 + mem[_34219]]) + 1 < 0 or _34219 + ceil32(return_data.size) + ceil32(32 * mem[_34219 + mem[_34219]]) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _34219 + ceil32(return_data.size) + ceil32(32 * mem[_34219 + mem[_34219]]) + 1
    mem[_34219 + ceil32(return_data.size)] = _34386
    require _34336 + (32 * _34386) + 32 <= return_data.size
    mem[_34219 + ceil32(return_data.size) + 32 len ceil32(32 * _34386)] = mem[_34219 + _34336 + 32 len ceil32(32 * _34386)]
    if _34386 < 1:
        revert with 0, 17
    if _34386 - 1 >= _34386:
        revert with 0, 50
    _35273 = mem[(32 * _34386 - 1) + _34219 + ceil32(return_data.size) + 32]
    if 0 >= mem[96]:
        revert with 0, 50
    _35343 = mem[128]
    mem[mem[64] + 4] = this.address
    require ext_code.size(address(_35343))
    staticcall address(_35343).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _35371 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _35395 = mem[_35371]
    if 0 >= mem[ceil32(32 * ('cd', 68).length) + 97]:
        revert with 0, 50
    _35465 = mem[ceil32(32 * ('cd', 68).length) + 129]
    mem[mem[64] + 4] = address(cd[4])
    mem[mem[64] + 36] = -1
    require ext_code.size(address(_35465))
    call address(_35465).approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args address(cd[4]), -1
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _35515 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    require mem[_35515] == bool(mem[_35515])
    if _32802 < _30427:
        revert with 0, 17
    mem[mem[64]] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = _32802 - _30427
    mem[mem[64] + 36] = 1
    mem[mem[64] + 68] = 160
    _35587 = mem[ceil32(32 * ('cd', 68).length) + 97]
    mem[mem[64] + 164] = mem[ceil32(32 * ('cd', 68).length) + 97]
    idx = 0
    s = ceil32(32 * ('cd', 68).length) + 129
    t = mem[64] + 196
    while idx < _35587:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[mem[64] + 100] = this.address
    mem[mem[64] + 132] = block.timestamp
    require ext_code.size(address(cd[4]))
    call address(cd[4]).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
         gas gas_remaining wei
        args _32802 - _30427, 1, 160, address(this.address), block.timestamp, mem[mem[64] + 164 len (32 * _35587) + 32]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    if 0 >= mem[96]:
        revert with 0, 50
    _35967 = mem[128]
    mem[mem[64] + 4] = this.address
    require ext_code.size(address(_35967))
    staticcall address(_35967).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _35995 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    if mem[_35995] < _35395:
        revert with 0, 17
    if _35273 < mem[_35995] - _35395:
        revert with 0, 17
    if _35273 - mem[_35995] + _35395 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
        revert with 0, 17
    if not _35273:
        revert with 0, 18
    return (100 * _30257) - (100 * _32802) + (100 * _30427) / _30257, 
           (100 * _35273) - (100 * mem[_35995]) + (100 * _35395) / _35273,
           _24329
}



}
