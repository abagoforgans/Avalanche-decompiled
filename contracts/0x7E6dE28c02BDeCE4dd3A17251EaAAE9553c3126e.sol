contract main {




// =====================  Runtime code  =====================


#
#  - safeTransferFrom(address arg1, address arg2, uint256 arg3, bytes arg4)
#
array of struct stor0;
array of struct stor1;
mapping of address ownerOf;
mapping of uint256 balanceOf;
mapping of address approved;
mapping of uint8 stor5;
mapping of uint256 tokenOfOwnerByIndex;
mapping of uint256 stor7;
array of uint256 tokenByIndex;
mapping of uint256 stor9;
address owner;
array of struct stor11;
array of struct stor12;
uint256 maxSupply;
uint256 timeDeployed;
uint256 allowMintingAfter;
uint8 isPaused; offset 160
uint128 stor16; offset 160
address sub_9fc8da1fAddress;
array of uint256 stor17;
array of uint256 sub_cdc4878b;
array of uint256 nodeType;
array of uint256 sub_0a165fdc;
array of uint256 stor29;
array of uint256 sub_6187b33e;

function getApproved(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not ownerOf[arg1]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: approved query for nonexistent token'
    return approved[arg1]
}

function sub_0a165fdc(?) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require arg1 < 5
    return sub_0a165fdc[arg1]
}

function totalSupply() {
    return tokenByIndex.length
}

function timeDeployed() {
    return timeDeployed
}

function nodeType(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return nodeType[arg1]
}

function tokenOfOwnerByIndex(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: balance query for the zero address'
    if arg2 >= balanceOf[address(arg1)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721Enumerable: owner index out of bounds'
    return tokenOfOwnerByIndex[address(arg1)][arg2]
}

function tokenByIndex(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if arg1 >= tokenByIndex.length:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721Enumerable: global index out of bounds'
    return tokenByIndex[arg1]
}

function sub_6187b33e(?) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require arg1 < 5
    return sub_6187b33e[arg1]
}

function ownerOf(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not ownerOf[arg1]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: owner query for nonexistent token'
    return ownerOf[arg1]
}

function rewardPool() {
    return address(stor17.length)
}

function balanceOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: balance query for the zero address'
    return balanceOf[address(arg1)]
}

function allowMintingAfter() {
    return allowMintingAfter
}

function owner() {
    return owner
}

function tax() {
    return stor29.length
}

function sub_9fc8da1f(?) {
    return sub_9fc8da1fAddress
}

function isPaused() {
    return bool(isPaused)
}

function sub_cdc4878b(?) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require arg1 < 5
    return sub_cdc4878b[arg1]
}

function maxSupply() {
    return maxSupply
}

function isApprovedForAll(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return bool(stor5[address(arg1)][address(arg2)])
}

function _fallback() payable {
    revert
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    owner = 0
    emit OwnershipTransferred(owner, 0);
}

function updateTax(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor29.length = arg1
}

function setIsPaused(bool arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor16 = Mask(96, 0, arg1)
}

function setRewardPool(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    address(stor17.length) = arg1
}

function getSecondsUntilMinting() {
    if block.timestamp >= allowMintingAfter:
        return 0
    if allowMintingAfter < block.timestamp:
        revert with 'NH{q', 17
    return (allowMintingAfter - block.timestamp)
}

function sub_07848523(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_9fc8da1fAddress = address(arg1)
}

function sub_db00fb20(?) {
    idx = 256
    s = 30
    while 416 > idx + 32:
        mem[idx + 32] = stor1[s].field_0
        idx = idx + 32
        s = s + 1
        continue 
    return sub_6187b33e.length, mem[288 len 128]
}

function withdraw() payable {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    call msg.sender with:
       value eth.balance(this.address) wei
         gas gas_remaining wei
    require ext_call.success
}

function setApprovalForAll(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if arg1 == msg.sender:
        revert with 0, 'ERC721: approve to caller'
    stor5[address(msg.sender)][address(arg1)] = uint8(arg2)
    emit ApprovalForAll(arg2, msg.sender, arg1);
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    owner = arg1
    emit OwnershipTransferred(owner, arg1);
}

function isValidAccessMessage(address arg1, uint8 arg2, bytes32 arg3, bytes32 arg4) {
    require calldata.size - 4 >= 128
    require arg1 == arg1
    require arg2 == arg2
    require arg3 == arg3
    require arg4 == arg4
    signer = erecover(sha3(Mask(224, 32, '\x19Ethereum Signed Message:\n32') >> 32, sha3(this.address, arg1)), arg2 << 248, arg3, arg4) 
    if not erecover.result:
        revert with ext_call.return_data[0 len return_data.size]
    if owner != address(signer):
        return 0
    return 1
}

function supportsInterface(bytes4 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == Mask(32, 224, arg1)
    if Mask(32, 224, arg1) == 0x780e9d6300000000000000000000000000000000000000000000000000000000:
        return True
    if Mask(32, 224, arg1) == 0x80ac58cd00000000000000000000000000000000000000000000000000000000:
        return True
    if Mask(32, 224, arg1) == 0x5b5e139f00000000000000000000000000000000000000000000000000000000:
        return True
    return (Mask(32, 224, arg1) == 0x1ffc9a700000000000000000000000000000000000000000000000000000000)
}

function sub_aab14006(?) {
    require calldata.size - 4 >= 160
    require 35 < calldata.size
    require 164 <= calldata.size
    idx = 4
    s = 96
    while idx < 164:
        require cd[idx] == cd[idx]
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    s = 24
    idx = 96
    while 256 > idx:
        stor[s] = mem[idx]
        s = s + 1
        idx = idx + 32
        continue 
    idx = 29
    while 29 > idx:
        stor[idx] = 0
        idx = idx + 1
        continue 
}

function sub_fa1f7b0c(?) {
    require calldata.size - 4 >= 160
    require 35 < calldata.size
    require 164 <= calldata.size
    idx = 4
    s = 96
    while idx < 164:
        require cd[idx] == cd[idx]
        mem[s] = cd[idx]
        idx = idx + 32
        s = s + 32
        continue 
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    s = 30
    idx = 96
    while 256 > idx:
        stor[s] = mem[idx]
        s = s + 1
        idx = idx + 32
        continue 
    idx = 35
    while 35 > idx:
        stor[idx] = 0
        idx = idx + 1
        continue 
}

function sub_fa7e685b(?) {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(sub_9fc8da1fAddress)
    staticcall sub_9fc8da1fAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[0]
    require ext_code.size(sub_9fc8da1fAddress)
    call sub_9fc8da1fAddress.0xa9059cbb with:
         gas gas_remaining wei
        args owner, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
}

function approve(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if not ownerOf[arg2]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: owner query for nonexistent token'
    if arg1 == ownerOf[arg2]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: approval to current owner'
    if ownerOf[arg2] != msg.sender:
        if not stor5[stor2[arg2]][address(msg.sender)]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        'ERC721: approve caller is not owner nor approved for all'
    approved[arg2] = arg1
    if not ownerOf[arg2]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: owner query for nonexistent token'
    emit Approval(ownerOf[arg2], arg1, arg2);
}

function walletOfOwner(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: balance query for the zero address'
    if balanceOf[address(arg1)] > test266151307():
        revert with 'NH{q', 65
    if balanceOf[address(arg1)]:
        mem[128 len 32 * balanceOf[address(arg1)]] = call.data[calldata.size len 32 * balanceOf[address(arg1)]]
    idx = 0
    while idx < balanceOf[address(arg1)]:
        if not arg1:
            revert with 0, 'ERC721: balance query for the zero address'
        if idx >= balanceOf[address(arg1)]:
            revert with 0, 'ERC721Enumerable: owner index out of bounds'
        mem[0] = idx
        mem[32] = sha3(address(arg1), 6)
        if idx >= balanceOf[address(arg1)]:
            revert with 'NH{q', 50
        mem[(32 * idx) + 128] = tokenOfOwnerByIndex[address(arg1)][idx]
        if idx == -1:
            revert with 'NH{q', 17
        idx = idx + 1
        continue 
    return Array(len=balanceOf[address(arg1)], data=mem[128 len 32 * balanceOf[address(arg1)]])
}

function setBaseURI(string arg1) {
    require calldata.size - 4 >= 32
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 'NH{q', 65
    if ceil32(ceil32(arg1.length)) + 97 > test266151307() or ceil32(ceil32(arg1.length)) + 97 < 96:
        revert with 'NH{q', 65
    require arg1 + arg1.length + 36 <= calldata.size
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if bool(stor11.length):
        if bool(stor11.length) == uint255(stor11.length.field_1) < 32:
            revert with 'NH{q', 34
        if arg1.length:
            stor11[].field_0 = Array(len=arg1.length, data=arg1[all])
        else:
            stor11.length = 0
            idx = 0
            while uint255(stor11.length.field_1) + 31 / 32 > idx:
                stor11[idx].field_0 = 0
                idx = idx + 1
                continue 
    else:
        if bool(stor11.length) == stor11.length.field_1 % 128 < 32:
            revert with 'NH{q', 34
        if arg1.length:
            stor11[].field_0 = Array(len=arg1.length, data=arg1[all])
        else:
            stor11.length = 0
            idx = 0
            while stor11.length.field_1 % 128 + 31 / 32 > idx:
                stor11[idx].field_0 = 0
                idx = idx + 1
                continue 
}

function setBaseExtension(string arg1) {
    require calldata.size - 4 >= 32
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 'NH{q', 65
    if ceil32(ceil32(arg1.length)) + 97 > test266151307() or ceil32(ceil32(arg1.length)) + 97 < 96:
        revert with 'NH{q', 65
    require arg1 + arg1.length + 36 <= calldata.size
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if bool(stor12.length):
        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
            revert with 'NH{q', 34
        if arg1.length:
            stor12[].field_0 = Array(len=arg1.length, data=arg1[all])
        else:
            stor12.length = 0
            idx = 0
            while uint255(stor12.length.field_1) + 31 / 32 > idx:
                stor12[idx].field_0 = 0
                idx = idx + 1
                continue 
    else:
        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
            revert with 'NH{q', 34
        if arg1.length:
            stor12[].field_0 = Array(len=arg1.length, data=arg1[all])
        else:
            stor12.length = 0
            idx = 0
            while stor12.length.field_1 % 128 + 31 / 32 > idx:
                stor12[idx].field_0 = 0
                idx = idx + 1
                continue 
}

function sub_c4427d77(?) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == address(arg2)
    if address(stor17.length) != msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: caller is not the rewardPool'
    if block.timestamp < allowMintingAfter:
        revert with 0, 'Minting now allowed yet'
    if arg1 <= 0:
        revert with 0, 'Invalid node type'
    if arg1 > 5:
        revert with 0, 'Invalid node type'
    if arg1 < 1:
        revert with 'NH{q', 17
    if arg1 - 1 >= 5:
        revert with 'NH{q', 50
    if arg1 < 1:
        revert with 'NH{q', 17
    if arg1 - 1 >= 5:
        revert with 'NH{q', 50
    if uint256(stor17[arg1]) > nodeType[arg1]:
        revert with 0, 'Max supply reached'
    if arg1 < 1:
        revert with 'NH{q', 17
    if arg1 - 1 >= 5:
        revert with 'NH{q', 50
    if uint256(stor17[arg1]) > -2:
        revert with 'NH{q', 17
    uint256(stor17[arg1])++
    if tokenByIndex.length > -2:
        revert with 'NH{q', 17
    nodeType[stor8.length + 1] = arg1
    require not isPaused
    if tokenByIndex.length > -2:
        revert with 'NH{q', 17
    require tokenByIndex.length + 1 <= maxSupply
    if tokenByIndex.length > -2:
        revert with 'NH{q', 17
    if not address(arg2):
        revert with 0, 'ERC721: mint to the zero address'
    if ownerOf[stor8.length + 1]:
        revert with 0, 'ERC721: token already minted'
    stor9[stor8.length + 1] = tokenByIndex.length
    tokenByIndex.length++
    tokenByIndex[tokenByIndex.length] = tokenByIndex.length + 1
    if address(arg2):
        tokenOfOwnerByIndex[address(arg2)][stor3[address(arg2)]] = tokenByIndex.length + 1
        stor7[stor8.length + 1] = balanceOf[address(arg2)]
    else:
        if tokenByIndex.length < 1:
            revert with 'NH{q', 17
        if tokenByIndex.length - 1 >= tokenByIndex.length:
            revert with 'NH{q', 50
        if stor9[stor8.length + 1] >= tokenByIndex.length:
            revert with 'NH{q', 50
        tokenByIndex[stor9[tokenByIndex.length + 1]] = tokenByIndex[tokenByIndex.length]
        stor9[stor8[stor8.length]] = stor9[stor8.length + 1]
        stor9[stor8.length + 1] = 0
        if not tokenByIndex.length:
            revert with 'NH{q', 49
        tokenByIndex[tokenByIndex.length] = 0
        tokenByIndex.length--
    require ext_code.size(address(stor17.length))
    call address(stor17.length).0x8b9b4667 with:
         gas gas_remaining wei
        args tokenByIndex.length + 1, nodeType[stor8.length + 1], address(arg2)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if balanceOf[address(arg2)] > -2:
        revert with 'NH{q', 17
    balanceOf[address(arg2)]++
    ownerOf[stor8.length + 1] = address(arg2)
    emit Transfer(0, address(arg2), tokenByIndex.length + 1);
    if ext_code.size(address(arg2)) > 0:
        require ext_code.size(address(arg2))
        call address(arg2).0x150b7a02 with:
             gas gas_remaining wei
            args msg.sender, 0, tokenByIndex.length + 1, 128, 0
        if not ext_call.success:
            if not return_data.size:
                revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
            if not return_data.size:
                revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
        if Mask(32, 224, ext_call.return_data[0]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
            revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
}

function name() {
    if bool(stor0.length):
        if bool(stor0.length) == uint255(stor0.length.field_1) < 32:
            revert with 'NH{q', 34
        if bool(stor0.length):
            if bool(stor0.length) == uint255(stor0.length.field_1) < 32:
                revert with 'NH{q', 34
            if uint255(stor0.length.field_1):
                if 31 < uint255(stor0.length.field_1):
                    mem[128] = uint256(stor0.field_0)
                    idx = 128
                    s = 0
                    while uint255(stor0.length.field_1) + 96 > idx:
                        mem[idx + 32] = stor0[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, uint255(stor0.length.field_1)), data=mem[128 len ceil32(uint255(stor0.length.field_1))])
                mem[128] = 256 * Mask(248, 0, stor0.length.field_8)
        else:
            if bool(stor0.length) == stor0.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if stor0.length.field_1 % 128:
                if 31 < stor0.length.field_1 % 128:
                    mem[128] = uint256(stor0.field_0)
                    idx = 128
                    s = 0
                    while stor0.length.field_1 % 128 + 96 > idx:
                        mem[idx + 32] = stor0[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, uint255(stor0.length.field_1)), data=mem[128 len ceil32(uint255(stor0.length.field_1))])
                mem[128] = 256 * Mask(248, 0, stor0.length.field_8)
        mem[ceil32(uint255(stor0.length.field_1)) + 192 len ceil32(uint255(stor0.length.field_1))] = mem[128 len ceil32(uint255(stor0.length.field_1))]
        if ceil32(uint255(stor0.length.field_1)) > uint255(stor0.length.field_1):
            mem[ceil32(uint255(stor0.length.field_1)) + uint255(stor0.length.field_1) + 192] = 0
        return Array(len=2 * Mask(256, -1, uint255(stor0.length.field_1)), data=mem[128 len ceil32(uint255(stor0.length.field_1))], mem[(2 * ceil32(uint255(stor0.length.field_1))) + 192 len 2 * ceil32(uint255(stor0.length.field_1))]), 
    if bool(stor0.length) == stor0.length.field_1 % 128 < 32:
        revert with 'NH{q', 34
    if bool(stor0.length):
        if bool(stor0.length) == uint255(stor0.length.field_1) < 32:
            revert with 'NH{q', 34
        if uint255(stor0.length.field_1):
            if 31 < uint255(stor0.length.field_1):
                mem[128] = uint256(stor0.field_0)
                idx = 128
                s = 0
                while uint255(stor0.length.field_1) + 96 > idx:
                    mem[idx + 32] = stor0[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor0.length % 128, data=mem[128 len ceil32(stor0.length.field_1 % 128)])
            mem[128] = 256 * Mask(248, 0, stor0.length.field_8)
    else:
        if bool(stor0.length) == stor0.length.field_1 % 128 < 32:
            revert with 'NH{q', 34
        if stor0.length.field_1 % 128:
            if 31 < stor0.length.field_1 % 128:
                mem[128] = uint256(stor0.field_0)
                idx = 128
                s = 0
                while stor0.length.field_1 % 128 + 96 > idx:
                    mem[idx + 32] = stor0[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor0.length % 128, data=mem[128 len ceil32(stor0.length.field_1 % 128)])
            mem[128] = 256 * Mask(248, 0, stor0.length.field_8)
    mem[ceil32(stor0.length.field_1 % 128) + 192 len ceil32(stor0.length.field_1 % 128)] = mem[128 len ceil32(stor0.length.field_1 % 128)]
    if ceil32(stor0.length.field_1 % 128) > stor0.length.field_1 % 128:
        mem[ceil32(stor0.length.field_1 % 128) + stor0.length.field_1 % 128 + 192] = 0
    return Array(len=stor0.length % 128, data=mem[128 len ceil32(stor0.length.field_1 % 128)], mem[(2 * ceil32(stor0.length.field_1 % 128)) + 192 len 2 * ceil32(stor0.length.field_1 % 128)]), 
}

function symbol() {
    if bool(stor1.length):
        if bool(stor1.length) == uint255(stor1.length.field_1) < 32:
            revert with 'NH{q', 34
        if bool(stor1.length):
            if bool(stor1.length) == uint255(stor1.length.field_1) < 32:
                revert with 'NH{q', 34
            if uint255(stor1.length.field_1):
                if 31 < uint255(stor1.length.field_1):
                    mem[128] = uint256(stor1.field_0)
                    idx = 128
                    s = 0
                    while uint255(stor1.length.field_1) + 96 > idx:
                        mem[idx + 32] = stor1[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, uint255(stor1.length.field_1)), data=mem[128 len ceil32(uint255(stor1.length.field_1))])
                mem[128] = 256 * Mask(248, 0, stor1.length.field_8)
        else:
            if bool(stor1.length) == stor1.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if stor1.length.field_1 % 128:
                if 31 < stor1.length.field_1 % 128:
                    mem[128] = uint256(stor1.field_0)
                    idx = 128
                    s = 0
                    while stor1.length.field_1 % 128 + 96 > idx:
                        mem[idx + 32] = stor1[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, uint255(stor1.length.field_1)), data=mem[128 len ceil32(uint255(stor1.length.field_1))])
                mem[128] = 256 * Mask(248, 0, stor1.length.field_8)
        mem[ceil32(uint255(stor1.length.field_1)) + 192 len ceil32(uint255(stor1.length.field_1))] = mem[128 len ceil32(uint255(stor1.length.field_1))]
        if ceil32(uint255(stor1.length.field_1)) > uint255(stor1.length.field_1):
            mem[ceil32(uint255(stor1.length.field_1)) + uint255(stor1.length.field_1) + 192] = 0
        return Array(len=2 * Mask(256, -1, uint255(stor1.length.field_1)), data=mem[128 len ceil32(uint255(stor1.length.field_1))], mem[(2 * ceil32(uint255(stor1.length.field_1))) + 192 len 2 * ceil32(uint255(stor1.length.field_1))]), 
    if bool(stor1.length) == stor1.length.field_1 % 128 < 32:
        revert with 'NH{q', 34
    if bool(stor1.length):
        if bool(stor1.length) == uint255(stor1.length.field_1) < 32:
            revert with 'NH{q', 34
        if uint255(stor1.length.field_1):
            if 31 < uint255(stor1.length.field_1):
                mem[128] = uint256(stor1.field_0)
                idx = 128
                s = 0
                while uint255(stor1.length.field_1) + 96 > idx:
                    mem[idx + 32] = stor1[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor1.length % 128, data=mem[128 len ceil32(stor1.length.field_1 % 128)])
            mem[128] = 256 * Mask(248, 0, stor1.length.field_8)
    else:
        if bool(stor1.length) == stor1.length.field_1 % 128 < 32:
            revert with 'NH{q', 34
        if stor1.length.field_1 % 128:
            if 31 < stor1.length.field_1 % 128:
                mem[128] = uint256(stor1.field_0)
                idx = 128
                s = 0
                while stor1.length.field_1 % 128 + 96 > idx:
                    mem[idx + 32] = stor1[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor1.length % 128, data=mem[128 len ceil32(stor1.length.field_1 % 128)])
            mem[128] = 256 * Mask(248, 0, stor1.length.field_8)
    mem[ceil32(stor1.length.field_1 % 128) + 192 len ceil32(stor1.length.field_1 % 128)] = mem[128 len ceil32(stor1.length.field_1 % 128)]
    if ceil32(stor1.length.field_1 % 128) > stor1.length.field_1 % 128:
        mem[ceil32(stor1.length.field_1 % 128) + stor1.length.field_1 % 128 + 192] = 0
    return Array(len=stor1.length % 128, data=mem[128 len ceil32(stor1.length.field_1 % 128)], mem[(2 * ceil32(stor1.length.field_1 % 128)) + 192 len 2 * ceil32(stor1.length.field_1 % 128)]), 
}

function baseExtension() {
    if bool(stor12.length):
        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
            revert with 'NH{q', 34
        if bool(stor12.length):
            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                revert with 'NH{q', 34
            if uint255(stor12.length.field_1):
                if 31 < uint255(stor12.length.field_1):
                    mem[128] = uint256(stor12.field_0)
                    idx = 128
                    s = 0
                    while uint255(stor12.length.field_1) + 96 > idx:
                        mem[idx + 32] = stor12[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, uint255(stor12.length.field_1)), data=mem[128 len ceil32(uint255(stor12.length.field_1))])
                mem[128] = 256 * Mask(248, 0, stor12.length.field_8)
        else:
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if stor12.length.field_1 % 128:
                if 31 < stor12.length.field_1 % 128:
                    mem[128] = uint256(stor12.field_0)
                    idx = 128
                    s = 0
                    while stor12.length.field_1 % 128 + 96 > idx:
                        mem[idx + 32] = stor12[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, uint255(stor12.length.field_1)), data=mem[128 len ceil32(uint255(stor12.length.field_1))])
                mem[128] = 256 * Mask(248, 0, stor12.length.field_8)
        mem[ceil32(uint255(stor12.length.field_1)) + 192 len ceil32(uint255(stor12.length.field_1))] = mem[128 len ceil32(uint255(stor12.length.field_1))]
        if ceil32(uint255(stor12.length.field_1)) > uint255(stor12.length.field_1):
            mem[ceil32(uint255(stor12.length.field_1)) + uint255(stor12.length.field_1) + 192] = 0
        return Array(len=2 * Mask(256, -1, uint255(stor12.length.field_1)), data=mem[128 len ceil32(uint255(stor12.length.field_1))], mem[(2 * ceil32(uint255(stor12.length.field_1))) + 192 len 2 * ceil32(uint255(stor12.length.field_1))]), 
    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
        revert with 'NH{q', 34
    if bool(stor12.length):
        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
            revert with 'NH{q', 34
        if uint255(stor12.length.field_1):
            if 31 < uint255(stor12.length.field_1):
                mem[128] = uint256(stor12.field_0)
                idx = 128
                s = 0
                while uint255(stor12.length.field_1) + 96 > idx:
                    mem[idx + 32] = stor12[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor12.length % 128, data=mem[128 len ceil32(stor12.length.field_1 % 128)])
            mem[128] = 256 * Mask(248, 0, stor12.length.field_8)
    else:
        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
            revert with 'NH{q', 34
        if stor12.length.field_1 % 128:
            if 31 < stor12.length.field_1 % 128:
                mem[128] = uint256(stor12.field_0)
                idx = 128
                s = 0
                while stor12.length.field_1 % 128 + 96 > idx:
                    mem[idx + 32] = stor12[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor12.length % 128, data=mem[128 len ceil32(stor12.length.field_1 % 128)])
            mem[128] = 256 * Mask(248, 0, stor12.length.field_8)
    mem[ceil32(stor12.length.field_1 % 128) + 192 len ceil32(stor12.length.field_1 % 128)] = mem[128 len ceil32(stor12.length.field_1 % 128)]
    if ceil32(stor12.length.field_1 % 128) > stor12.length.field_1 % 128:
        mem[ceil32(stor12.length.field_1 % 128) + stor12.length.field_1 % 128 + 192] = 0
    return Array(len=stor12.length % 128, data=mem[128 len ceil32(stor12.length.field_1 % 128)], mem[(2 * ceil32(stor12.length.field_1 % 128)) + 192 len 2 * ceil32(stor12.length.field_1 % 128)]), 
}

function transferFrom(address arg1, address arg2, uint256 arg3) {
    require calldata.size - 4 >= 96
    require arg1 == arg1
    require arg2 == arg2
    require arg3 == arg3
    if not ownerOf[arg3]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: operator query for nonexistent token'
    if not ownerOf[arg3]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: owner query for nonexistent token'
    if ownerOf[arg3] != msg.sender:
        if not ownerOf[arg3]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: approved query for nonexistent token'
        if approved[arg3] != msg.sender:
            if not stor5[stor2[arg3]][address(msg.sender)]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: transfer caller is not owner nor approved'
    if not ownerOf[arg3]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: owner query for nonexistent token'
    if ownerOf[arg3] != arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: transfer of token that is not own'
    if not arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: transfer to the zero address'
    if not arg1:
        stor9[arg3] = tokenByIndex.length
        tokenByIndex.length++
        tokenByIndex[tokenByIndex.length] = arg3
    else:
        if arg1 != arg2:
            if not arg1:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: balance query for the zero address'
            if balanceOf[address(arg1)] < 1:
                revert with 'NH{q', 17
            if stor7[arg3] != balanceOf[address(arg1)] - 1:
                tokenOfOwnerByIndex[address(arg1)][stor7[arg3]] = tokenOfOwnerByIndex[address(arg1)][stor3[address(arg1)] - 1]
                stor7[stor6[address(arg1)][stor3[address(arg1)] - 1]] = stor7[arg3]
            stor7[arg3] = 0
            tokenOfOwnerByIndex[address(arg1)][stor3[address(arg1)] - 1] = 0
    if arg2:
        if arg2 != arg1:
            if not arg2:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: balance query for the zero address'
            tokenOfOwnerByIndex[address(arg2)][stor3[address(arg2)]] = arg3
            stor7[arg3] = balanceOf[address(arg2)]
    else:
        if tokenByIndex.length < 1:
            revert with 'NH{q', 17
        if tokenByIndex.length - 1 >= tokenByIndex.length:
            revert with 'NH{q', 50
        if stor9[arg3] >= tokenByIndex.length:
            revert with 'NH{q', 50
        tokenByIndex[stor9[arg3]] = tokenByIndex[tokenByIndex.length]
        stor9[stor8[stor8.length]] = stor9[arg3]
        stor9[arg3] = 0
        if not tokenByIndex.length:
            revert with 'NH{q', 49
        tokenByIndex[tokenByIndex.length] = 0
        tokenByIndex.length--
    if not arg1:
        require ext_code.size(address(stor17.length))
        call address(stor17.length).0x8b9b4667 with:
             gas gas_remaining wei
            args arg3, nodeType[arg3], arg2
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        approved[arg3] = 0
        if not ownerOf[arg3]:
            revert with 0, 'ERC721: owner query for nonexistent token'
    else:
        if arg1 == arg2:
            approved[arg3] = 0
            if not ownerOf[arg3]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: owner query for nonexistent token'
        else:
            require ext_code.size(address(stor17.length))
            call address(stor17.length).0x97749506 with:
                 gas gas_remaining wei
                args arg3, arg2
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            approved[arg3] = 0
            if not ownerOf[arg3]:
                revert with 0, 'ERC721: owner query for nonexistent token'
    ('bool', ('stor', ('map', ('param', 'arg3'), ('name', 'ownerOf', 2))))
    emit Approval(ownerOf[arg3], 0, arg3);
    if balanceOf[address(arg1)] < 1:
        revert with 'NH{q', 17
    balanceOf[address(arg1)]--
    if balanceOf[address(arg2)] > -2:
        revert with 'NH{q', 17
    balanceOf[address(arg2)]++
    ownerOf[arg3] = arg2
    emit Transfer(arg1, arg2, arg3);
}

function safeTransferFrom(address arg1, address arg2, uint256 arg3) {
    require calldata.size - 4 >= 96
    require arg1 == arg1
    require arg2 == arg2
    require arg3 == arg3
    if not ownerOf[arg3]:
        revert with 0, 'ERC721: operator query for nonexistent token'
    if not ownerOf[arg3]:
        revert with 0, 'ERC721: owner query for nonexistent token'
    if ownerOf[arg3] != msg.sender:
        if not ownerOf[arg3]:
            revert with 0, 'ERC721: approved query for nonexistent token'
        if approved[arg3] != msg.sender:
            if not stor5[stor2[arg3]][address(msg.sender)]:
                revert with 0, 'ERC721: transfer caller is not owner nor approved'
    if not ownerOf[arg3]:
        revert with 0, 'ERC721: owner query for nonexistent token'
    if ownerOf[arg3] != arg1:
        revert with 0, 'ERC721: transfer of token that is not own'
    if not arg2:
        revert with 0, 'ERC721: transfer to the zero address'
    if not arg1:
        stor9[arg3] = tokenByIndex.length
        tokenByIndex.length++
        tokenByIndex[tokenByIndex.length] = arg3
    else:
        if arg1 != arg2:
            if not arg1:
                revert with 0, 'ERC721: balance query for the zero address'
            if balanceOf[address(arg1)] < 1:
                revert with 'NH{q', 17
            if stor7[arg3] != balanceOf[address(arg1)] - 1:
                tokenOfOwnerByIndex[address(arg1)][stor7[arg3]] = tokenOfOwnerByIndex[address(arg1)][stor3[address(arg1)] - 1]
                stor7[stor6[address(arg1)][stor3[address(arg1)] - 1]] = stor7[arg3]
            stor7[arg3] = 0
            tokenOfOwnerByIndex[address(arg1)][stor3[address(arg1)] - 1] = 0
    if arg2:
        if arg2 != arg1:
            if not arg2:
                revert with 0, 'ERC721: balance query for the zero address'
            tokenOfOwnerByIndex[address(arg2)][stor3[address(arg2)]] = arg3
            stor7[arg3] = balanceOf[address(arg2)]
    else:
        if tokenByIndex.length < 1:
            revert with 'NH{q', 17
        if tokenByIndex.length - 1 >= tokenByIndex.length:
            revert with 'NH{q', 50
        if stor9[arg3] >= tokenByIndex.length:
            revert with 'NH{q', 50
        tokenByIndex[stor9[arg3]] = tokenByIndex[tokenByIndex.length]
        stor9[stor8[stor8.length]] = stor9[arg3]
        stor9[arg3] = 0
        if not tokenByIndex.length:
            revert with 'NH{q', 49
        tokenByIndex[tokenByIndex.length] = 0
        tokenByIndex.length--
    if not arg1:
        require ext_code.size(address(stor17.length))
        call address(stor17.length).0x8b9b4667 with:
             gas gas_remaining wei
            args arg3, nodeType[arg3], arg2
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        approved[arg3] = 0
        if not ownerOf[arg3]:
            revert with 0, 'ERC721: owner query for nonexistent token'
        emit Approval(ownerOf[arg3], 0, arg3);
        if balanceOf[address(arg1)] < 1:
            revert with 'NH{q', 17
        balanceOf[address(arg1)]--
        if balanceOf[address(arg2)] > -2:
            revert with 'NH{q', 17
        balanceOf[address(arg2)]++
        ownerOf[arg3] = arg2
        emit Transfer(arg1, arg2, arg3);
        if ext_code.size(arg2) > 0:
            require ext_code.size(arg2)
            call arg2.0x150b7a02 with:
                 gas gas_remaining wei
                args msg.sender, address(arg1), arg3, 128, 0
            if not ext_call.success:
                if not return_data.size:
                    revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                if not return_data.size:
                    revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
            if Mask(32, 224, ext_call.return_data[0]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
    else:
        if arg1 == arg2:
            approved[arg3] = 0
            if not ownerOf[arg3]:
                revert with 0, 'ERC721: owner query for nonexistent token'
            emit Approval(ownerOf[arg3], 0, arg3);
            if balanceOf[address(arg1)] < 1:
                revert with 'NH{q', 17
            balanceOf[address(arg1)]--
            if balanceOf[address(arg2)] > -2:
                revert with 'NH{q', 17
            balanceOf[address(arg2)]++
            ownerOf[arg3] = arg2
            emit Transfer(arg1, arg2, arg3);
            if ext_code.size(arg2) > 0:
                require ext_code.size(arg2)
                call arg2.0x150b7a02 with:
                     gas gas_remaining wei
                    args 0, uint32(msg.sender), address(arg1), arg3, 128, 0
                if not ext_call.success:
                    if not return_data.size:
                        revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                    if not return_data.size:
                        revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                if Mask(32, 224, ext_call.return_data[0]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                    revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
        else:
            require ext_code.size(address(stor17.length))
            call address(stor17.length).0x97749506 with:
                 gas gas_remaining wei
                args arg3, arg2
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            approved[arg3] = 0
            if not ownerOf[arg3]:
                revert with 0, 'ERC721: owner query for nonexistent token'
            emit Approval(ownerOf[arg3], 0, arg3);
            if balanceOf[address(arg1)] < 1:
                revert with 'NH{q', 17
            balanceOf[address(arg1)]--
            if balanceOf[address(arg2)] > -2:
                revert with 'NH{q', 17
            balanceOf[address(arg2)]++
            ownerOf[arg3] = arg2
            emit Transfer(arg1, arg2, arg3);
            if ext_code.size(arg2) > 0:
                require ext_code.size(arg2)
                call arg2.0x150b7a02 with:
                     gas gas_remaining wei
                    args msg.sender, address(arg1), arg3, 128, 0
                if not ext_call.success:
                    if not return_data.size:
                        revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                    if not return_data.size:
                        revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                if Mask(32, 224, ext_call.return_data[0]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                    revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
}

function mint(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if arg1 < 1:
        revert with 'NH{q', 17
    if arg1 - 1 >= 5:
        revert with 'NH{q', 50
    if stor29[arg1] and stor29.length > -1 / stor29[arg1]:
        revert with 'NH{q', 17
    if msg.sender == owner:
        if block.timestamp < allowMintingAfter:
            revert with 0, 'Minting now allowed yet'
        if arg1 <= 0:
            revert with 0, 'Invalid node type'
        if arg1 > 5:
            revert with 0, 'Invalid node type'
        if arg1 < 1:
            revert with 'NH{q', 17
        if arg1 - 1 >= 5:
            revert with 'NH{q', 50
        if arg1 < 1:
            revert with 'NH{q', 17
        if arg1 - 1 >= 5:
            revert with 'NH{q', 50
        if uint256(stor17[arg1]) > nodeType[arg1]:
            revert with 0, 'Max supply reached'
        if arg1 < 1:
            revert with 'NH{q', 17
        if arg1 - 1 >= 5:
            revert with 'NH{q', 50
        if uint256(stor17[arg1]) > -2:
            revert with 'NH{q', 17
        uint256(stor17[arg1])++
        if tokenByIndex.length > -2:
            revert with 'NH{q', 17
        nodeType[stor8.length + 1] = arg1
        require not isPaused
        if tokenByIndex.length > -2:
            revert with 'NH{q', 17
        require tokenByIndex.length + 1 <= maxSupply
        if tokenByIndex.length > -2:
            revert with 'NH{q', 17
        if not msg.sender:
            revert with 0, 'ERC721: mint to the zero address'
        if ownerOf[stor8.length + 1]:
            revert with 0, 'ERC721: token already minted'
        stor9[stor8.length + 1] = tokenByIndex.length
        tokenByIndex.length++
        tokenByIndex[tokenByIndex.length] = tokenByIndex.length + 1
        if msg.sender:
            tokenOfOwnerByIndex[address(msg.sender)][stor3[address(msg.sender)]] = tokenByIndex.length + 1
            stor7[stor8.length + 1] = balanceOf[address(msg.sender)]
        else:
            if tokenByIndex.length < 1:
                revert with 'NH{q', 17
            if tokenByIndex.length - 1 >= tokenByIndex.length:
                revert with 'NH{q', 50
            if stor9[stor8.length + 1] >= tokenByIndex.length:
                revert with 'NH{q', 50
            tokenByIndex[stor9[tokenByIndex.length + 1]] = tokenByIndex[tokenByIndex.length]
            stor9[stor8[stor8.length]] = stor9[stor8.length + 1]
            stor9[stor8.length + 1] = 0
            if not tokenByIndex.length:
                revert with 'NH{q', 49
            tokenByIndex[tokenByIndex.length] = 0
            tokenByIndex.length--
        require ext_code.size(address(stor17.length))
        call address(stor17.length).0x8b9b4667 with:
             gas gas_remaining wei
            args tokenByIndex.length + 1, nodeType[stor8.length + 1], msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if balanceOf[address(msg.sender)] > -2:
            revert with 'NH{q', 17
        balanceOf[address(msg.sender)]++
        ownerOf[stor8.length + 1] = msg.sender
        emit Transfer(0, msg.sender, tokenByIndex.length + 1);
        if ext_code.size(msg.sender) > 0:
            require ext_code.size(msg.sender)
            call msg.sender.0x150b7a02 with:
                 gas gas_remaining wei
                args msg.sender, 0, tokenByIndex.length + 1, 128, 0
            if not ext_call.success:
                if not return_data.size:
                    revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                if not return_data.size:
                    revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
            if Mask(32, 224, ext_call.return_data[0]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
    else:
        mem[100] = msg.sender
        mem[132] = this.address
        mem[164] = stor29[arg1]
        require ext_code.size(sub_9fc8da1fAddress)
        call sub_9fc8da1fAddress.0x23b872dd with:
             gas gas_remaining wei
            args msg.sender, address(this.address), stor29[arg1]
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if not ext_call.return_data[0]:
            revert with 0, 'Not enough funds'
        if stor29[arg1] < stor29[arg1] * stor29.length / 10000:
            revert with 'NH{q', 17
        mem[ceil32(return_data.size) + 100] = address(stor17.length)
        mem[ceil32(return_data.size) + 132] = stor29[arg1] - (stor29[arg1] * stor29.length / 10000)
        require ext_code.size(sub_9fc8da1fAddress)
        call sub_9fc8da1fAddress.0xa9059cbb with:
             gas gas_remaining wei
            args address(stor17.length), stor29[arg1] - (stor29[arg1] * stor29.length / 10000)
        mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if block.timestamp < allowMintingAfter:
            revert with 0, 'Minting now allowed yet'
        if arg1 <= 0:
            revert with 0, 'Invalid node type'
        if arg1 > 5:
            revert with 0, 'Invalid node type'
        if arg1 < 1:
            revert with 'NH{q', 17
        if arg1 - 1 >= 5:
            revert with 'NH{q', 50
        if arg1 < 1:
            revert with 'NH{q', 17
        if arg1 - 1 >= 5:
            revert with 'NH{q', 50
        if uint256(stor17[arg1]) > nodeType[arg1]:
            revert with 0, 'Max supply reached'
        if arg1 < 1:
            revert with 'NH{q', 17
        if arg1 - 1 >= 5:
            revert with 'NH{q', 50
        if uint256(stor17[arg1]) > -2:
            revert with 'NH{q', 17
        uint256(stor17[arg1])++
        if tokenByIndex.length > -2:
            revert with 'NH{q', 17
        nodeType[stor8.length + 1] = arg1
        require not isPaused
        if tokenByIndex.length > -2:
            revert with 'NH{q', 17
        require tokenByIndex.length + 1 <= maxSupply
        if tokenByIndex.length > -2:
            revert with 'NH{q', 17
        mem[(2 * ceil32(return_data.size)) + 96] = 0
        if not msg.sender:
            revert with 0, 'ERC721: mint to the zero address'
        if ownerOf[stor8.length + 1]:
            revert with 0, 'ERC721: token already minted'
        stor9[stor8.length + 1] = tokenByIndex.length
        tokenByIndex.length++
        tokenByIndex[tokenByIndex.length] = tokenByIndex.length + 1
        if msg.sender:
            tokenOfOwnerByIndex[address(msg.sender)][stor3[address(msg.sender)]] = tokenByIndex.length + 1
            stor7[stor8.length + 1] = balanceOf[address(msg.sender)]
        else:
            if tokenByIndex.length < 1:
                revert with 'NH{q', 17
            if tokenByIndex.length - 1 >= tokenByIndex.length:
                revert with 'NH{q', 50
            if stor9[stor8.length + 1] >= tokenByIndex.length:
                revert with 'NH{q', 50
            tokenByIndex[stor9[tokenByIndex.length + 1]] = tokenByIndex[tokenByIndex.length]
            stor9[stor8[stor8.length]] = stor9[stor8.length + 1]
            stor9[stor8.length + 1] = 0
            if not tokenByIndex.length:
                revert with 'NH{q', 49
            tokenByIndex[tokenByIndex.length] = 0
            tokenByIndex.length--
        mem[(2 * ceil32(return_data.size)) + 132] = tokenByIndex.length + 1
        mem[(2 * ceil32(return_data.size)) + 164] = nodeType[stor8.length + 1]
        mem[(2 * ceil32(return_data.size)) + 196] = msg.sender
        require ext_code.size(address(stor17.length))
        call address(stor17.length).0x8b9b4667 with:
             gas gas_remaining wei
            args tokenByIndex.length + 1, nodeType[stor8.length + 1], msg.sender
        mem[(2 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if balanceOf[address(msg.sender)] > -2:
            revert with 'NH{q', 17
        balanceOf[address(msg.sender)]++
        ownerOf[stor8.length + 1] = msg.sender
        emit Transfer(0, msg.sender, tokenByIndex.length + 1);
        if ext_code.size(msg.sender) > 0:
            mem[(4 * ceil32(return_data.size)) + 132] = msg.sender
            mem[(4 * ceil32(return_data.size)) + 164] = 0
            mem[(4 * ceil32(return_data.size)) + 196] = tokenByIndex.length + 1
            mem[(4 * ceil32(return_data.size)) + 228] = 128
            mem[(4 * ceil32(return_data.size)) + 260] = 0
            mem[(4 * ceil32(return_data.size)) + 292 len 0] = None
            require ext_code.size(msg.sender)
            call msg.sender.0x150b7a02 with:
                 gas gas_remaining wei
                args msg.sender, 0, tokenByIndex.length + 1, 128, 0
            mem[(4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                if not return_data.size:
                    if not ext_call.return_data[0]:
                        revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                    revert with memory
                      from 128
                       len ext_call.return_data[0]
                if not return_data.size:
                    revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
            if Mask(32, 224, ext_call.return_data[0]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                revert with 0, 'ERC721: transfer to non ERC721Receiver implementer'
}

function tokenURI(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not ownerOf[arg1]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721Metadata: URI query for nonexistent token'
    if bool(stor11.length):
        if bool(stor11.length) == uint255(stor11.length.field_1) < 32:
            revert with 'NH{q', 34
        mem[96] = uint255(stor11.length.field_1)
        if not bool(stor11.length):
            if bool(stor11.length) == stor11.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not stor11.length.field_1 % 128:
                if uint255(stor11.length.field_1) <= 0:
                    return ''
                mem[0] = arg1
                mem[32] = 23
                if not nodeType[arg1]:
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + 128] = 1
                    mem[ceil32(uint255(stor11.length.field_1)) + 160] = '0'
                    mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 224] = '0'
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = 0
                    if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
                        if bool(stor12.length):
                            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                                if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                                    return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                                return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _7168 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                                if ceil32(_7168) > _7168:
                                    mem[_7168 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_7168) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            s = 0
                            while idx < uint255(stor12.length.field_1):
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 224] = stor12[s].field_0
                                idx = idx + 32
                                s = s + 1
                                continue 
                            _12440 = mem[64]
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                            _12864 = mem[_12440]
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[_12440]
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(_12864)] = mem[_12440 + 32 len ceil32(_12864)]
                            if ceil32(_12864) > _12864:
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + _12864 + 289] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(_12864) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                            if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                                return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _7263 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                            if ceil32(_7263) > _7263:
                                mem[_7263 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_7263) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        s = 0
                        while idx < stor12.length.field_1 % 128:
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 224] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        _12441 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                        _12865 = mem[_12441]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[_12441]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(_12865)] = mem[_12441 + 32 len ceil32(_12865)]
                        if ceil32(_12865) > _12865:
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + _12865 + 289] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(_12865) + 32], 
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                            if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                                return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _7173 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                            if ceil32(_7173) > _7173:
                                mem[_7173 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_7173) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        s = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 224] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        _12444 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                        _12868 = mem[_12444]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[_12444]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(_12868)] = mem[_12444 + 32 len ceil32(_12868)]
                        if ceil32(_12868) > _12868:
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + _12868 + 289] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(_12868) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                            return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7266 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        if ceil32(_7266) > _7266:
                            mem[_7266 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7266) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12445 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                    _12869 = mem[_12445]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[_12445]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(_12869)] = mem[_12445 + 32 len ceil32(_12869)]
                    if ceil32(_12869) > _12869:
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + _12869 + 289] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(_12869) + 32], 
                s = 0
                idx = nodeType[arg1]
                while idx:
                    if s == -1:
                        revert with 'NH{q', 17
                    s = s + 1
                    idx = idx / 10
                    continue 
                if s > test266151307():
                    revert with 'NH{q', 65
                mem[ceil32(uint255(stor11.length.field_1)) + 128] = s
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160
                if not s:
                    t = s
                    idx = nodeType[arg1]
                    while idx:
                        if t < 1:
                            revert with 'NH{q', 17
                        if 48 > -(idx % 10) - 1:
                            revert with 'NH{q', 17
                        if t - 1 >= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                            revert with 'NH{q', 50
                        mem[t + ceil32(uint255(stor11.length.field_1)) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                        t = t - 1
                        idx = idx / 10
                        continue 
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
                    if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                        if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                            if bool(stor12.length):
                                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                                    revert with 'NH{q', 34
                                if not bool(stor12.length):
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                                    _18654 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18654)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18654)]
                                    if ceil32(_18654) > _18654:
                                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18654 + 256] = 0
                                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18654) + 32], 
                                if bool(stor12.length) != 1:
                                    mem[64] = 0
                                    _18774 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                                    if ceil32(_18774) > _18774:
                                        mem[_18774 + 64] = 0
                                    return memory
                                      from mem[64]
                                       len ceil32(_18774) + -mem[64] + 64
                                mem[0] = 12
                                idx = 0
                                t = 0
                                while idx < uint255(stor12.length.field_1):
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                                    idx = idx + 32
                                    t = t + 1
                                    continue 
                                _22070 = mem[64]
                                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                                _22902 = mem[_22070]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[_22070]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_22902)] = mem[_22070 + 32 len ceil32(_22902)]
                                if ceil32(_22902) > _22902:
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _22902 + 256] = 0
                                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_22902) + 32], 
                            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                                _18775 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18775)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18775)]
                                if ceil32(_18775) > _18775:
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18775 + 256] = 0
                                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18775) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _18967 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                                if ceil32(_18967) > _18967:
                                    mem[_18967 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_18967) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < stor12.length.field_1 % 128:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22071 = mem[64]
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                            _22903 = mem[_22071]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[_22071]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_22903)] = mem[_22071 + 32 len ceil32(_22903)]
                            if ceil32(_22903) > _22903:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _22903 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_22903) + 32], 
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                        if bool(stor12.length):
                            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                                _18777 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18777)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18777)]
                                if ceil32(_18777) > _18777:
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18777 + 256] = 0
                                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18777) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _18968 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                                if ceil32(_18968) > _18968:
                                    mem[_18968 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_18968) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < uint255(stor12.length.field_1):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22072 = mem[64]
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _22904 = mem[_22072]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[_22072]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_22904)] = mem[_22072 + 32 len ceil32(_22904)]
                            if ceil32(_22904) > _22904:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _22904 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_22904) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                            _18969 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18969)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18969)]
                            if ceil32(_18969) > _18969:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18969 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18969) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19136 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_19136) > _19136:
                                mem[_19136 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19136) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1 % 128:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22073 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _22905 = mem[_22073]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[_22073]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_22905)] = mem[_22073 + 32 len ceil32(_22905)]
                        if ceil32(_22905) > _22905:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _22905 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_22905) + 32], 
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192] = 0
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                    if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                                _18657 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18657)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18657)]
                                if ceil32(_18657) > _18657:
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18657 + 256] = 0
                                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18657) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _18779 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                                if ceil32(_18779) > _18779:
                                    mem[_18779 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_18779) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < uint255(stor12.length.field_1):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22074 = mem[64]
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _22906 = mem[_22074]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[_22074]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_22906)] = mem[_22074 + 32 len ceil32(_22906)]
                            if ceil32(_22906) > _22906:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _22906 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_22906) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                            _18780 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18780)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18780)]
                            if ceil32(_18780) > _18780:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18780 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18780) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18972 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_18972) > _18972:
                                mem[_18972 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18972) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1 % 128:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22075 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _22907 = mem[_22075]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[_22075]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_22907)] = mem[_22075 + 32 len ceil32(_22907)]
                        if ceil32(_22907) > _22907:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _22907 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_22907) + 32], 
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18782 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18782)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18782)]
                            if ceil32(_18782) > _18782:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18782 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18782) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18973 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_18973) > _18973:
                                mem[_18973 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18973) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22076 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _22908 = mem[_22076]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[_22076]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_22908)] = mem[_22076 + 32 len ceil32(_22908)]
                        if ceil32(_22908) > _22908:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _22908 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_22908) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18974 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18974)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18974)]
                        if ceil32(_18974) > _18974:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18974 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18974) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19139 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_19139) > _19139:
                            mem[_19139 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19139) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22077 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _22909 = mem[_22077]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[_22077]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_22909)] = mem[_22077 + 32 len ceil32(_22909)]
                    if ceil32(_22909) > _22909:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _22909 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_22909) + 32], 
                mem[ceil32(uint255(stor11.length.field_1)) + 160 len s] = call.data[calldata.size len s]
                t = s
                idx = nodeType[arg1]
                while idx:
                    if t < 1:
                        revert with 'NH{q', 17
                    if 48 > -(idx % 10) - 1:
                        revert with 'NH{q', 17
                    if t - 1 >= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                        revert with 'NH{q', 50
                    mem[t + ceil32(uint255(stor11.length.field_1)) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                    t = t - 1
                    idx = idx / 10
                    continue 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
                if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                    if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                                _18660 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18660)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18660)]
                                if ceil32(_18660) > _18660:
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18660 + 256] = 0
                                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18660) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _18784 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                                if ceil32(_18784) > _18784:
                                    mem[_18784 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_18784) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < uint255(stor12.length.field_1):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22078 = mem[64]
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _22910 = mem[_22078]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[_22078]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_22910)] = mem[_22078 + 32 len ceil32(_22910)]
                            if ceil32(_22910) > _22910:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _22910 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_22910) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                            _18785 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18785)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18785)]
                            if ceil32(_18785) > _18785:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18785 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18785) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18977 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_18977) > _18977:
                                mem[_18977 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18977) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1 % 128:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22079 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _22911 = mem[_22079]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[_22079]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_22911)] = mem[_22079 + 32 len ceil32(_22911)]
                        if ceil32(_22911) > _22911:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _22911 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_22911) + 32], 
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18787 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18787)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18787)]
                            if ceil32(_18787) > _18787:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18787 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18787) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18978 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_18978) > _18978:
                                mem[_18978 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18978) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22080 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _22912 = mem[_22080]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[_22080]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_22912)] = mem[_22080 + 32 len ceil32(_22912)]
                        if ceil32(_22912) > _22912:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _22912 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_22912) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18979 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18979)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18979)]
                        if ceil32(_18979) > _18979:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18979 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18979) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19142 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_19142) > _19142:
                            mem[_19142 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19142) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22081 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _22913 = mem[_22081]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[_22081]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_22913)] = mem[_22081 + 32 len ceil32(_22913)]
                    if ceil32(_22913) > _22913:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _22913 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_22913) + 32], 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192] = 0
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18663 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18663)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18663)]
                            if ceil32(_18663) > _18663:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18663 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18663) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18789 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_18789) > _18789:
                                mem[_18789 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18789) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22082 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _22914 = mem[_22082]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[_22082]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_22914)] = mem[_22082 + 32 len ceil32(_22914)]
                        if ceil32(_22914) > _22914:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _22914 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_22914) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18790 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18790)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18790)]
                        if ceil32(_18790) > _18790:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18790 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18790) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18982 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_18982) > _18982:
                            mem[_18982 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18982) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22083 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _22915 = mem[_22083]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[_22083]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_22915)] = mem[_22083 + 32 len ceil32(_22915)]
                    if ceil32(_22915) > _22915:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _22915 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_22915) + 32], 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18792 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18792)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18792)]
                        if ceil32(_18792) > _18792:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18792 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18792) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18983 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_18983) > _18983:
                            mem[_18983 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18983) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22084 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _22916 = mem[_22084]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[_22084]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_22916)] = mem[_22084 + 32 len ceil32(_22916)]
                    if ceil32(_22916) > _22916:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _22916 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_22916) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _18984 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18984)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18984)]
                    if ceil32(_18984) > _18984:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18984 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18984) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19145 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_19145) > _19145:
                        mem[_19145 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19145) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22085 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _22917 = mem[_22085]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[_22085]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_22917)] = mem[_22085 + 32 len ceil32(_22917)]
                if ceil32(_22917) > _22917:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _22917 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_22917) + 32], 
            if 31 < stor11.length.field_1 % 128:
                mem[128] = uint256(stor11.field_0)
                idx = 128
                s = 0
                while stor11.length.field_1 % 128 + 96 > idx:
                    mem[idx + 32] = stor11[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                if uint255(stor11.length.field_1) <= 0:
                    return ''
                if not nodeType[arg1]:
                    mem[ceil32(uint255(stor11.length.field_1)) + 128] = 1
                    mem[ceil32(uint255(stor11.length.field_1)) + 160] = '0'
                    mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 224] = '0'
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = 0
                    if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
                        if bool(stor12.length):
                            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                                var87001 = ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])
                                if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                                    return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                                return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                            if bool(stor12.length) == 1:
                                idx = 0
                                s = 0
                                while idx < uint255(stor12.length.field_1):
                                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + idx + 225] = stor12[s].field_0
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                                if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                                    return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                                return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                            mem[64] = 0
                            _13350 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                            var88001 = ceil32(_13350)
                            if ceil32(_13350) > _13350:
                                mem[_13350 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_13350) + -mem[64] + 64
                        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                            var88001 = ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])
                            if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                                return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                        if bool(stor12.length) == 1:
                            idx = 0
                            s = 0
                            while idx < stor12.length.field_1 % 128:
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + idx + 225] = stor12[s].field_0
                                idx = idx + 32
                                s = s + 1
                                continue 
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                            if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                                return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                        mem[64] = 0
                        _13434 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        var89001 = ceil32(_13434)
                        if ceil32(_13434) > _13434:
                            mem[_13434 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_13434) + -mem[64] + 64
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                            var88001 = ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])
                            if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                                return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                        if bool(stor12.length) == 1:
                            idx = 0
                            s = 0
                            while idx < uint255(stor12.length.field_1):
                                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + idx + 225] = stor12[s].field_0
                                idx = idx + 32
                                s = s + 1
                                continue 
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                            if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                                return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                        mem[64] = 0
                        _13355 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        var89001 = ceil32(_13355)
                        if ceil32(_13355) > _13355:
                            mem[_13355 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_13355) + -mem[64] + 64
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        var89001 = ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])
                    else:
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _13437 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                            if ceil32(_13437) > _13437:
                                mem[_13437 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_13437) + -mem[64] + 64
                        idx = 0
                        s = 0
                        while idx < stor12.length.field_1 % 128:
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + idx + 225] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                    if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                        return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                s = 0
                idx = nodeType[arg1]
                while idx:
                    if s == -1:
                        revert with 'NH{q', 17
                    s = s + 1
                    idx = idx / 10
                    continue 
                if s > test266151307():
                    revert with 'NH{q', 65
                mem[ceil32(uint255(stor11.length.field_1)) + 128] = s
                if not s:
                    t = s
                    idx = nodeType[arg1]
                    while idx:
                        if t < 1:
                            revert with 'NH{q', 17
                        if 48 > -(idx % 10) - 1:
                            revert with 'NH{q', 17
                        if t - 1 >= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                            revert with 'NH{q', 50
                        mem[t + ceil32(uint255(stor11.length.field_1)) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                        t = t - 1
                        idx = idx / 10
                        continue 
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
                    if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                        if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                            if bool(stor12.length):
                                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                                    revert with 'NH{q', 34
                                if not bool(stor12.length):
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                                    _23442 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23442)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23442)]
                                    if ceil32(_23442) > _23442:
                                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _23442 + 256] = 0
                                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23442) + 32], 
                                if bool(stor12.length) != 1:
                                    mem[64] = 0
                                    _23546 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                                    if ceil32(_23546) > _23546:
                                        mem[_23546 + 64] = 0
                                    return memory
                                      from mem[64]
                                       len ceil32(_23546) + -mem[64] + 64
                                idx = 0
                                t = 0
                                while idx < uint255(stor12.length.field_1):
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                                    idx = idx + 32
                                    t = t + 1
                                    continue 
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                                _25510 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_25510)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_25510)]
                                if ceil32(_25510) > _25510:
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _25510 + 256] = 0
                                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_25510) + 32], 
                            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                                _23547 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23547)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23547)]
                                if ceil32(_23547) > _23547:
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _23547 + 256] = 0
                                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23547) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _23755 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                                if ceil32(_23755) > _23755:
                                    mem[_23755 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_23755) + -mem[64] + 64
                            idx = 0
                            t = 0
                            while idx < stor12.length.field_1 % 128:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                            _25511 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_25511)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_25511)]
                            if ceil32(_25511) > _25511:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _25511 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_25511) + 32], 
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                        if bool(stor12.length):
                            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                                _23549 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23549)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23549)]
                                if ceil32(_23549) > _23549:
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _23549 + 256] = 0
                                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23549) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _23756 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                                if ceil32(_23756) > _23756:
                                    mem[_23756 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_23756) + -mem[64] + 64
                            idx = 0
                            t = 0
                            while idx < uint255(stor12.length.field_1):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _25512 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_25512)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_25512)]
                            if ceil32(_25512) > _25512:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _25512 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_25512) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                            _23757 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23757)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23757)]
                            if ceil32(_23757) > _23757:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _23757 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23757) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _23908 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_23908) > _23908:
                                mem[_23908 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_23908) + -mem[64] + 64
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1 % 128:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _25513 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_25513)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_25513)]
                        if ceil32(_25513) > _25513:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _25513 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_25513) + 32], 
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192] = 0
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                    if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                                _23445 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23445)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23445)]
                                if ceil32(_23445) > _23445:
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _23445 + 256] = 0
                                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23445) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _23551 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                                if ceil32(_23551) > _23551:
                                    mem[_23551 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_23551) + -mem[64] + 64
                            idx = 0
                            t = 0
                            while idx < uint255(stor12.length.field_1):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _25514 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_25514)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_25514)]
                            if ceil32(_25514) > _25514:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _25514 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_25514) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                            _23552 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23552)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23552)]
                            if ceil32(_23552) > _23552:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _23552 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23552) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _23760 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_23760) > _23760:
                                mem[_23760 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_23760) + -mem[64] + 64
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1 % 128:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _25515 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_25515)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_25515)]
                        if ceil32(_25515) > _25515:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _25515 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_25515) + 32], 
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _23554 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23554)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23554)]
                            if ceil32(_23554) > _23554:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _23554 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23554) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _23761 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_23761) > _23761:
                                mem[_23761 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_23761) + -mem[64] + 64
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _25516 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_25516)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_25516)]
                        if ceil32(_25516) > _25516:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _25516 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_25516) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _23762 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23762)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23762)]
                        if ceil32(_23762) > _23762:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _23762 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23762) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23911 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_23911) > _23911:
                            mem[_23911 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23911) + -mem[64] + 64
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _25517 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_25517)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_25517)]
                    if ceil32(_25517) > _25517:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _25517 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_25517) + 32], 
                mem[ceil32(uint255(stor11.length.field_1)) + 160 len s] = call.data[calldata.size len s]
                t = s
                idx = nodeType[arg1]
                while idx:
                    if t < 1:
                        revert with 'NH{q', 17
                    if 48 > -(idx % 10) - 1:
                        revert with 'NH{q', 17
                    if t - 1 >= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                        revert with 'NH{q', 50
                    mem[t + ceil32(uint255(stor11.length.field_1)) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                    t = t - 1
                    idx = idx / 10
                    continue 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
                if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                    if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                                _23448 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23448)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23448)]
                                if ceil32(_23448) > _23448:
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _23448 + 256] = 0
                                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23448) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _23556 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                                if ceil32(_23556) > _23556:
                                    mem[_23556 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_23556) + -mem[64] + 64
                            idx = 0
                            t = 0
                            while idx < uint255(stor12.length.field_1):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _25518 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_25518)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_25518)]
                            if ceil32(_25518) > _25518:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _25518 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_25518) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                            _23557 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23557)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23557)]
                            if ceil32(_23557) > _23557:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _23557 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23557) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _23765 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_23765) > _23765:
                                mem[_23765 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_23765) + -mem[64] + 64
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1 % 128:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _25519 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_25519)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_25519)]
                        if ceil32(_25519) > _25519:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _25519 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_25519) + 32], 
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _23559 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23559)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23559)]
                            if ceil32(_23559) > _23559:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _23559 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23559) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _23766 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_23766) > _23766:
                                mem[_23766 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_23766) + -mem[64] + 64
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _25520 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_25520)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_25520)]
                        if ceil32(_25520) > _25520:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _25520 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_25520) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _23767 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23767)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23767)]
                        if ceil32(_23767) > _23767:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _23767 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23767) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23914 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_23914) > _23914:
                            mem[_23914 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23914) + -mem[64] + 64
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _25521 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_25521)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_25521)]
                    if ceil32(_25521) > _25521:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _25521 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_25521) + 32], 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192] = 0
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _23451 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23451)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23451)]
                            if ceil32(_23451) > _23451:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _23451 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23451) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _23561 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_23561) > _23561:
                                mem[_23561 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_23561) + -mem[64] + 64
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _25522 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_25522)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_25522)]
                        if ceil32(_25522) > _25522:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _25522 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_25522) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _23562 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23562)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23562)]
                        if ceil32(_23562) > _23562:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _23562 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23562) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23770 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_23770) > _23770:
                            mem[_23770 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23770) + -mem[64] + 64
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _25523 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_25523)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_25523)]
                    if ceil32(_25523) > _25523:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _25523 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_25523) + 32], 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _23564 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23564)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23564)]
                        if ceil32(_23564) > _23564:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _23564 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23564) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23771 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_23771) > _23771:
                            mem[_23771 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23771) + -mem[64] + 64
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _25524 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_25524)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_25524)]
                    if ceil32(_25524) > _25524:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _25524 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_25524) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _23772 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23772)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23772)]
                    if ceil32(_23772) > _23772:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _23772 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23772) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23917 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_23917) > _23917:
                        mem[_23917 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23917) + -mem[64] + 64
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _25525 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_25525)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_25525)]
                if ceil32(_25525) > _25525:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _25525 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_25525) + 32], 
            mem[128] = 256 * Mask(248, 0, stor11.length.field_8)
            if uint255(stor11.length.field_1) <= 0:
                return ''
            mem[0] = arg1
            mem[32] = 23
            if not nodeType[arg1]:
                mem[64] = ceil32(uint255(stor11.length.field_1)) + 192
                mem[ceil32(uint255(stor11.length.field_1)) + 128] = 1
                mem[ceil32(uint255(stor11.length.field_1)) + 160] = '0'
                mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 224] = '0'
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = 0
                if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                            if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                                return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _7182 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                            if ceil32(_7182) > _7182:
                                mem[_7182 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_7182) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        s = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 224] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        _12448 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                        _12872 = mem[_12448]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[_12448]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(_12872)] = mem[_12448 + 32 len ceil32(_12872)]
                        if ceil32(_12872) > _12872:
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + _12872 + 289] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(_12872) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                            return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7272 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        if ceil32(_7272) > _7272:
                            mem[_7272 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7272) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12449 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                    _12873 = mem[_12449]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[_12449]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(_12873)] = mem[_12449 + 32 len ceil32(_12873)]
                    if ceil32(_12873) > _12873:
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + _12873 + 289] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(_12873) + 32], 
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                            return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7187 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        if ceil32(_7187) > _7187:
                            mem[_7187 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7187) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12452 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                    _12876 = mem[_12452]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[_12452]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(_12876)] = mem[_12452 + 32 len ceil32(_12876)]
                    if ceil32(_12876) > _12876:
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + _12876 + 289] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(_12876) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                    if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                        return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7275 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                    if ceil32(_7275) > _7275:
                        mem[_7275 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7275) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12453 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                _12877 = mem[_12453]
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[_12453]
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(_12877)] = mem[_12453 + 32 len ceil32(_12877)]
                if ceil32(_12877) > _12877:
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + _12877 + 289] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(_12877) + 32], 
            s = 0
            idx = nodeType[arg1]
            while idx:
                if s == -1:
                    revert with 'NH{q', 17
                s = s + 1
                idx = idx / 10
                continue 
            if s > test266151307():
                revert with 'NH{q', 65
            mem[ceil32(uint255(stor11.length.field_1)) + 128] = s
            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160
            if not s:
                t = s
                idx = nodeType[arg1]
                while idx:
                    if t < 1:
                        revert with 'NH{q', 17
                    if 48 > -(idx % 10) - 1:
                        revert with 'NH{q', 17
                    if t - 1 >= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                        revert with 'NH{q', 50
                    mem[t + ceil32(uint255(stor11.length.field_1)) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                    t = t - 1
                    idx = idx / 10
                    continue 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
                if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
                    _12520 = mem[ceil32(uint255(stor11.length.field_1)) + 128]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                    if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                                _18666 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18666)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18666)]
                                if ceil32(_18666) > _18666:
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18666 + 256] = 0
                                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18666) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _18802 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                                if ceil32(_18802) > _18802:
                                    mem[_18802 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_18802) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < uint255(stor12.length.field_1):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22086 = mem[64]
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + uint255(stor12.length.field_1) + 192] = 32
                            _22918 = mem[_22086]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + uint255(stor12.length.field_1) + 224] = mem[_22086]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + uint255(stor12.length.field_1) + 256 len ceil32(_22918)] = mem[_22086 + 32 len ceil32(_22918)]
                            if ceil32(_22918) > _22918:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + uint255(stor12.length.field_1) + _22918 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + uint255(stor12.length.field_1) + 224 len ceil32(_22918) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                            _18803 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18803)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18803)]
                            if ceil32(_18803) > _18803:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18803 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18803) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18995 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_18995) > _18995:
                                mem[_18995 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18995) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1 % 128:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22087 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + stor12.length.field_1 % 128 + 192] = 32
                        _22919 = mem[_22087]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + stor12.length.field_1 % 128 + 224] = mem[_22087]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + stor12.length.field_1 % 128 + 256 len ceil32(_22919)] = mem[_22087 + 32 len ceil32(_22919)]
                        if ceil32(_22919) > _22919:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + stor12.length.field_1 % 128 + _22919 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + stor12.length.field_1 % 128 + 224 len ceil32(_22919) + 32], 
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18805 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18805)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18805)]
                            if ceil32(_18805) > _18805:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18805 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18805) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18996 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_18996) > _18996:
                                mem[_18996 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18996) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22088 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + uint255(stor12.length.field_1) + 192] = 32
                        _22920 = mem[_22088]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + uint255(stor12.length.field_1) + 224] = mem[_22088]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + uint255(stor12.length.field_1) + 256 len ceil32(_22920)] = mem[_22088 + 32 len ceil32(_22920)]
                        if ceil32(_22920) > _22920:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + uint255(stor12.length.field_1) + _22920 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + uint255(stor12.length.field_1) + 224 len ceil32(_22920) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18997 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18997)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18997)]
                        if ceil32(_18997) > _18997:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18997 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18997) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19148 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_19148) > _19148:
                            mem[_19148 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19148) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22089 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + stor12.length.field_1 % 128 + 192] = 32
                    _22921 = mem[_22089]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + stor12.length.field_1 % 128 + 224] = mem[_22089]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + stor12.length.field_1 % 128 + 256 len ceil32(_22921)] = mem[_22089 + 32 len ceil32(_22921)]
                    if ceil32(_22921) > _22921:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + stor12.length.field_1 % 128 + _22921 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12520 + stor12.length.field_1 % 128 + 224 len ceil32(_22921) + 32], 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192] = 0
                _12628 = mem[ceil32(uint255(stor11.length.field_1)) + 128]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18669 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18669)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18669)]
                            if ceil32(_18669) > _18669:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18669 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18669) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18807 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_18807) > _18807:
                                mem[_18807 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18807) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22090 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + uint255(stor12.length.field_1) + 192] = 32
                        _22922 = mem[_22090]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + uint255(stor12.length.field_1) + 224] = mem[_22090]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + uint255(stor12.length.field_1) + 256 len ceil32(_22922)] = mem[_22090 + 32 len ceil32(_22922)]
                        if ceil32(_22922) > _22922:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + uint255(stor12.length.field_1) + _22922 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + uint255(stor12.length.field_1) + 224 len ceil32(_22922) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18808 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18808)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18808)]
                        if ceil32(_18808) > _18808:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18808 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18808) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19000 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_19000) > _19000:
                            mem[_19000 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19000) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22091 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + stor12.length.field_1 % 128 + 192] = 32
                    _22923 = mem[_22091]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + stor12.length.field_1 % 128 + 224] = mem[_22091]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + stor12.length.field_1 % 128 + 256 len ceil32(_22923)] = mem[_22091 + 32 len ceil32(_22923)]
                    if ceil32(_22923) > _22923:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + stor12.length.field_1 % 128 + _22923 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + stor12.length.field_1 % 128 + 224 len ceil32(_22923) + 32], 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18810 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18810)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18810)]
                        if ceil32(_18810) > _18810:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18810 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18810) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19001 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_19001) > _19001:
                            mem[_19001 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19001) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22092 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + uint255(stor12.length.field_1) + 192] = 32
                    _22924 = mem[_22092]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + uint255(stor12.length.field_1) + 224] = mem[_22092]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + uint255(stor12.length.field_1) + 256 len ceil32(_22924)] = mem[_22092 + 32 len ceil32(_22924)]
                    if ceil32(_22924) > _22924:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + uint255(stor12.length.field_1) + _22924 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + uint255(stor12.length.field_1) + 224 len ceil32(_22924) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _19002 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19002)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_19002)]
                    if ceil32(_19002) > _19002:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _19002 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19002) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19151 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_19151) > _19151:
                        mem[_19151 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19151) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22093 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + stor12.length.field_1 % 128 + 192] = 32
                _22925 = mem[_22093]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + stor12.length.field_1 % 128 + 224] = mem[_22093]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + stor12.length.field_1 % 128 + 256 len ceil32(_22925)] = mem[_22093 + 32 len ceil32(_22925)]
                if ceil32(_22925) > _22925:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + stor12.length.field_1 % 128 + _22925 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12628 + stor12.length.field_1 % 128 + 224 len ceil32(_22925) + 32], 
            mem[ceil32(uint255(stor11.length.field_1)) + 160 len s] = call.data[calldata.size len s]
            t = s
            idx = nodeType[arg1]
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(uint255(stor11.length.field_1)) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
            if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
                _12521 = mem[ceil32(uint255(stor11.length.field_1)) + 128]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18672 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18672)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18672)]
                            if ceil32(_18672) > _18672:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18672 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18672) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18812 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_18812) > _18812:
                                mem[_18812 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18812) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22094 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + uint255(stor12.length.field_1) + 192] = 32
                        _22926 = mem[_22094]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + uint255(stor12.length.field_1) + 224] = mem[_22094]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + uint255(stor12.length.field_1) + 256 len ceil32(_22926)] = mem[_22094 + 32 len ceil32(_22926)]
                        if ceil32(_22926) > _22926:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + uint255(stor12.length.field_1) + _22926 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + uint255(stor12.length.field_1) + 224 len ceil32(_22926) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18813 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18813)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18813)]
                        if ceil32(_18813) > _18813:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18813 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18813) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19005 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_19005) > _19005:
                            mem[_19005 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19005) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22095 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + stor12.length.field_1 % 128 + 192] = 32
                    _22927 = mem[_22095]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + stor12.length.field_1 % 128 + 224] = mem[_22095]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + stor12.length.field_1 % 128 + 256 len ceil32(_22927)] = mem[_22095 + 32 len ceil32(_22927)]
                    if ceil32(_22927) > _22927:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + stor12.length.field_1 % 128 + _22927 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + stor12.length.field_1 % 128 + 224 len ceil32(_22927) + 32], 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18815 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18815)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18815)]
                        if ceil32(_18815) > _18815:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18815 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18815) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19006 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_19006) > _19006:
                            mem[_19006 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19006) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22096 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + uint255(stor12.length.field_1) + 192] = 32
                    _22928 = mem[_22096]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + uint255(stor12.length.field_1) + 224] = mem[_22096]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + uint255(stor12.length.field_1) + 256 len ceil32(_22928)] = mem[_22096 + 32 len ceil32(_22928)]
                    if ceil32(_22928) > _22928:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + uint255(stor12.length.field_1) + _22928 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + uint255(stor12.length.field_1) + 224 len ceil32(_22928) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _19007 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19007)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_19007)]
                    if ceil32(_19007) > _19007:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _19007 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19007) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19154 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_19154) > _19154:
                        mem[_19154 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19154) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22097 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + stor12.length.field_1 % 128 + 192] = 32
                _22929 = mem[_22097]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + stor12.length.field_1 % 128 + 224] = mem[_22097]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + stor12.length.field_1 % 128 + 256 len ceil32(_22929)] = mem[_22097 + 32 len ceil32(_22929)]
                if ceil32(_22929) > _22929:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + stor12.length.field_1 % 128 + _22929 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12521 + stor12.length.field_1 % 128 + 224 len ceil32(_22929) + 32], 
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192] = 0
            _12629 = mem[ceil32(uint255(stor11.length.field_1)) + 128]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
            if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18675 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18675)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18675)]
                        if ceil32(_18675) > _18675:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18675 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18675) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18817 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_18817) > _18817:
                            mem[_18817 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18817) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22098 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + uint255(stor12.length.field_1) + 192] = 32
                    _22930 = mem[_22098]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + uint255(stor12.length.field_1) + 224] = mem[_22098]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + uint255(stor12.length.field_1) + 256 len ceil32(_22930)] = mem[_22098 + 32 len ceil32(_22930)]
                    if ceil32(_22930) > _22930:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + uint255(stor12.length.field_1) + _22930 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + uint255(stor12.length.field_1) + 224 len ceil32(_22930) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _18818 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18818)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18818)]
                    if ceil32(_18818) > _18818:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18818 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18818) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19010 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_19010) > _19010:
                        mem[_19010 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19010) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22099 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + stor12.length.field_1 % 128 + 192] = 32
                _22931 = mem[_22099]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + stor12.length.field_1 % 128 + 224] = mem[_22099]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + stor12.length.field_1 % 128 + 256 len ceil32(_22931)] = mem[_22099 + 32 len ceil32(_22931)]
                if ceil32(_22931) > _22931:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + stor12.length.field_1 % 128 + _22931 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + stor12.length.field_1 % 128 + 224 len ceil32(_22931) + 32], 
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _18820 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18820)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18820)]
                    if ceil32(_18820) > _18820:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18820 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18820) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19011 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_19011) > _19011:
                        mem[_19011 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19011) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22100 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + uint255(stor12.length.field_1) + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + uint255(stor12.length.field_1) + 192] = 32
                _22932 = mem[_22100]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + uint255(stor12.length.field_1) + 224] = mem[_22100]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + uint255(stor12.length.field_1) + 256 len ceil32(_22932)] = mem[_22100 + 32 len ceil32(_22932)]
                if ceil32(_22932) > _22932:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + uint255(stor12.length.field_1) + _22932 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + uint255(stor12.length.field_1) + 224 len ceil32(_22932) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _19012 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19012)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_19012)]
                if ceil32(_19012) > _19012:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _19012 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19012) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19157 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                if ceil32(_19157) > _19157:
                    mem[_19157 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19157) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22101 = mem[64]
            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + stor12.length.field_1 % 128 + 192
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + stor12.length.field_1 % 128 + 192] = 32
            _22933 = mem[_22101]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + stor12.length.field_1 % 128 + 224] = mem[_22101]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + stor12.length.field_1 % 128 + 256 len ceil32(_22933)] = mem[_22101 + 32 len ceil32(_22933)]
            if ceil32(_22933) > _22933:
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + stor12.length.field_1 % 128 + _22933 + 256] = 0
            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12629 + stor12.length.field_1 % 128 + 224 len ceil32(_22933) + 32], 
        if bool(stor11.length) == uint255(stor11.length.field_1) < 32:
            revert with 'NH{q', 34
        if not uint255(stor11.length.field_1):
            if uint255(stor11.length.field_1) <= 0:
                return ''
            mem[0] = arg1
            mem[32] = 23
            if not nodeType[arg1]:
                mem[64] = ceil32(uint255(stor11.length.field_1)) + 192
                mem[ceil32(uint255(stor11.length.field_1)) + 128] = 1
                mem[ceil32(uint255(stor11.length.field_1)) + 160] = '0'
                mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 224] = '0'
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = 0
                if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                            if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                                return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _7142 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                            if ceil32(_7142) > _7142:
                                mem[_7142 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_7142) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        s = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 224] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        _12424 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                        _12848 = mem[_12424]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[_12424]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(_12848)] = mem[_12424 + 32 len ceil32(_12848)]
                        if ceil32(_12848) > _12848:
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + _12848 + 289] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(_12848) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                            return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7246 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        if ceil32(_7246) > _7246:
                            mem[_7246 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7246) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12425 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                    _12849 = mem[_12425]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[_12425]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(_12849)] = mem[_12425 + 32 len ceil32(_12849)]
                    if ceil32(_12849) > _12849:
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + _12849 + 289] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(_12849) + 32], 
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                            return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7147 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        if ceil32(_7147) > _7147:
                            mem[_7147 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7147) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12428 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                    _12852 = mem[_12428]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[_12428]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(_12852)] = mem[_12428 + 32 len ceil32(_12852)]
                    if ceil32(_12852) > _12852:
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + _12852 + 289] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(_12852) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                    if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                        return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7249 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                    if ceil32(_7249) > _7249:
                        mem[_7249 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7249) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12429 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                _12853 = mem[_12429]
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[_12429]
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(_12853)] = mem[_12429 + 32 len ceil32(_12853)]
                if ceil32(_12853) > _12853:
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + _12853 + 289] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(_12853) + 32], 
            s = 0
            idx = nodeType[arg1]
            while idx:
                if s == -1:
                    revert with 'NH{q', 17
                s = s + 1
                idx = idx / 10
                continue 
            if s > test266151307():
                revert with 'NH{q', 65
            mem[ceil32(uint255(stor11.length.field_1)) + 128] = s
            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160
            if not s:
                t = s
                idx = nodeType[arg1]
                while idx:
                    if t < 1:
                        revert with 'NH{q', 17
                    if 48 > -(idx % 10) - 1:
                        revert with 'NH{q', 17
                    if t - 1 >= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                        revert with 'NH{q', 50
                    mem[t + ceil32(uint255(stor11.length.field_1)) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                    t = t - 1
                    idx = idx / 10
                    continue 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
                if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
                    _12486 = mem[ceil32(uint255(stor11.length.field_1)) + 128]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                    if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                                _18630 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18630)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18630)]
                                if ceil32(_18630) > _18630:
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18630 + 256] = 0
                                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18630) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _18726 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                                if ceil32(_18726) > _18726:
                                    mem[_18726 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_18726) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < uint255(stor12.length.field_1):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22038 = mem[64]
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + uint255(stor12.length.field_1) + 192] = 32
                            _22870 = mem[_22038]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + uint255(stor12.length.field_1) + 224] = mem[_22038]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + uint255(stor12.length.field_1) + 256 len ceil32(_22870)] = mem[_22038 + 32 len ceil32(_22870)]
                            if ceil32(_22870) > _22870:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + uint255(stor12.length.field_1) + _22870 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + uint255(stor12.length.field_1) + 224 len ceil32(_22870) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                            _18727 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18727)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18727)]
                            if ceil32(_18727) > _18727:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18727 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18727) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18919 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_18919) > _18919:
                                mem[_18919 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18919) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1 % 128:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22039 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + stor12.length.field_1 % 128 + 192] = 32
                        _22871 = mem[_22039]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + stor12.length.field_1 % 128 + 224] = mem[_22039]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + stor12.length.field_1 % 128 + 256 len ceil32(_22871)] = mem[_22039 + 32 len ceil32(_22871)]
                        if ceil32(_22871) > _22871:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + stor12.length.field_1 % 128 + _22871 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + stor12.length.field_1 % 128 + 224 len ceil32(_22871) + 32], 
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18729 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18729)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18729)]
                            if ceil32(_18729) > _18729:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18729 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18729) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18920 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_18920) > _18920:
                                mem[_18920 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18920) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22040 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + uint255(stor12.length.field_1) + 192] = 32
                        _22872 = mem[_22040]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + uint255(stor12.length.field_1) + 224] = mem[_22040]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + uint255(stor12.length.field_1) + 256 len ceil32(_22872)] = mem[_22040 + 32 len ceil32(_22872)]
                        if ceil32(_22872) > _22872:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + uint255(stor12.length.field_1) + _22872 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + uint255(stor12.length.field_1) + 224 len ceil32(_22872) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18921 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18921)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18921)]
                        if ceil32(_18921) > _18921:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18921 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18921) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19112 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_19112) > _19112:
                            mem[_19112 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19112) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22041 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + stor12.length.field_1 % 128 + 192] = 32
                    _22873 = mem[_22041]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + stor12.length.field_1 % 128 + 224] = mem[_22041]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + stor12.length.field_1 % 128 + 256 len ceil32(_22873)] = mem[_22041 + 32 len ceil32(_22873)]
                    if ceil32(_22873) > _22873:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + stor12.length.field_1 % 128 + _22873 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12486 + stor12.length.field_1 % 128 + 224 len ceil32(_22873) + 32], 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192] = 0
                _12574 = mem[ceil32(uint255(stor11.length.field_1)) + 128]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18633 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18633)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18633)]
                            if ceil32(_18633) > _18633:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18633 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18633) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18731 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_18731) > _18731:
                                mem[_18731 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18731) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22042 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + uint255(stor12.length.field_1) + 192] = 32
                        _22874 = mem[_22042]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + uint255(stor12.length.field_1) + 224] = mem[_22042]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + uint255(stor12.length.field_1) + 256 len ceil32(_22874)] = mem[_22042 + 32 len ceil32(_22874)]
                        if ceil32(_22874) > _22874:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + uint255(stor12.length.field_1) + _22874 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + uint255(stor12.length.field_1) + 224 len ceil32(_22874) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18732 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18732)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18732)]
                        if ceil32(_18732) > _18732:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18732 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18732) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18924 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_18924) > _18924:
                            mem[_18924 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18924) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22043 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + stor12.length.field_1 % 128 + 192] = 32
                    _22875 = mem[_22043]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + stor12.length.field_1 % 128 + 224] = mem[_22043]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + stor12.length.field_1 % 128 + 256 len ceil32(_22875)] = mem[_22043 + 32 len ceil32(_22875)]
                    if ceil32(_22875) > _22875:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + stor12.length.field_1 % 128 + _22875 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + stor12.length.field_1 % 128 + 224 len ceil32(_22875) + 32], 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18734 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18734)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18734)]
                        if ceil32(_18734) > _18734:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18734 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18734) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18925 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_18925) > _18925:
                            mem[_18925 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18925) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22044 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + uint255(stor12.length.field_1) + 192] = 32
                    _22876 = mem[_22044]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + uint255(stor12.length.field_1) + 224] = mem[_22044]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + uint255(stor12.length.field_1) + 256 len ceil32(_22876)] = mem[_22044 + 32 len ceil32(_22876)]
                    if ceil32(_22876) > _22876:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + uint255(stor12.length.field_1) + _22876 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + uint255(stor12.length.field_1) + 224 len ceil32(_22876) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _18926 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18926)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18926)]
                    if ceil32(_18926) > _18926:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18926 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18926) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19115 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_19115) > _19115:
                        mem[_19115 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19115) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22045 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + stor12.length.field_1 % 128 + 192] = 32
                _22877 = mem[_22045]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + stor12.length.field_1 % 128 + 224] = mem[_22045]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + stor12.length.field_1 % 128 + 256 len ceil32(_22877)] = mem[_22045 + 32 len ceil32(_22877)]
                if ceil32(_22877) > _22877:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + stor12.length.field_1 % 128 + _22877 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12574 + stor12.length.field_1 % 128 + 224 len ceil32(_22877) + 32], 
            mem[ceil32(uint255(stor11.length.field_1)) + 160 len s] = call.data[calldata.size len s]
            t = s
            idx = nodeType[arg1]
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(uint255(stor11.length.field_1)) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
            if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
                _12487 = mem[ceil32(uint255(stor11.length.field_1)) + 128]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18636 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18636)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18636)]
                            if ceil32(_18636) > _18636:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18636 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18636) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18736 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_18736) > _18736:
                                mem[_18736 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18736) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22046 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + uint255(stor12.length.field_1) + 192] = 32
                        _22878 = mem[_22046]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + uint255(stor12.length.field_1) + 224] = mem[_22046]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + uint255(stor12.length.field_1) + 256 len ceil32(_22878)] = mem[_22046 + 32 len ceil32(_22878)]
                        if ceil32(_22878) > _22878:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + uint255(stor12.length.field_1) + _22878 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + uint255(stor12.length.field_1) + 224 len ceil32(_22878) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18737 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18737)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18737)]
                        if ceil32(_18737) > _18737:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18737 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18737) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18929 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_18929) > _18929:
                            mem[_18929 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18929) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22047 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + stor12.length.field_1 % 128 + 192] = 32
                    _22879 = mem[_22047]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + stor12.length.field_1 % 128 + 224] = mem[_22047]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + stor12.length.field_1 % 128 + 256 len ceil32(_22879)] = mem[_22047 + 32 len ceil32(_22879)]
                    if ceil32(_22879) > _22879:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + stor12.length.field_1 % 128 + _22879 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + stor12.length.field_1 % 128 + 224 len ceil32(_22879) + 32], 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18739 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18739)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18739)]
                        if ceil32(_18739) > _18739:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18739 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18739) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18930 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_18930) > _18930:
                            mem[_18930 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18930) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22048 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + uint255(stor12.length.field_1) + 192] = 32
                    _22880 = mem[_22048]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + uint255(stor12.length.field_1) + 224] = mem[_22048]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + uint255(stor12.length.field_1) + 256 len ceil32(_22880)] = mem[_22048 + 32 len ceil32(_22880)]
                    if ceil32(_22880) > _22880:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + uint255(stor12.length.field_1) + _22880 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + uint255(stor12.length.field_1) + 224 len ceil32(_22880) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _18931 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18931)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18931)]
                    if ceil32(_18931) > _18931:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18931 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18931) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19118 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_19118) > _19118:
                        mem[_19118 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19118) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22049 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + stor12.length.field_1 % 128 + 192] = 32
                _22881 = mem[_22049]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + stor12.length.field_1 % 128 + 224] = mem[_22049]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + stor12.length.field_1 % 128 + 256 len ceil32(_22881)] = mem[_22049 + 32 len ceil32(_22881)]
                if ceil32(_22881) > _22881:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + stor12.length.field_1 % 128 + _22881 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12487 + stor12.length.field_1 % 128 + 224 len ceil32(_22881) + 32], 
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192] = 0
            _12575 = mem[ceil32(uint255(stor11.length.field_1)) + 128]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
            if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18639 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18639)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18639)]
                        if ceil32(_18639) > _18639:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18639 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18639) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18741 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_18741) > _18741:
                            mem[_18741 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18741) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22050 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + uint255(stor12.length.field_1) + 192] = 32
                    _22882 = mem[_22050]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + uint255(stor12.length.field_1) + 224] = mem[_22050]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + uint255(stor12.length.field_1) + 256 len ceil32(_22882)] = mem[_22050 + 32 len ceil32(_22882)]
                    if ceil32(_22882) > _22882:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + uint255(stor12.length.field_1) + _22882 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + uint255(stor12.length.field_1) + 224 len ceil32(_22882) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _18742 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18742)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18742)]
                    if ceil32(_18742) > _18742:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18742 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18742) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _18934 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_18934) > _18934:
                        mem[_18934 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_18934) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22051 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + stor12.length.field_1 % 128 + 192] = 32
                _22883 = mem[_22051]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + stor12.length.field_1 % 128 + 224] = mem[_22051]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + stor12.length.field_1 % 128 + 256 len ceil32(_22883)] = mem[_22051 + 32 len ceil32(_22883)]
                if ceil32(_22883) > _22883:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + stor12.length.field_1 % 128 + _22883 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + stor12.length.field_1 % 128 + 224 len ceil32(_22883) + 32], 
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _18744 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18744)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18744)]
                    if ceil32(_18744) > _18744:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18744 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18744) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _18935 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_18935) > _18935:
                        mem[_18935 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_18935) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22052 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + uint255(stor12.length.field_1) + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + uint255(stor12.length.field_1) + 192] = 32
                _22884 = mem[_22052]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + uint255(stor12.length.field_1) + 224] = mem[_22052]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + uint255(stor12.length.field_1) + 256 len ceil32(_22884)] = mem[_22052 + 32 len ceil32(_22884)]
                if ceil32(_22884) > _22884:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + uint255(stor12.length.field_1) + _22884 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + uint255(stor12.length.field_1) + 224 len ceil32(_22884) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _18936 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18936)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18936)]
                if ceil32(_18936) > _18936:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18936 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18936) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19121 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                if ceil32(_19121) > _19121:
                    mem[_19121 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19121) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22053 = mem[64]
            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + stor12.length.field_1 % 128 + 192
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + stor12.length.field_1 % 128 + 192] = 32
            _22885 = mem[_22053]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + stor12.length.field_1 % 128 + 224] = mem[_22053]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + stor12.length.field_1 % 128 + 256 len ceil32(_22885)] = mem[_22053 + 32 len ceil32(_22885)]
            if ceil32(_22885) > _22885:
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + stor12.length.field_1 % 128 + _22885 + 256] = 0
            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12575 + stor12.length.field_1 % 128 + 224 len ceil32(_22885) + 32], 
        if 31 >= uint255(stor11.length.field_1):
            mem[128] = 256 * Mask(248, 0, stor11.length.field_8)
            if uint255(stor11.length.field_1) <= 0:
                return ''
            mem[0] = arg1
            mem[32] = 23
            if not nodeType[arg1]:
                mem[64] = ceil32(uint255(stor11.length.field_1)) + 192
                mem[ceil32(uint255(stor11.length.field_1)) + 128] = 1
                mem[ceil32(uint255(stor11.length.field_1)) + 160] = '0'
                mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 224] = '0'
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = 0
                if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                            if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                                return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _7156 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                            if ceil32(_7156) > _7156:
                                mem[_7156 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_7156) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        s = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 224] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        _12432 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                        _12856 = mem[_12432]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[_12432]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(_12856)] = mem[_12432 + 32 len ceil32(_12856)]
                        if ceil32(_12856) > _12856:
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + _12856 + 289] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(_12856) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                            return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7255 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        if ceil32(_7255) > _7255:
                            mem[_7255 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7255) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12433 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                    _12857 = mem[_12433]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[_12433]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(_12857)] = mem[_12433 + 32 len ceil32(_12857)]
                    if ceil32(_12857) > _12857:
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + _12857 + 289] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(_12857) + 32], 
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                            return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7161 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        if ceil32(_7161) > _7161:
                            mem[_7161 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7161) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12436 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                    _12860 = mem[_12436]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[_12436]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(_12860)] = mem[_12436 + 32 len ceil32(_12860)]
                    if ceil32(_12860) > _12860:
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + _12860 + 289] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(_12860) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                    if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                        return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7258 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                    if ceil32(_7258) > _7258:
                        mem[_7258 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7258) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12437 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                _12861 = mem[_12437]
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[_12437]
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(_12861)] = mem[_12437 + 32 len ceil32(_12861)]
                if ceil32(_12861) > _12861:
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + _12861 + 289] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(_12861) + 32], 
            s = 0
            idx = nodeType[arg1]
            while idx:
                if s == -1:
                    revert with 'NH{q', 17
                s = s + 1
                idx = idx / 10
                continue 
            if s > test266151307():
                revert with 'NH{q', 65
            mem[ceil32(uint255(stor11.length.field_1)) + 128] = s
            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160
            if not s:
                t = s
                idx = nodeType[arg1]
                while idx:
                    if t < 1:
                        revert with 'NH{q', 17
                    if 48 > -(idx % 10) - 1:
                        revert with 'NH{q', 17
                    if t - 1 >= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                        revert with 'NH{q', 50
                    mem[t + ceil32(uint255(stor11.length.field_1)) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                    t = t - 1
                    idx = idx / 10
                    continue 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
                if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
                    _12498 = mem[ceil32(uint255(stor11.length.field_1)) + 128]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                    if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                                _18642 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18642)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18642)]
                                if ceil32(_18642) > _18642:
                                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18642 + 256] = 0
                                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18642) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _18754 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                                if ceil32(_18754) > _18754:
                                    mem[_18754 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_18754) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < uint255(stor12.length.field_1):
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22054 = mem[64]
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + uint255(stor12.length.field_1) + 192] = 32
                            _22886 = mem[_22054]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + uint255(stor12.length.field_1) + 224] = mem[_22054]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + uint255(stor12.length.field_1) + 256 len ceil32(_22886)] = mem[_22054 + 32 len ceil32(_22886)]
                            if ceil32(_22886) > _22886:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + uint255(stor12.length.field_1) + _22886 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + uint255(stor12.length.field_1) + 224 len ceil32(_22886) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                            _18755 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18755)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18755)]
                            if ceil32(_18755) > _18755:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18755 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18755) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18947 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_18947) > _18947:
                                mem[_18947 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18947) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1 % 128:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22055 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + stor12.length.field_1 % 128 + 192] = 32
                        _22887 = mem[_22055]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + stor12.length.field_1 % 128 + 224] = mem[_22055]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + stor12.length.field_1 % 128 + 256 len ceil32(_22887)] = mem[_22055 + 32 len ceil32(_22887)]
                        if ceil32(_22887) > _22887:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + stor12.length.field_1 % 128 + _22887 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + stor12.length.field_1 % 128 + 224 len ceil32(_22887) + 32], 
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18757 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18757)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18757)]
                            if ceil32(_18757) > _18757:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18757 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18757) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18948 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_18948) > _18948:
                                mem[_18948 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18948) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22056 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + uint255(stor12.length.field_1) + 192] = 32
                        _22888 = mem[_22056]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + uint255(stor12.length.field_1) + 224] = mem[_22056]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + uint255(stor12.length.field_1) + 256 len ceil32(_22888)] = mem[_22056 + 32 len ceil32(_22888)]
                        if ceil32(_22888) > _22888:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + uint255(stor12.length.field_1) + _22888 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + uint255(stor12.length.field_1) + 224 len ceil32(_22888) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18949 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18949)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18949)]
                        if ceil32(_18949) > _18949:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18949 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18949) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19124 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_19124) > _19124:
                            mem[_19124 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19124) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22057 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + stor12.length.field_1 % 128 + 192] = 32
                    _22889 = mem[_22057]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + stor12.length.field_1 % 128 + 224] = mem[_22057]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + stor12.length.field_1 % 128 + 256 len ceil32(_22889)] = mem[_22057 + 32 len ceil32(_22889)]
                    if ceil32(_22889) > _22889:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + stor12.length.field_1 % 128 + _22889 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12498 + stor12.length.field_1 % 128 + 224 len ceil32(_22889) + 32], 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192] = 0
                _12592 = mem[ceil32(uint255(stor11.length.field_1)) + 128]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18645 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18645)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18645)]
                            if ceil32(_18645) > _18645:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18645 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18645) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18759 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_18759) > _18759:
                                mem[_18759 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18759) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22058 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + uint255(stor12.length.field_1) + 192] = 32
                        _22890 = mem[_22058]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + uint255(stor12.length.field_1) + 224] = mem[_22058]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + uint255(stor12.length.field_1) + 256 len ceil32(_22890)] = mem[_22058 + 32 len ceil32(_22890)]
                        if ceil32(_22890) > _22890:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + uint255(stor12.length.field_1) + _22890 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + uint255(stor12.length.field_1) + 224 len ceil32(_22890) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18760 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18760)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18760)]
                        if ceil32(_18760) > _18760:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18760 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18760) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18952 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_18952) > _18952:
                            mem[_18952 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18952) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22059 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + stor12.length.field_1 % 128 + 192] = 32
                    _22891 = mem[_22059]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + stor12.length.field_1 % 128 + 224] = mem[_22059]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + stor12.length.field_1 % 128 + 256 len ceil32(_22891)] = mem[_22059 + 32 len ceil32(_22891)]
                    if ceil32(_22891) > _22891:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + stor12.length.field_1 % 128 + _22891 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + stor12.length.field_1 % 128 + 224 len ceil32(_22891) + 32], 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18762 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18762)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18762)]
                        if ceil32(_18762) > _18762:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18762 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18762) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18953 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_18953) > _18953:
                            mem[_18953 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18953) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22060 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + uint255(stor12.length.field_1) + 192] = 32
                    _22892 = mem[_22060]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + uint255(stor12.length.field_1) + 224] = mem[_22060]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + uint255(stor12.length.field_1) + 256 len ceil32(_22892)] = mem[_22060 + 32 len ceil32(_22892)]
                    if ceil32(_22892) > _22892:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + uint255(stor12.length.field_1) + _22892 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + uint255(stor12.length.field_1) + 224 len ceil32(_22892) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _18954 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18954)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18954)]
                    if ceil32(_18954) > _18954:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18954 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18954) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19127 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_19127) > _19127:
                        mem[_19127 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19127) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22061 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + stor12.length.field_1 % 128 + 192] = 32
                _22893 = mem[_22061]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + stor12.length.field_1 % 128 + 224] = mem[_22061]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + stor12.length.field_1 % 128 + 256 len ceil32(_22893)] = mem[_22061 + 32 len ceil32(_22893)]
                if ceil32(_22893) > _22893:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + stor12.length.field_1 % 128 + _22893 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12592 + stor12.length.field_1 % 128 + 224 len ceil32(_22893) + 32], 
            mem[ceil32(uint255(stor11.length.field_1)) + 160 len s] = call.data[calldata.size len s]
            t = s
            idx = nodeType[arg1]
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(uint255(stor11.length.field_1)) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
            if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
                _12499 = mem[ceil32(uint255(stor11.length.field_1)) + 128]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18648 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18648)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18648)]
                            if ceil32(_18648) > _18648:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18648 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18648) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18764 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_18764) > _18764:
                                mem[_18764 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18764) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22062 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + uint255(stor12.length.field_1) + 192] = 32
                        _22894 = mem[_22062]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + uint255(stor12.length.field_1) + 224] = mem[_22062]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + uint255(stor12.length.field_1) + 256 len ceil32(_22894)] = mem[_22062 + 32 len ceil32(_22894)]
                        if ceil32(_22894) > _22894:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + uint255(stor12.length.field_1) + _22894 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + uint255(stor12.length.field_1) + 224 len ceil32(_22894) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18765 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18765)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18765)]
                        if ceil32(_18765) > _18765:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18765 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18765) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18957 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_18957) > _18957:
                            mem[_18957 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18957) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22063 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + stor12.length.field_1 % 128 + 192] = 32
                    _22895 = mem[_22063]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + stor12.length.field_1 % 128 + 224] = mem[_22063]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + stor12.length.field_1 % 128 + 256 len ceil32(_22895)] = mem[_22063 + 32 len ceil32(_22895)]
                    if ceil32(_22895) > _22895:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + stor12.length.field_1 % 128 + _22895 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + stor12.length.field_1 % 128 + 224 len ceil32(_22895) + 32], 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18767 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18767)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18767)]
                        if ceil32(_18767) > _18767:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18767 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18767) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18958 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_18958) > _18958:
                            mem[_18958 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18958) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22064 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + uint255(stor12.length.field_1) + 192] = 32
                    _22896 = mem[_22064]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + uint255(stor12.length.field_1) + 224] = mem[_22064]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + uint255(stor12.length.field_1) + 256 len ceil32(_22896)] = mem[_22064 + 32 len ceil32(_22896)]
                    if ceil32(_22896) > _22896:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + uint255(stor12.length.field_1) + _22896 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + uint255(stor12.length.field_1) + 224 len ceil32(_22896) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _18959 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18959)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18959)]
                    if ceil32(_18959) > _18959:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18959 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18959) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19130 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_19130) > _19130:
                        mem[_19130 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19130) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22065 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + stor12.length.field_1 % 128 + 192] = 32
                _22897 = mem[_22065]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + stor12.length.field_1 % 128 + 224] = mem[_22065]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + stor12.length.field_1 % 128 + 256 len ceil32(_22897)] = mem[_22065 + 32 len ceil32(_22897)]
                if ceil32(_22897) > _22897:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + stor12.length.field_1 % 128 + _22897 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12499 + stor12.length.field_1 % 128 + 224 len ceil32(_22897) + 32], 
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192] = 0
            _12593 = mem[ceil32(uint255(stor11.length.field_1)) + 128]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
            if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18651 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18651)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18651)]
                        if ceil32(_18651) > _18651:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18651 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18651) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18769 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_18769) > _18769:
                            mem[_18769 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18769) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22066 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + uint255(stor12.length.field_1) + 192] = 32
                    _22898 = mem[_22066]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + uint255(stor12.length.field_1) + 224] = mem[_22066]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + uint255(stor12.length.field_1) + 256 len ceil32(_22898)] = mem[_22066 + 32 len ceil32(_22898)]
                    if ceil32(_22898) > _22898:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + uint255(stor12.length.field_1) + _22898 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + uint255(stor12.length.field_1) + 224 len ceil32(_22898) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _18770 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18770)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18770)]
                    if ceil32(_18770) > _18770:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18770 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18770) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _18962 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_18962) > _18962:
                        mem[_18962 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_18962) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22067 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + stor12.length.field_1 % 128 + 192] = 32
                _22899 = mem[_22067]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + stor12.length.field_1 % 128 + 224] = mem[_22067]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + stor12.length.field_1 % 128 + 256 len ceil32(_22899)] = mem[_22067 + 32 len ceil32(_22899)]
                if ceil32(_22899) > _22899:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + stor12.length.field_1 % 128 + _22899 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + stor12.length.field_1 % 128 + 224 len ceil32(_22899) + 32], 
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _18772 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18772)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18772)]
                    if ceil32(_18772) > _18772:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _18772 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18772) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _18963 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_18963) > _18963:
                        mem[_18963 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_18963) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22068 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + uint255(stor12.length.field_1) + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + uint255(stor12.length.field_1) + 192] = 32
                _22900 = mem[_22068]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + uint255(stor12.length.field_1) + 224] = mem[_22068]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + uint255(stor12.length.field_1) + 256 len ceil32(_22900)] = mem[_22068 + 32 len ceil32(_22900)]
                if ceil32(_22900) > _22900:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + uint255(stor12.length.field_1) + _22900 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + uint255(stor12.length.field_1) + 224 len ceil32(_22900) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _18964 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18964)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_18964)]
                if ceil32(_18964) > _18964:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _18964 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18964) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19133 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                if ceil32(_19133) > _19133:
                    mem[_19133 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19133) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22069 = mem[64]
            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + stor12.length.field_1 % 128 + 192
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + stor12.length.field_1 % 128 + 192] = 32
            _22901 = mem[_22069]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + stor12.length.field_1 % 128 + 224] = mem[_22069]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + stor12.length.field_1 % 128 + 256 len ceil32(_22901)] = mem[_22069 + 32 len ceil32(_22901)]
            if ceil32(_22901) > _22901:
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + stor12.length.field_1 % 128 + _22901 + 256] = 0
            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _12593 + stor12.length.field_1 % 128 + 224 len ceil32(_22901) + 32], 
        mem[128] = uint256(stor11.field_0)
        idx = 128
        s = 0
        while uint255(stor11.length.field_1) + 96 > idx:
            mem[idx + 32] = stor11[s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        if uint255(stor11.length.field_1) <= 0:
            return ''
        mem[0] = arg1
        mem[32] = 23
        if not nodeType[arg1]:
            mem[ceil32(uint255(stor11.length.field_1)) + 128] = 1
            mem[ceil32(uint255(stor11.length.field_1)) + 160] = '0'
            mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 224] = '0'
            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = 0
            if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        var86001 = ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])
                        if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                            return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                    if bool(stor12.length) == 1:
                        idx = 0
                        s = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + idx + 225] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                        if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                            return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                    mem[64] = 0
                    _13322 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                    var87001 = ceil32(_13322)
                    if ceil32(_13322) > _13322:
                        mem[_13322 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_13322) + -mem[64] + 64
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                    var87001 = ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])
                    if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                        return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                if bool(stor12.length) == 1:
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + idx + 225] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                    if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                        return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                mem[64] = 0
                _13426 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                var88001 = ceil32(_13426)
                if ceil32(_13426) > _13426:
                    mem[_13426 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_13426) + -mem[64] + 64
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                    var87001 = ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])
                    if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                        return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                if bool(stor12.length) == 1:
                    idx = 0
                    s = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + idx + 225] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 225] = 32
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                    if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                        return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
                mem[64] = 0
                _13327 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                var88001 = ceil32(_13327)
                if ceil32(_13327) > _13327:
                    mem[_13327 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_13327) + -mem[64] + 64
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + 225] = Mask(248, 8, stor12.length)
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                var88001 = ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])
            else:
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _13429 = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
                    if ceil32(_13429) > _13429:
                        mem[_13429 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_13429) + -mem[64] + 64
                idx = 0
                s = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + idx + 225] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 225] = 32
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257] = mem[ceil32(uint255(stor11.length.field_1)) + 192]
                mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])] = mem[ceil32(uint255(stor11.length.field_1)) + 224 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]
            if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) <= mem[ceil32(uint255(stor11.length.field_1)) + 192]:
                return Array(len=mem[ceil32(uint255(stor11.length.field_1)) + 192], data=mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192])]), 
            mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + mem[ceil32(uint255(stor11.length.field_1)) + 192] + 289] = 0
            return 32, mem[ceil32(uint255(stor11.length.field_1)) + uint255(stor11.length.field_1) + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 192]) + 32], 
        s = 0
        idx = nodeType[arg1]
        while idx:
            if s == -1:
                revert with 'NH{q', 17
            s = s + 1
            idx = idx / 10
            continue 
        if s > test266151307():
            revert with 'NH{q', 65
        mem[ceil32(uint255(stor11.length.field_1)) + 128] = s
        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160
        if not s:
            t = s
            idx = nodeType[arg1]
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(uint255(stor11.length.field_1)) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
            if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
                _17638 = mem[ceil32(uint255(stor11.length.field_1)) + 128]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
                if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _23430 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23430)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23430)]
                            if ceil32(_23430) > _23430:
                                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _23430 + 256] = 0
                            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23430) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _23494 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                            if ceil32(_23494) > _23494:
                                mem[_23494 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_23494) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _24854 = mem[64]
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + uint255(stor12.length.field_1) + 192] = 32
                        _25494 = mem[_24854]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + uint255(stor12.length.field_1) + 224] = mem[_24854]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + uint255(stor12.length.field_1) + 256 len ceil32(_25494)] = mem[_24854 + 32 len ceil32(_25494)]
                        if ceil32(_25494) > _25494:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + uint255(stor12.length.field_1) + _25494 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + uint255(stor12.length.field_1) + 224 len ceil32(_25494) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _23495 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23495)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23495)]
                        if ceil32(_23495) > _23495:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _23495 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23495) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23703 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_23703) > _23703:
                            mem[_23703 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23703) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _24855 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + stor12.length.field_1 % 128 + 192] = 32
                    _25495 = mem[_24855]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + stor12.length.field_1 % 128 + 224] = mem[_24855]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + stor12.length.field_1 % 128 + 256 len ceil32(_25495)] = mem[_24855 + 32 len ceil32(_25495)]
                    if ceil32(_25495) > _25495:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + stor12.length.field_1 % 128 + _25495 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + stor12.length.field_1 % 128 + 224 len ceil32(_25495) + 32], 
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _23497 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23497)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23497)]
                        if ceil32(_23497) > _23497:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _23497 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23497) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23704 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_23704) > _23704:
                            mem[_23704 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23704) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _24856 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + uint255(stor12.length.field_1) + 192] = 32
                    _25496 = mem[_24856]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + uint255(stor12.length.field_1) + 224] = mem[_24856]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + uint255(stor12.length.field_1) + 256 len ceil32(_25496)] = mem[_24856 + 32 len ceil32(_25496)]
                    if ceil32(_25496) > _25496:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + uint255(stor12.length.field_1) + _25496 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + uint255(stor12.length.field_1) + 224 len ceil32(_25496) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _23705 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23705)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23705)]
                    if ceil32(_23705) > _23705:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _23705 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23705) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23896 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_23896) > _23896:
                        mem[_23896 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23896) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24857 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + stor12.length.field_1 % 128 + 192] = 32
                _25497 = mem[_24857]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + stor12.length.field_1 % 128 + 224] = mem[_24857]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + stor12.length.field_1 % 128 + 256 len ceil32(_25497)] = mem[_24857 + 32 len ceil32(_25497)]
                if ceil32(_25497) > _25497:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + stor12.length.field_1 % 128 + _25497 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17638 + stor12.length.field_1 % 128 + 224 len ceil32(_25497) + 32], 
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192] = 0
            _17686 = mem[ceil32(uint255(stor11.length.field_1)) + 128]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
            if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _23433 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23433)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23433)]
                        if ceil32(_23433) > _23433:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _23433 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23433) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23499 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_23499) > _23499:
                            mem[_23499 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23499) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _24858 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + uint255(stor12.length.field_1) + 192] = 32
                    _25498 = mem[_24858]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + uint255(stor12.length.field_1) + 224] = mem[_24858]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + uint255(stor12.length.field_1) + 256 len ceil32(_25498)] = mem[_24858 + 32 len ceil32(_25498)]
                    if ceil32(_25498) > _25498:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + uint255(stor12.length.field_1) + _25498 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + uint255(stor12.length.field_1) + 224 len ceil32(_25498) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _23500 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23500)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23500)]
                    if ceil32(_23500) > _23500:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _23500 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23500) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23708 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_23708) > _23708:
                        mem[_23708 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23708) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24859 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + stor12.length.field_1 % 128 + 192] = 32
                _25499 = mem[_24859]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + stor12.length.field_1 % 128 + 224] = mem[_24859]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + stor12.length.field_1 % 128 + 256 len ceil32(_25499)] = mem[_24859 + 32 len ceil32(_25499)]
                if ceil32(_25499) > _25499:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + stor12.length.field_1 % 128 + _25499 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + stor12.length.field_1 % 128 + 224 len ceil32(_25499) + 32], 
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _23502 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23502)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23502)]
                    if ceil32(_23502) > _23502:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _23502 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23502) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23709 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_23709) > _23709:
                        mem[_23709 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23709) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24860 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + uint255(stor12.length.field_1) + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + uint255(stor12.length.field_1) + 192] = 32
                _25500 = mem[_24860]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + uint255(stor12.length.field_1) + 224] = mem[_24860]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + uint255(stor12.length.field_1) + 256 len ceil32(_25500)] = mem[_24860 + 32 len ceil32(_25500)]
                if ceil32(_25500) > _25500:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + uint255(stor12.length.field_1) + _25500 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + uint255(stor12.length.field_1) + 224 len ceil32(_25500) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _23710 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23710)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23710)]
                if ceil32(_23710) > _23710:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _23710 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23710) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23899 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                if ceil32(_23899) > _23899:
                    mem[_23899 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23899) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24861 = mem[64]
            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + stor12.length.field_1 % 128 + 192
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + stor12.length.field_1 % 128 + 192] = 32
            _25501 = mem[_24861]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + stor12.length.field_1 % 128 + 224] = mem[_24861]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + stor12.length.field_1 % 128 + 256 len ceil32(_25501)] = mem[_24861 + 32 len ceil32(_25501)]
            if ceil32(_25501) > _25501:
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + stor12.length.field_1 % 128 + _25501 + 256] = 0
            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17686 + stor12.length.field_1 % 128 + 224 len ceil32(_25501) + 32], 
        mem[ceil32(uint255(stor11.length.field_1)) + 160 len s] = call.data[calldata.size len s]
        t = s
        idx = nodeType[arg1]
        while idx:
            if t < 1:
                revert with 'NH{q', 17
            if 48 > -(idx % 10) - 1:
                revert with 'NH{q', 17
            if t - 1 >= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                revert with 'NH{q', 50
            mem[t + ceil32(uint255(stor11.length.field_1)) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
            t = t - 1
            idx = idx / 10
            continue 
        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(uint255(stor11.length.field_1))] = mem[128 len ceil32(uint255(stor11.length.field_1))]
        if ceil32(uint255(stor11.length.field_1)) <= uint255(stor11.length.field_1):
            _17639 = mem[ceil32(uint255(stor11.length.field_1)) + 128]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
            if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _23436 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23436)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23436)]
                        if ceil32(_23436) > _23436:
                            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _23436 + 256] = 0
                        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23436) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23504 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                        if ceil32(_23504) > _23504:
                            mem[_23504 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23504) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _24862 = mem[64]
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + uint255(stor12.length.field_1) + 192] = 32
                    _25502 = mem[_24862]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + uint255(stor12.length.field_1) + 224] = mem[_24862]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + uint255(stor12.length.field_1) + 256 len ceil32(_25502)] = mem[_24862 + 32 len ceil32(_25502)]
                    if ceil32(_25502) > _25502:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + uint255(stor12.length.field_1) + _25502 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + uint255(stor12.length.field_1) + 224 len ceil32(_25502) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _23505 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23505)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23505)]
                    if ceil32(_23505) > _23505:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _23505 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23505) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23713 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_23713) > _23713:
                        mem[_23713 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23713) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24863 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + stor12.length.field_1 % 128 + 192] = 32
                _25503 = mem[_24863]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + stor12.length.field_1 % 128 + 224] = mem[_24863]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + stor12.length.field_1 % 128 + 256 len ceil32(_25503)] = mem[_24863 + 32 len ceil32(_25503)]
                if ceil32(_25503) > _25503:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + stor12.length.field_1 % 128 + _25503 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + stor12.length.field_1 % 128 + 224 len ceil32(_25503) + 32], 
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _23507 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23507)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23507)]
                    if ceil32(_23507) > _23507:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _23507 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23507) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23714 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_23714) > _23714:
                        mem[_23714 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23714) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24864 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + uint255(stor12.length.field_1) + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + uint255(stor12.length.field_1) + 192] = 32
                _25504 = mem[_24864]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + uint255(stor12.length.field_1) + 224] = mem[_24864]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + uint255(stor12.length.field_1) + 256 len ceil32(_25504)] = mem[_24864 + 32 len ceil32(_25504)]
                if ceil32(_25504) > _25504:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + uint255(stor12.length.field_1) + _25504 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + uint255(stor12.length.field_1) + 224 len ceil32(_25504) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _23715 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23715)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23715)]
                if ceil32(_23715) > _23715:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _23715 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23715) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23902 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                if ceil32(_23902) > _23902:
                    mem[_23902 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23902) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24865 = mem[64]
            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + stor12.length.field_1 % 128 + 192
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + stor12.length.field_1 % 128 + 192] = 32
            _25505 = mem[_24865]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + stor12.length.field_1 % 128 + 224] = mem[_24865]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + stor12.length.field_1 % 128 + 256 len ceil32(_25505)] = mem[_24865 + 32 len ceil32(_25505)]
            if ceil32(_25505) > _25505:
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + stor12.length.field_1 % 128 + _25505 + 256] = 0
            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17639 + stor12.length.field_1 % 128 + 224 len ceil32(_25505) + 32], 
        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192] = 0
        _17687 = mem[ceil32(uint255(stor11.length.field_1)) + 128]
        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])] = mem[ceil32(uint255(stor11.length.field_1)) + 160 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128])]
        if ceil32(mem[ceil32(uint255(stor11.length.field_1)) + 128]) <= mem[ceil32(uint255(stor11.length.field_1)) + 128]:
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _23439 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23439)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23439)]
                    if ceil32(_23439) > _23439:
                        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _23439 + 256] = 0
                    return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23439) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23509 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                    if ceil32(_23509) > _23509:
                        mem[_23509 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23509) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24866 = mem[64]
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + uint255(stor12.length.field_1) + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + uint255(stor12.length.field_1) + 192] = 32
                _25506 = mem[_24866]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + uint255(stor12.length.field_1) + 224] = mem[_24866]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + uint255(stor12.length.field_1) + 256 len ceil32(_25506)] = mem[_24866 + 32 len ceil32(_25506)]
                if ceil32(_25506) > _25506:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + uint255(stor12.length.field_1) + _25506 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + uint255(stor12.length.field_1) + 224 len ceil32(_25506) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _23510 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23510)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23510)]
                if ceil32(_23510) > _23510:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _23510 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23510) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23718 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                if ceil32(_23718) > _23718:
                    mem[_23718 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23718) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24867 = mem[64]
            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + stor12.length.field_1 % 128 + 192
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + stor12.length.field_1 % 128 + 192] = 32
            _25507 = mem[_24867]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + stor12.length.field_1 % 128 + 224] = mem[_24867]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + stor12.length.field_1 % 128 + 256 len ceil32(_25507)] = mem[_24867 + 32 len ceil32(_25507)]
            if ceil32(_25507) > _25507:
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + stor12.length.field_1 % 128 + _25507 + 256] = 0
            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + stor12.length.field_1 % 128 + 224 len ceil32(_25507) + 32], 
        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = 0
        if bool(stor12.length):
            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 192] = 32
                _23512 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23512)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23512)]
                if ceil32(_23512) > _23512:
                    mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + _23512 + 256] = 0
                return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23512) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23719 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
                if ceil32(_23719) > _23719:
                    mem[_23719 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23719) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < uint255(stor12.length.field_1):
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24868 = mem[64]
            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + uint255(stor12.length.field_1) + 192
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + uint255(stor12.length.field_1) + 192] = 32
            _25508 = mem[_24868]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + uint255(stor12.length.field_1) + 224] = mem[_24868]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + uint255(stor12.length.field_1) + 256 len ceil32(_25508)] = mem[_24868 + 32 len ceil32(_25508)]
            if ceil32(_25508) > _25508:
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + uint255(stor12.length.field_1) + _25508 + 256] = 0
            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + uint255(stor12.length.field_1) + 224 len ceil32(_25508) + 32], 
        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
            revert with 'NH{q', 34
        if not bool(stor12.length):
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + 192] = Mask(248, 8, stor12.length)
            mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 192] = 32
            _23720 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23720)] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(_23720)]
            if ceil32(_23720) > _23720:
                mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + _23720 + 256] = 0
            return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23720) + 32], 
        if bool(stor12.length) != 1:
            mem[64] = 0
            _23905 = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160]
            mem[64 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])] = mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 192 len ceil32(mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + 160])]
            if ceil32(_23905) > _23905:
                mem[_23905 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_23905) + -mem[64] + 64
        mem[0] = 12
        idx = 0
        t = 0
        while idx < stor12.length.field_1 % 128:
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + mem[ceil32(uint255(stor11.length.field_1)) + 128] + idx + 192] = stor12[t].field_0
            idx = idx + 32
            t = t + 1
            continue 
        _24869 = mem[64]
        mem[64] = ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + stor12.length.field_1 % 128 + 192
        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + stor12.length.field_1 % 128 + 192] = 32
        _25509 = mem[_24869]
        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + stor12.length.field_1 % 128 + 224] = mem[_24869]
        mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + stor12.length.field_1 % 128 + 256 len ceil32(_25509)] = mem[_24869 + 32 len ceil32(_25509)]
        if ceil32(_25509) > _25509:
            mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + stor12.length.field_1 % 128 + _25509 + 256] = 0
        return 32, mem[ceil32(uint255(stor11.length.field_1)) + ceil32(s) + uint255(stor11.length.field_1) + _17687 + stor12.length.field_1 % 128 + 224 len ceil32(_25509) + 32], 
    if bool(stor11.length) == stor11.length.field_1 % 128 < 32:
        revert with 'NH{q', 34
    mem[96] = stor11.length.field_1 % 128
    if bool(stor11.length):
        if bool(stor11.length) == uint255(stor11.length.field_1) < 32:
            revert with 'NH{q', 34
        if not uint255(stor11.length.field_1):
            if stor11.length.field_1 % 128 <= 0:
                return ''
            mem[0] = arg1
            mem[32] = 23
            if not nodeType[arg1]:
                mem[64] = ceil32(stor11.length.field_1 % 128) + 192
                mem[ceil32(stor11.length.field_1 % 128) + 128] = 1
                mem[ceil32(stor11.length.field_1 % 128) + 160] = '0'
                mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 224] = '0'
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = 0
                if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                            if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                                return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                            return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _7194 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                            if ceil32(_7194) > _7194:
                                mem[_7194 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_7194) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        s = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 224] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        _12456 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                        _12880 = mem[_12456]
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[_12456]
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(_12880)] = mem[_12456 + 32 len ceil32(_12880)]
                        if ceil32(_12880) > _12880:
                            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + _12880 + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(_12880) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                            return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7280 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                        if ceil32(_7280) > _7280:
                            mem[_7280 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7280) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12457 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                    _12881 = mem[_12457]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[_12457]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(_12881)] = mem[_12457 + 32 len ceil32(_12881)]
                    if ceil32(_12881) > _12881:
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + _12881 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(_12881) + 32], 
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                            return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7199 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                        if ceil32(_7199) > _7199:
                            mem[_7199 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7199) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12460 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                    _12884 = mem[_12460]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[_12460]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(_12884)] = mem[_12460 + 32 len ceil32(_12884)]
                    if ceil32(_12884) > _12884:
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + _12884 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(_12884) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                        return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7283 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    if ceil32(_7283) > _7283:
                        mem[_7283 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7283) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12461 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                _12885 = mem[_12461]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[_12461]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(_12885)] = mem[_12461 + 32 len ceil32(_12885)]
                if ceil32(_12885) > _12885:
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + _12885 + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(_12885) + 32], 
            s = 0
            idx = nodeType[arg1]
            while idx:
                if s == -1:
                    revert with 'NH{q', 17
                s = s + 1
                idx = idx / 10
                continue 
            if s > test266151307():
                revert with 'NH{q', 65
            mem[ceil32(stor11.length.field_1 % 128) + 128] = s
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160
            if not s:
                t = s
                idx = nodeType[arg1]
                while idx:
                    if t < 1:
                        revert with 'NH{q', 17
                    if 48 > -(idx % 10) - 1:
                        revert with 'NH{q', 17
                    if t - 1 >= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                        revert with 'NH{q', 50
                    mem[t + ceil32(stor11.length.field_1 % 128) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                    t = t - 1
                    idx = idx / 10
                    continue 
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
                if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
                    _12530 = mem[ceil32(stor11.length.field_1 % 128) + 128]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
                    if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                                _18678 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18678)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18678)]
                                if ceil32(_18678) > _18678:
                                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18678 + 256] = 0
                                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18678) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _18822 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                                if ceil32(_18822) > _18822:
                                    mem[_18822 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_18822) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < uint255(stor12.length.field_1):
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22102 = mem[64]
                            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + uint255(stor12.length.field_1) + 192
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + uint255(stor12.length.field_1) + 192] = 32
                            _22934 = mem[_22102]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + uint255(stor12.length.field_1) + 224] = mem[_22102]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + uint255(stor12.length.field_1) + 256 len ceil32(_22934)] = mem[_22102 + 32 len ceil32(_22934)]
                            if ceil32(_22934) > _22934:
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + uint255(stor12.length.field_1) + _22934 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + uint255(stor12.length.field_1) + 224 len ceil32(_22934) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                            _18823 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18823)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18823)]
                            if ceil32(_18823) > _18823:
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _18823 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18823) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19015 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                            if ceil32(_19015) > _19015:
                                mem[_19015 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19015) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1 % 128:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22103 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + stor12.length.field_1 % 128 + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + stor12.length.field_1 % 128 + 192] = 32
                        _22935 = mem[_22103]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + stor12.length.field_1 % 128 + 224] = mem[_22103]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + stor12.length.field_1 % 128 + 256 len ceil32(_22935)] = mem[_22103 + 32 len ceil32(_22935)]
                        if ceil32(_22935) > _22935:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + stor12.length.field_1 % 128 + _22935 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + stor12.length.field_1 % 128 + 224 len ceil32(_22935) + 32], 
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18825 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18825)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18825)]
                            if ceil32(_18825) > _18825:
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18825 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18825) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19016 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                            if ceil32(_19016) > _19016:
                                mem[_19016 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19016) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22104 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + uint255(stor12.length.field_1) + 192] = 32
                        _22936 = mem[_22104]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + uint255(stor12.length.field_1) + 224] = mem[_22104]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + uint255(stor12.length.field_1) + 256 len ceil32(_22936)] = mem[_22104 + 32 len ceil32(_22936)]
                        if ceil32(_22936) > _22936:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + uint255(stor12.length.field_1) + _22936 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + uint255(stor12.length.field_1) + 224 len ceil32(_22936) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _19017 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19017)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_19017)]
                        if ceil32(_19017) > _19017:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _19017 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19017) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19160 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_19160) > _19160:
                            mem[_19160 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19160) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22105 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + stor12.length.field_1 % 128 + 192] = 32
                    _22937 = mem[_22105]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + stor12.length.field_1 % 128 + 224] = mem[_22105]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + stor12.length.field_1 % 128 + 256 len ceil32(_22937)] = mem[_22105 + 32 len ceil32(_22937)]
                    if ceil32(_22937) > _22937:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + stor12.length.field_1 % 128 + _22937 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12530 + stor12.length.field_1 % 128 + 224 len ceil32(_22937) + 32], 
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192] = 0
                _12646 = mem[ceil32(stor11.length.field_1 % 128) + 128]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18681 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18681)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18681)]
                            if ceil32(_18681) > _18681:
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18681 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18681) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18827 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                            if ceil32(_18827) > _18827:
                                mem[_18827 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18827) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22106 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + uint255(stor12.length.field_1) + 192] = 32
                        _22938 = mem[_22106]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + uint255(stor12.length.field_1) + 224] = mem[_22106]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + uint255(stor12.length.field_1) + 256 len ceil32(_22938)] = mem[_22106 + 32 len ceil32(_22938)]
                        if ceil32(_22938) > _22938:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + uint255(stor12.length.field_1) + _22938 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + uint255(stor12.length.field_1) + 224 len ceil32(_22938) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18828 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18828)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18828)]
                        if ceil32(_18828) > _18828:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _18828 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18828) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19020 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_19020) > _19020:
                            mem[_19020 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19020) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22107 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + stor12.length.field_1 % 128 + 192] = 32
                    _22939 = mem[_22107]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + stor12.length.field_1 % 128 + 224] = mem[_22107]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + stor12.length.field_1 % 128 + 256 len ceil32(_22939)] = mem[_22107 + 32 len ceil32(_22939)]
                    if ceil32(_22939) > _22939:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + stor12.length.field_1 % 128 + _22939 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + stor12.length.field_1 % 128 + 224 len ceil32(_22939) + 32], 
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18830 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18830)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18830)]
                        if ceil32(_18830) > _18830:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18830 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18830) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19021 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_19021) > _19021:
                            mem[_19021 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19021) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22108 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + uint255(stor12.length.field_1) + 192] = 32
                    _22940 = mem[_22108]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + uint255(stor12.length.field_1) + 224] = mem[_22108]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + uint255(stor12.length.field_1) + 256 len ceil32(_22940)] = mem[_22108 + 32 len ceil32(_22940)]
                    if ceil32(_22940) > _22940:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + uint255(stor12.length.field_1) + _22940 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + uint255(stor12.length.field_1) + 224 len ceil32(_22940) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _19022 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19022)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_19022)]
                    if ceil32(_19022) > _19022:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _19022 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19022) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19163 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19163) > _19163:
                        mem[_19163 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19163) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22109 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + stor12.length.field_1 % 128 + 192] = 32
                _22941 = mem[_22109]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + stor12.length.field_1 % 128 + 224] = mem[_22109]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + stor12.length.field_1 % 128 + 256 len ceil32(_22941)] = mem[_22109 + 32 len ceil32(_22941)]
                if ceil32(_22941) > _22941:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + stor12.length.field_1 % 128 + _22941 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12646 + stor12.length.field_1 % 128 + 224 len ceil32(_22941) + 32], 
            mem[ceil32(stor11.length.field_1 % 128) + 160 len s] = call.data[calldata.size len s]
            t = s
            idx = nodeType[arg1]
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(stor11.length.field_1 % 128) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
            if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
                _12531 = mem[ceil32(stor11.length.field_1 % 128) + 128]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18684 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18684)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18684)]
                            if ceil32(_18684) > _18684:
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18684 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18684) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18832 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                            if ceil32(_18832) > _18832:
                                mem[_18832 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18832) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22110 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + uint255(stor12.length.field_1) + 192] = 32
                        _22942 = mem[_22110]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + uint255(stor12.length.field_1) + 224] = mem[_22110]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + uint255(stor12.length.field_1) + 256 len ceil32(_22942)] = mem[_22110 + 32 len ceil32(_22942)]
                        if ceil32(_22942) > _22942:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + uint255(stor12.length.field_1) + _22942 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + uint255(stor12.length.field_1) + 224 len ceil32(_22942) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18833 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18833)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18833)]
                        if ceil32(_18833) > _18833:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _18833 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18833) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19025 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_19025) > _19025:
                            mem[_19025 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19025) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22111 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + stor12.length.field_1 % 128 + 192] = 32
                    _22943 = mem[_22111]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + stor12.length.field_1 % 128 + 224] = mem[_22111]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + stor12.length.field_1 % 128 + 256 len ceil32(_22943)] = mem[_22111 + 32 len ceil32(_22943)]
                    if ceil32(_22943) > _22943:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + stor12.length.field_1 % 128 + _22943 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + stor12.length.field_1 % 128 + 224 len ceil32(_22943) + 32], 
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18835 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18835)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18835)]
                        if ceil32(_18835) > _18835:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18835 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18835) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19026 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_19026) > _19026:
                            mem[_19026 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19026) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22112 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + uint255(stor12.length.field_1) + 192] = 32
                    _22944 = mem[_22112]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + uint255(stor12.length.field_1) + 224] = mem[_22112]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + uint255(stor12.length.field_1) + 256 len ceil32(_22944)] = mem[_22112 + 32 len ceil32(_22944)]
                    if ceil32(_22944) > _22944:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + uint255(stor12.length.field_1) + _22944 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + uint255(stor12.length.field_1) + 224 len ceil32(_22944) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _19027 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19027)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_19027)]
                    if ceil32(_19027) > _19027:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _19027 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19027) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19166 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19166) > _19166:
                        mem[_19166 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19166) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22113 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + stor12.length.field_1 % 128 + 192] = 32
                _22945 = mem[_22113]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + stor12.length.field_1 % 128 + 224] = mem[_22113]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + stor12.length.field_1 % 128 + 256 len ceil32(_22945)] = mem[_22113 + 32 len ceil32(_22945)]
                if ceil32(_22945) > _22945:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + stor12.length.field_1 % 128 + _22945 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12531 + stor12.length.field_1 % 128 + 224 len ceil32(_22945) + 32], 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192] = 0
            _12647 = mem[ceil32(stor11.length.field_1 % 128) + 128]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18687 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18687)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18687)]
                        if ceil32(_18687) > _18687:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18687 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18687) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18837 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_18837) > _18837:
                            mem[_18837 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18837) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22114 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + uint255(stor12.length.field_1) + 192] = 32
                    _22946 = mem[_22114]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + uint255(stor12.length.field_1) + 224] = mem[_22114]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + uint255(stor12.length.field_1) + 256 len ceil32(_22946)] = mem[_22114 + 32 len ceil32(_22946)]
                    if ceil32(_22946) > _22946:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + uint255(stor12.length.field_1) + _22946 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + uint255(stor12.length.field_1) + 224 len ceil32(_22946) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _18838 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18838)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18838)]
                    if ceil32(_18838) > _18838:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _18838 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18838) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19030 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19030) > _19030:
                        mem[_19030 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19030) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22115 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + stor12.length.field_1 % 128 + 192] = 32
                _22947 = mem[_22115]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + stor12.length.field_1 % 128 + 224] = mem[_22115]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + stor12.length.field_1 % 128 + 256 len ceil32(_22947)] = mem[_22115 + 32 len ceil32(_22947)]
                if ceil32(_22947) > _22947:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + stor12.length.field_1 % 128 + _22947 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + stor12.length.field_1 % 128 + 224 len ceil32(_22947) + 32], 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _18840 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18840)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18840)]
                    if ceil32(_18840) > _18840:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18840 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18840) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19031 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19031) > _19031:
                        mem[_19031 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19031) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22116 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + uint255(stor12.length.field_1) + 192] = 32
                _22948 = mem[_22116]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + uint255(stor12.length.field_1) + 224] = mem[_22116]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + uint255(stor12.length.field_1) + 256 len ceil32(_22948)] = mem[_22116 + 32 len ceil32(_22948)]
                if ceil32(_22948) > _22948:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + uint255(stor12.length.field_1) + _22948 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + uint255(stor12.length.field_1) + 224 len ceil32(_22948) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _19032 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19032)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_19032)]
                if ceil32(_19032) > _19032:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _19032 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19032) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19169 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_19169) > _19169:
                    mem[_19169 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19169) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22117 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + stor12.length.field_1 % 128 + 192] = 32
            _22949 = mem[_22117]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + stor12.length.field_1 % 128 + 224] = mem[_22117]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + stor12.length.field_1 % 128 + 256 len ceil32(_22949)] = mem[_22117 + 32 len ceil32(_22949)]
            if ceil32(_22949) > _22949:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + stor12.length.field_1 % 128 + _22949 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12647 + stor12.length.field_1 % 128 + 224 len ceil32(_22949) + 32], 
        if 31 >= uint255(stor11.length.field_1):
            mem[128] = 256 * Mask(248, 0, stor11.length.field_8)
            if stor11.length.field_1 % 128 <= 0:
                return ''
            mem[0] = arg1
            mem[32] = 23
            if not nodeType[arg1]:
                mem[64] = ceil32(stor11.length.field_1 % 128) + 192
                mem[ceil32(stor11.length.field_1 % 128) + 128] = 1
                mem[ceil32(stor11.length.field_1 % 128) + 160] = '0'
                mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 224] = '0'
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = 0
                if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                            if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                                return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                            return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _7208 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                            if ceil32(_7208) > _7208:
                                mem[_7208 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_7208) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        s = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 224] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        _12464 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                        _12888 = mem[_12464]
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[_12464]
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(_12888)] = mem[_12464 + 32 len ceil32(_12888)]
                        if ceil32(_12888) > _12888:
                            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + _12888 + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(_12888) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                            return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7289 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                        if ceil32(_7289) > _7289:
                            mem[_7289 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7289) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12465 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                    _12889 = mem[_12465]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[_12465]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(_12889)] = mem[_12465 + 32 len ceil32(_12889)]
                    if ceil32(_12889) > _12889:
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + _12889 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(_12889) + 32], 
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                            return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7213 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                        if ceil32(_7213) > _7213:
                            mem[_7213 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7213) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12468 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                    _12892 = mem[_12468]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[_12468]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(_12892)] = mem[_12468 + 32 len ceil32(_12892)]
                    if ceil32(_12892) > _12892:
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + _12892 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(_12892) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                        return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7292 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    if ceil32(_7292) > _7292:
                        mem[_7292 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7292) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12469 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                _12893 = mem[_12469]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[_12469]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(_12893)] = mem[_12469 + 32 len ceil32(_12893)]
                if ceil32(_12893) > _12893:
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + _12893 + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(_12893) + 32], 
            s = 0
            idx = nodeType[arg1]
            while idx:
                if s == -1:
                    revert with 'NH{q', 17
                s = s + 1
                idx = idx / 10
                continue 
            if s > test266151307():
                revert with 'NH{q', 65
            mem[ceil32(stor11.length.field_1 % 128) + 128] = s
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160
            if not s:
                t = s
                idx = nodeType[arg1]
                while idx:
                    if t < 1:
                        revert with 'NH{q', 17
                    if 48 > -(idx % 10) - 1:
                        revert with 'NH{q', 17
                    if t - 1 >= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                        revert with 'NH{q', 50
                    mem[t + ceil32(stor11.length.field_1 % 128) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                    t = t - 1
                    idx = idx / 10
                    continue 
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
                if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
                    _12542 = mem[ceil32(stor11.length.field_1 % 128) + 128]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
                    if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                        if bool(stor12.length):
                            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                                revert with 'NH{q', 34
                            if not bool(stor12.length):
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                                _18690 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18690)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18690)]
                                if ceil32(_18690) > _18690:
                                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18690 + 256] = 0
                                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18690) + 32], 
                            if bool(stor12.length) != 1:
                                mem[64] = 0
                                _18850 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                                if ceil32(_18850) > _18850:
                                    mem[_18850 + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_18850) + -mem[64] + 64
                            mem[0] = 12
                            idx = 0
                            t = 0
                            while idx < uint255(stor12.length.field_1):
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                                idx = idx + 32
                                t = t + 1
                                continue 
                            _22118 = mem[64]
                            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + uint255(stor12.length.field_1) + 192
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + uint255(stor12.length.field_1) + 192] = 32
                            _22950 = mem[_22118]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + uint255(stor12.length.field_1) + 224] = mem[_22118]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + uint255(stor12.length.field_1) + 256 len ceil32(_22950)] = mem[_22118 + 32 len ceil32(_22950)]
                            if ceil32(_22950) > _22950:
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + uint255(stor12.length.field_1) + _22950 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + uint255(stor12.length.field_1) + 224 len ceil32(_22950) + 32], 
                        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                            _18851 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18851)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18851)]
                            if ceil32(_18851) > _18851:
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _18851 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18851) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19043 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                            if ceil32(_19043) > _19043:
                                mem[_19043 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19043) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < stor12.length.field_1 % 128:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22119 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + stor12.length.field_1 % 128 + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + stor12.length.field_1 % 128 + 192] = 32
                        _22951 = mem[_22119]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + stor12.length.field_1 % 128 + 224] = mem[_22119]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + stor12.length.field_1 % 128 + 256 len ceil32(_22951)] = mem[_22119 + 32 len ceil32(_22951)]
                        if ceil32(_22951) > _22951:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + stor12.length.field_1 % 128 + _22951 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + stor12.length.field_1 % 128 + 224 len ceil32(_22951) + 32], 
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18853 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18853)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18853)]
                            if ceil32(_18853) > _18853:
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18853 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18853) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _19044 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                            if ceil32(_19044) > _19044:
                                mem[_19044 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_19044) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22120 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + uint255(stor12.length.field_1) + 192] = 32
                        _22952 = mem[_22120]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + uint255(stor12.length.field_1) + 224] = mem[_22120]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + uint255(stor12.length.field_1) + 256 len ceil32(_22952)] = mem[_22120 + 32 len ceil32(_22952)]
                        if ceil32(_22952) > _22952:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + uint255(stor12.length.field_1) + _22952 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + uint255(stor12.length.field_1) + 224 len ceil32(_22952) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _19045 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19045)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_19045)]
                        if ceil32(_19045) > _19045:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _19045 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19045) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19172 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_19172) > _19172:
                            mem[_19172 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19172) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22121 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + stor12.length.field_1 % 128 + 192] = 32
                    _22953 = mem[_22121]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + stor12.length.field_1 % 128 + 224] = mem[_22121]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + stor12.length.field_1 % 128 + 256 len ceil32(_22953)] = mem[_22121 + 32 len ceil32(_22953)]
                    if ceil32(_22953) > _22953:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + stor12.length.field_1 % 128 + _22953 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12542 + stor12.length.field_1 % 128 + 224 len ceil32(_22953) + 32], 
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192] = 0
                _12664 = mem[ceil32(stor11.length.field_1 % 128) + 128]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18693 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18693)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18693)]
                            if ceil32(_18693) > _18693:
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18693 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18693) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18855 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                            if ceil32(_18855) > _18855:
                                mem[_18855 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18855) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22122 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + uint255(stor12.length.field_1) + 192] = 32
                        _22954 = mem[_22122]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + uint255(stor12.length.field_1) + 224] = mem[_22122]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + uint255(stor12.length.field_1) + 256 len ceil32(_22954)] = mem[_22122 + 32 len ceil32(_22954)]
                        if ceil32(_22954) > _22954:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + uint255(stor12.length.field_1) + _22954 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + uint255(stor12.length.field_1) + 224 len ceil32(_22954) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18856 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18856)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18856)]
                        if ceil32(_18856) > _18856:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _18856 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18856) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19048 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_19048) > _19048:
                            mem[_19048 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19048) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22123 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + stor12.length.field_1 % 128 + 192] = 32
                    _22955 = mem[_22123]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + stor12.length.field_1 % 128 + 224] = mem[_22123]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + stor12.length.field_1 % 128 + 256 len ceil32(_22955)] = mem[_22123 + 32 len ceil32(_22955)]
                    if ceil32(_22955) > _22955:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + stor12.length.field_1 % 128 + _22955 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + stor12.length.field_1 % 128 + 224 len ceil32(_22955) + 32], 
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18858 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18858)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18858)]
                        if ceil32(_18858) > _18858:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18858 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18858) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19049 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_19049) > _19049:
                            mem[_19049 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19049) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22124 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + uint255(stor12.length.field_1) + 192] = 32
                    _22956 = mem[_22124]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + uint255(stor12.length.field_1) + 224] = mem[_22124]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + uint255(stor12.length.field_1) + 256 len ceil32(_22956)] = mem[_22124 + 32 len ceil32(_22956)]
                    if ceil32(_22956) > _22956:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + uint255(stor12.length.field_1) + _22956 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + uint255(stor12.length.field_1) + 224 len ceil32(_22956) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _19050 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19050)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_19050)]
                    if ceil32(_19050) > _19050:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _19050 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19050) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19175 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19175) > _19175:
                        mem[_19175 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19175) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22125 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + stor12.length.field_1 % 128 + 192] = 32
                _22957 = mem[_22125]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + stor12.length.field_1 % 128 + 224] = mem[_22125]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + stor12.length.field_1 % 128 + 256 len ceil32(_22957)] = mem[_22125 + 32 len ceil32(_22957)]
                if ceil32(_22957) > _22957:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + stor12.length.field_1 % 128 + _22957 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12664 + stor12.length.field_1 % 128 + 224 len ceil32(_22957) + 32], 
            mem[ceil32(stor11.length.field_1 % 128) + 160 len s] = call.data[calldata.size len s]
            t = s
            idx = nodeType[arg1]
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(stor11.length.field_1 % 128) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
            if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
                _12543 = mem[ceil32(stor11.length.field_1 % 128) + 128]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18696 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18696)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18696)]
                            if ceil32(_18696) > _18696:
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18696 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18696) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18860 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                            if ceil32(_18860) > _18860:
                                mem[_18860 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18860) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22126 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + uint255(stor12.length.field_1) + 192] = 32
                        _22958 = mem[_22126]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + uint255(stor12.length.field_1) + 224] = mem[_22126]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + uint255(stor12.length.field_1) + 256 len ceil32(_22958)] = mem[_22126 + 32 len ceil32(_22958)]
                        if ceil32(_22958) > _22958:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + uint255(stor12.length.field_1) + _22958 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + uint255(stor12.length.field_1) + 224 len ceil32(_22958) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18861 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18861)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18861)]
                        if ceil32(_18861) > _18861:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _18861 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18861) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19053 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_19053) > _19053:
                            mem[_19053 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19053) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22127 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + stor12.length.field_1 % 128 + 192] = 32
                    _22959 = mem[_22127]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + stor12.length.field_1 % 128 + 224] = mem[_22127]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + stor12.length.field_1 % 128 + 256 len ceil32(_22959)] = mem[_22127 + 32 len ceil32(_22959)]
                    if ceil32(_22959) > _22959:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + stor12.length.field_1 % 128 + _22959 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + stor12.length.field_1 % 128 + 224 len ceil32(_22959) + 32], 
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18863 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18863)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18863)]
                        if ceil32(_18863) > _18863:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18863 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18863) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19054 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_19054) > _19054:
                            mem[_19054 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19054) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22128 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + uint255(stor12.length.field_1) + 192] = 32
                    _22960 = mem[_22128]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + uint255(stor12.length.field_1) + 224] = mem[_22128]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + uint255(stor12.length.field_1) + 256 len ceil32(_22960)] = mem[_22128 + 32 len ceil32(_22960)]
                    if ceil32(_22960) > _22960:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + uint255(stor12.length.field_1) + _22960 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + uint255(stor12.length.field_1) + 224 len ceil32(_22960) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _19055 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19055)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_19055)]
                    if ceil32(_19055) > _19055:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _19055 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19055) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19178 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19178) > _19178:
                        mem[_19178 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19178) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22129 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + stor12.length.field_1 % 128 + 192] = 32
                _22961 = mem[_22129]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + stor12.length.field_1 % 128 + 224] = mem[_22129]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + stor12.length.field_1 % 128 + 256 len ceil32(_22961)] = mem[_22129 + 32 len ceil32(_22961)]
                if ceil32(_22961) > _22961:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + stor12.length.field_1 % 128 + _22961 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12543 + stor12.length.field_1 % 128 + 224 len ceil32(_22961) + 32], 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192] = 0
            _12665 = mem[ceil32(stor11.length.field_1 % 128) + 128]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18699 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18699)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18699)]
                        if ceil32(_18699) > _18699:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18699 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18699) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18865 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_18865) > _18865:
                            mem[_18865 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18865) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22130 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + uint255(stor12.length.field_1) + 192] = 32
                    _22962 = mem[_22130]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + uint255(stor12.length.field_1) + 224] = mem[_22130]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + uint255(stor12.length.field_1) + 256 len ceil32(_22962)] = mem[_22130 + 32 len ceil32(_22962)]
                    if ceil32(_22962) > _22962:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + uint255(stor12.length.field_1) + _22962 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + uint255(stor12.length.field_1) + 224 len ceil32(_22962) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _18866 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18866)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18866)]
                    if ceil32(_18866) > _18866:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _18866 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18866) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19058 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19058) > _19058:
                        mem[_19058 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19058) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22131 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + stor12.length.field_1 % 128 + 192] = 32
                _22963 = mem[_22131]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + stor12.length.field_1 % 128 + 224] = mem[_22131]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + stor12.length.field_1 % 128 + 256 len ceil32(_22963)] = mem[_22131 + 32 len ceil32(_22963)]
                if ceil32(_22963) > _22963:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + stor12.length.field_1 % 128 + _22963 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + stor12.length.field_1 % 128 + 224 len ceil32(_22963) + 32], 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _18868 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18868)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18868)]
                    if ceil32(_18868) > _18868:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18868 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18868) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19059 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19059) > _19059:
                        mem[_19059 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19059) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22132 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + uint255(stor12.length.field_1) + 192] = 32
                _22964 = mem[_22132]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + uint255(stor12.length.field_1) + 224] = mem[_22132]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + uint255(stor12.length.field_1) + 256 len ceil32(_22964)] = mem[_22132 + 32 len ceil32(_22964)]
                if ceil32(_22964) > _22964:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + uint255(stor12.length.field_1) + _22964 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + uint255(stor12.length.field_1) + 224 len ceil32(_22964) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _19060 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19060)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_19060)]
                if ceil32(_19060) > _19060:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _19060 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19060) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19181 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_19181) > _19181:
                    mem[_19181 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19181) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22133 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + stor12.length.field_1 % 128 + 192] = 32
            _22965 = mem[_22133]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + stor12.length.field_1 % 128 + 224] = mem[_22133]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + stor12.length.field_1 % 128 + 256 len ceil32(_22965)] = mem[_22133 + 32 len ceil32(_22965)]
            if ceil32(_22965) > _22965:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + stor12.length.field_1 % 128 + _22965 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12665 + stor12.length.field_1 % 128 + 224 len ceil32(_22965) + 32], 
        mem[128] = uint256(stor11.field_0)
        idx = 128
        s = 0
        while uint255(stor11.length.field_1) + 96 > idx:
            mem[idx + 32] = stor11[s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        if stor11.length.field_1 % 128 <= 0:
            return ''
        mem[0] = arg1
        mem[32] = 23
        if not nodeType[arg1]:
            mem[ceil32(stor11.length.field_1 % 128) + 128] = 1
            mem[ceil32(stor11.length.field_1 % 128) + 160] = '0'
            mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 224] = '0'
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = 0
            if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                        var87001 = ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])
                        if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                            return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                    if bool(stor12.length) == 1:
                        idx = 0
                        s = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + idx + 225] = stor12[s].field_0
                            idx = idx + 32
                            s = s + 1
                            continue 
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                            return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                    mem[64] = 0
                    _13378 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    var88001 = ceil32(_13378)
                    if ceil32(_13378) > _13378:
                        mem[_13378 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_13378) + -mem[64] + 64
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    var88001 = ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])
                    if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                        return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                if bool(stor12.length) == 1:
                    idx = 0
                    s = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + idx + 225] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                        return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                mem[64] = 0
                _13442 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                var89001 = ceil32(_13442)
                if ceil32(_13442) > _13442:
                    mem[_13442 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_13442) + -mem[64] + 64
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    var88001 = ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])
                    if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                        return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                if bool(stor12.length) == 1:
                    idx = 0
                    s = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + idx + 225] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                        return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                mem[64] = 0
                _13383 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                var89001 = ceil32(_13383)
                if ceil32(_13383) > _13383:
                    mem[_13383 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_13383) + -mem[64] + 64
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                var89001 = ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])
            else:
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _13445 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    if ceil32(_13445) > _13445:
                        mem[_13445 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_13445) + -mem[64] + 64
                idx = 0
                s = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + idx + 225] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
            if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
        s = 0
        idx = nodeType[arg1]
        while idx:
            if s == -1:
                revert with 'NH{q', 17
            s = s + 1
            idx = idx / 10
            continue 
        if s > test266151307():
            revert with 'NH{q', 65
        mem[ceil32(stor11.length.field_1 % 128) + 128] = s
        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160
        if not s:
            t = s
            idx = nodeType[arg1]
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(stor11.length.field_1 % 128) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
            if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
                _17658 = mem[ceil32(stor11.length.field_1 % 128) + 128]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _23454 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23454)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23454)]
                            if ceil32(_23454) > _23454:
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _23454 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23454) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _23598 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                            if ceil32(_23598) > _23598:
                                mem[_23598 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_23598) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _24886 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + uint255(stor12.length.field_1) + 192] = 32
                        _25526 = mem[_24886]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + uint255(stor12.length.field_1) + 224] = mem[_24886]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + uint255(stor12.length.field_1) + 256 len ceil32(_25526)] = mem[_24886 + 32 len ceil32(_25526)]
                        if ceil32(_25526) > _25526:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + uint255(stor12.length.field_1) + _25526 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + uint255(stor12.length.field_1) + 224 len ceil32(_25526) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _23599 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23599)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23599)]
                        if ceil32(_23599) > _23599:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _23599 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23599) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23807 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_23807) > _23807:
                            mem[_23807 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23807) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _24887 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + stor12.length.field_1 % 128 + 192] = 32
                    _25527 = mem[_24887]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + stor12.length.field_1 % 128 + 224] = mem[_24887]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + stor12.length.field_1 % 128 + 256 len ceil32(_25527)] = mem[_24887 + 32 len ceil32(_25527)]
                    if ceil32(_25527) > _25527:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + stor12.length.field_1 % 128 + _25527 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + stor12.length.field_1 % 128 + 224 len ceil32(_25527) + 32], 
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _23601 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23601)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23601)]
                        if ceil32(_23601) > _23601:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _23601 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23601) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23808 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_23808) > _23808:
                            mem[_23808 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23808) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _24888 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + uint255(stor12.length.field_1) + 192] = 32
                    _25528 = mem[_24888]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + uint255(stor12.length.field_1) + 224] = mem[_24888]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + uint255(stor12.length.field_1) + 256 len ceil32(_25528)] = mem[_24888 + 32 len ceil32(_25528)]
                    if ceil32(_25528) > _25528:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + uint255(stor12.length.field_1) + _25528 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + uint255(stor12.length.field_1) + 224 len ceil32(_25528) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _23809 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23809)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23809)]
                    if ceil32(_23809) > _23809:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _23809 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23809) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23920 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_23920) > _23920:
                        mem[_23920 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23920) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24889 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + stor12.length.field_1 % 128 + 192] = 32
                _25529 = mem[_24889]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + stor12.length.field_1 % 128 + 224] = mem[_24889]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + stor12.length.field_1 % 128 + 256 len ceil32(_25529)] = mem[_24889 + 32 len ceil32(_25529)]
                if ceil32(_25529) > _25529:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + stor12.length.field_1 % 128 + _25529 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17658 + stor12.length.field_1 % 128 + 224 len ceil32(_25529) + 32], 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192] = 0
            _17754 = mem[ceil32(stor11.length.field_1 % 128) + 128]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _23457 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23457)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23457)]
                        if ceil32(_23457) > _23457:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _23457 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23457) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23603 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_23603) > _23603:
                            mem[_23603 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23603) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _24890 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + uint255(stor12.length.field_1) + 192] = 32
                    _25530 = mem[_24890]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + uint255(stor12.length.field_1) + 224] = mem[_24890]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + uint255(stor12.length.field_1) + 256 len ceil32(_25530)] = mem[_24890 + 32 len ceil32(_25530)]
                    if ceil32(_25530) > _25530:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + uint255(stor12.length.field_1) + _25530 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + uint255(stor12.length.field_1) + 224 len ceil32(_25530) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _23604 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23604)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23604)]
                    if ceil32(_23604) > _23604:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _23604 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23604) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23812 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_23812) > _23812:
                        mem[_23812 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23812) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24891 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + stor12.length.field_1 % 128 + 192] = 32
                _25531 = mem[_24891]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + stor12.length.field_1 % 128 + 224] = mem[_24891]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + stor12.length.field_1 % 128 + 256 len ceil32(_25531)] = mem[_24891 + 32 len ceil32(_25531)]
                if ceil32(_25531) > _25531:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + stor12.length.field_1 % 128 + _25531 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + stor12.length.field_1 % 128 + 224 len ceil32(_25531) + 32], 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _23606 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23606)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23606)]
                    if ceil32(_23606) > _23606:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _23606 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23606) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23813 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_23813) > _23813:
                        mem[_23813 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23813) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24892 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + uint255(stor12.length.field_1) + 192] = 32
                _25532 = mem[_24892]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + uint255(stor12.length.field_1) + 224] = mem[_24892]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + uint255(stor12.length.field_1) + 256 len ceil32(_25532)] = mem[_24892 + 32 len ceil32(_25532)]
                if ceil32(_25532) > _25532:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + uint255(stor12.length.field_1) + _25532 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + uint255(stor12.length.field_1) + 224 len ceil32(_25532) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _23814 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23814)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23814)]
                if ceil32(_23814) > _23814:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _23814 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23814) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23923 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_23923) > _23923:
                    mem[_23923 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23923) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24893 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + stor12.length.field_1 % 128 + 192] = 32
            _25533 = mem[_24893]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + stor12.length.field_1 % 128 + 224] = mem[_24893]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + stor12.length.field_1 % 128 + 256 len ceil32(_25533)] = mem[_24893 + 32 len ceil32(_25533)]
            if ceil32(_25533) > _25533:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + stor12.length.field_1 % 128 + _25533 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17754 + stor12.length.field_1 % 128 + 224 len ceil32(_25533) + 32], 
        mem[ceil32(stor11.length.field_1 % 128) + 160 len s] = call.data[calldata.size len s]
        t = s
        idx = nodeType[arg1]
        while idx:
            if t < 1:
                revert with 'NH{q', 17
            if 48 > -(idx % 10) - 1:
                revert with 'NH{q', 17
            if t - 1 >= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                revert with 'NH{q', 50
            mem[t + ceil32(stor11.length.field_1 % 128) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
            t = t - 1
            idx = idx / 10
            continue 
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
        if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
            _17659 = mem[ceil32(stor11.length.field_1 % 128) + 128]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _23460 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23460)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23460)]
                        if ceil32(_23460) > _23460:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _23460 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23460) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23608 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_23608) > _23608:
                            mem[_23608 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23608) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _24894 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + uint255(stor12.length.field_1) + 192] = 32
                    _25534 = mem[_24894]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + uint255(stor12.length.field_1) + 224] = mem[_24894]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + uint255(stor12.length.field_1) + 256 len ceil32(_25534)] = mem[_24894 + 32 len ceil32(_25534)]
                    if ceil32(_25534) > _25534:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + uint255(stor12.length.field_1) + _25534 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + uint255(stor12.length.field_1) + 224 len ceil32(_25534) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _23609 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23609)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23609)]
                    if ceil32(_23609) > _23609:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _23609 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23609) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23817 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_23817) > _23817:
                        mem[_23817 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23817) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24895 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + stor12.length.field_1 % 128 + 192] = 32
                _25535 = mem[_24895]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + stor12.length.field_1 % 128 + 224] = mem[_24895]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + stor12.length.field_1 % 128 + 256 len ceil32(_25535)] = mem[_24895 + 32 len ceil32(_25535)]
                if ceil32(_25535) > _25535:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + stor12.length.field_1 % 128 + _25535 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + stor12.length.field_1 % 128 + 224 len ceil32(_25535) + 32], 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _23611 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23611)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23611)]
                    if ceil32(_23611) > _23611:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _23611 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23611) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23818 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_23818) > _23818:
                        mem[_23818 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23818) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24896 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + uint255(stor12.length.field_1) + 192] = 32
                _25536 = mem[_24896]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + uint255(stor12.length.field_1) + 224] = mem[_24896]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + uint255(stor12.length.field_1) + 256 len ceil32(_25536)] = mem[_24896 + 32 len ceil32(_25536)]
                if ceil32(_25536) > _25536:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + uint255(stor12.length.field_1) + _25536 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + uint255(stor12.length.field_1) + 224 len ceil32(_25536) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _23819 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23819)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23819)]
                if ceil32(_23819) > _23819:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _23819 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23819) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23926 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_23926) > _23926:
                    mem[_23926 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23926) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24897 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + stor12.length.field_1 % 128 + 192] = 32
            _25537 = mem[_24897]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + stor12.length.field_1 % 128 + 224] = mem[_24897]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + stor12.length.field_1 % 128 + 256 len ceil32(_25537)] = mem[_24897 + 32 len ceil32(_25537)]
            if ceil32(_25537) > _25537:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + stor12.length.field_1 % 128 + _25537 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17659 + stor12.length.field_1 % 128 + 224 len ceil32(_25537) + 32], 
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192] = 0
        _17755 = mem[ceil32(stor11.length.field_1 % 128) + 128]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
        if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _23463 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23463)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23463)]
                    if ceil32(_23463) > _23463:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _23463 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23463) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23613 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_23613) > _23613:
                        mem[_23613 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23613) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24898 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + uint255(stor12.length.field_1) + 192] = 32
                _25538 = mem[_24898]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + uint255(stor12.length.field_1) + 224] = mem[_24898]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + uint255(stor12.length.field_1) + 256 len ceil32(_25538)] = mem[_24898 + 32 len ceil32(_25538)]
                if ceil32(_25538) > _25538:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + uint255(stor12.length.field_1) + _25538 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + uint255(stor12.length.field_1) + 224 len ceil32(_25538) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _23614 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23614)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23614)]
                if ceil32(_23614) > _23614:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _23614 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23614) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23822 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_23822) > _23822:
                    mem[_23822 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23822) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24899 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + stor12.length.field_1 % 128 + 192] = 32
            _25539 = mem[_24899]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + stor12.length.field_1 % 128 + 224] = mem[_24899]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + stor12.length.field_1 % 128 + 256 len ceil32(_25539)] = mem[_24899 + 32 len ceil32(_25539)]
            if ceil32(_25539) > _25539:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + stor12.length.field_1 % 128 + _25539 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + stor12.length.field_1 % 128 + 224 len ceil32(_25539) + 32], 
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
        if bool(stor12.length):
            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                _23616 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23616)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23616)]
                if ceil32(_23616) > _23616:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _23616 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23616) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23823 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_23823) > _23823:
                    mem[_23823 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23823) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < uint255(stor12.length.field_1):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24900 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + uint255(stor12.length.field_1) + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + uint255(stor12.length.field_1) + 192] = 32
            _25540 = mem[_24900]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + uint255(stor12.length.field_1) + 224] = mem[_24900]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + uint255(stor12.length.field_1) + 256 len ceil32(_25540)] = mem[_24900 + 32 len ceil32(_25540)]
            if ceil32(_25540) > _25540:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + uint255(stor12.length.field_1) + _25540 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + uint255(stor12.length.field_1) + 224 len ceil32(_25540) + 32], 
        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
            revert with 'NH{q', 34
        if not bool(stor12.length):
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
            _23824 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23824)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23824)]
            if ceil32(_23824) > _23824:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _23824 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23824) + 32], 
        if bool(stor12.length) != 1:
            mem[64] = 0
            _23929 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
            if ceil32(_23929) > _23929:
                mem[_23929 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_23929) + -mem[64] + 64
        mem[0] = 12
        idx = 0
        t = 0
        while idx < stor12.length.field_1 % 128:
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
            idx = idx + 32
            t = t + 1
            continue 
        _24901 = mem[64]
        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + stor12.length.field_1 % 128 + 192
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + stor12.length.field_1 % 128 + 192] = 32
        _25541 = mem[_24901]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + stor12.length.field_1 % 128 + 224] = mem[_24901]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + stor12.length.field_1 % 128 + 256 len ceil32(_25541)] = mem[_24901 + 32 len ceil32(_25541)]
        if ceil32(_25541) > _25541:
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + stor12.length.field_1 % 128 + _25541 + 256] = 0
        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17755 + stor12.length.field_1 % 128 + 224 len ceil32(_25541) + 32], 
    if bool(stor11.length) == stor11.length.field_1 % 128 < 32:
        revert with 'NH{q', 34
    if not stor11.length.field_1 % 128:
        if stor11.length.field_1 % 128 <= 0:
            return ''
        mem[0] = arg1
        mem[32] = 23
        if not nodeType[arg1]:
            mem[64] = ceil32(stor11.length.field_1 % 128) + 192
            mem[ceil32(stor11.length.field_1 % 128) + 128] = 1
            mem[ceil32(stor11.length.field_1 % 128) + 160] = '0'
            mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 224] = '0'
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = 0
            if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                            return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7220 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                        if ceil32(_7220) > _7220:
                            mem[_7220 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7220) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12472 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                    _12896 = mem[_12472]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[_12472]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(_12896)] = mem[_12472 + 32 len ceil32(_12896)]
                    if ceil32(_12896) > _12896:
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + _12896 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(_12896) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                        return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7297 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    if ceil32(_7297) > _7297:
                        mem[_7297 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7297) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12473 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                _12897 = mem[_12473]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[_12473]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(_12897)] = mem[_12473 + 32 len ceil32(_12897)]
                if ceil32(_12897) > _12897:
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + _12897 + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(_12897) + 32], 
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                        return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7225 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    if ceil32(_7225) > _7225:
                        mem[_7225 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7225) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12476 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                _12900 = mem[_12476]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[_12476]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(_12900)] = mem[_12476 + 32 len ceil32(_12900)]
                if ceil32(_12900) > _12900:
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + _12900 + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(_12900) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                    return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _7300 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                if ceil32(_7300) > _7300:
                    mem[_7300 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_7300) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            s = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 224] = stor12[s].field_0
                idx = idx + 32
                s = s + 1
                continue 
            _12477 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
            _12901 = mem[_12477]
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[_12477]
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(_12901)] = mem[_12477 + 32 len ceil32(_12901)]
            if ceil32(_12901) > _12901:
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + _12901 + 289] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(_12901) + 32], 
        s = 0
        idx = nodeType[arg1]
        while idx:
            if s == -1:
                revert with 'NH{q', 17
            s = s + 1
            idx = idx / 10
            continue 
        if s > test266151307():
            revert with 'NH{q', 65
        mem[ceil32(stor11.length.field_1 % 128) + 128] = s
        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160
        if not s:
            t = s
            idx = nodeType[arg1]
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(stor11.length.field_1 % 128) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
            if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
                _12552 = mem[ceil32(stor11.length.field_1 % 128) + 128]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18702 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18702)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18702)]
                            if ceil32(_18702) > _18702:
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18702 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18702) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18870 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                            if ceil32(_18870) > _18870:
                                mem[_18870 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18870) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22134 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + uint255(stor12.length.field_1) + 192] = 32
                        _22966 = mem[_22134]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + uint255(stor12.length.field_1) + 224] = mem[_22134]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + uint255(stor12.length.field_1) + 256 len ceil32(_22966)] = mem[_22134 + 32 len ceil32(_22966)]
                        if ceil32(_22966) > _22966:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + uint255(stor12.length.field_1) + _22966 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + uint255(stor12.length.field_1) + 224 len ceil32(_22966) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18871 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18871)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18871)]
                        if ceil32(_18871) > _18871:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _18871 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18871) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19063 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_19063) > _19063:
                            mem[_19063 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19063) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22135 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + stor12.length.field_1 % 128 + 192] = 32
                    _22967 = mem[_22135]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + stor12.length.field_1 % 128 + 224] = mem[_22135]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + stor12.length.field_1 % 128 + 256 len ceil32(_22967)] = mem[_22135 + 32 len ceil32(_22967)]
                    if ceil32(_22967) > _22967:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + stor12.length.field_1 % 128 + _22967 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + stor12.length.field_1 % 128 + 224 len ceil32(_22967) + 32], 
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18873 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18873)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18873)]
                        if ceil32(_18873) > _18873:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18873 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18873) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19064 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_19064) > _19064:
                            mem[_19064 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19064) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22136 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + uint255(stor12.length.field_1) + 192] = 32
                    _22968 = mem[_22136]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + uint255(stor12.length.field_1) + 224] = mem[_22136]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + uint255(stor12.length.field_1) + 256 len ceil32(_22968)] = mem[_22136 + 32 len ceil32(_22968)]
                    if ceil32(_22968) > _22968:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + uint255(stor12.length.field_1) + _22968 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + uint255(stor12.length.field_1) + 224 len ceil32(_22968) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _19065 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19065)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_19065)]
                    if ceil32(_19065) > _19065:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _19065 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19065) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19184 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19184) > _19184:
                        mem[_19184 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19184) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22137 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + stor12.length.field_1 % 128 + 192] = 32
                _22969 = mem[_22137]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + stor12.length.field_1 % 128 + 224] = mem[_22137]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + stor12.length.field_1 % 128 + 256 len ceil32(_22969)] = mem[_22137 + 32 len ceil32(_22969)]
                if ceil32(_22969) > _22969:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + stor12.length.field_1 % 128 + _22969 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12552 + stor12.length.field_1 % 128 + 224 len ceil32(_22969) + 32], 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192] = 0
            _12682 = mem[ceil32(stor11.length.field_1 % 128) + 128]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18705 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18705)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18705)]
                        if ceil32(_18705) > _18705:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18705 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18705) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18875 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_18875) > _18875:
                            mem[_18875 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18875) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22138 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + uint255(stor12.length.field_1) + 192] = 32
                    _22970 = mem[_22138]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + uint255(stor12.length.field_1) + 224] = mem[_22138]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + uint255(stor12.length.field_1) + 256 len ceil32(_22970)] = mem[_22138 + 32 len ceil32(_22970)]
                    if ceil32(_22970) > _22970:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + uint255(stor12.length.field_1) + _22970 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + uint255(stor12.length.field_1) + 224 len ceil32(_22970) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _18876 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18876)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18876)]
                    if ceil32(_18876) > _18876:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _18876 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18876) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19068 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19068) > _19068:
                        mem[_19068 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19068) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22139 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + stor12.length.field_1 % 128 + 192] = 32
                _22971 = mem[_22139]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + stor12.length.field_1 % 128 + 224] = mem[_22139]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + stor12.length.field_1 % 128 + 256 len ceil32(_22971)] = mem[_22139 + 32 len ceil32(_22971)]
                if ceil32(_22971) > _22971:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + stor12.length.field_1 % 128 + _22971 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + stor12.length.field_1 % 128 + 224 len ceil32(_22971) + 32], 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _18878 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18878)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18878)]
                    if ceil32(_18878) > _18878:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18878 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18878) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19069 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19069) > _19069:
                        mem[_19069 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19069) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22140 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + uint255(stor12.length.field_1) + 192] = 32
                _22972 = mem[_22140]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + uint255(stor12.length.field_1) + 224] = mem[_22140]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + uint255(stor12.length.field_1) + 256 len ceil32(_22972)] = mem[_22140 + 32 len ceil32(_22972)]
                if ceil32(_22972) > _22972:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + uint255(stor12.length.field_1) + _22972 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + uint255(stor12.length.field_1) + 224 len ceil32(_22972) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _19070 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19070)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_19070)]
                if ceil32(_19070) > _19070:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _19070 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19070) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19187 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_19187) > _19187:
                    mem[_19187 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19187) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22141 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + stor12.length.field_1 % 128 + 192] = 32
            _22973 = mem[_22141]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + stor12.length.field_1 % 128 + 224] = mem[_22141]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + stor12.length.field_1 % 128 + 256 len ceil32(_22973)] = mem[_22141 + 32 len ceil32(_22973)]
            if ceil32(_22973) > _22973:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + stor12.length.field_1 % 128 + _22973 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12682 + stor12.length.field_1 % 128 + 224 len ceil32(_22973) + 32], 
        mem[ceil32(stor11.length.field_1 % 128) + 160 len s] = call.data[calldata.size len s]
        t = s
        idx = nodeType[arg1]
        while idx:
            if t < 1:
                revert with 'NH{q', 17
            if 48 > -(idx % 10) - 1:
                revert with 'NH{q', 17
            if t - 1 >= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                revert with 'NH{q', 50
            mem[t + ceil32(stor11.length.field_1 % 128) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
            t = t - 1
            idx = idx / 10
            continue 
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
        if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
            _12553 = mem[ceil32(stor11.length.field_1 % 128) + 128]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18708 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18708)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18708)]
                        if ceil32(_18708) > _18708:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18708 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18708) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18880 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_18880) > _18880:
                            mem[_18880 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18880) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22142 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + uint255(stor12.length.field_1) + 192] = 32
                    _22974 = mem[_22142]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + uint255(stor12.length.field_1) + 224] = mem[_22142]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + uint255(stor12.length.field_1) + 256 len ceil32(_22974)] = mem[_22142 + 32 len ceil32(_22974)]
                    if ceil32(_22974) > _22974:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + uint255(stor12.length.field_1) + _22974 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + uint255(stor12.length.field_1) + 224 len ceil32(_22974) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _18881 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18881)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18881)]
                    if ceil32(_18881) > _18881:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _18881 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18881) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19073 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19073) > _19073:
                        mem[_19073 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19073) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22143 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + stor12.length.field_1 % 128 + 192] = 32
                _22975 = mem[_22143]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + stor12.length.field_1 % 128 + 224] = mem[_22143]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + stor12.length.field_1 % 128 + 256 len ceil32(_22975)] = mem[_22143 + 32 len ceil32(_22975)]
                if ceil32(_22975) > _22975:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + stor12.length.field_1 % 128 + _22975 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + stor12.length.field_1 % 128 + 224 len ceil32(_22975) + 32], 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _18883 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18883)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18883)]
                    if ceil32(_18883) > _18883:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18883 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18883) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19074 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19074) > _19074:
                        mem[_19074 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19074) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22144 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + uint255(stor12.length.field_1) + 192] = 32
                _22976 = mem[_22144]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + uint255(stor12.length.field_1) + 224] = mem[_22144]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + uint255(stor12.length.field_1) + 256 len ceil32(_22976)] = mem[_22144 + 32 len ceil32(_22976)]
                if ceil32(_22976) > _22976:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + uint255(stor12.length.field_1) + _22976 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + uint255(stor12.length.field_1) + 224 len ceil32(_22976) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _19075 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19075)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_19075)]
                if ceil32(_19075) > _19075:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _19075 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19075) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19190 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_19190) > _19190:
                    mem[_19190 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19190) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22145 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + stor12.length.field_1 % 128 + 192] = 32
            _22977 = mem[_22145]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + stor12.length.field_1 % 128 + 224] = mem[_22145]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + stor12.length.field_1 % 128 + 256 len ceil32(_22977)] = mem[_22145 + 32 len ceil32(_22977)]
            if ceil32(_22977) > _22977:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + stor12.length.field_1 % 128 + _22977 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12553 + stor12.length.field_1 % 128 + 224 len ceil32(_22977) + 32], 
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192] = 0
        _12683 = mem[ceil32(stor11.length.field_1 % 128) + 128]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
        if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _18711 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18711)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18711)]
                    if ceil32(_18711) > _18711:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18711 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18711) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _18885 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_18885) > _18885:
                        mem[_18885 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_18885) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22146 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + uint255(stor12.length.field_1) + 192] = 32
                _22978 = mem[_22146]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + uint255(stor12.length.field_1) + 224] = mem[_22146]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + uint255(stor12.length.field_1) + 256 len ceil32(_22978)] = mem[_22146 + 32 len ceil32(_22978)]
                if ceil32(_22978) > _22978:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + uint255(stor12.length.field_1) + _22978 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + uint255(stor12.length.field_1) + 224 len ceil32(_22978) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _18886 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18886)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18886)]
                if ceil32(_18886) > _18886:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _18886 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18886) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19078 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_19078) > _19078:
                    mem[_19078 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19078) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22147 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + stor12.length.field_1 % 128 + 192] = 32
            _22979 = mem[_22147]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + stor12.length.field_1 % 128 + 224] = mem[_22147]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + stor12.length.field_1 % 128 + 256 len ceil32(_22979)] = mem[_22147 + 32 len ceil32(_22979)]
            if ceil32(_22979) > _22979:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + stor12.length.field_1 % 128 + _22979 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + stor12.length.field_1 % 128 + 224 len ceil32(_22979) + 32], 
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
        if bool(stor12.length):
            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                _18888 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18888)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18888)]
                if ceil32(_18888) > _18888:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18888 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18888) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19079 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_19079) > _19079:
                    mem[_19079 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19079) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < uint255(stor12.length.field_1):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22148 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + uint255(stor12.length.field_1) + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + uint255(stor12.length.field_1) + 192] = 32
            _22980 = mem[_22148]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + uint255(stor12.length.field_1) + 224] = mem[_22148]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + uint255(stor12.length.field_1) + 256 len ceil32(_22980)] = mem[_22148 + 32 len ceil32(_22980)]
            if ceil32(_22980) > _22980:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + uint255(stor12.length.field_1) + _22980 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + uint255(stor12.length.field_1) + 224 len ceil32(_22980) + 32], 
        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
            revert with 'NH{q', 34
        if not bool(stor12.length):
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
            _19080 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19080)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_19080)]
            if ceil32(_19080) > _19080:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _19080 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19080) + 32], 
        if bool(stor12.length) != 1:
            mem[64] = 0
            _19193 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
            if ceil32(_19193) > _19193:
                mem[_19193 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_19193) + -mem[64] + 64
        mem[0] = 12
        idx = 0
        t = 0
        while idx < stor12.length.field_1 % 128:
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
            idx = idx + 32
            t = t + 1
            continue 
        _22149 = mem[64]
        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + stor12.length.field_1 % 128 + 192
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + stor12.length.field_1 % 128 + 192] = 32
        _22981 = mem[_22149]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + stor12.length.field_1 % 128 + 224] = mem[_22149]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + stor12.length.field_1 % 128 + 256 len ceil32(_22981)] = mem[_22149 + 32 len ceil32(_22981)]
        if ceil32(_22981) > _22981:
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + stor12.length.field_1 % 128 + _22981 + 256] = 0
        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12683 + stor12.length.field_1 % 128 + 224 len ceil32(_22981) + 32], 
    if 31 >= stor11.length.field_1 % 128:
        mem[128] = 256 * Mask(248, 0, stor11.length.field_8)
        if stor11.length.field_1 % 128 <= 0:
            return ''
        mem[0] = arg1
        mem[32] = 23
        if not nodeType[arg1]:
            mem[64] = ceil32(stor11.length.field_1 % 128) + 192
            mem[ceil32(stor11.length.field_1 % 128) + 128] = 1
            mem[ceil32(stor11.length.field_1 % 128) + 160] = '0'
            mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 224] = '0'
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = 0
            if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                        if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                            return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _7234 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                        if ceil32(_7234) > _7234:
                            mem[_7234 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_7234) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    s = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 224] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    _12480 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                    _12904 = mem[_12480]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[_12480]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(_12904)] = mem[_12480 + 32 len ceil32(_12904)]
                    if ceil32(_12904) > _12904:
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + _12904 + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(_12904) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                        return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7306 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    if ceil32(_7306) > _7306:
                        mem[_7306 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7306) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12481 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                _12905 = mem[_12481]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[_12481]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(_12905)] = mem[_12481 + 32 len ceil32(_12905)]
                if ceil32(_12905) > _12905:
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + _12905 + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(_12905) + 32], 
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                        return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _7239 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    if ceil32(_7239) > _7239:
                        mem[_7239 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_7239) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                s = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 224] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                _12484 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                _12908 = mem[_12484]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[_12484]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(_12908)] = mem[_12484 + 32 len ceil32(_12908)]
                if ceil32(_12908) > _12908:
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + _12908 + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(_12908) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                    return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _7309 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                if ceil32(_7309) > _7309:
                    mem[_7309 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_7309) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            s = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 224] = stor12[s].field_0
                idx = idx + 32
                s = s + 1
                continue 
            _12485 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
            _12909 = mem[_12485]
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[_12485]
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(_12909)] = mem[_12485 + 32 len ceil32(_12909)]
            if ceil32(_12909) > _12909:
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + _12909 + 289] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(_12909) + 32], 
        s = 0
        idx = nodeType[arg1]
        while idx:
            if s == -1:
                revert with 'NH{q', 17
            s = s + 1
            idx = idx / 10
            continue 
        if s > test266151307():
            revert with 'NH{q', 65
        mem[ceil32(stor11.length.field_1 % 128) + 128] = s
        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160
        if not s:
            t = s
            idx = nodeType[arg1]
            while idx:
                if t < 1:
                    revert with 'NH{q', 17
                if 48 > -(idx % 10) - 1:
                    revert with 'NH{q', 17
                if t - 1 >= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                    revert with 'NH{q', 50
                mem[t + ceil32(stor11.length.field_1 % 128) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
            if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
                _12564 = mem[ceil32(stor11.length.field_1 % 128) + 128]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
                if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                    if bool(stor12.length):
                        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                            revert with 'NH{q', 34
                        if not bool(stor12.length):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                            _18714 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18714)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18714)]
                            if ceil32(_18714) > _18714:
                                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18714 + 256] = 0
                            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18714) + 32], 
                        if bool(stor12.length) != 1:
                            mem[64] = 0
                            _18898 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                            if ceil32(_18898) > _18898:
                                mem[_18898 + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_18898) + -mem[64] + 64
                        mem[0] = 12
                        idx = 0
                        t = 0
                        while idx < uint255(stor12.length.field_1):
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                            idx = idx + 32
                            t = t + 1
                            continue 
                        _22150 = mem[64]
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + uint255(stor12.length.field_1) + 192] = 32
                        _22982 = mem[_22150]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + uint255(stor12.length.field_1) + 224] = mem[_22150]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + uint255(stor12.length.field_1) + 256 len ceil32(_22982)] = mem[_22150 + 32 len ceil32(_22982)]
                        if ceil32(_22982) > _22982:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + uint255(stor12.length.field_1) + _22982 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + uint255(stor12.length.field_1) + 224 len ceil32(_22982) + 32], 
                    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                        _18899 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18899)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18899)]
                        if ceil32(_18899) > _18899:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _18899 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18899) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19091 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_19091) > _19091:
                            mem[_19091 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19091) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < stor12.length.field_1 % 128:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22151 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + stor12.length.field_1 % 128 + 192] = 32
                    _22983 = mem[_22151]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + stor12.length.field_1 % 128 + 224] = mem[_22151]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + stor12.length.field_1 % 128 + 256 len ceil32(_22983)] = mem[_22151 + 32 len ceil32(_22983)]
                    if ceil32(_22983) > _22983:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + stor12.length.field_1 % 128 + _22983 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + stor12.length.field_1 % 128 + 224 len ceil32(_22983) + 32], 
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18901 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18901)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18901)]
                        if ceil32(_18901) > _18901:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18901 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18901) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _19092 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_19092) > _19092:
                            mem[_19092 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_19092) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22152 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + uint255(stor12.length.field_1) + 192] = 32
                    _22984 = mem[_22152]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + uint255(stor12.length.field_1) + 224] = mem[_22152]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + uint255(stor12.length.field_1) + 256 len ceil32(_22984)] = mem[_22152 + 32 len ceil32(_22984)]
                    if ceil32(_22984) > _22984:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + uint255(stor12.length.field_1) + _22984 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + uint255(stor12.length.field_1) + 224 len ceil32(_22984) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _19093 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19093)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_19093)]
                    if ceil32(_19093) > _19093:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _19093 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19093) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19196 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19196) > _19196:
                        mem[_19196 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19196) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22153 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + stor12.length.field_1 % 128 + 192] = 32
                _22985 = mem[_22153]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + stor12.length.field_1 % 128 + 224] = mem[_22153]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + stor12.length.field_1 % 128 + 256 len ceil32(_22985)] = mem[_22153 + 32 len ceil32(_22985)]
                if ceil32(_22985) > _22985:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + stor12.length.field_1 % 128 + _22985 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12564 + stor12.length.field_1 % 128 + 224 len ceil32(_22985) + 32], 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192] = 0
            _12700 = mem[ceil32(stor11.length.field_1 % 128) + 128]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18717 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18717)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18717)]
                        if ceil32(_18717) > _18717:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18717 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18717) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18903 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_18903) > _18903:
                            mem[_18903 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18903) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22154 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + uint255(stor12.length.field_1) + 192] = 32
                    _22986 = mem[_22154]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + uint255(stor12.length.field_1) + 224] = mem[_22154]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + uint255(stor12.length.field_1) + 256 len ceil32(_22986)] = mem[_22154 + 32 len ceil32(_22986)]
                    if ceil32(_22986) > _22986:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + uint255(stor12.length.field_1) + _22986 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + uint255(stor12.length.field_1) + 224 len ceil32(_22986) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _18904 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18904)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18904)]
                    if ceil32(_18904) > _18904:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _18904 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18904) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19096 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19096) > _19096:
                        mem[_19096 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19096) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22155 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + stor12.length.field_1 % 128 + 192] = 32
                _22987 = mem[_22155]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + stor12.length.field_1 % 128 + 224] = mem[_22155]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + stor12.length.field_1 % 128 + 256 len ceil32(_22987)] = mem[_22155 + 32 len ceil32(_22987)]
                if ceil32(_22987) > _22987:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + stor12.length.field_1 % 128 + _22987 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + stor12.length.field_1 % 128 + 224 len ceil32(_22987) + 32], 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _18906 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18906)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18906)]
                    if ceil32(_18906) > _18906:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18906 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18906) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19097 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19097) > _19097:
                        mem[_19097 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19097) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22156 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + uint255(stor12.length.field_1) + 192] = 32
                _22988 = mem[_22156]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + uint255(stor12.length.field_1) + 224] = mem[_22156]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + uint255(stor12.length.field_1) + 256 len ceil32(_22988)] = mem[_22156 + 32 len ceil32(_22988)]
                if ceil32(_22988) > _22988:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + uint255(stor12.length.field_1) + _22988 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + uint255(stor12.length.field_1) + 224 len ceil32(_22988) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _19098 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19098)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_19098)]
                if ceil32(_19098) > _19098:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _19098 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19098) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19199 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_19199) > _19199:
                    mem[_19199 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19199) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22157 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + stor12.length.field_1 % 128 + 192] = 32
            _22989 = mem[_22157]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + stor12.length.field_1 % 128 + 224] = mem[_22157]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + stor12.length.field_1 % 128 + 256 len ceil32(_22989)] = mem[_22157 + 32 len ceil32(_22989)]
            if ceil32(_22989) > _22989:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + stor12.length.field_1 % 128 + _22989 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12700 + stor12.length.field_1 % 128 + 224 len ceil32(_22989) + 32], 
        mem[ceil32(stor11.length.field_1 % 128) + 160 len s] = call.data[calldata.size len s]
        t = s
        idx = nodeType[arg1]
        while idx:
            if t < 1:
                revert with 'NH{q', 17
            if 48 > -(idx % 10) - 1:
                revert with 'NH{q', 17
            if t - 1 >= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                revert with 'NH{q', 50
            mem[t + ceil32(stor11.length.field_1 % 128) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
            t = t - 1
            idx = idx / 10
            continue 
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
        if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
            _12565 = mem[ceil32(stor11.length.field_1 % 128) + 128]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _18720 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18720)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18720)]
                        if ceil32(_18720) > _18720:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18720 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18720) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _18908 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_18908) > _18908:
                            mem[_18908 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_18908) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _22158 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + uint255(stor12.length.field_1) + 192] = 32
                    _22990 = mem[_22158]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + uint255(stor12.length.field_1) + 224] = mem[_22158]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + uint255(stor12.length.field_1) + 256 len ceil32(_22990)] = mem[_22158 + 32 len ceil32(_22990)]
                    if ceil32(_22990) > _22990:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + uint255(stor12.length.field_1) + _22990 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + uint255(stor12.length.field_1) + 224 len ceil32(_22990) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _18909 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18909)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18909)]
                    if ceil32(_18909) > _18909:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _18909 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18909) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19101 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19101) > _19101:
                        mem[_19101 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19101) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22159 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + stor12.length.field_1 % 128 + 192] = 32
                _22991 = mem[_22159]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + stor12.length.field_1 % 128 + 224] = mem[_22159]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + stor12.length.field_1 % 128 + 256 len ceil32(_22991)] = mem[_22159 + 32 len ceil32(_22991)]
                if ceil32(_22991) > _22991:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + stor12.length.field_1 % 128 + _22991 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + stor12.length.field_1 % 128 + 224 len ceil32(_22991) + 32], 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _18911 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18911)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18911)]
                    if ceil32(_18911) > _18911:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18911 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18911) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _19102 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_19102) > _19102:
                        mem[_19102 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_19102) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22160 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + uint255(stor12.length.field_1) + 192] = 32
                _22992 = mem[_22160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + uint255(stor12.length.field_1) + 224] = mem[_22160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + uint255(stor12.length.field_1) + 256 len ceil32(_22992)] = mem[_22160 + 32 len ceil32(_22992)]
                if ceil32(_22992) > _22992:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + uint255(stor12.length.field_1) + _22992 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + uint255(stor12.length.field_1) + 224 len ceil32(_22992) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _19103 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19103)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_19103)]
                if ceil32(_19103) > _19103:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _19103 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19103) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19202 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_19202) > _19202:
                    mem[_19202 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19202) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22161 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + stor12.length.field_1 % 128 + 192] = 32
            _22993 = mem[_22161]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + stor12.length.field_1 % 128 + 224] = mem[_22161]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + stor12.length.field_1 % 128 + 256 len ceil32(_22993)] = mem[_22161 + 32 len ceil32(_22993)]
            if ceil32(_22993) > _22993:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + stor12.length.field_1 % 128 + _22993 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12565 + stor12.length.field_1 % 128 + 224 len ceil32(_22993) + 32], 
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192] = 0
        _12701 = mem[ceil32(stor11.length.field_1 % 128) + 128]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
        if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _18723 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18723)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18723)]
                    if ceil32(_18723) > _18723:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18723 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18723) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _18913 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_18913) > _18913:
                        mem[_18913 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_18913) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _22162 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + uint255(stor12.length.field_1) + 192] = 32
                _22994 = mem[_22162]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + uint255(stor12.length.field_1) + 224] = mem[_22162]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + uint255(stor12.length.field_1) + 256 len ceil32(_22994)] = mem[_22162 + 32 len ceil32(_22994)]
                if ceil32(_22994) > _22994:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + uint255(stor12.length.field_1) + _22994 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + uint255(stor12.length.field_1) + 224 len ceil32(_22994) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _18914 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_18914)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18914)]
                if ceil32(_18914) > _18914:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _18914 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_18914) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19106 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_19106) > _19106:
                    mem[_19106 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19106) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22163 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + stor12.length.field_1 % 128 + 192] = 32
            _22995 = mem[_22163]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + stor12.length.field_1 % 128 + 224] = mem[_22163]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + stor12.length.field_1 % 128 + 256 len ceil32(_22995)] = mem[_22163 + 32 len ceil32(_22995)]
            if ceil32(_22995) > _22995:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + stor12.length.field_1 % 128 + _22995 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + stor12.length.field_1 % 128 + 224 len ceil32(_22995) + 32], 
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
        if bool(stor12.length):
            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                _18916 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_18916)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_18916)]
                if ceil32(_18916) > _18916:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _18916 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_18916) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _19107 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_19107) > _19107:
                    mem[_19107 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_19107) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < uint255(stor12.length.field_1):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _22164 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + uint255(stor12.length.field_1) + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + uint255(stor12.length.field_1) + 192] = 32
            _22996 = mem[_22164]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + uint255(stor12.length.field_1) + 224] = mem[_22164]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + uint255(stor12.length.field_1) + 256 len ceil32(_22996)] = mem[_22164 + 32 len ceil32(_22996)]
            if ceil32(_22996) > _22996:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + uint255(stor12.length.field_1) + _22996 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + uint255(stor12.length.field_1) + 224 len ceil32(_22996) + 32], 
        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
            revert with 'NH{q', 34
        if not bool(stor12.length):
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
            _19108 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_19108)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_19108)]
            if ceil32(_19108) > _19108:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _19108 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_19108) + 32], 
        if bool(stor12.length) != 1:
            mem[64] = 0
            _19205 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
            if ceil32(_19205) > _19205:
                mem[_19205 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_19205) + -mem[64] + 64
        mem[0] = 12
        idx = 0
        t = 0
        while idx < stor12.length.field_1 % 128:
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
            idx = idx + 32
            t = t + 1
            continue 
        _22165 = mem[64]
        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + stor12.length.field_1 % 128 + 192
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + stor12.length.field_1 % 128 + 192] = 32
        _22997 = mem[_22165]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + stor12.length.field_1 % 128 + 224] = mem[_22165]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + stor12.length.field_1 % 128 + 256 len ceil32(_22997)] = mem[_22165 + 32 len ceil32(_22997)]
        if ceil32(_22997) > _22997:
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + stor12.length.field_1 % 128 + _22997 + 256] = 0
        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _12701 + stor12.length.field_1 % 128 + 224 len ceil32(_22997) + 32], 
    mem[128] = uint256(stor11.field_0)
    idx = 128
    s = 0
    while stor11.length.field_1 % 128 + 96 > idx:
        mem[idx + 32] = stor11[s].field_256
        idx = idx + 32
        s = s + 1
        continue 
    if stor11.length.field_1 % 128 <= 0:
        return ''
    mem[0] = arg1
    mem[32] = 23
    if not nodeType[arg1]:
        mem[ceil32(stor11.length.field_1 % 128) + 128] = 1
        mem[ceil32(stor11.length.field_1 % 128) + 160] = '0'
        mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 224] = '0'
        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = 0
        if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    var88001 = ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])
                    if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                        return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                if bool(stor12.length) == 1:
                    idx = 0
                    s = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + idx + 225] = stor12[s].field_0
                        idx = idx + 32
                        s = s + 1
                        continue 
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                    if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                        return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
                mem[64] = 0
                _13406 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                var89001 = ceil32(_13406)
                if ceil32(_13406) > _13406:
                    mem[_13406 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_13406) + -mem[64] + 64
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                var89001 = ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])
                if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                    return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
            if bool(stor12.length) == 1:
                idx = 0
                s = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + idx + 225] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                    return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
            mem[64] = 0
            _13450 = mem[ceil32(stor11.length.field_1 % 128) + 192]
            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
            var90001 = ceil32(_13450)
            if ceil32(_13450) > _13450:
                mem[_13450 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_13450) + -mem[64] + 64
        if bool(stor12.length):
            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                var89001 = ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])
                if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                    return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
            if bool(stor12.length) == 1:
                idx = 0
                s = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + idx + 225] = stor12[s].field_0
                    idx = idx + 32
                    s = s + 1
                    continue 
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 225] = 32
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
                    return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + uint255(stor12.length.field_1) + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
            mem[64] = 0
            _13411 = mem[ceil32(stor11.length.field_1 % 128) + 192]
            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
            var90001 = ceil32(_13411)
            if ceil32(_13411) > _13411:
                mem[_13411 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_13411) + -mem[64] + 64
        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
            revert with 'NH{q', 34
        if not bool(stor12.length):
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + 225] = Mask(248, 8, stor12.length)
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
            var90001 = ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])
        else:
            if bool(stor12.length) != 1:
                mem[64] = 0
                _13453 = mem[ceil32(stor11.length.field_1 % 128) + 192]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
                if ceil32(_13453) > _13453:
                    mem[_13453 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_13453) + -mem[64] + 64
            idx = 0
            s = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + idx + 225] = stor12[s].field_0
                idx = idx + 32
                s = s + 1
                continue 
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 225] = 32
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257] = mem[ceil32(stor11.length.field_1 % 128) + 192]
            mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])] = mem[ceil32(stor11.length.field_1 % 128) + 224 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]
        if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) <= mem[ceil32(stor11.length.field_1 % 128) + 192]:
            return Array(len=mem[ceil32(stor11.length.field_1 % 128) + 192], data=mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 289 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192])]), 
        mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 192] + 289] = 0
        return 32, mem[ceil32(stor11.length.field_1 % 128) + stor11.length.field_1 % 128 + stor12.length.field_1 % 128 + 257 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 192]) + 32], 
    s = 0
    idx = nodeType[arg1]
    while idx:
        if s == -1:
            revert with 'NH{q', 17
        s = s + 1
        idx = idx / 10
        continue 
    if s > test266151307():
        revert with 'NH{q', 65
    mem[ceil32(stor11.length.field_1 % 128) + 128] = s
    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160
    if not s:
        t = s
        idx = nodeType[arg1]
        while idx:
            if t < 1:
                revert with 'NH{q', 17
            if 48 > -(idx % 10) - 1:
                revert with 'NH{q', 17
            if t - 1 >= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                revert with 'NH{q', 50
            mem[t + ceil32(stor11.length.field_1 % 128) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
            t = t - 1
            idx = idx / 10
            continue 
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
        if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
            _17668 = mem[ceil32(stor11.length.field_1 % 128) + 128]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
            if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
                if bool(stor12.length):
                    if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                        revert with 'NH{q', 34
                    if not bool(stor12.length):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                        _23466 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23466)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23466)]
                        if ceil32(_23466) > _23466:
                            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _23466 + 256] = 0
                        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23466) + 32], 
                    if bool(stor12.length) != 1:
                        mem[64] = 0
                        _23650 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                        if ceil32(_23650) > _23650:
                            mem[_23650 + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_23650) + -mem[64] + 64
                    mem[0] = 12
                    idx = 0
                    t = 0
                    while idx < uint255(stor12.length.field_1):
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                        idx = idx + 32
                        t = t + 1
                        continue 
                    _24902 = mem[64]
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + uint255(stor12.length.field_1) + 192] = 32
                    _25542 = mem[_24902]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + uint255(stor12.length.field_1) + 224] = mem[_24902]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + uint255(stor12.length.field_1) + 256 len ceil32(_25542)] = mem[_24902 + 32 len ceil32(_25542)]
                    if ceil32(_25542) > _25542:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + uint255(stor12.length.field_1) + _25542 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + uint255(stor12.length.field_1) + 224 len ceil32(_25542) + 32], 
                if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                    _23651 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23651)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23651)]
                    if ceil32(_23651) > _23651:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _23651 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23651) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23859 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_23859) > _23859:
                        mem[_23859 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23859) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < stor12.length.field_1 % 128:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24903 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + stor12.length.field_1 % 128 + 192] = 32
                _25543 = mem[_24903]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + stor12.length.field_1 % 128 + 224] = mem[_24903]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + stor12.length.field_1 % 128 + 256 len ceil32(_25543)] = mem[_24903 + 32 len ceil32(_25543)]
                if ceil32(_25543) > _25543:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + stor12.length.field_1 % 128 + _25543 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + stor12.length.field_1 % 128 + 224 len ceil32(_25543) + 32], 
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _23653 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23653)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23653)]
                    if ceil32(_23653) > _23653:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _23653 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23653) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23860 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_23860) > _23860:
                        mem[_23860 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23860) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24904 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + uint255(stor12.length.field_1) + 192] = 32
                _25544 = mem[_24904]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + uint255(stor12.length.field_1) + 224] = mem[_24904]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + uint255(stor12.length.field_1) + 256 len ceil32(_25544)] = mem[_24904 + 32 len ceil32(_25544)]
                if ceil32(_25544) > _25544:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + uint255(stor12.length.field_1) + _25544 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + uint255(stor12.length.field_1) + 224 len ceil32(_25544) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _23861 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23861)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23861)]
                if ceil32(_23861) > _23861:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _23861 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23861) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23932 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_23932) > _23932:
                    mem[_23932 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23932) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24905 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + stor12.length.field_1 % 128 + 192] = 32
            _25545 = mem[_24905]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + stor12.length.field_1 % 128 + 224] = mem[_24905]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + stor12.length.field_1 % 128 + 256 len ceil32(_25545)] = mem[_24905 + 32 len ceil32(_25545)]
            if ceil32(_25545) > _25545:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + stor12.length.field_1 % 128 + _25545 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17668 + stor12.length.field_1 % 128 + 224 len ceil32(_25545) + 32], 
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192] = 0
        _17788 = mem[ceil32(stor11.length.field_1 % 128) + 128]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
        if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _23469 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23469)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23469)]
                    if ceil32(_23469) > _23469:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _23469 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23469) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23655 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_23655) > _23655:
                        mem[_23655 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23655) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24906 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + uint255(stor12.length.field_1) + 192] = 32
                _25546 = mem[_24906]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + uint255(stor12.length.field_1) + 224] = mem[_24906]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + uint255(stor12.length.field_1) + 256 len ceil32(_25546)] = mem[_24906 + 32 len ceil32(_25546)]
                if ceil32(_25546) > _25546:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + uint255(stor12.length.field_1) + _25546 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + uint255(stor12.length.field_1) + 224 len ceil32(_25546) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _23656 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23656)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23656)]
                if ceil32(_23656) > _23656:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _23656 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23656) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23864 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_23864) > _23864:
                    mem[_23864 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23864) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24907 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + stor12.length.field_1 % 128 + 192] = 32
            _25547 = mem[_24907]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + stor12.length.field_1 % 128 + 224] = mem[_24907]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + stor12.length.field_1 % 128 + 256 len ceil32(_25547)] = mem[_24907 + 32 len ceil32(_25547)]
            if ceil32(_25547) > _25547:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + stor12.length.field_1 % 128 + _25547 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + stor12.length.field_1 % 128 + 224 len ceil32(_25547) + 32], 
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
        if bool(stor12.length):
            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                _23658 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23658)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23658)]
                if ceil32(_23658) > _23658:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _23658 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23658) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23865 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_23865) > _23865:
                    mem[_23865 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23865) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < uint255(stor12.length.field_1):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24908 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + uint255(stor12.length.field_1) + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + uint255(stor12.length.field_1) + 192] = 32
            _25548 = mem[_24908]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + uint255(stor12.length.field_1) + 224] = mem[_24908]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + uint255(stor12.length.field_1) + 256 len ceil32(_25548)] = mem[_24908 + 32 len ceil32(_25548)]
            if ceil32(_25548) > _25548:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + uint255(stor12.length.field_1) + _25548 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + uint255(stor12.length.field_1) + 224 len ceil32(_25548) + 32], 
        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
            revert with 'NH{q', 34
        if not bool(stor12.length):
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
            _23866 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23866)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23866)]
            if ceil32(_23866) > _23866:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _23866 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23866) + 32], 
        if bool(stor12.length) != 1:
            mem[64] = 0
            _23935 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
            if ceil32(_23935) > _23935:
                mem[_23935 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_23935) + -mem[64] + 64
        mem[0] = 12
        idx = 0
        t = 0
        while idx < stor12.length.field_1 % 128:
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
            idx = idx + 32
            t = t + 1
            continue 
        _24909 = mem[64]
        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + stor12.length.field_1 % 128 + 192
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + stor12.length.field_1 % 128 + 192] = 32
        _25549 = mem[_24909]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + stor12.length.field_1 % 128 + 224] = mem[_24909]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + stor12.length.field_1 % 128 + 256 len ceil32(_25549)] = mem[_24909 + 32 len ceil32(_25549)]
        if ceil32(_25549) > _25549:
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + stor12.length.field_1 % 128 + _25549 + 256] = 0
        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17788 + stor12.length.field_1 % 128 + 224 len ceil32(_25549) + 32], 
    mem[ceil32(stor11.length.field_1 % 128) + 160 len s] = call.data[calldata.size len s]
    t = s
    idx = nodeType[arg1]
    while idx:
        if t < 1:
            revert with 'NH{q', 17
        if 48 > -(idx % 10) - 1:
            revert with 'NH{q', 17
        if t - 1 >= mem[ceil32(stor11.length.field_1 % 128) + 128]:
            revert with 'NH{q', 50
        mem[t + ceil32(stor11.length.field_1 % 128) + 159 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
        t = t - 1
        idx = idx / 10
        continue 
    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(stor11.length.field_1 % 128)] = mem[128 len ceil32(stor11.length.field_1 % 128)]
    if ceil32(stor11.length.field_1 % 128) <= stor11.length.field_1 % 128:
        _17669 = mem[ceil32(stor11.length.field_1 % 128) + 128]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
        if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
            if bool(stor12.length):
                if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                    revert with 'NH{q', 34
                if not bool(stor12.length):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                    _23472 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23472)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23472)]
                    if ceil32(_23472) > _23472:
                        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _23472 + 256] = 0
                    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23472) + 32], 
                if bool(stor12.length) != 1:
                    mem[64] = 0
                    _23660 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                    mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                    if ceil32(_23660) > _23660:
                        mem[_23660 + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_23660) + -mem[64] + 64
                mem[0] = 12
                idx = 0
                t = 0
                while idx < uint255(stor12.length.field_1):
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                    idx = idx + 32
                    t = t + 1
                    continue 
                _24910 = mem[64]
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + uint255(stor12.length.field_1) + 192] = 32
                _25550 = mem[_24910]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + uint255(stor12.length.field_1) + 224] = mem[_24910]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + uint255(stor12.length.field_1) + 256 len ceil32(_25550)] = mem[_24910 + 32 len ceil32(_25550)]
                if ceil32(_25550) > _25550:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + uint255(stor12.length.field_1) + _25550 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + uint255(stor12.length.field_1) + 224 len ceil32(_25550) + 32], 
            if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
                _23661 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23661)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23661)]
                if ceil32(_23661) > _23661:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _23661 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23661) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23869 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_23869) > _23869:
                    mem[_23869 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23869) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < stor12.length.field_1 % 128:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24911 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + stor12.length.field_1 % 128 + 192] = 32
            _25551 = mem[_24911]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + stor12.length.field_1 % 128 + 224] = mem[_24911]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + stor12.length.field_1 % 128 + 256 len ceil32(_25551)] = mem[_24911 + 32 len ceil32(_25551)]
            if ceil32(_25551) > _25551:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + stor12.length.field_1 % 128 + _25551 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + stor12.length.field_1 % 128 + 224 len ceil32(_25551) + 32], 
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
        if bool(stor12.length):
            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                _23663 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23663)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23663)]
                if ceil32(_23663) > _23663:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _23663 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23663) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23870 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_23870) > _23870:
                    mem[_23870 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23870) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < uint255(stor12.length.field_1):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24912 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + uint255(stor12.length.field_1) + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + uint255(stor12.length.field_1) + 192] = 32
            _25552 = mem[_24912]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + uint255(stor12.length.field_1) + 224] = mem[_24912]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + uint255(stor12.length.field_1) + 256 len ceil32(_25552)] = mem[_24912 + 32 len ceil32(_25552)]
            if ceil32(_25552) > _25552:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + uint255(stor12.length.field_1) + _25552 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + uint255(stor12.length.field_1) + 224 len ceil32(_25552) + 32], 
        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
            revert with 'NH{q', 34
        if not bool(stor12.length):
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
            _23871 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23871)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23871)]
            if ceil32(_23871) > _23871:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _23871 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23871) + 32], 
        if bool(stor12.length) != 1:
            mem[64] = 0
            _23938 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
            if ceil32(_23938) > _23938:
                mem[_23938 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_23938) + -mem[64] + 64
        mem[0] = 12
        idx = 0
        t = 0
        while idx < stor12.length.field_1 % 128:
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
            idx = idx + 32
            t = t + 1
            continue 
        _24913 = mem[64]
        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + stor12.length.field_1 % 128 + 192
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + stor12.length.field_1 % 128 + 192] = 32
        _25553 = mem[_24913]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + stor12.length.field_1 % 128 + 224] = mem[_24913]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + stor12.length.field_1 % 128 + 256 len ceil32(_25553)] = mem[_24913 + 32 len ceil32(_25553)]
        if ceil32(_25553) > _25553:
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + stor12.length.field_1 % 128 + _25553 + 256] = 0
        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17669 + stor12.length.field_1 % 128 + 224 len ceil32(_25553) + 32], 
    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192] = 0
    _17789 = mem[ceil32(stor11.length.field_1 % 128) + 128]
    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])] = mem[ceil32(stor11.length.field_1 % 128) + 160 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128])]
    if ceil32(mem[ceil32(stor11.length.field_1 % 128) + 128]) <= mem[ceil32(stor11.length.field_1 % 128) + 128]:
        if bool(stor12.length):
            if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
                revert with 'NH{q', 34
            if not bool(stor12.length):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
                mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
                _23475 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23475)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23475)]
                if ceil32(_23475) > _23475:
                    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _23475 + 256] = 0
                return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23475) + 32], 
            if bool(stor12.length) != 1:
                mem[64] = 0
                _23665 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
                mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
                if ceil32(_23665) > _23665:
                    mem[_23665 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_23665) + -mem[64] + 64
            mem[0] = 12
            idx = 0
            t = 0
            while idx < uint255(stor12.length.field_1):
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
                idx = idx + 32
                t = t + 1
                continue 
            _24914 = mem[64]
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + uint255(stor12.length.field_1) + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + uint255(stor12.length.field_1) + 192] = 32
            _25554 = mem[_24914]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + uint255(stor12.length.field_1) + 224] = mem[_24914]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + uint255(stor12.length.field_1) + 256 len ceil32(_25554)] = mem[_24914 + 32 len ceil32(_25554)]
            if ceil32(_25554) > _25554:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + uint255(stor12.length.field_1) + _25554 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + uint255(stor12.length.field_1) + 224 len ceil32(_25554) + 32], 
        if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
            revert with 'NH{q', 34
        if not bool(stor12.length):
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
            _23666 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23666)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23666)]
            if ceil32(_23666) > _23666:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _23666 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23666) + 32], 
        if bool(stor12.length) != 1:
            mem[64] = 0
            _23874 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
            if ceil32(_23874) > _23874:
                mem[_23874 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_23874) + -mem[64] + 64
        mem[0] = 12
        idx = 0
        t = 0
        while idx < stor12.length.field_1 % 128:
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
            idx = idx + 32
            t = t + 1
            continue 
        _24915 = mem[64]
        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + stor12.length.field_1 % 128 + 192
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + stor12.length.field_1 % 128 + 192] = 32
        _25555 = mem[_24915]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + stor12.length.field_1 % 128 + 224] = mem[_24915]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + stor12.length.field_1 % 128 + 256 len ceil32(_25555)] = mem[_24915 + 32 len ceil32(_25555)]
        if ceil32(_25555) > _25555:
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + stor12.length.field_1 % 128 + _25555 + 256] = 0
        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + stor12.length.field_1 % 128 + 224 len ceil32(_25555) + 32], 
    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = 0
    if bool(stor12.length):
        if bool(stor12.length) == uint255(stor12.length.field_1) < 32:
            revert with 'NH{q', 34
        if not bool(stor12.length):
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
            mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 192] = 32
            _23668 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 256 len ceil32(_23668)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23668)]
            if ceil32(_23668) > _23668:
                mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + _23668 + 256] = 0
            return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + uint255(stor12.length.field_1) + 224 len ceil32(_23668) + 32], 
        if bool(stor12.length) != 1:
            mem[64] = 0
            _23875 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
            mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
            if ceil32(_23875) > _23875:
                mem[_23875 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_23875) + -mem[64] + 64
        mem[0] = 12
        idx = 0
        t = 0
        while idx < uint255(stor12.length.field_1):
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
            idx = idx + 32
            t = t + 1
            continue 
        _24916 = mem[64]
        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + uint255(stor12.length.field_1) + 192
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + uint255(stor12.length.field_1) + 192] = 32
        _25556 = mem[_24916]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + uint255(stor12.length.field_1) + 224] = mem[_24916]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + uint255(stor12.length.field_1) + 256 len ceil32(_25556)] = mem[_24916 + 32 len ceil32(_25556)]
        if ceil32(_25556) > _25556:
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + uint255(stor12.length.field_1) + _25556 + 256] = 0
        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + uint255(stor12.length.field_1) + 224 len ceil32(_25556) + 32], 
    if bool(stor12.length) == stor12.length.field_1 % 128 < 32:
        revert with 'NH{q', 34
    if not bool(stor12.length):
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + 192] = Mask(248, 8, stor12.length)
        mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 192] = 32
        _23876 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 256 len ceil32(_23876)] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(_23876)]
        if ceil32(_23876) > _23876:
            mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + _23876 + 256] = 0
        return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + stor12.length.field_1 % 128 + 224 len ceil32(_23876) + 32], 
    if bool(stor12.length) != 1:
        mem[64] = 0
        _23941 = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160]
        mem[64 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])] = mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 192 len ceil32(mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + 160])]
        if ceil32(_23941) > _23941:
            mem[_23941 + 64] = 0
        return memory
          from mem[64]
           len ceil32(_23941) + -mem[64] + 64
    mem[0] = 12
    idx = 0
    t = 0
    while idx < stor12.length.field_1 % 128:
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + mem[ceil32(stor11.length.field_1 % 128) + 128] + idx + 192] = stor12[t].field_0
        idx = idx + 32
        t = t + 1
        continue 
    _24917 = mem[64]
    mem[64] = ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + stor12.length.field_1 % 128 + 192
    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + stor12.length.field_1 % 128 + 192] = 32
    _25557 = mem[_24917]
    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + stor12.length.field_1 % 128 + 224] = mem[_24917]
    mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + stor12.length.field_1 % 128 + 256 len ceil32(_25557)] = mem[_24917 + 32 len ceil32(_25557)]
    if ceil32(_25557) > _25557:
        mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + stor12.length.field_1 % 128 + _25557 + 256] = 0
    return 32, mem[ceil32(stor11.length.field_1 % 128) + ceil32(s) + stor11.length.field_1 % 128 + _17789 + stor12.length.field_1 % 128 + 224 len ceil32(_25557) + 32], 
}



}
