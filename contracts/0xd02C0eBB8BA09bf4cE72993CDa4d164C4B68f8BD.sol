contract main {




// =====================  Runtime code  =====================


const name = 'Triangle', 0


address owner;

function owner() payable {
    return owner
}

function _fallback() payable {
    revert
}

function changeOwner(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Not owner'
    owner = arg1
}

function getColor(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Not owner'
    mem[416] = 6
    mem[448] = 0x3336616664630000000000000000000000000000000000000000000000000000
    mem[96] = 416
    mem[480] = 6
    mem[512] = 0x3663393666300000000000000000000000000000000000000000000000000000
    mem[128] = 480
    mem[544] = 6
    mem[576] = 0x3238363562360000000000000000000000000000000000000000000000000000
    mem[160] = 544
    mem[608] = 6
    mem[640] = 0x3765613063320000000000000000000000000000000000000000000000000000
    mem[192] = 608
    mem[672] = 6
    mem[704] = 0x3431616464380000000000000000000000000000000000000000000000000000
    mem[224] = 672
    mem[736] = 6
    mem[768] = 0x6130636565630000000000000000000000000000000000000000000000000000
    mem[256] = 736
    mem[800] = 6
    mem[832] = 0x3333353763620000000000000000000000000000000000000000000000000000
    mem[288] = 800
    mem[864] = 6
    mem[896] = 0x3366373666660000000000000000000000000000000000000000000000000000
    mem[320] = 864
    mem[928] = 6
    mem[960] = 0x3164306666660000000000000000000000000000000000000000000000000000
    mem[352] = 928
    mem[992] = 6
    mem[1024] = 0x3066633063380000000000000000000000000000000000000000000000000000
    mem[384] = 992
    if arg1 >= 10:
        revert with 0, 50
    _12 = mem[(32 * arg1) + 96]
    mem[64] = 1120
    mem[1056] = 13
    mem[1088] = 0x547269616e676c65436f6c6f7200000000000000000000000000000000000000
    mem[1120] = 64
    _16 = mem[_12]
    mem[1184] = mem[_12]
    mem[1216 len ceil32(_16)] = mem[_12 + 32 len ceil32(_16)]
    if ceil32(_16) <= _16:
        return 64, ceil32(_16) + 96, mem[1184 len ceil32(_16) + 32], 13, 0, 0
    mem[_16 + 1216] = 0
    mem[ceil32(_16) + 1216] = 13
    mem[ceil32(_16) + 1248] = 0x547269616e676c65436f6c6f7200000000000000000000000000000000000000
    return 64, ceil32(_16) + 96, mem[1184 len _16 + 32], 0, mem[_16 + 1248 len ceil32(_16) + -_16 + 13], 0
}

function getPart(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Not owner'
    mem[320] = 113
    mem[352 len 113] = 0x3e3c672069643d2268656164223e3c7061746820643d224d3738382e3238382c33322e3239356c3239332e3137342c3531352e3736326c2d3631322e3030342c2d31352e3435336c3331382e38332c2d3530302e3330395a222069643d22547269616e676c65436f6c6f72222f3e3c2f67
    mem[96] = 320
    mem[480] = 109
    mem[512 len 109] = 0x3e3c672069643d2262656c6c79223e3c7061746820643d224d3737382e3535312c3332302e3230336c3432312e3735342c3735372e35316c2d3834332e3530372c2d306c3432312e3735332c2d3735372e35315a222069643d22547269616e676c65436f6c6f72222f3e3c2f67
    mem[128] = 480
    mem[640] = 113
    mem[672 len 113] = 0x3e3c672069643d227061775f72223e3c7061746820643d224d3331392e3138392c3436302e3938356c3239372e36312c3232342e3537376c2d3331362e3730322c3134372e37376c31392e3039322c2d3337322e3334375a222069643d22547269616e676c65436f6c6f72222f3e3c2f67
    mem[160] = 640
    mem[800] = 116
    mem[832 len 116] = 0x3e3c672069643d227061775f6c223e3c7061746820643d224d313239342e39372c3931332e3133396c2d3334302e3039352c2d3135322e3738326c3237352e3931372c2d3231342e3438396c36342e3137382c3336372e3237315a222069643d22547269616e676c65436f6c6f72222f3e3c2f67
    mem[192] = 800
    mem[960] = 114
    mem[992 len 114] = 0x3e3c672069643d226c65675f6c223e3c7061746820643d224d3839312e3839352c3935392e3538376c3239372e36312c3232342e3537386c2d3331362e3730312c3134372e3736396c31392e3039312c2d3337322e3334375a222069643d22547269616e676c65436f6c6f72222f3e3c2f67
    mem[224] = 960
    mem[1120] = 115
    mem[1152 len 115] = 0xfe3c672069643d226c65675f72223e3c7061746820643d224d3138342e3330362c3934332e3630346c3337322e3534342c31342e3735356c2d3137352e3838322c3330312e3939356c2d3139362e3636322c2d3331362e37355a222069643d22547269616e676c65436f6c6f72222f3e3c2f67
    mem[256] = 1120
    mem[64] = 1440
    mem[1280] = 114
    mem[1312 len 114] = 0x3e3c672069643d22616464223e3c7061746820643d224d313039322e30362c3439342e3933386c3139342e3033372c3534372e3538386c2d3730342e33352c2d3236392e3934376c3531302e3331332c2d3237372e3634315a222069643d22547269616e676c65436f6c6f72222f3e3c2f67
    mem[288] = 1280
    if arg1 >= 7:
        revert with 0, 50
    _10 = mem[(32 * arg1) + 96]
    mem[1440] = 32
    _13 = mem[_10]
    mem[1472] = mem[_10]
    mem[1504 len ceil32(_13)] = mem[_10 + 32 len ceil32(_13)]
    if ceil32(_13) > _13:
        mem[_13 + 1504] = 0
    return 32, mem[1472 len ceil32(_13) + 32]
}



}
