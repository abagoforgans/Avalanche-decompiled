contract main {




// =====================  Runtime code  =====================


#
#  - transferFrom(address arg1, address arg2, uint256 arg3)
#
const deadAddress = 57005

const maxFees = 13


address owner;
array of struct stor3;
array of struct stor4;
uint8 decimals;
uint256 totalSupply;
address marketingAddress;
address sub_e5148bd6Address;
mapping of uint256 balanceOf;
mapping of struct allowance;
mapping of uint8 stor11;
mapping of uint8 stor12;
uint256 totalFees;
uint256 stor14;
uint256 liquidityFee;
uint256 burnFee;
uint256 marketingFee;
uint256 maxBalance;
address uniswapV2RouterAddress;
address uniswapV2PairAddress;
uint256 liquifyThreshhold;
uint8 stor22;

function totalFees() {
    return totalFees
}

function uniswapV2Router() {
    return uniswapV2RouterAddress
}

function totalSupply() {
    return totalSupply
}

function isExcludedFromMaxBalance(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor12[address(arg1)])
}

function decimals() {
    return decimals
}

function uniswapV2Pair() {
    return uniswapV2PairAddress
}

function isExcludedFromFees(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor11[address(arg1)])
}

function liquifyThreshhold() {
    return liquifyThreshhold
}

function marketingFee() {
    return marketingFee
}

function balanceOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return balanceOf[address(arg1)]
}

function maxBalance() {
    return maxBalance
}

function owner() {
    return owner
}

function liquidityFee() {
    return liquidityFee
}

function marketingAddress() {
    return marketingAddress
}

function allowance(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return allowance[address(arg1)][address(arg2)].field_0
}

function sub_e5148bd6(?) {
    return sub_e5148bd6Address
}

function burnFee() {
    return burnFee
}

function _fallback() payable {
    revert
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function includeInFees(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor11[address(arg1)] = 0
}

function excludeFromFees(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor11[address(arg1)] = 1
}

function setMarketingAddress(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    marketingAddress = arg1
}

function setLiquifyThreshhold(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    liquifyThreshhold = arg1
}

function includeInMaxBalance(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor12[address(arg1)] = 0
}

function excludeFromMaxBalance(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor12[address(arg1)] = 1
}

function setMarketingWalletToken(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_e5148bd6Address = arg1
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function approve(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function setMaxBalance(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not totalSupply:
        require arg1 >= 0
    else:
        if totalSupply and 5 > -1 / totalSupply:
            revert with 'NH{q', 17
        if not totalSupply:
            revert with 'NH{q', 18
        if 5 * totalSupply / totalSupply != 5:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
        require arg1 >= 5 * totalSupply / 1000
    maxBalance = arg1
}

function decreaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if arg2 > allowance[address(msg.sender)][address(arg1)].field_0:
        revert with 0, 32, 37, 0x6545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a6572, mem[165 len 27] >> 40, 0
    if allowance[address(msg.sender)][address(arg1)].field_0 < arg2:
        revert with 'NH{q', 17
    if not msg.sender:
        revert with 0, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 -= arg2
    emit Approval((allowance[address(msg.sender)][address(arg1)].field_0 - arg2), msg.sender, arg1);
    return 1
}

function increaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if allowance[address(msg.sender)][address(arg1)].field_0 > -arg2 - 1:
        revert with 'NH{q', 17
    if allowance[address(msg.sender)][address(arg1)].field_0 + arg2 < allowance[address(msg.sender)][address(arg1)].field_0:
        revert with 0, 'SafeMath: addition overflow'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 += arg2
    emit Approval((allowance[address(msg.sender)][address(arg1)].field_0 + arg2), msg.sender, arg1);
    return 1
}

function setBurnFeePercent(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if liquidityFee > -arg1 - 1:
        revert with 'NH{q', 17
    if liquidityFee + arg1 < liquidityFee:
        revert with 0, 'SafeMath: addition overflow'
    if liquidityFee + arg1 > -marketingFee - 1:
        revert with 'NH{q', 17
    if marketingFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    if liquidityFee + arg1 + marketingFee > 13:
        revert with 0, 'Fees are too high.'
    burnFee = arg1
    if liquidityFee > -marketingFee - 1:
        revert with 'NH{q', 17
    if liquidityFee + marketingFee < liquidityFee:
        revert with 0, 'SafeMath: addition overflow'
    if liquidityFee + marketingFee > -burnFee - 1:
        revert with 'NH{q', 17
    if burnFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = liquidityFee + marketingFee + burnFee
    emit SetBurnFee(burnFee);
}

function setLiquidityFeePercent(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if stor22:
        revert with 0, 'inSwapAndLiquify'
    if arg1 > -burnFee - 1:
        revert with 'NH{q', 17
    if arg1 + burnFee < arg1:
        revert with 0, 'SafeMath: addition overflow'
    if arg1 + burnFee > -marketingFee - 1:
        revert with 'NH{q', 17
    if marketingFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    if arg1 + burnFee + marketingFee > 13:
        revert with 0, 'Fees are too high.'
    liquidityFee = arg1
    if liquidityFee > -marketingFee - 1:
        revert with 'NH{q', 17
    if liquidityFee + marketingFee < liquidityFee:
        revert with 0, 'SafeMath: addition overflow'
    if liquidityFee + marketingFee > -burnFee - 1:
        revert with 'NH{q', 17
    if burnFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = liquidityFee + marketingFee + burnFee
    if liquidityFee > -marketingFee - 1:
        revert with 'NH{q', 17
    if liquidityFee + marketingFee < liquidityFee:
        revert with 0, 'SafeMath: addition overflow'
    stor14 = liquidityFee + marketingFee
    emit SetLiquidityFee(liquidityFee);
}

function setMarketingFeePercent(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if stor22:
        revert with 0, 'inSwapAndLiquify'
    if liquidityFee > -burnFee - 1:
        revert with 'NH{q', 17
    if liquidityFee + burnFee < liquidityFee:
        revert with 0, 'SafeMath: addition overflow'
    if liquidityFee + burnFee > -arg1 - 1:
        revert with 'NH{q', 17
    if arg1 < 0:
        revert with 0, 'SafeMath: addition overflow'
    if liquidityFee + burnFee + arg1 > 13:
        revert with 0, 'Fees are too high.'
    marketingFee = arg1
    if liquidityFee > -marketingFee - 1:
        revert with 'NH{q', 17
    if liquidityFee + marketingFee < liquidityFee:
        revert with 0, 'SafeMath: addition overflow'
    if liquidityFee + marketingFee > -burnFee - 1:
        revert with 'NH{q', 17
    if burnFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = liquidityFee + marketingFee + burnFee
    if liquidityFee > -marketingFee - 1:
        revert with 'NH{q', 17
    if liquidityFee + marketingFee < liquidityFee:
        revert with 0, 'SafeMath: addition overflow'
    stor14 = liquidityFee + marketingFee
    emit SetMarketingFee(marketingFee);
}

function name() {
    if bool(stor3.length):
        if bool(stor3.length) == stor3.length.field_1 < 32:
            revert with 'NH{q', 34
        if bool(stor3.length):
            if bool(stor3.length) == stor3.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor3.length.field_1:
                if 31 < stor3.length.field_1:
                    mem[128] = uint256(stor3.field_0)
                    idx = 128
                    s = 0
                    while stor3.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor3[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)])
                mem[128] = 256 * stor3.length.field_8
        else:
            if bool(stor3.length) == stor3.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor3.length.field_1:
                if 31 < stor3.length.field_1:
                    mem[128] = uint256(stor3.field_0)
                    idx = 128
                    s = 0
                    while stor3.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor3[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)])
                mem[128] = 256 * stor3.length.field_8
        mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]
        if ceil32(stor3.length.field_1) > stor3.length.field_1:
            mem[ceil32(stor3.length.field_1) + stor3.length.field_1 + 192] = 0
        return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), 
    if bool(stor3.length) == stor3.length.field_1 < 32:
        revert with 'NH{q', 34
    if bool(stor3.length):
        if bool(stor3.length) == stor3.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor3.length.field_1:
            if 31 < stor3.length.field_1:
                mem[128] = uint256(stor3.field_0)
                idx = 128
                s = 0
                while stor3.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor3[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
            mem[128] = 256 * stor3.length.field_8
    else:
        if bool(stor3.length) == stor3.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor3.length.field_1:
            if 31 < stor3.length.field_1:
                mem[128] = uint256(stor3.field_0)
                idx = 128
                s = 0
                while stor3.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor3[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
            mem[128] = 256 * stor3.length.field_8
    mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]
    if ceil32(stor3.length.field_1) > stor3.length.field_1:
        mem[ceil32(stor3.length.field_1) + stor3.length.field_1 + 192] = 0
    return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), 
}

function symbol() {
    if bool(stor4.length):
        if bool(stor4.length) == stor4.length.field_1 < 32:
            revert with 'NH{q', 34
        if bool(stor4.length):
            if bool(stor4.length) == stor4.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor4.length.field_1:
                if 31 < stor4.length.field_1:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while stor4.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)])
                mem[128] = 256 * stor4.length.field_8
        else:
            if bool(stor4.length) == stor4.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor4.length.field_1:
                if 31 < stor4.length.field_1:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while stor4.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)])
                mem[128] = 256 * stor4.length.field_8
        mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]
        if ceil32(stor4.length.field_1) > stor4.length.field_1:
            mem[ceil32(stor4.length.field_1) + stor4.length.field_1 + 192] = 0
        return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), 
    if bool(stor4.length) == stor4.length.field_1 < 32:
        revert with 'NH{q', 34
    if bool(stor4.length):
        if bool(stor4.length) == stor4.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor4.length.field_1:
            if 31 < stor4.length.field_1:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while stor4.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    else:
        if bool(stor4.length) == stor4.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor4.length.field_1:
            if 31 < stor4.length.field_1:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while stor4.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]
    if ceil32(stor4.length.field_1) > stor4.length.field_1:
        mem[ceil32(stor4.length.field_1) + stor4.length.field_1 + 192] = 0
    return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), 
}

function transfer(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if arg2 <= 0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Transfer amount must be greater than zero'
    if msg.sender == owner:
        if arg1 != uniswapV2PairAddress:
            if stor11[address(msg.sender)]:
                if not msg.sender:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                if not arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                if arg2 > balanceOf[address(msg.sender)]:
                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                if balanceOf[address(msg.sender)] < arg2:
                    revert with 'NH{q', 17
                balanceOf[address(msg.sender)] -= arg2
                if balanceOf[address(arg1)] > -arg2 - 1:
                    revert with 'NH{q', 17
                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(arg1)] += arg2
                emit Transfer(arg2, msg.sender, arg1);
            else:
                if stor11[address(arg1)]:
                    if not msg.sender:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                    if arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                    if balanceOf[address(msg.sender)] < arg2:
                        revert with 'NH{q', 17
                    balanceOf[address(msg.sender)] -= arg2
                    if balanceOf[address(arg1)] > -arg2 - 1:
                        revert with 'NH{q', 17
                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg1)] += arg2
                    emit Transfer(arg2, msg.sender, arg1);
                else:
                    if totalFees <= 0:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if not arg2:
                            if not arg2:
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < 0:
                                    revert with 'NH{q', 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] > -1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(0, msg.sender, this.address);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] > -1:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] < balanceOf[57005]:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(0, msg.sender, 57005);
                                emit TokenBurn(0, msg.sender);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if arg2 and burnFee > -1 / arg2:
                                    revert with 'NH{q', 17
                                if not arg2:
                                    revert with 'NH{q', 18
                                if arg2 * burnFee / arg2 != burnFee:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if 0 > -(arg2 * burnFee / 100) - 1:
                                    revert with 'NH{q', 17
                                if arg2 * burnFee / 100 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if arg2 * burnFee / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < arg2 * burnFee / 100:
                                    revert with 'NH{q', 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] > -1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(0, msg.sender, this.address);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[57005] += arg2 * burnFee / 100
                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                        else:
                            if arg2 and stor14 > -1 / arg2:
                                revert with 'NH{q', 17
                            if not arg2:
                                revert with 'NH{q', 18
                            if arg2 * stor14 / arg2 != stor14:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                            if not arg2:
                                if arg2 * stor14 / 100 > -1:
                                    revert with 'NH{q', 17
                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                    revert with 0, 'SafeMath: addition overflow'
                                if arg2 * stor14 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < arg2 * stor14 / 100:
                                    revert with 'NH{q', 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] > -1:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] < balanceOf[57005]:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(0, msg.sender, 57005);
                                emit TokenBurn(0, msg.sender);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                            else:
                                if arg2 and burnFee > -1 / arg2:
                                    revert with 'NH{q', 17
                                if not arg2:
                                    revert with 'NH{q', 18
                                if arg2 * burnFee / arg2 != burnFee:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                    revert with 'NH{q', 17
                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                    revert with 'NH{q', 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[57005] += arg2 * burnFee / 100
                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
        else:
            if stor22:
                if stor11[address(msg.sender)]:
                    if not msg.sender:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                    if arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                    if balanceOf[address(msg.sender)] < arg2:
                        revert with 'NH{q', 17
                    balanceOf[address(msg.sender)] -= arg2
                    if balanceOf[address(arg1)] > -arg2 - 1:
                        revert with 'NH{q', 17
                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg1)] += arg2
                    emit Transfer(arg2, msg.sender, arg1);
                else:
                    if stor11[address(arg1)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if totalFees <= 0:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if not arg2:
                                if not arg2:
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < 0:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, 57005);
                                    emit TokenBurn(0, msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if arg2 and burnFee > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * burnFee / arg2 != burnFee:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if 0 > -(arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if arg2 * burnFee / 100 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if arg2 * burnFee / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < arg2 * burnFee / 100:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[57005] += arg2 * burnFee / 100
                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                    emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                            else:
                                if arg2 and stor14 > -1 / arg2:
                                    revert with 'NH{q', 17
                                if not arg2:
                                    revert with 'NH{q', 18
                                if arg2 * stor14 / arg2 != stor14:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                if not arg2:
                                    if arg2 * stor14 / 100 > -1:
                                        revert with 'NH{q', 17
                                    if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if arg2 * stor14 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < arg2 * stor14 / 100:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, 57005);
                                    emit TokenBurn(0, msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                    emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and burnFee > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * burnFee / arg2 != burnFee:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[57005] += arg2 * burnFee / 100
                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                    emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
            else:
                if balanceOf[address(this.address)] < liquifyThreshhold:
                    if stor11[address(msg.sender)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if stor11[address(arg1)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if totalFees <= 0:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if not arg2:
                                    if not arg2:
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < 0:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and burnFee > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * burnFee / arg2 != burnFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if arg2 * burnFee / 100 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * burnFee / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * burnFee / 100
                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and stor14 > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * stor14 / arg2 != stor14:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    if not arg2:
                                        if arg2 * stor14 / 100 > -1:
                                            revert with 'NH{q', 17
                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * stor14 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and burnFee > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * burnFee / arg2 != burnFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * burnFee / 100
                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                else:
                    if stor14 <= 0:
                        if stor11[address(msg.sender)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor11[address(arg1)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if totalFees <= 0:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if not arg2:
                                        if not arg2:
                                            if 0 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < 0:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and burnFee > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * burnFee / arg2 != burnFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if 0 > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if arg2 * burnFee / 100 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * burnFee / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * burnFee / 100
                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and stor14 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor14 / arg2 != stor14:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                        if not arg2:
                                            if arg2 * stor14 / 100 > -1:
                                                revert with 'NH{q', 17
                                            if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * stor14 / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and burnFee > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * burnFee / arg2 != burnFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * burnFee / 100
                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                    else:
                        if msg.sender == owner:
                            if stor11[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor11[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if totalFees <= 0:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * burnFee / 100 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * burnFee / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and stor14 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor14 / arg2 != stor14:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            if not arg2:
                                                if arg2 * stor14 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * stor14 / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                        else:
                            if arg1 == owner:
                                if stor11[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor11[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if 0 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * burnFee / 100 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * burnFee / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and stor14 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor14 / arg2 != stor14:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                if not arg2:
                                                    if arg2 * stor14 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * stor14 / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                            else:
                                stor22 = 1
                                if not balanceOf[address(this.address)]:
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    if stor14 <= 0:
                                        revert with 0, 'SafeMath: division by zero', 0
                                    if not stor14:
                                        revert with 'NH{q', 18
                                    if balanceOf[address(this.address)]:
                                        if balanceOf[address(this.address)] and marketingFee > -1 / balanceOf[address(this.address)]:
                                            revert with 'NH{q', 17
                                        if not balanceOf[address(this.address)]:
                                            revert with 'NH{q', 18
                                        if balanceOf[address(this.address)] * marketingFee / balanceOf[address(this.address)] != marketingFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        mem[160] = 26
                                        mem[192] = 'SafeMath: division by zero'
                                        if stor14 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor14:
                                            revert with 'NH{q', 18
                                        mem[224] = 26
                                        mem[256] = 'SafeMath: division by zero'
                                        mem[288] = 30
                                        mem[320] = 'SafeMath: subtraction overflow'
                                        if 0 / stor14 / 2 > 0 / stor14:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if 0 / stor14 < 0 / stor14 / 2:
                                            revert with 'NH{q', 17
                                        mem[352] = 2
                                        mem[384] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[448] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[416] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor19].field_0 = 0 / stor14 / 2
                                        allowance[address(this.address)][stor19].field_255 = 0
                                        emit Approval((0 / stor14 / 2), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 448] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(return_data.size) + 452] = 0 / stor14 / 2
                                        idx = 0
                                        s = 384
                                        t = ceil32(return_data.size) + 644
                                        while idx < 2:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args Mask(255, 1, 0 / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(return_data.size) + 448] = 30
                                        mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 'NH{q', 17
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor19].field_0 = (0 / stor14) - (0 / stor14 / 2)
                                        emit Approval(((0 / stor14) - (0 / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 580] = 0
                                        mem[ceil32(return_data.size) + 612] = 0
                                        mem[ceil32(return_data.size) + 644] = owner
                                        mem[ceil32(return_data.size) + 676] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args address(this.address), (0 / stor14) - (0 / stor14 / 2), 0, 0, owner, block.timestamp
                                        mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        require ext_call.return_data[32] == ext_call.return_data[32]
                                        require ext_call.return_data[64] == ext_call.return_data[64]
                                        mem[(2 * ceil32(return_data.size)) + 512] = 3
                                        mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = (4 * ceil32(return_data.size)) + 640
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 10)
                                        allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * marketingFee / stor14
                                        emit Approval((balanceOf[address(this.address)] * marketingFee / stor14), this.address, uniswapV2RouterAddress);
                                        mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                        mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * marketingFee / stor14
                                        mem[(4 * ceil32(return_data.size)) + 676] = 0
                                        mem[(4 * ceil32(return_data.size)) + 708] = 160
                                        mem[(4 * ceil32(return_data.size)) + 804] = 3
                                        idx = 0
                                        s = (2 * ceil32(return_data.size)) + 544
                                        t = (4 * ceil32(return_data.size)) + 836
                                        while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                        mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[address(this.address)] * marketingFee / stor14, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(sub_e5148bd6Address)
                                        staticcall sub_e5148bd6Address.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        mem[(4 * ceil32(return_data.size)) + 644] = marketingAddress
                                        mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                        require ext_code.size(sub_e5148bd6Address)
                                        call sub_e5148bd6Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                        mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        stor22 = 0
                                        if stor11[address(msg.sender)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if stor11[address(arg1)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * burnFee / 100 < 0:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * burnFee / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    return 1
                                        else:
                                            if arg2 and stor14 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor14 / arg2 != stor14:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg2:
                                                if arg2 * stor14 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * stor14 / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    return 1
                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                        mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                        mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                        revert with memory
                                          from (8 * ceil32(return_data.size)) + 1120
                                           len (13 * ceil32(return_data.size)) + 100
                                    mem[160] = 26
                                    mem[192] = 'SafeMath: division by zero'
                                    if stor14 <= 0:
                                        revert with 0, 'SafeMath: division by zero', 0
                                    if not stor14:
                                        revert with 'NH{q', 18
                                    mem[224] = 26
                                    mem[256] = 'SafeMath: division by zero'
                                    mem[288] = 30
                                    mem[320] = 'SafeMath: subtraction overflow'
                                    if 0 / stor14 / 2 > 0 / stor14:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if 0 / stor14 < 0 / stor14 / 2:
                                        revert with 'NH{q', 17
                                    mem[352] = 2
                                    mem[384] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[448] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[416] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor19].field_0 = 0 / stor14 / 2
                                    allowance[address(this.address)][stor19].field_255 = 0
                                    emit Approval((0 / stor14 / 2), this.address, uniswapV2RouterAddress);
                                    mem[ceil32(return_data.size) + 448] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(return_data.size) + 452] = 0 / stor14 / 2
                                    idx = 0
                                    s = 384
                                    t = ceil32(return_data.size) + 644
                                    while idx < 2:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[ceil32(return_data.size) + 448] = 30
                                    mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 'NH{q', 17
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor19].field_0 = (0 / stor14) - (0 / stor14 / 2)
                                    emit Approval(((0 / stor14) - (0 / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                    mem[ceil32(return_data.size) + 580] = 0
                                    mem[ceil32(return_data.size) + 612] = 0
                                    mem[ceil32(return_data.size) + 644] = owner
                                    mem[ceil32(return_data.size) + 676] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args address(this.address), (0 / stor14) - (0 / stor14 / 2), 0, 0, owner, block.timestamp
                                    mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require ext_call.return_data[0] == ext_call.return_data[0]
                                    require ext_call.return_data[32] == ext_call.return_data[32]
                                    require ext_call.return_data[64] == ext_call.return_data[64]
                                    mem[(2 * ceil32(return_data.size)) + 512] = 3
                                    mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = (4 * ceil32(return_data.size)) + 640
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                    mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 10)
                                    allowance[address(this.address)][stor19].field_0 = 0 / stor14
                                    emit Approval((0 / stor14), this.address, uniswapV2RouterAddress);
                                    mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor14
                                    mem[(4 * ceil32(return_data.size)) + 676] = 0
                                    mem[(4 * ceil32(return_data.size)) + 708] = 160
                                    mem[(4 * ceil32(return_data.size)) + 804] = 3
                                    idx = 0
                                    s = (2 * ceil32(return_data.size)) + 544
                                    t = (4 * ceil32(return_data.size)) + 836
                                    while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                    mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(sub_e5148bd6Address)
                                    staticcall sub_e5148bd6Address.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10831 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _10847 = mem[_10831]
                                    require mem[_10831] == mem[_10831]
                                    mem[mem[64] + 4] = marketingAddress
                                    mem[mem[64] + 36] = _10847
                                    require ext_code.size(sub_e5148bd6Address)
                                    call sub_e5148bd6Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args marketingAddress, _10847
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10943 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10943] == bool(mem[_10943])
                                    stor22 = 0
                                    mem[0] = msg.sender
                                    mem[32] = 11
                                    if stor11[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        _10999 = mem[64]
                                        mem[64] = mem[64] + 96
                                        mem[_10999] = 38
                                        mem[_10999 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 38
                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10999 + 70 len 26]
                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        mem[0] = arg1
                                        mem[32] = 11
                                        if stor11[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _11039 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_11039] = 38
                                            mem[_11039 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11039 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _11081 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_11081] = 38
                                                mem[_11081 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11081 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    _11133 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11133] = 26
                                                    mem[_11133 + 32] = 'SafeMath: division by zero'
                                                    if not arg2:
                                                        _11439 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11439] = 26
                                                        mem[_11439 + 32] = 'SafeMath: division by zero'
                                                        _11739 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11739] = 30
                                                        mem[_11739 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11885 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11885] = 38
                                                        mem[_11885 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11885 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 9
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _12558 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12558] = 38
                                                        mem[_12558 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12558 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 9
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _13430 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_13430] = 38
                                                        mem[_13430 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13430 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _11656 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11656] = 26
                                                        mem[_11656 + 32] = 'SafeMath: division by zero'
                                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * burnFee / 100 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _11914 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11914] = 30
                                                        mem[_11914 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * burnFee / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12168 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12168] = 38
                                                        mem[_12168 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12168 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 9
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _12927 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12927] = 38
                                                        mem[_12927 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12927 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 9
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _14170 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_14170] = 38
                                                        mem[_14170 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14170 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor14 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor14 / arg2 != stor14:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    _11396 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11396] = 26
                                                    mem[_11396 + 32] = 'SafeMath: division by zero'
                                                    if not arg2:
                                                        _11655 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11655] = 26
                                                        mem[_11655 + 32] = 'SafeMath: division by zero'
                                                        if arg2 * stor14 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _11913 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11913] = 30
                                                        mem[_11913 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * stor14 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12165 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12165] = 38
                                                        mem[_12165 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12165 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 9
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _12925 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12925] = 38
                                                        mem[_12925 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12925 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 9
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _14167 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_14167] = 38
                                                        mem[_14167 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14167 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _11780 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11780] = 26
                                                        mem[_11780 + 32] = 'SafeMath: division by zero'
                                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _12215 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_12215] = 30
                                                        mem[_12215 + 32] = 'SafeMath: subtraction overflow'
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12555 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12555] = 38
                                                        mem[_12555 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12555 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 9
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _13259 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_13259] = 38
                                                        mem[_13259 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13259 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 9
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _14510 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_14510] = 38
                                                        mem[_14510 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14510 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                else:
                                    if balanceOf[address(this.address)] and liquidityFee > -1 / balanceOf[address(this.address)]:
                                        revert with 'NH{q', 17
                                    if not balanceOf[address(this.address)]:
                                        revert with 'NH{q', 18
                                    if balanceOf[address(this.address)] * liquidityFee / balanceOf[address(this.address)] != liquidityFee:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    if stor14 <= 0:
                                        revert with 0, 'SafeMath: division by zero', 0
                                    if not stor14:
                                        revert with 'NH{q', 18
                                    if not balanceOf[address(this.address)]:
                                        mem[160] = 26
                                        mem[192] = 'SafeMath: division by zero'
                                        if stor14 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor14:
                                            revert with 'NH{q', 18
                                        mem[224] = 26
                                        mem[256] = 'SafeMath: division by zero'
                                        mem[288] = 30
                                        mem[320] = 'SafeMath: subtraction overflow'
                                        if balanceOf[address(this.address)] * liquidityFee / stor14 / 2 > balanceOf[address(this.address)] * liquidityFee / stor14:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if balanceOf[address(this.address)] * liquidityFee / stor14 < balanceOf[address(this.address)] * liquidityFee / stor14 / 2:
                                            revert with 'NH{q', 17
                                        mem[352] = 2
                                        mem[384] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[448] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[416] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                        allowance[address(this.address)][stor19].field_255 = 0
                                        emit Approval((balanceOf[address(this.address)] * liquidityFee / stor14 / 2), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 448] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                        idx = 0
                                        s = 384
                                        t = ceil32(return_data.size) + 644
                                        while idx < 2:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args Mask(255, 1, balanceOf[address(this.address)] * liquidityFee / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(return_data.size) + 448] = 30
                                        mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 'NH{q', 17
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor19].field_0 = (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)
                                        emit Approval(((balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 580] = 0
                                        mem[ceil32(return_data.size) + 612] = 0
                                        mem[ceil32(return_data.size) + 644] = owner
                                        mem[ceil32(return_data.size) + 676] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args address(this.address), (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2), 0, 0, owner, block.timestamp
                                        mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        require ext_call.return_data[32] == ext_call.return_data[32]
                                        require ext_call.return_data[64] == ext_call.return_data[64]
                                        mem[(2 * ceil32(return_data.size)) + 512] = 3
                                        mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = (4 * ceil32(return_data.size)) + 640
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 10)
                                        allowance[address(this.address)][stor19].field_0 = 0 / stor14
                                        emit Approval((0 / stor14), this.address, uniswapV2RouterAddress);
                                        mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                        mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor14
                                        mem[(4 * ceil32(return_data.size)) + 676] = 0
                                        mem[(4 * ceil32(return_data.size)) + 708] = 160
                                        mem[(4 * ceil32(return_data.size)) + 804] = 3
                                        idx = 0
                                        s = (2 * ceil32(return_data.size)) + 544
                                        t = (4 * ceil32(return_data.size)) + 836
                                        while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                        mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(sub_e5148bd6Address)
                                        staticcall sub_e5148bd6Address.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10829 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10845 = mem[_10829]
                                        require mem[_10829] == mem[_10829]
                                        mem[mem[64] + 4] = marketingAddress
                                        mem[mem[64] + 36] = _10845
                                        require ext_code.size(sub_e5148bd6Address)
                                        call sub_e5148bd6Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args marketingAddress, _10845
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10941 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10941] == bool(mem[_10941])
                                        stor22 = 0
                                        mem[0] = msg.sender
                                        mem[32] = 11
                                        if stor11[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _10991 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_10991] = 38
                                            mem[_10991 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10991 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            mem[0] = arg1
                                            mem[32] = 11
                                            if stor11[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _11031 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_11031] = 38
                                                mem[_11031 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11031 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if totalFees <= 0:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _11073 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_11073] = 38
                                                    mem[_11073 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11073 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if not arg2:
                                                        _11129 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11129] = 26
                                                        mem[_11129 + 32] = 'SafeMath: division by zero'
                                                        if not arg2:
                                                            _11429 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11429] = 26
                                                            mem[_11429 + 32] = 'SafeMath: division by zero'
                                                            _11737 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11737] = 30
                                                            mem[_11737 + 32] = 'SafeMath: subtraction overflow'
                                                            if 0 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < 0:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _11879 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_11879] = 38
                                                            mem[_11879 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11879 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 9
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            _12548 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12548] = 38
                                                            mem[_12548 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12548 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = 57005
                                                            mem[32] = 9
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _13422 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13422] = 38
                                                            mem[_13422 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13422 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if arg2 and burnFee > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * burnFee / arg2 != burnFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11650 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11650] = 26
                                                            mem[_11650 + 32] = 'SafeMath: division by zero'
                                                            if 0 > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * burnFee / 100 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            _11910 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11910] = 30
                                                            mem[_11910 + 32] = 'SafeMath: subtraction overflow'
                                                            if arg2 * burnFee / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12156 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12156] = 38
                                                            mem[_12156 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12156 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 9
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            _12919 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12919] = 38
                                                            mem[_12919 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12919 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = 57005
                                                            mem[32] = 9
                                                            balanceOf[57005] += arg2 * burnFee / 100
                                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _14158 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_14158] = 38
                                                            mem[_14158 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14158 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor14 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor14 / arg2 != stor14:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _11388 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11388] = 26
                                                        mem[_11388 + 32] = 'SafeMath: division by zero'
                                                        if not arg2:
                                                            _11649 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11649] = 26
                                                            mem[_11649 + 32] = 'SafeMath: division by zero'
                                                            if arg2 * stor14 / 100 > -1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            _11909 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11909] = 30
                                                            mem[_11909 + 32] = 'SafeMath: subtraction overflow'
                                                            if arg2 * stor14 / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12153 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12153] = 38
                                                            mem[_12153 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12153 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 9
                                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            _12917 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12917] = 38
                                                            mem[_12917 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12917 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = 57005
                                                            mem[32] = 9
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _14155 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_14155] = 38
                                                            mem[_14155 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14155 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and burnFee > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * burnFee / arg2 != burnFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11778 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11778] = 26
                                                            mem[_11778 + 32] = 'SafeMath: division by zero'
                                                            if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            _12213 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12213] = 30
                                                            mem[_12213 + 32] = 'SafeMath: subtraction overflow'
                                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12545 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12545] = 38
                                                            mem[_12545 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12545 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 9
                                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            _13255 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13255] = 38
                                                            mem[_13255 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13255 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = 57005
                                                            mem[32] = 9
                                                            balanceOf[57005] += arg2 * burnFee / 100
                                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _14504 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_14504] = 38
                                                            mem[_14504 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14504 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                    else:
                                        if balanceOf[address(this.address)] and marketingFee > -1 / balanceOf[address(this.address)]:
                                            revert with 'NH{q', 17
                                        if not balanceOf[address(this.address)]:
                                            revert with 'NH{q', 18
                                        if balanceOf[address(this.address)] * marketingFee / balanceOf[address(this.address)] != marketingFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        mem[160] = 26
                                        mem[192] = 'SafeMath: division by zero'
                                        if stor14 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor14:
                                            revert with 'NH{q', 18
                                        mem[224] = 26
                                        mem[256] = 'SafeMath: division by zero'
                                        mem[288] = 30
                                        mem[320] = 'SafeMath: subtraction overflow'
                                        if balanceOf[address(this.address)] * liquidityFee / stor14 / 2 > balanceOf[address(this.address)] * liquidityFee / stor14:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if balanceOf[address(this.address)] * liquidityFee / stor14 < balanceOf[address(this.address)] * liquidityFee / stor14 / 2:
                                            revert with 'NH{q', 17
                                        mem[352] = 2
                                        mem[384] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[448] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[416] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                        allowance[address(this.address)][stor19].field_255 = 0
                                        emit Approval((balanceOf[address(this.address)] * liquidityFee / stor14 / 2), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 448] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                        idx = 0
                                        s = 384
                                        t = ceil32(return_data.size) + 644
                                        while idx < 2:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args Mask(255, 1, balanceOf[address(this.address)] * liquidityFee / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(return_data.size) + 448] = 30
                                        mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 'NH{q', 17
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor19].field_0 = (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)
                                        emit Approval(((balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 580] = 0
                                        mem[ceil32(return_data.size) + 612] = 0
                                        mem[ceil32(return_data.size) + 644] = owner
                                        mem[ceil32(return_data.size) + 676] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args address(this.address), (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2), 0, 0, owner, block.timestamp
                                        mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        require ext_call.return_data[32] == ext_call.return_data[32]
                                        require ext_call.return_data[64] == ext_call.return_data[64]
                                        mem[(2 * ceil32(return_data.size)) + 512] = 3
                                        mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = (4 * ceil32(return_data.size)) + 640
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 10)
                                        allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * marketingFee / stor14
                                        emit Approval((balanceOf[address(this.address)] * marketingFee / stor14), this.address, uniswapV2RouterAddress);
                                        mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                        mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * marketingFee / stor14
                                        mem[(4 * ceil32(return_data.size)) + 676] = 0
                                        mem[(4 * ceil32(return_data.size)) + 708] = 160
                                        mem[(4 * ceil32(return_data.size)) + 804] = 3
                                        idx = 0
                                        s = (2 * ceil32(return_data.size)) + 544
                                        t = (4 * ceil32(return_data.size)) + 836
                                        while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                        mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(sub_e5148bd6Address)
                                        staticcall sub_e5148bd6Address.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14503 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _14569 = mem[_14503]
                                        require mem[_14503] == mem[_14503]
                                        mem[mem[64] + 4] = marketingAddress
                                        mem[mem[64] + 36] = _14569
                                        require ext_code.size(sub_e5148bd6Address)
                                        call sub_e5148bd6Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args marketingAddress, _14569
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14887 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_14887] == bool(mem[_14887])
                                        stor22 = 0
                                        mem[0] = msg.sender
                                        mem[32] = 11
                                        if stor11[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _14937 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_14937] = 38
                                            mem[_14937 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14937 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            mem[0] = arg1
                                            mem[32] = 11
                                            if stor11[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _14961 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_14961] = 38
                                                mem[_14961 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14961 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if totalFees <= 0:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _14986 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_14986] = 38
                                                    mem[_14986 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14986 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if not arg2:
                                                        _15016 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15016] = 26
                                                        mem[_15016 + 32] = 'SafeMath: division by zero'
                                                        if not arg2:
                                                            _15187 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15187] = 26
                                                            mem[_15187 + 32] = 'SafeMath: division by zero'
                                                            _15345 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15345] = 30
                                                            mem[_15345 + 32] = 'SafeMath: subtraction overflow'
                                                            if 0 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < 0:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _15405 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_15405] = 38
                                                            mem[_15405 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15405 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 9
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            _15786 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_15786] = 38
                                                            mem[_15786 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15786 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = 57005
                                                            mem[32] = 9
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _16288 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_16288] = 38
                                                            mem[_16288 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16288 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if arg2 and burnFee > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * burnFee / arg2 != burnFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _15311 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15311] = 26
                                                            mem[_15311 + 32] = 'SafeMath: division by zero'
                                                            if 0 > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * burnFee / 100 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            _15424 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15424] = 30
                                                            mem[_15424 + 32] = 'SafeMath: subtraction overflow'
                                                            if arg2 * burnFee / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _15558 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_15558] = 38
                                                            mem[_15558 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15558 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 9
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            _16001 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_16001] = 38
                                                            mem[_16001 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16001 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = 57005
                                                            mem[32] = 9
                                                            balanceOf[57005] += arg2 * burnFee / 100
                                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _16866 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_16866] = 38
                                                            mem[_16866 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16866 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor14 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor14 / arg2 != stor14:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _15162 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15162] = 26
                                                        mem[_15162 + 32] = 'SafeMath: division by zero'
                                                        if not arg2:
                                                            _15310 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15310] = 26
                                                            mem[_15310 + 32] = 'SafeMath: division by zero'
                                                            if arg2 * stor14 / 100 > -1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            _15423 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15423] = 30
                                                            mem[_15423 + 32] = 'SafeMath: subtraction overflow'
                                                            if arg2 * stor14 / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _15555 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_15555] = 38
                                                            mem[_15555 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15555 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 9
                                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            _15999 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_15999] = 38
                                                            mem[_15999 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15999 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = 57005
                                                            mem[32] = 9
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _16863 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_16863] = 38
                                                            mem[_16863 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16863 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and burnFee > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * burnFee / arg2 != burnFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _15369 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15369] = 26
                                                            mem[_15369 + 32] = 'SafeMath: division by zero'
                                                            if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            _15591 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15591] = 30
                                                            mem[_15591 + 32] = 'SafeMath: subtraction overflow'
                                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _15783 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_15783] = 38
                                                            mem[_15783 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15783 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 9
                                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            _16191 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_16191] = 38
                                                            mem[_16191 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16191 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = 57005
                                                            mem[32] = 9
                                                            balanceOf[57005] += arg2 * burnFee / 100
                                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _17061 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_17061] = 38
                                                            mem[_17061 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_17061 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
    else:
        if arg1 == owner:
            if arg1 != uniswapV2PairAddress:
                if stor11[address(msg.sender)]:
                    if not msg.sender:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                    if arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                    if balanceOf[address(msg.sender)] < arg2:
                        revert with 'NH{q', 17
                    balanceOf[address(msg.sender)] -= arg2
                    if balanceOf[address(arg1)] > -arg2 - 1:
                        revert with 'NH{q', 17
                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg1)] += arg2
                    emit Transfer(arg2, msg.sender, arg1);
                else:
                    if stor11[address(arg1)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if totalFees <= 0:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if not arg2:
                                if not arg2:
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < 0:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, 57005);
                                    emit TokenBurn(0, msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if arg2 and burnFee > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * burnFee / arg2 != burnFee:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if 0 > -(arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if arg2 * burnFee / 100 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if arg2 * burnFee / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < arg2 * burnFee / 100:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[57005] += arg2 * burnFee / 100
                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                    emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                            else:
                                if arg2 and stor14 > -1 / arg2:
                                    revert with 'NH{q', 17
                                if not arg2:
                                    revert with 'NH{q', 18
                                if arg2 * stor14 / arg2 != stor14:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                if not arg2:
                                    if arg2 * stor14 / 100 > -1:
                                        revert with 'NH{q', 17
                                    if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if arg2 * stor14 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < arg2 * stor14 / 100:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, 57005);
                                    emit TokenBurn(0, msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                    emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and burnFee > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * burnFee / arg2 != burnFee:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[57005] += arg2 * burnFee / 100
                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                    emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
            else:
                if stor22:
                    if stor11[address(msg.sender)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if stor11[address(arg1)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if totalFees <= 0:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if not arg2:
                                    if not arg2:
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < 0:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and burnFee > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * burnFee / arg2 != burnFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if arg2 * burnFee / 100 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * burnFee / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * burnFee / 100
                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and stor14 > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * stor14 / arg2 != stor14:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    if not arg2:
                                        if arg2 * stor14 / 100 > -1:
                                            revert with 'NH{q', 17
                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * stor14 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and burnFee > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * burnFee / arg2 != burnFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * burnFee / 100
                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                else:
                    if balanceOf[address(this.address)] < liquifyThreshhold:
                        if stor11[address(msg.sender)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor11[address(arg1)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if totalFees <= 0:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if not arg2:
                                        if not arg2:
                                            if 0 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < 0:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and burnFee > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * burnFee / arg2 != burnFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if 0 > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if arg2 * burnFee / 100 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * burnFee / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * burnFee / 100
                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and stor14 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor14 / arg2 != stor14:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                        if not arg2:
                                            if arg2 * stor14 / 100 > -1:
                                                revert with 'NH{q', 17
                                            if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * stor14 / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and burnFee > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * burnFee / arg2 != burnFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * burnFee / 100
                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                    else:
                        if stor14 <= 0:
                            if stor11[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor11[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if totalFees <= 0:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * burnFee / 100 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * burnFee / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and stor14 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor14 / arg2 != stor14:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            if not arg2:
                                                if arg2 * stor14 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * stor14 / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                        else:
                            if msg.sender == owner:
                                if stor11[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor11[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if 0 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * burnFee / 100 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * burnFee / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and stor14 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor14 / arg2 != stor14:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                if not arg2:
                                                    if arg2 * stor14 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * stor14 / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                            else:
                                if arg1 == owner:
                                    if stor11[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor11[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    if not arg2:
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * burnFee / 100 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * burnFee / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor14 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor14 / arg2 != stor14:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                    if not arg2:
                                                        if arg2 * stor14 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * stor14 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                else:
                                    stor22 = 1
                                    if not balanceOf[address(this.address)]:
                                        mem[96] = 26
                                        mem[128] = 'SafeMath: division by zero'
                                        if stor14 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor14:
                                            revert with 'NH{q', 18
                                        if not balanceOf[address(this.address)]:
                                            mem[160] = 26
                                            mem[192] = 'SafeMath: division by zero'
                                            if stor14 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor14:
                                                revert with 'NH{q', 18
                                            mem[224] = 26
                                            mem[256] = 'SafeMath: division by zero'
                                            mem[288] = 30
                                            mem[320] = 'SafeMath: subtraction overflow'
                                            if 0 / stor14 / 2 > 0 / stor14:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if 0 / stor14 < 0 / stor14 / 2:
                                                revert with 'NH{q', 17
                                            mem[352] = 2
                                            mem[384] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[448] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[416] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = 0 / stor14 / 2
                                            allowance[address(this.address)][stor19].field_255 = 0
                                            emit Approval((0 / stor14 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 448] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 452] = 0 / stor14 / 2
                                            idx = 0
                                            s = 384
                                            t = ceil32(return_data.size) + 644
                                            while idx < 2:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, 0 / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(return_data.size) + 448] = 30
                                            mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = (0 / stor14) - (0 / stor14 / 2)
                                            emit Approval(((0 / stor14) - (0 / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 580] = 0
                                            mem[ceil32(return_data.size) + 612] = 0
                                            mem[ceil32(return_data.size) + 644] = owner
                                            mem[ceil32(return_data.size) + 676] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (0 / stor14) - (0 / stor14 / 2), 0, 0, owner, block.timestamp
                                            mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            require ext_call.return_data[32] == ext_call.return_data[32]
                                            require ext_call.return_data[64] == ext_call.return_data[64]
                                            mem[(2 * ceil32(return_data.size)) + 512] = 3
                                            mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (4 * ceil32(return_data.size)) + 640
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 10)
                                            allowance[address(this.address)][stor19].field_0 = 0 / stor14
                                            emit Approval((0 / stor14), this.address, uniswapV2RouterAddress);
                                            mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor14
                                            mem[(4 * ceil32(return_data.size)) + 676] = 0
                                            mem[(4 * ceil32(return_data.size)) + 708] = 160
                                            mem[(4 * ceil32(return_data.size)) + 804] = 3
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 544
                                            t = (4 * ceil32(return_data.size)) + 836
                                            while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                            mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0 / stor14, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                        else:
                                            if balanceOf[address(this.address)] and marketingFee > -1 / balanceOf[address(this.address)]:
                                                revert with 'NH{q', 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 'NH{q', 18
                                            if balanceOf[address(this.address)] * marketingFee / balanceOf[address(this.address)] != marketingFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[160] = 26
                                            mem[192] = 'SafeMath: division by zero'
                                            if stor14 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor14:
                                                revert with 'NH{q', 18
                                            mem[224] = 26
                                            mem[256] = 'SafeMath: division by zero'
                                            mem[288] = 30
                                            mem[320] = 'SafeMath: subtraction overflow'
                                            if 0 / stor14 / 2 > 0 / stor14:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if 0 / stor14 < 0 / stor14 / 2:
                                                revert with 'NH{q', 17
                                            mem[352] = 2
                                            mem[384] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[448] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[416] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = 0 / stor14 / 2
                                            allowance[address(this.address)][stor19].field_255 = 0
                                            emit Approval((0 / stor14 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 448] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 452] = 0 / stor14 / 2
                                            idx = 0
                                            s = 384
                                            t = ceil32(return_data.size) + 644
                                            while idx < 2:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, 0 / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(return_data.size) + 448] = 30
                                            mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = (0 / stor14) - (0 / stor14 / 2)
                                            emit Approval(((0 / stor14) - (0 / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 580] = 0
                                            mem[ceil32(return_data.size) + 612] = 0
                                            mem[ceil32(return_data.size) + 644] = owner
                                            mem[ceil32(return_data.size) + 676] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (0 / stor14) - (0 / stor14 / 2), 0, 0, owner, block.timestamp
                                            mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            require ext_call.return_data[32] == ext_call.return_data[32]
                                            require ext_call.return_data[64] == ext_call.return_data[64]
                                            mem[(2 * ceil32(return_data.size)) + 512] = 3
                                            mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (4 * ceil32(return_data.size)) + 640
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 10)
                                            allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * marketingFee / stor14
                                            emit Approval((balanceOf[address(this.address)] * marketingFee / stor14), this.address, uniswapV2RouterAddress);
                                            mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * marketingFee / stor14
                                            mem[(4 * ceil32(return_data.size)) + 676] = 0
                                            mem[(4 * ceil32(return_data.size)) + 708] = 160
                                            mem[(4 * ceil32(return_data.size)) + 804] = 3
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 544
                                            t = (4 * ceil32(return_data.size)) + 836
                                            while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                            mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)] * marketingFee / stor14, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(sub_e5148bd6Address)
                                        staticcall sub_e5148bd6Address.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        mem[(4 * ceil32(return_data.size)) + 644] = marketingAddress
                                        mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                        require ext_code.size(sub_e5148bd6Address)
                                        call sub_e5148bd6Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                        mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        stor22 = 0
                                        if stor11[address(msg.sender)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if stor11[address(arg1)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * burnFee / 100 < 0:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * burnFee / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    return 1
                                        else:
                                            if arg2 and stor14 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor14 / arg2 != stor14:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg2:
                                                if arg2 * stor14 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * stor14 / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    return 1
                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                        mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                        mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                        revert with memory
                                          from (8 * ceil32(return_data.size)) + 1120
                                           len (13 * ceil32(return_data.size)) + 100
                                    if balanceOf[address(this.address)] and liquidityFee > -1 / balanceOf[address(this.address)]:
                                        revert with 'NH{q', 17
                                    if not balanceOf[address(this.address)]:
                                        revert with 'NH{q', 18
                                    if balanceOf[address(this.address)] * liquidityFee / balanceOf[address(this.address)] != liquidityFee:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    if stor14 <= 0:
                                        revert with 0, 'SafeMath: division by zero', 0
                                    if not stor14:
                                        revert with 'NH{q', 18
                                    if balanceOf[address(this.address)]:
                                        if balanceOf[address(this.address)] and marketingFee > -1 / balanceOf[address(this.address)]:
                                            revert with 'NH{q', 17
                                        if not balanceOf[address(this.address)]:
                                            revert with 'NH{q', 18
                                        if balanceOf[address(this.address)] * marketingFee / balanceOf[address(this.address)] != marketingFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        mem[160] = 26
                                        mem[192] = 'SafeMath: division by zero'
                                        if stor14 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor14:
                                            revert with 'NH{q', 18
                                        mem[224] = 26
                                        mem[256] = 'SafeMath: division by zero'
                                        mem[288] = 30
                                        mem[320] = 'SafeMath: subtraction overflow'
                                        if balanceOf[address(this.address)] * liquidityFee / stor14 / 2 > balanceOf[address(this.address)] * liquidityFee / stor14:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if balanceOf[address(this.address)] * liquidityFee / stor14 < balanceOf[address(this.address)] * liquidityFee / stor14 / 2:
                                            revert with 'NH{q', 17
                                        mem[352] = 2
                                        mem[384] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[448] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[416] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                        allowance[address(this.address)][stor19].field_255 = 0
                                        emit Approval((balanceOf[address(this.address)] * liquidityFee / stor14 / 2), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 448] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                        idx = 0
                                        s = 384
                                        t = ceil32(return_data.size) + 644
                                        while idx < 2:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args Mask(255, 1, balanceOf[address(this.address)] * liquidityFee / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(return_data.size) + 448] = 30
                                        mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 'NH{q', 17
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor19].field_0 = (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)
                                        emit Approval(((balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 580] = 0
                                        mem[ceil32(return_data.size) + 612] = 0
                                        mem[ceil32(return_data.size) + 644] = owner
                                        mem[ceil32(return_data.size) + 676] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args address(this.address), (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2), 0, 0, owner, block.timestamp
                                        mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        require ext_call.return_data[32] == ext_call.return_data[32]
                                        require ext_call.return_data[64] == ext_call.return_data[64]
                                        mem[(2 * ceil32(return_data.size)) + 512] = 3
                                        mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = (4 * ceil32(return_data.size)) + 640
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 10)
                                        allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * marketingFee / stor14
                                        emit Approval((balanceOf[address(this.address)] * marketingFee / stor14), this.address, uniswapV2RouterAddress);
                                        mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                        mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * marketingFee / stor14
                                        mem[(4 * ceil32(return_data.size)) + 676] = 0
                                        mem[(4 * ceil32(return_data.size)) + 708] = 160
                                        mem[(4 * ceil32(return_data.size)) + 804] = 3
                                        idx = 0
                                        s = (2 * ceil32(return_data.size)) + 544
                                        t = (4 * ceil32(return_data.size)) + 836
                                        while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                        mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[address(this.address)] * marketingFee / stor14, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(sub_e5148bd6Address)
                                        staticcall sub_e5148bd6Address.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        mem[(4 * ceil32(return_data.size)) + 644] = marketingAddress
                                        mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                        require ext_code.size(sub_e5148bd6Address)
                                        call sub_e5148bd6Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                        mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        stor22 = 0
                                        if stor11[address(msg.sender)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if stor11[address(arg1)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * burnFee / 100 < 0:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * burnFee / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    return 1
                                        else:
                                            if arg2 and stor14 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor14 / arg2 != stor14:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg2:
                                                if arg2 * stor14 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * stor14 / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    return 1
                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                        mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                        mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                        revert with memory
                                          from (8 * ceil32(return_data.size)) + 1120
                                           len (13 * ceil32(return_data.size)) + 100
                                    mem[160] = 26
                                    mem[192] = 'SafeMath: division by zero'
                                    if stor14 <= 0:
                                        revert with 0, 'SafeMath: division by zero', 0
                                    if not stor14:
                                        revert with 'NH{q', 18
                                    mem[224] = 26
                                    mem[256] = 'SafeMath: division by zero'
                                    mem[288] = 30
                                    mem[320] = 'SafeMath: subtraction overflow'
                                    if balanceOf[address(this.address)] * liquidityFee / stor14 / 2 > balanceOf[address(this.address)] * liquidityFee / stor14:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if balanceOf[address(this.address)] * liquidityFee / stor14 < balanceOf[address(this.address)] * liquidityFee / stor14 / 2:
                                        revert with 'NH{q', 17
                                    mem[352] = 2
                                    mem[384] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[448] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[416] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                    allowance[address(this.address)][stor19].field_255 = 0
                                    emit Approval((balanceOf[address(this.address)] * liquidityFee / stor14 / 2), this.address, uniswapV2RouterAddress);
                                    mem[ceil32(return_data.size) + 448] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                    idx = 0
                                    s = 384
                                    t = ceil32(return_data.size) + 644
                                    while idx < 2:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, balanceOf[address(this.address)] * liquidityFee / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[ceil32(return_data.size) + 448] = 30
                                    mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 'NH{q', 17
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor19].field_0 = (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)
                                    emit Approval(((balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                    mem[ceil32(return_data.size) + 580] = 0
                                    mem[ceil32(return_data.size) + 612] = 0
                                    mem[ceil32(return_data.size) + 644] = owner
                                    mem[ceil32(return_data.size) + 676] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args address(this.address), (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2), 0, 0, owner, block.timestamp
                                    mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require ext_call.return_data[0] == ext_call.return_data[0]
                                    require ext_call.return_data[32] == ext_call.return_data[32]
                                    require ext_call.return_data[64] == ext_call.return_data[64]
                                    mem[(2 * ceil32(return_data.size)) + 512] = 3
                                    mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = (4 * ceil32(return_data.size)) + 640
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                    mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 10)
                                    allowance[address(this.address)][stor19].field_0 = 0 / stor14
                                    emit Approval((0 / stor14), this.address, uniswapV2RouterAddress);
                                    mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor14
                                    mem[(4 * ceil32(return_data.size)) + 676] = 0
                                    mem[(4 * ceil32(return_data.size)) + 708] = 160
                                    mem[(4 * ceil32(return_data.size)) + 804] = 3
                                    idx = 0
                                    s = (2 * ceil32(return_data.size)) + 544
                                    t = (4 * ceil32(return_data.size)) + 836
                                    while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                    mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(sub_e5148bd6Address)
                                    staticcall sub_e5148bd6Address.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10832 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _10848 = mem[_10832]
                                    require mem[_10832] == mem[_10832]
                                    mem[mem[64] + 4] = marketingAddress
                                    mem[mem[64] + 36] = _10848
                                    require ext_code.size(sub_e5148bd6Address)
                                    call sub_e5148bd6Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args marketingAddress, _10848
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10944 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10944] == bool(mem[_10944])
                                    stor22 = 0
                                    mem[0] = msg.sender
                                    mem[32] = 11
                                    if stor11[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        _11003 = mem[64]
                                        mem[64] = mem[64] + 96
                                        mem[_11003] = 38
                                        mem[_11003 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 38
                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11003 + 70 len 26]
                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        mem[0] = arg1
                                        mem[32] = 11
                                        if stor11[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _11043 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_11043] = 38
                                            mem[_11043 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11043 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _11086 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_11086] = 38
                                                mem[_11086 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11086 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    _11136 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11136] = 26
                                                    mem[_11136 + 32] = 'SafeMath: division by zero'
                                                    if not arg2:
                                                        _11444 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11444] = 26
                                                        mem[_11444 + 32] = 'SafeMath: division by zero'
                                                        _11740 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11740] = 30
                                                        mem[_11740 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11888 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11888] = 38
                                                        mem[_11888 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11888 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 9
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _12563 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12563] = 38
                                                        mem[_12563 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12563 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 9
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _13434 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_13434] = 38
                                                        mem[_13434 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13434 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _11660 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11660] = 26
                                                        mem[_11660 + 32] = 'SafeMath: division by zero'
                                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * burnFee / 100 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _11916 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11916] = 30
                                                        mem[_11916 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * burnFee / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12174 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12174] = 38
                                                        mem[_12174 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12174 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 9
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _12931 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12931] = 38
                                                        mem[_12931 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12931 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 9
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _14176 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_14176] = 38
                                                        mem[_14176 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14176 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor14 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor14 / arg2 != stor14:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    _11400 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11400] = 26
                                                    mem[_11400 + 32] = 'SafeMath: division by zero'
                                                    if not arg2:
                                                        _11659 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11659] = 26
                                                        mem[_11659 + 32] = 'SafeMath: division by zero'
                                                        if arg2 * stor14 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _11915 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11915] = 30
                                                        mem[_11915 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * stor14 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12171 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12171] = 38
                                                        mem[_12171 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12171 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 9
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _12929 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12929] = 38
                                                        mem[_12929 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12929 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 9
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _14173 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_14173] = 38
                                                        mem[_14173 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14173 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _11782 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11782] = 26
                                                        mem[_11782 + 32] = 'SafeMath: division by zero'
                                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _12216 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_12216] = 30
                                                        mem[_12216 + 32] = 'SafeMath: subtraction overflow'
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12560 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12560] = 38
                                                        mem[_12560 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12560 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 9
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _13261 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_13261] = 38
                                                        mem[_13261 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13261 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 9
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _14514 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_14514] = 38
                                                        mem[_14514 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14514 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
        else:
            if stor12[address(arg1)]:
                if arg1 != uniswapV2PairAddress:
                    if stor11[address(msg.sender)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if stor11[address(arg1)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if totalFees <= 0:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if not arg2:
                                    if not arg2:
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < 0:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and burnFee > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * burnFee / arg2 != burnFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if arg2 * burnFee / 100 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * burnFee / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * burnFee / 100
                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and stor14 > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * stor14 / arg2 != stor14:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    if not arg2:
                                        if arg2 * stor14 / 100 > -1:
                                            revert with 'NH{q', 17
                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * stor14 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and burnFee > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * burnFee / arg2 != burnFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * burnFee / 100
                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                else:
                    if stor22:
                        if stor11[address(msg.sender)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor11[address(arg1)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if totalFees <= 0:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if not arg2:
                                        if not arg2:
                                            if 0 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < 0:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and burnFee > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * burnFee / arg2 != burnFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if 0 > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if arg2 * burnFee / 100 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * burnFee / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * burnFee / 100
                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and stor14 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor14 / arg2 != stor14:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                        if not arg2:
                                            if arg2 * stor14 / 100 > -1:
                                                revert with 'NH{q', 17
                                            if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * stor14 / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and burnFee > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * burnFee / arg2 != burnFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * burnFee / 100
                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                    else:
                        if balanceOf[address(this.address)] < liquifyThreshhold:
                            if stor11[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor11[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if totalFees <= 0:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * burnFee / 100 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * burnFee / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and stor14 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor14 / arg2 != stor14:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            if not arg2:
                                                if arg2 * stor14 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * stor14 / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                        else:
                            if stor14 <= 0:
                                if stor11[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor11[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if 0 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * burnFee / 100 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * burnFee / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and stor14 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor14 / arg2 != stor14:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                if not arg2:
                                                    if arg2 * stor14 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * stor14 / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                            else:
                                if msg.sender == owner:
                                    if stor11[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor11[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    if not arg2:
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * burnFee / 100 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * burnFee / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor14 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor14 / arg2 != stor14:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                    if not arg2:
                                                        if arg2 * stor14 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * stor14 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                else:
                                    if arg1 == owner:
                                        if stor11[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor11[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if totalFees <= 0:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if not arg2:
                                                        if not arg2:
                                                            if 0 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < 0:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if arg2 and burnFee > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * burnFee / arg2 != burnFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            if 0 > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * burnFee / 100 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if arg2 * burnFee / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[57005] += arg2 * burnFee / 100
                                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor14 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor14 / arg2 != stor14:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                        if not arg2:
                                                            if arg2 * stor14 / 100 > -1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if arg2 * stor14 / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and burnFee > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * burnFee / arg2 != burnFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[57005] += arg2 * burnFee / 100
                                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                    else:
                                        stor22 = 1
                                        if balanceOf[address(this.address)]:
                                            if balanceOf[address(this.address)] and liquidityFee > -1 / balanceOf[address(this.address)]:
                                                revert with 'NH{q', 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 'NH{q', 18
                                            if balanceOf[address(this.address)] * liquidityFee / balanceOf[address(this.address)] != liquidityFee:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            mem[96] = 26
                                            mem[128] = 'SafeMath: division by zero'
                                            if stor14 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor14:
                                                revert with 'NH{q', 18
                                            if balanceOf[address(this.address)]:
                                                if balanceOf[address(this.address)] and marketingFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 'NH{q', 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 'NH{q', 18
                                                if balanceOf[address(this.address)] * marketingFee / balanceOf[address(this.address)] != marketingFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[160] = 26
                                                mem[192] = 'SafeMath: division by zero'
                                                if stor14 <= 0:
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                if not stor14:
                                                    revert with 'NH{q', 18
                                                mem[224] = 26
                                                mem[256] = 'SafeMath: division by zero'
                                                mem[288] = 30
                                                mem[320] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityFee / stor14 / 2 > balanceOf[address(this.address)] * liquidityFee / stor14:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * liquidityFee / stor14 < balanceOf[address(this.address)] * liquidityFee / stor14 / 2:
                                                    revert with 'NH{q', 17
                                                mem[352] = 2
                                                mem[384] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[448] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[416] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                                allowance[address(this.address)][stor19].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityFee / stor14 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 448] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                                idx = 0
                                                s = 384
                                                t = ceil32(return_data.size) + 644
                                                while idx < 2:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityFee / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(return_data.size) + 448] = 30
                                                mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 'NH{q', 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor19].field_0 = (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 580] = 0
                                                mem[ceil32(return_data.size) + 612] = 0
                                                mem[ceil32(return_data.size) + 644] = owner
                                                mem[ceil32(return_data.size) + 676] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2), 0, 0, owner, block.timestamp
                                                mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                require ext_call.return_data[0] == ext_call.return_data[0]
                                                require ext_call.return_data[32] == ext_call.return_data[32]
                                                require ext_call.return_data[64] == ext_call.return_data[64]
                                                mem[(2 * ceil32(return_data.size)) + 512] = 3
                                                mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = (4 * ceil32(return_data.size)) + 640
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 10)
                                                allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * marketingFee / stor14
                                                emit Approval((balanceOf[address(this.address)] * marketingFee / stor14), this.address, uniswapV2RouterAddress);
                                                mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * marketingFee / stor14
                                                mem[(4 * ceil32(return_data.size)) + 676] = 0
                                                mem[(4 * ceil32(return_data.size)) + 708] = 160
                                                mem[(4 * ceil32(return_data.size)) + 804] = 3
                                                idx = 0
                                                s = (2 * ceil32(return_data.size)) + 544
                                                t = (4 * ceil32(return_data.size)) + 836
                                                while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                                mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)] * marketingFee / stor14, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require ext_code.size(sub_e5148bd6Address)
                                                staticcall sub_e5148bd6Address.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[0]
                                                mem[(4 * ceil32(return_data.size)) + 644] = marketingAddress
                                                mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                                require ext_code.size(sub_e5148bd6Address)
                                                call sub_e5148bd6Address.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                                mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                stor22 = 0
                                                if stor11[address(msg.sender)]:
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 736
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if stor11[address(arg1)]:
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 736
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if totalFees <= 0:
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 736
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if not arg2:
                                                    if not arg2:
                                                        if 0 > arg2:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                            mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not this.address:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not arg1:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1120
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                            balanceOf[address(arg1)] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            return 1
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                            mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                            mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 704
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * burnFee / 100 < 0:
                                                            mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 768
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 * burnFee / 100 > arg2:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                            mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not this.address:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not arg1:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1120
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                            return 1
                                                else:
                                                    if arg2 and stor14 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor14 / arg2 != stor14:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg2:
                                                        if arg2 * stor14 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                            mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 768
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 * stor14 / 100 > arg2:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                            mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not this.address:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not arg1:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1120
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) >= balanceOf[address(arg1)]:
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                            return 1
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                            mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                            mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 704
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                            mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 768
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                            mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not this.address:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not arg1:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1120
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                            return 1
                                                mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                                mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 1120
                                                   len (13 * ceil32(return_data.size)) + 100
                                            mem[160] = 26
                                            mem[192] = 'SafeMath: division by zero'
                                            if stor14 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor14:
                                                revert with 'NH{q', 18
                                            mem[224] = 26
                                            mem[256] = 'SafeMath: division by zero'
                                            mem[288] = 30
                                            mem[320] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityFee / stor14 / 2 > balanceOf[address(this.address)] * liquidityFee / stor14:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * liquidityFee / stor14 < balanceOf[address(this.address)] * liquidityFee / stor14 / 2:
                                                revert with 'NH{q', 17
                                            mem[352] = 2
                                            mem[384] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[448] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[416] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                            allowance[address(this.address)][stor19].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityFee / stor14 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 448] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                            idx = 0
                                            s = 384
                                            t = ceil32(return_data.size) + 644
                                            while idx < 2:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityFee / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(return_data.size) + 448] = 30
                                            mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 580] = 0
                                            mem[ceil32(return_data.size) + 612] = 0
                                            mem[ceil32(return_data.size) + 644] = owner
                                            mem[ceil32(return_data.size) + 676] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2), 0, 0, owner, block.timestamp
                                            mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            require ext_call.return_data[32] == ext_call.return_data[32]
                                            require ext_call.return_data[64] == ext_call.return_data[64]
                                            mem[(2 * ceil32(return_data.size)) + 512] = 3
                                            mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (4 * ceil32(return_data.size)) + 640
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 10)
                                            allowance[address(this.address)][stor19].field_0 = 0 / stor14
                                            emit Approval((0 / stor14), this.address, uniswapV2RouterAddress);
                                            mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor14
                                            mem[(4 * ceil32(return_data.size)) + 676] = 0
                                            mem[(4 * ceil32(return_data.size)) + 708] = 160
                                            mem[(4 * ceil32(return_data.size)) + 804] = 3
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 544
                                            t = (4 * ceil32(return_data.size)) + 836
                                            while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                            mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(sub_e5148bd6Address)
                                            staticcall sub_e5148bd6Address.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10835 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _10851 = mem[_10835]
                                            require mem[_10835] == mem[_10835]
                                            mem[mem[64] + 4] = marketingAddress
                                            mem[mem[64] + 36] = _10851
                                            require ext_code.size(sub_e5148bd6Address)
                                            call sub_e5148bd6Address.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args marketingAddress, _10851
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10947 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_10947] == bool(mem[_10947])
                                            stor22 = 0
                                            mem[0] = msg.sender
                                            mem[32] = 11
                                            if stor11[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _11015 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_11015] = 38
                                                mem[_11015 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11015 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                mem[0] = arg1
                                                mem[32] = 11
                                                if stor11[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _11055 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_11055] = 38
                                                    mem[_11055 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11055 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if totalFees <= 0:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11099 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11099] = 38
                                                        mem[_11099 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11099 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if not arg2:
                                                            _11143 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11143] = 26
                                                            mem[_11143 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _11459 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11459] = 26
                                                                mem[_11459 + 32] = 'SafeMath: division by zero'
                                                                _11743 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11743] = 30
                                                                mem[_11743 + 32] = 'SafeMath: subtraction overflow'
                                                                if 0 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < 0:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _11897 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_11897] = 38
                                                                mem[_11897 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11897 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12578 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12578] = 38
                                                                mem[_12578 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12578 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _13446 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13446] = 38
                                                                mem[_13446 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13446 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                            else:
                                                                if arg2 and burnFee > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * burnFee / arg2 != burnFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _11670 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11670] = 26
                                                                mem[_11670 + 32] = 'SafeMath: division by zero'
                                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * burnFee / 100 < 0:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _11922 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11922] = 30
                                                                mem[_11922 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * burnFee / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12192 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12192] = 38
                                                                mem[_12192 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12192 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12943 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12943] = 38
                                                                mem[_12943 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12943 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                balanceOf[57005] += arg2 * burnFee / 100
                                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14194 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14194] = 38
                                                                mem[_14194 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14194 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and stor14 > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * stor14 / arg2 != stor14:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11412 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11412] = 26
                                                            mem[_11412 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _11669 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11669] = 26
                                                                mem[_11669 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor14 / 100 > -1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _11921 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11921] = 30
                                                                mem[_11921 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * stor14 / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12189 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12189] = 38
                                                                mem[_12189 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12189 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12941 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12941] = 38
                                                                mem[_12941 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12941 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14191 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14191] = 38
                                                                mem[_14191 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14191 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and burnFee > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * burnFee / arg2 != burnFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _11786 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11786] = 26
                                                                mem[_11786 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _12219 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_12219] = 30
                                                                mem[_12219 + 32] = 'SafeMath: subtraction overflow'
                                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12575 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12575] = 38
                                                                mem[_12575 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12575 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _13267 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13267] = 38
                                                                mem[_13267 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13267 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                balanceOf[57005] += arg2 * burnFee / 100
                                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14524 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14524] = 38
                                                                mem[_14524 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14524 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                        else:
                                            mem[96] = 26
                                            mem[128] = 'SafeMath: division by zero'
                                            if stor14 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor14:
                                                revert with 'NH{q', 18
                                            if not balanceOf[address(this.address)]:
                                                mem[160] = 26
                                                mem[192] = 'SafeMath: division by zero'
                                                if stor14 <= 0:
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                if not stor14:
                                                    revert with 'NH{q', 18
                                                mem[224] = 26
                                                mem[256] = 'SafeMath: division by zero'
                                                mem[288] = 30
                                                mem[320] = 'SafeMath: subtraction overflow'
                                                if 0 / stor14 / 2 > 0 / stor14:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if 0 / stor14 < 0 / stor14 / 2:
                                                    revert with 'NH{q', 17
                                                mem[352] = 2
                                                mem[384] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[448] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[416] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor19].field_0 = 0 / stor14 / 2
                                                allowance[address(this.address)][stor19].field_255 = 0
                                                emit Approval((0 / stor14 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 448] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(return_data.size) + 452] = 0 / stor14 / 2
                                                idx = 0
                                                s = 384
                                                t = ceil32(return_data.size) + 644
                                                while idx < 2:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, 0 / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(return_data.size) + 448] = 30
                                                mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 'NH{q', 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor19].field_0 = (0 / stor14) - (0 / stor14 / 2)
                                                emit Approval(((0 / stor14) - (0 / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 580] = 0
                                                mem[ceil32(return_data.size) + 612] = 0
                                                mem[ceil32(return_data.size) + 644] = owner
                                                mem[ceil32(return_data.size) + 676] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (0 / stor14) - (0 / stor14 / 2), 0, 0, owner, block.timestamp
                                                mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                require ext_call.return_data[0] == ext_call.return_data[0]
                                                require ext_call.return_data[32] == ext_call.return_data[32]
                                                require ext_call.return_data[64] == ext_call.return_data[64]
                                                mem[(2 * ceil32(return_data.size)) + 512] = 3
                                                mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = (4 * ceil32(return_data.size)) + 640
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 10)
                                                allowance[address(this.address)][stor19].field_0 = 0 / stor14
                                                emit Approval((0 / stor14), this.address, uniswapV2RouterAddress);
                                                mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor14
                                                mem[(4 * ceil32(return_data.size)) + 676] = 0
                                                mem[(4 * ceil32(return_data.size)) + 708] = 160
                                                mem[(4 * ceil32(return_data.size)) + 804] = 3
                                                idx = 0
                                                s = (2 * ceil32(return_data.size)) + 544
                                                t = (4 * ceil32(return_data.size)) + 836
                                                while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                                mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0 / stor14, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require ext_code.size(sub_e5148bd6Address)
                                                staticcall sub_e5148bd6Address.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[0]
                                                mem[(4 * ceil32(return_data.size)) + 644] = marketingAddress
                                                mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                                require ext_code.size(sub_e5148bd6Address)
                                                call sub_e5148bd6Address.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                                mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                stor22 = 0
                                                if stor11[address(msg.sender)]:
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 736
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if stor11[address(arg1)]:
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 736
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if totalFees <= 0:
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 736
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if not arg2:
                                                    if not arg2:
                                                        if 0 > arg2:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                            mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not this.address:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not arg1:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1120
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                            balanceOf[address(arg1)] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            return 1
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                            mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                            mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 704
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * burnFee / 100 < 0:
                                                            mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 768
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 * burnFee / 100 > arg2:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                            mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not this.address:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not arg1:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1120
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                            return 1
                                                else:
                                                    if arg2 and stor14 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor14 / arg2 != stor14:
                                                        mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 640
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg2:
                                                        if arg2 * stor14 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                            mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 768
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 * stor14 / 100 > arg2:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                            mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not this.address:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not arg1:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1120
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) >= balanceOf[address(arg1)]:
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                            return 1
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                            mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                            mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 704
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                            mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 768
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                            mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not this.address:
                                                            mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 832
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 928
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 100
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if not arg1:
                                                            mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                            mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1024
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                            mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                            mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                            mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                            revert with memory
                                                              from (8 * ceil32(return_data.size)) + 1120
                                                               len (13 * ceil32(return_data.size)) + 132
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                            return 1
                                                mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                                mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 1120
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if balanceOf[address(this.address)] and marketingFee > -1 / balanceOf[address(this.address)]:
                                                revert with 'NH{q', 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 'NH{q', 18
                                            if balanceOf[address(this.address)] * marketingFee / balanceOf[address(this.address)] != marketingFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[160] = 26
                                            mem[192] = 'SafeMath: division by zero'
                                            if stor14 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor14:
                                                revert with 'NH{q', 18
                                            mem[224] = 26
                                            mem[256] = 'SafeMath: division by zero'
                                            mem[288] = 30
                                            mem[320] = 'SafeMath: subtraction overflow'
                                            if 0 / stor14 / 2 > 0 / stor14:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if 0 / stor14 < 0 / stor14 / 2:
                                                revert with 'NH{q', 17
                                            mem[352] = 2
                                            mem[384] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[448] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[416] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = 0 / stor14 / 2
                                            allowance[address(this.address)][stor19].field_255 = 0
                                            emit Approval((0 / stor14 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 448] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 452] = 0 / stor14 / 2
                                            idx = 0
                                            s = 384
                                            t = ceil32(return_data.size) + 644
                                            while idx < 2:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, 0 / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(return_data.size) + 448] = 30
                                            mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = (0 / stor14) - (0 / stor14 / 2)
                                            emit Approval(((0 / stor14) - (0 / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 580] = 0
                                            mem[ceil32(return_data.size) + 612] = 0
                                            mem[ceil32(return_data.size) + 644] = owner
                                            mem[ceil32(return_data.size) + 676] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (0 / stor14) - (0 / stor14 / 2), 0, 0, owner, block.timestamp
                                            mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            require ext_call.return_data[32] == ext_call.return_data[32]
                                            require ext_call.return_data[64] == ext_call.return_data[64]
                                            mem[(2 * ceil32(return_data.size)) + 512] = 3
                                            mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (4 * ceil32(return_data.size)) + 640
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 10)
                                            allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * marketingFee / stor14
                                            emit Approval((balanceOf[address(this.address)] * marketingFee / stor14), this.address, uniswapV2RouterAddress);
                                            mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * marketingFee / stor14
                                            mem[(4 * ceil32(return_data.size)) + 676] = 0
                                            mem[(4 * ceil32(return_data.size)) + 708] = 160
                                            mem[(4 * ceil32(return_data.size)) + 804] = 3
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 544
                                            t = (4 * ceil32(return_data.size)) + 836
                                            while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                            mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(sub_e5148bd6Address)
                                            staticcall sub_e5148bd6Address.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10836 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _10852 = mem[_10836]
                                            require mem[_10836] == mem[_10836]
                                            mem[mem[64] + 4] = marketingAddress
                                            mem[mem[64] + 36] = _10852
                                            require ext_code.size(sub_e5148bd6Address)
                                            call sub_e5148bd6Address.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args marketingAddress, _10852
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10948 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_10948] == bool(mem[_10948])
                                            stor22 = 0
                                            mem[0] = msg.sender
                                            mem[32] = 11
                                            if stor11[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _11019 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_11019] = 38
                                                mem[_11019 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11019 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                mem[0] = arg1
                                                mem[32] = 11
                                                if stor11[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _11059 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_11059] = 38
                                                    mem[_11059 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11059 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if totalFees <= 0:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11103 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11103] = 38
                                                        mem[_11103 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11103 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if not arg2:
                                                            _11145 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11145] = 26
                                                            mem[_11145 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _11464 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11464] = 26
                                                                mem[_11464 + 32] = 'SafeMath: division by zero'
                                                                _11744 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11744] = 30
                                                                mem[_11744 + 32] = 'SafeMath: subtraction overflow'
                                                                if 0 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < 0:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _11900 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_11900] = 38
                                                                mem[_11900 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11900 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12583 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12583] = 38
                                                                mem[_12583 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12583 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _13450 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13450] = 38
                                                                mem[_13450 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13450 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                            else:
                                                                if arg2 and burnFee > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * burnFee / arg2 != burnFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _11673 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11673] = 26
                                                                mem[_11673 + 32] = 'SafeMath: division by zero'
                                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * burnFee / 100 < 0:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _11924 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11924] = 30
                                                                mem[_11924 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * burnFee / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12198 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12198] = 38
                                                                mem[_12198 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12198 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12947 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12947] = 38
                                                                mem[_12947 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12947 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                balanceOf[57005] += arg2 * burnFee / 100
                                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14200 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14200] = 38
                                                                mem[_14200 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14200 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and stor14 > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * stor14 / arg2 != stor14:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11416 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11416] = 26
                                                            mem[_11416 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _11672 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11672] = 26
                                                                mem[_11672 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor14 / 100 > -1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _11923 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11923] = 30
                                                                mem[_11923 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * stor14 / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12195 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12195] = 38
                                                                mem[_12195 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12195 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12945 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12945] = 38
                                                                mem[_12945 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12945 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14197 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14197] = 38
                                                                mem[_14197 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14197 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and burnFee > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * burnFee / arg2 != burnFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _11787 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11787] = 26
                                                                mem[_11787 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _12220 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_12220] = 30
                                                                mem[_12220 + 32] = 'SafeMath: subtraction overflow'
                                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12580 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12580] = 38
                                                                mem[_12580 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12580 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _13269 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13269] = 38
                                                                mem[_13269 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13269 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                balanceOf[57005] += arg2 * burnFee / 100
                                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14527 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14527] = 38
                                                                mem[_14527 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14527 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
            else:
                if balanceOf[address(arg1)] > -arg2 - 1:
                    revert with 'NH{q', 17
                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                    revert with 0, 'SafeMath: addition overflow'
                if balanceOf[address(arg1)] + arg2 > maxBalance:
                    revert with 0, 'Max Balance is reached.'
                if arg1 != uniswapV2PairAddress:
                    if stor11[address(msg.sender)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if stor11[address(arg1)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if totalFees <= 0:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if not arg2:
                                    if not arg2:
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < 0:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and burnFee > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * burnFee / arg2 != burnFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if arg2 * burnFee / 100 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * burnFee / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * burnFee / 100
                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and stor14 > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * stor14 / arg2 != stor14:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    if not arg2:
                                        if arg2 * stor14 / 100 > -1:
                                            revert with 'NH{q', 17
                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * stor14 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and burnFee > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * burnFee / arg2 != burnFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * burnFee / 100
                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                else:
                    if stor22:
                        if stor11[address(msg.sender)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor11[address(arg1)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if totalFees <= 0:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if not arg2:
                                        if not arg2:
                                            if 0 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < 0:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and burnFee > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * burnFee / arg2 != burnFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if 0 > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if arg2 * burnFee / 100 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * burnFee / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * burnFee / 100
                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and stor14 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor14 / arg2 != stor14:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                        if not arg2:
                                            if arg2 * stor14 / 100 > -1:
                                                revert with 'NH{q', 17
                                            if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * stor14 / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and burnFee > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * burnFee / arg2 != burnFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * burnFee / 100
                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                    else:
                        if balanceOf[address(this.address)] < liquifyThreshhold:
                            if stor11[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor11[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if totalFees <= 0:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * burnFee / 100 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * burnFee / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and stor14 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor14 / arg2 != stor14:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            if not arg2:
                                                if arg2 * stor14 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * stor14 / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                        else:
                            if stor14 <= 0:
                                if stor11[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor11[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if 0 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * burnFee / 100 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * burnFee / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and stor14 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor14 / arg2 != stor14:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                if not arg2:
                                                    if arg2 * stor14 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * stor14 / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                            else:
                                if msg.sender == owner:
                                    if stor11[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor11[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    if not arg2:
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * burnFee / 100 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * burnFee / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor14 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor14 / arg2 != stor14:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                    if not arg2:
                                                        if arg2 * stor14 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * stor14 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                else:
                                    if arg1 == owner:
                                        if stor11[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor11[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if totalFees <= 0:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if not arg2:
                                                        if not arg2:
                                                            if 0 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < 0:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if arg2 and burnFee > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * burnFee / arg2 != burnFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            if 0 > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * burnFee / 100 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if arg2 * burnFee / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[57005] += arg2 * burnFee / 100
                                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor14 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor14 / arg2 != stor14:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                        if not arg2:
                                                            if arg2 * stor14 / 100 > -1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if arg2 * stor14 / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and burnFee > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * burnFee / arg2 != burnFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[57005] += arg2 * burnFee / 100
                                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                    else:
                                        stor22 = 1
                                        if not balanceOf[address(this.address)]:
                                            mem[96] = 26
                                            mem[128] = 'SafeMath: division by zero'
                                            if stor14 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor14:
                                                revert with 'NH{q', 18
                                            if not balanceOf[address(this.address)]:
                                                mem[160] = 26
                                                mem[192] = 'SafeMath: division by zero'
                                                if stor14 <= 0:
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                if not stor14:
                                                    revert with 'NH{q', 18
                                                mem[224] = 26
                                                mem[256] = 'SafeMath: division by zero'
                                                mem[288] = 30
                                                mem[320] = 'SafeMath: subtraction overflow'
                                                if 0 / stor14 / 2 > 0 / stor14:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if 0 / stor14 < 0 / stor14 / 2:
                                                    revert with 'NH{q', 17
                                                mem[352] = 2
                                                mem[384] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[448] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[416] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor19].field_0 = 0 / stor14 / 2
                                                allowance[address(this.address)][stor19].field_255 = 0
                                                emit Approval((0 / stor14 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 448] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(return_data.size) + 452] = 0 / stor14 / 2
                                                idx = 0
                                                s = 384
                                                t = ceil32(return_data.size) + 644
                                                while idx < 2:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, 0 / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(return_data.size) + 448] = 30
                                                mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 'NH{q', 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor19].field_0 = (0 / stor14) - (0 / stor14 / 2)
                                                emit Approval(((0 / stor14) - (0 / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 580] = 0
                                                mem[ceil32(return_data.size) + 612] = 0
                                                mem[ceil32(return_data.size) + 644] = owner
                                                mem[ceil32(return_data.size) + 676] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (0 / stor14) - (0 / stor14 / 2), 0, 0, owner, block.timestamp
                                                mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                require ext_call.return_data[0] == ext_call.return_data[0]
                                                require ext_call.return_data[32] == ext_call.return_data[32]
                                                require ext_call.return_data[64] == ext_call.return_data[64]
                                                mem[(2 * ceil32(return_data.size)) + 512] = 3
                                                mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = (4 * ceil32(return_data.size)) + 640
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 10)
                                                allowance[address(this.address)][stor19].field_0 = 0 / stor14
                                                emit Approval((0 / stor14), this.address, uniswapV2RouterAddress);
                                                mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor14
                                                mem[(4 * ceil32(return_data.size)) + 676] = 0
                                                mem[(4 * ceil32(return_data.size)) + 708] = 160
                                                mem[(4 * ceil32(return_data.size)) + 804] = 3
                                                idx = 0
                                                s = (2 * ceil32(return_data.size)) + 544
                                                t = (4 * ceil32(return_data.size)) + 836
                                                while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                                mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0 / stor14, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                            else:
                                                if balanceOf[address(this.address)] and marketingFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 'NH{q', 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 'NH{q', 18
                                                if balanceOf[address(this.address)] * marketingFee / balanceOf[address(this.address)] != marketingFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[160] = 26
                                                mem[192] = 'SafeMath: division by zero'
                                                if stor14 <= 0:
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                if not stor14:
                                                    revert with 'NH{q', 18
                                                mem[224] = 26
                                                mem[256] = 'SafeMath: division by zero'
                                                mem[288] = 30
                                                mem[320] = 'SafeMath: subtraction overflow'
                                                if 0 / stor14 / 2 > 0 / stor14:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if 0 / stor14 < 0 / stor14 / 2:
                                                    revert with 'NH{q', 17
                                                mem[352] = 2
                                                mem[384] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[448] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[416] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor19].field_0 = 0 / stor14 / 2
                                                allowance[address(this.address)][stor19].field_255 = 0
                                                emit Approval((0 / stor14 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 448] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(return_data.size) + 452] = 0 / stor14 / 2
                                                idx = 0
                                                s = 384
                                                t = ceil32(return_data.size) + 644
                                                while idx < 2:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, 0 / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(return_data.size) + 448] = 30
                                                mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 'NH{q', 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor19].field_0 = (0 / stor14) - (0 / stor14 / 2)
                                                emit Approval(((0 / stor14) - (0 / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 580] = 0
                                                mem[ceil32(return_data.size) + 612] = 0
                                                mem[ceil32(return_data.size) + 644] = owner
                                                mem[ceil32(return_data.size) + 676] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (0 / stor14) - (0 / stor14 / 2), 0, 0, owner, block.timestamp
                                                mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                require ext_call.return_data[0] == ext_call.return_data[0]
                                                require ext_call.return_data[32] == ext_call.return_data[32]
                                                require ext_call.return_data[64] == ext_call.return_data[64]
                                                mem[(2 * ceil32(return_data.size)) + 512] = 3
                                                mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = (4 * ceil32(return_data.size)) + 640
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 10)
                                                allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * marketingFee / stor14
                                                emit Approval((balanceOf[address(this.address)] * marketingFee / stor14), this.address, uniswapV2RouterAddress);
                                                mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * marketingFee / stor14
                                                mem[(4 * ceil32(return_data.size)) + 676] = 0
                                                mem[(4 * ceil32(return_data.size)) + 708] = 160
                                                mem[(4 * ceil32(return_data.size)) + 804] = 3
                                                idx = 0
                                                s = (2 * ceil32(return_data.size)) + 544
                                                t = (4 * ceil32(return_data.size)) + 836
                                                while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                                mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)] * marketingFee / stor14, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require ext_code.size(sub_e5148bd6Address)
                                            staticcall sub_e5148bd6Address.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            mem[(4 * ceil32(return_data.size)) + 644] = marketingAddress
                                            mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                            require ext_code.size(sub_e5148bd6Address)
                                            call sub_e5148bd6Address.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                            mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            stor22 = 0
                                            if stor11[address(msg.sender)]:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if stor11[address(arg1)]:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 704
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * burnFee / 100 < 0:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 * burnFee / 100 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        return 1
                                            else:
                                                if arg2 and stor14 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor14 / arg2 != stor14:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg2:
                                                    if arg2 * stor14 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 * stor14 / 100 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                        return 1
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 704
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        return 1
                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                            mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                            mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 1120
                                               len (13 * ceil32(return_data.size)) + 100
                                        if balanceOf[address(this.address)] and liquidityFee > -1 / balanceOf[address(this.address)]:
                                            revert with 'NH{q', 17
                                        if not balanceOf[address(this.address)]:
                                            revert with 'NH{q', 18
                                        if balanceOf[address(this.address)] * liquidityFee / balanceOf[address(this.address)] != liquidityFee:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                        mem[96] = 26
                                        mem[128] = 'SafeMath: division by zero'
                                        if stor14 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor14:
                                            revert with 'NH{q', 18
                                        if not balanceOf[address(this.address)]:
                                            mem[160] = 26
                                            mem[192] = 'SafeMath: division by zero'
                                            if stor14 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor14:
                                                revert with 'NH{q', 18
                                            mem[224] = 26
                                            mem[256] = 'SafeMath: division by zero'
                                            mem[288] = 30
                                            mem[320] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityFee / stor14 / 2 > balanceOf[address(this.address)] * liquidityFee / stor14:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * liquidityFee / stor14 < balanceOf[address(this.address)] * liquidityFee / stor14 / 2:
                                                revert with 'NH{q', 17
                                            mem[352] = 2
                                            mem[384] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[448] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[416] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                            allowance[address(this.address)][stor19].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityFee / stor14 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 448] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                            idx = 0
                                            s = 384
                                            t = ceil32(return_data.size) + 644
                                            while idx < 2:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityFee / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(return_data.size) + 448] = 30
                                            mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 580] = 0
                                            mem[ceil32(return_data.size) + 612] = 0
                                            mem[ceil32(return_data.size) + 644] = owner
                                            mem[ceil32(return_data.size) + 676] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2), 0, 0, owner, block.timestamp
                                            mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            require ext_call.return_data[32] == ext_call.return_data[32]
                                            require ext_call.return_data[64] == ext_call.return_data[64]
                                            mem[(2 * ceil32(return_data.size)) + 512] = 3
                                            mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (4 * ceil32(return_data.size)) + 640
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 10)
                                            allowance[address(this.address)][stor19].field_0 = 0 / stor14
                                            emit Approval((0 / stor14), this.address, uniswapV2RouterAddress);
                                            mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor14
                                            mem[(4 * ceil32(return_data.size)) + 676] = 0
                                            mem[(4 * ceil32(return_data.size)) + 708] = 160
                                            mem[(4 * ceil32(return_data.size)) + 804] = 3
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 544
                                            t = (4 * ceil32(return_data.size)) + 836
                                            while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                            mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0 / stor14, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require ext_code.size(sub_e5148bd6Address)
                                            staticcall sub_e5148bd6Address.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            mem[(4 * ceil32(return_data.size)) + 644] = marketingAddress
                                            mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                            require ext_code.size(sub_e5148bd6Address)
                                            call sub_e5148bd6Address.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                            mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            stor22 = 0
                                            if stor11[address(msg.sender)]:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if stor11[address(arg1)]:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 704
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * burnFee / 100 < 0:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 * burnFee / 100 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        return 1
                                            else:
                                                if arg2 and stor14 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor14 / arg2 != stor14:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg2:
                                                    if arg2 * stor14 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 * stor14 / 100 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                        return 1
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 704
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        return 1
                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                            mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                            mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 1120
                                               len (13 * ceil32(return_data.size)) + 100
                                        if balanceOf[address(this.address)] and marketingFee > -1 / balanceOf[address(this.address)]:
                                            revert with 'NH{q', 17
                                        if not balanceOf[address(this.address)]:
                                            revert with 'NH{q', 18
                                        if balanceOf[address(this.address)] * marketingFee / balanceOf[address(this.address)] != marketingFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        mem[160] = 26
                                        mem[192] = 'SafeMath: division by zero'
                                        if stor14 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor14:
                                            revert with 'NH{q', 18
                                        mem[224] = 26
                                        mem[256] = 'SafeMath: division by zero'
                                        mem[288] = 30
                                        mem[320] = 'SafeMath: subtraction overflow'
                                        if balanceOf[address(this.address)] * liquidityFee / stor14 / 2 > balanceOf[address(this.address)] * liquidityFee / stor14:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if balanceOf[address(this.address)] * liquidityFee / stor14 < balanceOf[address(this.address)] * liquidityFee / stor14 / 2:
                                            revert with 'NH{q', 17
                                        mem[352] = 2
                                        mem[384] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[448] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[416] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                        allowance[address(this.address)][stor19].field_255 = 0
                                        emit Approval((balanceOf[address(this.address)] * liquidityFee / stor14 / 2), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 448] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                        idx = 0
                                        s = 384
                                        t = ceil32(return_data.size) + 644
                                        while idx < 2:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args Mask(255, 1, balanceOf[address(this.address)] * liquidityFee / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(return_data.size) + 448] = 30
                                        mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 'NH{q', 17
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor19].field_0 = (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)
                                        emit Approval(((balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 580] = 0
                                        mem[ceil32(return_data.size) + 612] = 0
                                        mem[ceil32(return_data.size) + 644] = owner
                                        mem[ceil32(return_data.size) + 676] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args address(this.address), (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2), 0, 0, owner, block.timestamp
                                        mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        require ext_call.return_data[32] == ext_call.return_data[32]
                                        require ext_call.return_data[64] == ext_call.return_data[64]
                                        mem[(2 * ceil32(return_data.size)) + 512] = 3
                                        mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = (4 * ceil32(return_data.size)) + 640
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 10)
                                        allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * marketingFee / stor14
                                        emit Approval((balanceOf[address(this.address)] * marketingFee / stor14), this.address, uniswapV2RouterAddress);
                                        mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                        mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * marketingFee / stor14
                                        mem[(4 * ceil32(return_data.size)) + 676] = 0
                                        mem[(4 * ceil32(return_data.size)) + 708] = 160
                                        mem[(4 * ceil32(return_data.size)) + 804] = 3
                                        idx = 0
                                        s = (2 * ceil32(return_data.size)) + 544
                                        t = (4 * ceil32(return_data.size)) + 836
                                        while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                        mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(sub_e5148bd6Address)
                                        staticcall sub_e5148bd6Address.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14533 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _14590 = mem[_14533]
                                        require mem[_14533] == mem[_14533]
                                        mem[mem[64] + 4] = marketingAddress
                                        mem[mem[64] + 36] = _14590
                                        require ext_code.size(sub_e5148bd6Address)
                                        call sub_e5148bd6Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args marketingAddress, _14590
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14890 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_14890] == bool(mem[_14890])
                                        stor22 = 0
                                        mem[0] = msg.sender
                                        mem[32] = 11
                                        if stor11[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _14949 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_14949] = 38
                                            mem[_14949 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14949 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            mem[0] = arg1
                                            mem[32] = 11
                                            if stor11[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _14973 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_14973] = 38
                                                mem[_14973 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14973 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if totalFees <= 0:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _14998 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_14998] = 38
                                                    mem[_14998 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14998 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if not arg2:
                                                        _15022 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15022] = 26
                                                        mem[_15022 + 32] = 'SafeMath: division by zero'
                                                        if not arg2:
                                                            _15202 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15202] = 26
                                                            mem[_15202 + 32] = 'SafeMath: division by zero'
                                                            _15348 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15348] = 30
                                                            mem[_15348 + 32] = 'SafeMath: subtraction overflow'
                                                            if 0 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < 0:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _15414 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_15414] = 38
                                                            mem[_15414 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15414 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 9
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            _15801 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_15801] = 38
                                                            mem[_15801 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15801 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = 57005
                                                            mem[32] = 9
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _16300 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_16300] = 38
                                                            mem[_16300 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16300 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if arg2 and burnFee > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * burnFee / arg2 != burnFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _15320 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15320] = 26
                                                            mem[_15320 + 32] = 'SafeMath: division by zero'
                                                            if 0 > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * burnFee / 100 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            _15430 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15430] = 30
                                                            mem[_15430 + 32] = 'SafeMath: subtraction overflow'
                                                            if arg2 * burnFee / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _15576 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_15576] = 38
                                                            mem[_15576 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15576 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 9
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            _16013 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_16013] = 38
                                                            mem[_16013 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16013 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = 57005
                                                            mem[32] = 9
                                                            balanceOf[57005] += arg2 * burnFee / 100
                                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _16884 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_16884] = 38
                                                            mem[_16884 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16884 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor14 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor14 / arg2 != stor14:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _15174 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_15174] = 26
                                                        mem[_15174 + 32] = 'SafeMath: division by zero'
                                                        if not arg2:
                                                            _15319 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15319] = 26
                                                            mem[_15319 + 32] = 'SafeMath: division by zero'
                                                            if arg2 * stor14 / 100 > -1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            _15429 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15429] = 30
                                                            mem[_15429 + 32] = 'SafeMath: subtraction overflow'
                                                            if arg2 * stor14 / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _15573 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_15573] = 38
                                                            mem[_15573 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15573 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 9
                                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            _16011 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_16011] = 38
                                                            mem[_16011 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16011 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = 57005
                                                            mem[32] = 9
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _16881 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_16881] = 38
                                                            mem[_16881 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16881 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and burnFee > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * burnFee / arg2 != burnFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _15372 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15372] = 26
                                                            mem[_15372 + 32] = 'SafeMath: division by zero'
                                                            if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            _15594 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15594] = 30
                                                            mem[_15594 + 32] = 'SafeMath: subtraction overflow'
                                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _15798 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_15798] = 38
                                                            mem[_15798 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15798 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 9
                                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            _16197 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_16197] = 38
                                                            mem[_16197 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16197 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = 57005
                                                            mem[32] = 9
                                                            balanceOf[57005] += arg2 * burnFee / 100
                                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _17070 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_17070] = 38
                                                            mem[_17070 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_17070 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
    return 1
}



}
