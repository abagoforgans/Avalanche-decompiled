contract main {




// =====================  Runtime code  =====================


#
#  - createNodeWithTokens(string arg1, uint256 arg2)
#
const decimals = 18


mapping of uint256 balanceOf;
mapping of struct allowance;
uint256 totalSupply;
array of struct stor3;
array of struct stor4;
address owner;
uint256 totalShares;
uint256 totalReleased;
mapping of uint256 shares;
mapping of uint256 released;
array of address payee;
mapping of uint256 totalReleased;
mapping of uint256 released;
address nodeRewardManagerAddress;
address uniswapV2RouterAddress;
address uniswapV2PairAddress;
address treasuryPoolAddress;
address distributionPoolAddress;
address devPoolAddress;
address deadWalletAddress;
uint256 rewardsFee;
uint256 liquidityPoolFee;
uint256 treasuryFee;
uint256 totalFees;
uint256 cashoutFee;
uint256 stor25;
uint256 stor26;
uint8 stor27;
uint8 stor27; offset 8
uint256 stor27; offset 8
uint256 swapTokensAmount;
uint8 stor29;
uint8 sub_e06fc519; offset 8
uint256 stor29; offset 8
uint256 stor31;
uint256 sellTax;
address stor33;
uint256 stor34;
mapping of uint8 stor35;
mapping of uint8 stor36;

function totalFees() {
    return totalFees
}

function uniswapV2Router() {
    return uniswapV2RouterAddress
}

function totalSupply() {
    return totalSupply
}

function _isBlacklisted(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor35[arg1])
}

function rewardsFee() {
    return rewardsFee
}

function totalShares() {
    return totalShares
}

function released(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return released[address(arg1)][address(arg2)]
}

function treasuryPool() {
    return treasuryPoolAddress
}

function uniswapV2Pair() {
    return uniswapV2PairAddress
}

function liquidityPoolFee() {
    return liquidityPoolFee
}

function swapTokensAmount() {
    return swapTokensAmount
}

function cashoutFee() {
    return cashoutFee
}

function balanceOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return balanceOf[address(arg1)]
}

function nodeRewardManager() {
    return nodeRewardManagerAddress
}

function deadWallet() {
    return deadWalletAddress
}

function payee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if arg1 >= payee.length:
        revert with 0, 50
    return payee[arg1]
}

function owner() {
    return owner
}

function released(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return released[address(arg1)]
}

function devPool() {
    return devPoolAddress
}

function automatedMarketMakerPairs(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor36[arg1])
}

function distributionPool() {
    return distributionPoolAddress
}

function sellTax() {
    return sellTax
}

function treasuryFee() {
    return treasuryFee
}

function shares(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return shares[address(arg1)]
}

function totalReleased(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return totalReleased[address(arg1)]
}

function allowance(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return allowance[address(arg1)][address(arg2)].field_0
}

function sub_e06fc519(?) {
    return bool(sub_e06fc519)
}

function totalReleased() {
    return totalReleased
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function setTax(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sellTax = arg1
}

function updateDevShare(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor26 = arg1
}

function updateRwSwapFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor25 = arg1
}

function updateMaxTxAmount(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor34 = arg1
}

function updateCashoutFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    cashoutFee = arg1
}

function updateSwapTokensAmount(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    swapTokensAmount = arg1
}

function setTaxAddress(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor33 = arg1
}

function sub_af153182(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    devPoolAddress = address(arg1)
}

function updateFuturWall(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    treasuryPoolAddress = arg1
}

function updateRewardsWall(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    distributionPoolAddress = arg1
}

function setNodeManagement(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    nodeRewardManagerAddress = arg1
}

function sub_9a33de4f(?) {
    require calldata.size - 4 >= 32
    require arg1 == bool(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    Mask(248, 0, stor29.field_8) = Mask(248, 0, bool(arg1))
}

function changeSwapLiquify(bool arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    Mask(248, 0, stor27.field_8) = Mask(248, 0, arg1)
}

function openTrading() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if uint8(stor29.field_0):
        revert with 0, 'trading is already open'
    uint8(stor29.field_0) = 1
    stor31 = block.number
}

function blacklistMalicious(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor35[address(arg1)] = uint8(arg2)
}

function publiDistriRewards() {
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._distributeRewards() with:
         gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
}

function getClaimTime() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.claimTime() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getNodeMinPrice() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.0x943ab261 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getRewardPerValue() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.0x728f0b4b with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getGasDistri() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.gasForDistribution() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getDistriCount() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.lastDistributionCount() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getTotalStakedReward() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.totalRewardStaked() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getTotalCreatedNodes() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.totalNodesCreated() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getAllNodeValue() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodeValueOf(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function getAutoDistri() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.autoDistri() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    return bool(ext_call.return_data[0])
}

function sub_9c79f449(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if eth.balance(this.address) < arg1:
        revert with 0, 'insufficient AVAX balance'
    call msg.sender with:
       value arg1 wei
         gas 2300 * is_zero(value) wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function changeGasDistri(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._changeGasDistri(uint256 arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function changeClaimTime(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._changeClaimTime(uint256 arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function changeNodeMinPrice(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._changeNodeMinPrice(uint256 arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function changeRewardPerValue(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._changeRewardPerValue(uint256 arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function getNodeValue(uint256 arg1) {
    require calldata.size - 4 >= 32
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodeValueOf(address arg1, uint256 arg2) with:
            gas gas_remaining wei
           args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function changeAutoDistri(bool arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._changeAutoDistri(bool arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function getNodeNumberOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodeNumberOf(address arg1) with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getAllNodeValueOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodeValueOf(address arg1) with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getNodeMultiplier(uint256 arg1) {
    require calldata.size - 4 >= 32
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getRewardMultOf(address arg1, uint256 arg2) with:
            gas gas_remaining wei
           args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function distributeRewards() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._distributeRewards() with:
         gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    return ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64]
}

function getNodeValueOf(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodeValueOf(address arg1, uint256 arg2) with:
            gas gas_remaining wei
           args address(arg1), arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getNodeMultiplierOf(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getRewardMultOf(address arg1, uint256 arg2) with:
            gas gas_remaining wei
           args address(arg1), arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function boostReward(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg1 <= eth.balance(this.address):
        call owner with:
           value arg1 wei
             gas 2300 * is_zero(value) wei
    else:
        call owner with:
           value eth.balance(this.address) wei
             gas 2300 * is_zero(value) wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function approve(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function updateLiquiditFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    liquidityPoolFee = arg1
    if rewardsFee > !arg1:
        revert with 0, 17
    if rewardsFee + arg1 < rewardsFee:
        revert with 0, 'SafeMath: addition overflow'
    if rewardsFee + arg1 > !treasuryFee:
        revert with 0, 17
    if treasuryFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = rewardsFee + arg1 + treasuryFee
}

function sub_9dd267e6(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(address(arg1))
    call address(arg1).0xa9059cbb with:
         gas gas_remaining wei
        args treasuryPoolAddress, arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
}

function getRewardAmountOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1) with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function updateRewardsFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    rewardsFee = arg1
    if arg1 > !liquidityPoolFee:
        revert with 0, 17
    if arg1 + liquidityPoolFee < arg1:
        revert with 0, 'SafeMath: addition overflow'
    if arg1 + liquidityPoolFee > !treasuryFee:
        revert with 0, 17
    if treasuryFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = arg1 + liquidityPoolFee + treasuryFee
}

function updateFuturFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    treasuryFee = arg1
    if rewardsFee > !liquidityPoolFee:
        revert with 0, 17
    if rewardsFee + liquidityPoolFee < rewardsFee:
        revert with 0, 'SafeMath: addition overflow'
    if rewardsFee + liquidityPoolFee > !arg1:
        revert with 0, 17
    if arg1 < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = rewardsFee + liquidityPoolFee + arg1
}

function transferTokens(address arg1, address arg2, uint256 arg3) {
    require calldata.size - 4 >= 96
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if this.address == arg1:
        revert with 0, 'Cannot transfer out own tokens'
    require ext_code.size(arg1)
    call arg1.0xa9059cbb with:
         gas gas_remaining wei
        args address(arg2), arg3
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
}

function setAutomatedMarketMakerPair(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if uniswapV2PairAddress == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'TKN: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs'
    if arg2 == bool(stor36[address(arg1)]):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'TKN: Automated market maker pair is already set to that value'
    stor36[address(arg1)] = uint8(arg2)
    emit SetAutomatedMarketMakerPair(arg1, arg2);
}

function decreaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if arg2 > allowance[msg.sender][address(arg1)].field_0:
        revert with 0, 32, 37, 0x6545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a6572, mem[165 len 27] >> 40, 0
    if allowance[msg.sender][address(arg1)].field_0 < arg2:
        revert with 0, 17
    if not msg.sender:
        revert with 0, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 = allowance[msg.sender][address(arg1)].field_0 - arg2
    emit Approval((allowance[msg.sender][address(arg1)].field_0 - arg2), msg.sender, arg1);
    return 1
}

function increaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if allowance[msg.sender][address(arg1)].field_0 > !arg2:
        revert with 0, 17
    if allowance[msg.sender][address(arg1)].field_0 + arg2 < allowance[msg.sender][address(arg1)].field_0:
        revert with 0, 'SafeMath: addition overflow'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 = allowance[msg.sender][address(arg1)].field_0 + arg2
    emit Approval((allowance[msg.sender][address(arg1)].field_0 + arg2), msg.sender, arg1);
    return 1
}

function getRewardAmount() {
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function updateUniswapV2Router(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if uniswapV2RouterAddress == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'TKN: The router already has that address'
    emit UpdateUniswapV2Router(arg1, uniswapV2RouterAddress);
    uniswapV2RouterAddress = arg1
    require ext_code.size(arg1)
    staticcall arg1.factory() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(uniswapV2RouterAddress)
    staticcall uniswapV2RouterAddress.0x73b295c2 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    call address(ext_call.return_data[0]).createPair(address arg1, address arg2) with:
         gas gas_remaining wei
        args address(this.address), address(ext_call.return_data[0])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    uniswapV2PairAddress = ext_call.return_data[12 len 20]
}

function sub_846b8d63(?) {
    require calldata.size - 4 >= 64
    require cd[4] <= test266151307()
    require cd[4] + 35 < calldata.size
    if ('cd', 4).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 4).length) + 97 < 96 or ceil32(32 * ('cd', 4).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 4).length
    require calldata.size >= cd[4] + (32 * ('cd', 4).length) + 36
    s = cd[4] + 36
    t = 128
    idx = 0
    while idx < ('cd', 4).length:
        mem[t] = cd[s]
        s = s + 32
        t = t + 32
        idx = idx + 1
        continue 
    require cd[36] <= test266151307()
    require cd[36] + 35 < calldata.size
    if ('cd', 36).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 36).length) + 98 < 97 or ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 98 > test266151307():
        revert with 0, 65
    mem[ceil32(32 * ('cd', 4).length) + 97] = ('cd', 36).length
    require calldata.size >= cd[36] + (32 * ('cd', 36).length) + 36
    s = cd[36] + 36
    t = ceil32(32 * ('cd', 4).length) + 129
    idx = 0
    while idx < ('cd', 36).length:
        mem[t] = cd[s]
        s = s + 32
        t = t + 32
        idx = idx + 1
        continue 
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if ('cd', 4).length != 6:
        revert with 0, 'newTierLevels length has to be 6'
    if ('cd', 36).length != 6:
        revert with 0, 'newTierSlopes length has to be 6'
    mem[ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 98] = 0x57829c6100000000000000000000000000000000000000000000000000000000
    mem[ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 102] = 64
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress.0x57829c61 with:
         gas gas_remaining wei
        args Array(len=('cd', 4).length, data=mem[128 len 32 * ('cd', 4).length], ('cd', 36).length, mem[ceil32(32 * ('cd', 4).length) + 129 len 32 * ('cd', 36).length]), (32 * ('cd', 4).length) + 96
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function release(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not shares[address(arg1)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'PaymentSplitter: account has no shares'
    if eth.balance(this.address) > !totalReleased:
        revert with 0, 17
    if eth.balance(this.address) + totalReleased and shares[address(arg1)] > -1 / eth.balance(this.address) + totalReleased:
        revert with 0, 17
    if not totalShares:
        revert with 0, 18
    if (eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares < released[address(arg1)]:
        revert with 0, 17
    if not ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'PaymentSplitter: account is not due payment'
    if released[address(arg1)] > !(((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]):
        revert with 0, 17
    released[address(arg1)] = (eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares
    if totalReleased > !(((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]):
        revert with 0, 17
    totalReleased = totalReleased + ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]
    if eth.balance(this.address) < ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]:
        revert with 0, 'Address: insufficient balance'
    call arg1 with:
       value ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)] wei
         gas gas_remaining wei
    if not return_data.size:
        if not ext_call.success:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        'Address: unable to send value, recipient may have reverted'
    else:
        if not ext_call.success:
            revert with 0, 'Address: unable to send value, recipient may have reverted'
    ('bool', 'ext_call.success')
    emit PaymentReleased(address(arg1), ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]);
}

function getNodesNames() {
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    mem[100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodesNames(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    _12 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
    _13 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
    mem[(2 * ceil32(return_data.size)) + 96] = _13
    require _12 + _13 + 32 <= return_data.size
    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)] = mem[ceil32(return_data.size) + _12 + 128 len ceil32(_13)]
    if ceil32(_13) <= _13:
        _27 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _13
        mem[mem[64] + 64 len ceil32(_13)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)]
        if ceil32(_13) <= _13:
            return Array(len=_13, data=mem[mem[64] + 64 len ceil32(_13)])
        mem[_13 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_13) + _27 + -mem[64] + 64
    mem[_13 + (2 * ceil32(return_data.size)) + 128] = 0
    _28 = mem[64]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _13
    mem[mem[64] + 64 len ceil32(_13)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)]
    if ceil32(_13) <= _13:
        return Array(len=_13, data=mem[mem[64] + 64 len ceil32(_13)])
    mem[_13 + mem[64] + 64] = 0
    return memory
      from mem[64]
       len ceil32(_13) + _28 + -mem[64] + 64
}

function getNodesCreatime() {
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    mem[100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodesCreationTime(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    _12 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
    _13 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
    mem[(2 * ceil32(return_data.size)) + 96] = _13
    require _12 + _13 + 32 <= return_data.size
    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)] = mem[ceil32(return_data.size) + _12 + 128 len ceil32(_13)]
    if ceil32(_13) <= _13:
        _27 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _13
        mem[mem[64] + 64 len ceil32(_13)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)]
        if ceil32(_13) <= _13:
            return Array(len=_13, data=mem[mem[64] + 64 len ceil32(_13)])
        mem[_13 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_13) + _27 + -mem[64] + 64
    mem[_13 + (2 * ceil32(return_data.size)) + 128] = 0
    _28 = mem[64]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _13
    mem[mem[64] + 64 len ceil32(_13)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)]
    if ceil32(_13) <= _13:
        return Array(len=_13, data=mem[mem[64] + 64 len ceil32(_13)])
    mem[_13 + mem[64] + 64] = 0
    return memory
      from mem[64]
       len ceil32(_13) + _28 + -mem[64] + 64
}

function getNodesRewards() {
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    mem[100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodesRewardAvailable(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    _12 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
    _13 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
    mem[(2 * ceil32(return_data.size)) + 96] = _13
    require _12 + _13 + 32 <= return_data.size
    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)] = mem[ceil32(return_data.size) + _12 + 128 len ceil32(_13)]
    if ceil32(_13) <= _13:
        _27 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _13
        mem[mem[64] + 64 len ceil32(_13)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)]
        if ceil32(_13) <= _13:
            return Array(len=_13, data=mem[mem[64] + 64 len ceil32(_13)])
        mem[_13 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_13) + _27 + -mem[64] + 64
    mem[_13 + (2 * ceil32(return_data.size)) + 128] = 0
    _28 = mem[64]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _13
    mem[mem[64] + 64 len ceil32(_13)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)]
    if ceil32(_13) <= _13:
        return Array(len=_13, data=mem[mem[64] + 64 len ceil32(_13)])
    mem[_13 + mem[64] + 64] = 0
    return memory
      from mem[64]
       len ceil32(_13) + _28 + -mem[64] + 64
}

function getNodesLastClaims() {
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    mem[100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodesLastClaimTime(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    _12 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
    _13 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
    mem[(2 * ceil32(return_data.size)) + 96] = _13
    require _12 + _13 + 32 <= return_data.size
    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)] = mem[ceil32(return_data.size) + _12 + 128 len ceil32(_13)]
    if ceil32(_13) <= _13:
        _27 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _13
        mem[mem[64] + 64 len ceil32(_13)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)]
        if ceil32(_13) <= _13:
            return Array(len=_13, data=mem[mem[64] + 64 len ceil32(_13)])
        mem[_13 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_13) + _27 + -mem[64] + 64
    mem[_13 + (2 * ceil32(return_data.size)) + 128] = 0
    _28 = mem[64]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _13
    mem[mem[64] + 64 len ceil32(_13)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)]
    if ceil32(_13) <= _13:
        return Array(len=_13, data=mem[mem[64] + 64 len ceil32(_13)])
    mem[_13 + mem[64] + 64] = 0
    return memory
      from mem[64]
       len ceil32(_13) + _28 + -mem[64] + 64
}

function name() {
    if bool(stor3.length):
        if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor3.length):
            if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor3.length):
                if 31 < uint255(stor3.length) * 0.5:
                    mem[128] = uint256(stor3.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor3.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor3[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)])
                mem[128] = 256 * stor3.length.field_8
        else:
            if bool(stor3.length) == stor3.length.field_1 < 32:
                revert with 0, 34
            if stor3.length.field_1:
                if 31 < stor3.length.field_1:
                    mem[128] = uint256(stor3.field_0)
                    idx = 128
                    s = 0
                    while stor3.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor3[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)])
                mem[128] = 256 * stor3.length.field_8
        mem[ceil32(uint255(stor3.length) * 0.5) + 192 len ceil32(uint255(stor3.length) * 0.5)] = mem[128 len ceil32(uint255(stor3.length) * 0.5)]
        if ceil32(uint255(stor3.length) * 0.5) > uint255(stor3.length) * 0.5:
            mem[(uint255(stor3.length) * 0.5) + ceil32(uint255(stor3.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)], mem[(2 * ceil32(uint255(stor3.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor3.length) * 0.5)]), 
    if bool(stor3.length) == stor3.length.field_1 < 32:
        revert with 0, 34
    if bool(stor3.length):
        if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor3.length):
            if 31 < uint255(stor3.length) * 0.5:
                mem[128] = uint256(stor3.field_0)
                idx = 128
                s = 0
                while (uint255(stor3.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor3[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
            mem[128] = 256 * stor3.length.field_8
    else:
        if bool(stor3.length) == stor3.length.field_1 < 32:
            revert with 0, 34
        if stor3.length.field_1:
            if 31 < stor3.length.field_1:
                mem[128] = uint256(stor3.field_0)
                idx = 128
                s = 0
                while stor3.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor3[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
            mem[128] = 256 * stor3.length.field_8
    mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]
    if ceil32(stor3.length.field_1) > stor3.length.field_1:
        mem[stor3.length.field_1 + ceil32(stor3.length.field_1) + 192] = 0
    return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), 
}

function symbol() {
    if bool(stor4.length):
        if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor4.length):
            if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor4.length):
                if 31 < uint255(stor4.length) * 0.5:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor4.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)])
                mem[128] = 256 * stor4.length.field_8
        else:
            if bool(stor4.length) == stor4.length.field_1 < 32:
                revert with 0, 34
            if stor4.length.field_1:
                if 31 < stor4.length.field_1:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while stor4.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)])
                mem[128] = 256 * stor4.length.field_8
        mem[ceil32(uint255(stor4.length) * 0.5) + 192 len ceil32(uint255(stor4.length) * 0.5)] = mem[128 len ceil32(uint255(stor4.length) * 0.5)]
        if ceil32(uint255(stor4.length) * 0.5) > uint255(stor4.length) * 0.5:
            mem[(uint255(stor4.length) * 0.5) + ceil32(uint255(stor4.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)], mem[(2 * ceil32(uint255(stor4.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor4.length) * 0.5)]), 
    if bool(stor4.length) == stor4.length.field_1 < 32:
        revert with 0, 34
    if bool(stor4.length):
        if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor4.length):
            if 31 < uint255(stor4.length) * 0.5:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while (uint255(stor4.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    else:
        if bool(stor4.length) == stor4.length.field_1 < 32:
            revert with 0, 34
        if stor4.length.field_1:
            if 31 < stor4.length.field_1:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while stor4.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]
    if ceil32(stor4.length.field_1) > stor4.length.field_1:
        mem[stor4.length.field_1 + ceil32(stor4.length.field_1) + 192] = 0
    return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), 
}

function release(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if not shares[address(arg2)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'PaymentSplitter: account has no shares'
    mem[100] = this.address
    require ext_code.size(arg1)
    staticcall arg1.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] > !totalReleased[address(arg1)]:
        revert with 0, 17
    if ext_call.return_data[0] + totalReleased[address(arg1)] and shares[address(arg2)] > -1 / ext_call.return_data[0] + totalReleased[address(arg1)]:
        revert with 0, 17
    if not totalShares:
        revert with 0, 18
    if (ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares < released[address(arg1)][address(arg2)]:
        revert with 0, 17
    if not ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]:
        revert with 0, 'PaymentSplitter: account is not due payment'
    if released[address(arg1)][address(arg2)] > !(((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]):
        revert with 0, 17
    released[address(arg1)][address(arg2)] = (ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares
    if totalReleased[address(arg1)] > !(((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]):
        revert with 0, 17
    totalReleased[address(arg1)] = totalReleased[address(arg1)] + ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]
    mem[ceil32(return_data.size) + 132] = arg2
    mem[ceil32(return_data.size) + 164] = ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]
    mem[ceil32(return_data.size) + 96] = 68
    mem[ceil32(return_data.size) + 132 len 28] = address(arg2) << 64
    mem[ceil32(return_data.size) + 128 len 4] = unknown_0xa9059cbb(?????)
    mem[ceil32(return_data.size) + 196] = 32
    mem[ceil32(return_data.size) + 228] = 'SafeERC20: low-level call failed'
    if not ext_code.size(arg1):
        revert with 0, 'Address: call to non-contract'
    mem[ceil32(return_data.size) + 260 len 96] = unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], 0
    mem[ceil32(return_data.size) + 328] = 0
    call arg1 with:
       funct Mask(32, 224, unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], 0) >> 224
         gas gas_remaining wei
        args (Mask(512, -288, unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], 0) << 288)
    if not return_data.size:
        if not ext_call.success:
            if ext_call.return_data[0]:
                revert with memory
                  from 128
                   len ext_call.return_data[0]
            revert with 0, 'SafeERC20: low-level call failed'
        if ext_call.return_data[0]:
            require ext_call.return_data[0] >= 32
            require uint32(this.address), mem[132 len 28] == bool(uint32(this.address), mem[132 len 28])
            if not uint32(this.address), mem[132 len 28]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[ceil32(return_data.size) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            require mem[ceil32(return_data.size) + 292] == bool(mem[ceil32(return_data.size) + 292])
            if not mem[ceil32(return_data.size) + 292]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    emit ERC20PaymentReleased(address(arg2), ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], arg1);
}

function cashoutAll() {
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'MANIA CSHT:  creation from the zero address'
    if stor35[address(msg.sender)]:
        revert with 0, 'MANIA CSHT: Blacklisted address'
    if treasuryPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
    if distributionPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
    mem[100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 0:
        revert with 0, 'MANIA CSHT: You don't have enough reward to cash out'
    if not uint8(stor27.field_8):
        if not distributionPoolAddress:
            revert with 0, 'ERC20: transfer from the zero address'
        if not msg.sender:
            revert with 0, 'ERC20: transfer to the zero address'
        if ext_call.return_data[0] > balanceOf[stor17]:
            revert with 0, 
                        32,
                        38,
                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                        0
        if balanceOf[stor17] < ext_call.return_data[0]:
            revert with 0, 17
        balanceOf[stor17] -= ext_call.return_data[0]
        if balanceOf[msg.sender] > !ext_call.return_data[0]:
            revert with 0, 17
        if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
            revert with 0, 'SafeMath: addition overflow'
        balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
        emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
    else:
        if not cashoutFee:
            if ext_call.return_data[0] < 0:
                revert with 0, 17
            if not distributionPoolAddress:
                revert with 0, 'ERC20: transfer from the zero address'
            if not msg.sender:
                revert with 0, 'ERC20: transfer to the zero address'
            if ext_call.return_data[0] > balanceOf[stor17]:
                revert with 0, 
                            32,
                            38,
                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                            0
            if balanceOf[stor17] < ext_call.return_data[0]:
                revert with 0, 17
            balanceOf[stor17] -= ext_call.return_data[0]
            if balanceOf[msg.sender] > !ext_call.return_data[0]:
                revert with 0, 17
            if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                revert with 0, 'SafeMath: addition overflow'
            balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
            emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
        else:
            if not ext_call.return_data[0]:
                mem[ceil32(return_data.size) + 96] = 26
                mem[ceil32(return_data.size) + 128] = 'SafeMath: division by zero'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                mem[0] = uniswapV2RouterAddress
                mem[32] = sha3(address(this.address), 1)
                allowance[address(this.address)][stor14].field_0 = 0
                mem[(2 * ceil32(return_data.size)) + 256] = 0
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = 0
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 512]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _171 = mem[64]
                mem[64] = mem[64] + 64
                mem[_171] = 30
                mem[_171 + 32] = 'SafeMath: subtraction overflow'
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call treasuryPoolAddress with:
                     gas 2300 wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if ext_call.return_data[0] < 0:
                    revert with 0, 17
                if not distributionPoolAddress:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not msg.sender:
                    revert with 0, 'ERC20: transfer to the zero address'
                _189 = mem[64]
                mem[64] = mem[64] + 96
                mem[_189] = 38
                mem[_189 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                if ext_call.return_data[0] > balanceOf[stor17]:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 38
                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_189 + 70 len 26]
                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                if balanceOf[stor17] < ext_call.return_data[0]:
                    revert with 0, 17
                balanceOf[stor17] -= ext_call.return_data[0]
                if balanceOf[msg.sender] > !ext_call.return_data[0]:
                    revert with 0, 17
                if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
                emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
            else:
                if ext_call.return_data[0] and cashoutFee > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0]:
                    revert with 0, 18
                if ext_call.return_data[0] * cashoutFee / ext_call.return_data[0] != cashoutFee:
                    revert with 0, 'SafeMath: multiplication overflow'
                mem[ceil32(return_data.size) + 96] = 26
                mem[ceil32(return_data.size) + 128] = 'SafeMath: division by zero'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                mem[0] = uniswapV2RouterAddress
                mem[32] = sha3(address(this.address), 1)
                allowance[address(this.address)][stor14].field_0 = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0] * cashoutFee / 100
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 512]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _170 = mem[64]
                mem[64] = mem[64] + 64
                mem[_170] = 30
                mem[_170 + 32] = 'SafeMath: subtraction overflow'
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call treasuryPoolAddress with:
                     gas 2300 wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if ext_call.return_data[0] < ext_call.return_data[0] * cashoutFee / 100:
                    revert with 0, 17
                if not distributionPoolAddress:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not msg.sender:
                    revert with 0, 'ERC20: transfer to the zero address'
                _186 = mem[64]
                mem[64] = mem[64] + 96
                mem[_186] = 38
                mem[_186 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                if ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) > balanceOf[stor17]:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 38
                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_186 + 70 len 26]
                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                if balanceOf[stor17] < ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100):
                    revert with 0, 17
                balanceOf[stor17] = balanceOf[stor17] - ext_call.return_data[0] + (ext_call.return_data[0] * cashoutFee / 100)
                if balanceOf[msg.sender] > !(ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)):
                    revert with 0, 17
                if balanceOf[msg.sender] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) < balanceOf[msg.sender]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)
                emit Transfer((ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)), distributionPoolAddress, msg.sender);
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._cashoutAllNodesReward(address arg1) with:
         gas gas_remaining wei
        args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function cashoutReward(uint256 arg1) {
    require calldata.size - 4 >= 32
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'CSHT:  creation from the zero address'
    if stor35[address(msg.sender)]:
        revert with 0, 'MANIA CSHT: Blacklisted address'
    if treasuryPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'CSHT: futur and rewardsPool cannot cashout rewards'
    if distributionPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'CSHT: futur and rewardsPool cannot cashout rewards'
    mem[100] = msg.sender
    mem[132] = arg1
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1, uint256 arg2) with:
            gas gas_remaining wei
           args msg.sender, arg1
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 0:
        revert with 0, 'CSHT: You don't have enough reward to cash out'
    if not uint8(stor27.field_8):
        if not distributionPoolAddress:
            revert with 0, 'ERC20: transfer from the zero address'
        if not msg.sender:
            revert with 0, 'ERC20: transfer to the zero address'
        if ext_call.return_data[0] > balanceOf[stor17]:
            revert with 0, 
                        32,
                        38,
                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                        0
        if balanceOf[stor17] < ext_call.return_data[0]:
            revert with 0, 17
        balanceOf[stor17] -= ext_call.return_data[0]
        if balanceOf[msg.sender] > !ext_call.return_data[0]:
            revert with 0, 17
        if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
            revert with 0, 'SafeMath: addition overflow'
        balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
        emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
    else:
        if not cashoutFee:
            if ext_call.return_data[0] < 0:
                revert with 0, 17
            if not distributionPoolAddress:
                revert with 0, 'ERC20: transfer from the zero address'
            if not msg.sender:
                revert with 0, 'ERC20: transfer to the zero address'
            if ext_call.return_data[0] > balanceOf[stor17]:
                revert with 0, 
                            32,
                            38,
                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                            0
            if balanceOf[stor17] < ext_call.return_data[0]:
                revert with 0, 17
            balanceOf[stor17] -= ext_call.return_data[0]
            if balanceOf[msg.sender] > !ext_call.return_data[0]:
                revert with 0, 17
            if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                revert with 0, 'SafeMath: addition overflow'
            balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
            emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
        else:
            if not ext_call.return_data[0]:
                mem[ceil32(return_data.size) + 96] = 26
                mem[ceil32(return_data.size) + 128] = 'SafeMath: division by zero'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                mem[0] = uniswapV2RouterAddress
                mem[32] = sha3(address(this.address), 1)
                allowance[address(this.address)][stor14].field_0 = 0
                mem[(2 * ceil32(return_data.size)) + 256] = 0
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = 0
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 512]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _171 = mem[64]
                mem[64] = mem[64] + 64
                mem[_171] = 30
                mem[_171 + 32] = 'SafeMath: subtraction overflow'
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call treasuryPoolAddress with:
                     gas 2300 wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if ext_call.return_data[0] < 0:
                    revert with 0, 17
                if not distributionPoolAddress:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not msg.sender:
                    revert with 0, 'ERC20: transfer to the zero address'
                _189 = mem[64]
                mem[64] = mem[64] + 96
                mem[_189] = 38
                mem[_189 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                if ext_call.return_data[0] > balanceOf[stor17]:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 38
                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_189 + 70 len 26]
                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                if balanceOf[stor17] < ext_call.return_data[0]:
                    revert with 0, 17
                balanceOf[stor17] -= ext_call.return_data[0]
                if balanceOf[msg.sender] > !ext_call.return_data[0]:
                    revert with 0, 17
                if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
                emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
            else:
                if ext_call.return_data[0] and cashoutFee > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0]:
                    revert with 0, 18
                if ext_call.return_data[0] * cashoutFee / ext_call.return_data[0] != cashoutFee:
                    revert with 0, 'SafeMath: multiplication overflow'
                mem[ceil32(return_data.size) + 96] = 26
                mem[ceil32(return_data.size) + 128] = 'SafeMath: division by zero'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                mem[0] = uniswapV2RouterAddress
                mem[32] = sha3(address(this.address), 1)
                allowance[address(this.address)][stor14].field_0 = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0] * cashoutFee / 100
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 512]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _170 = mem[64]
                mem[64] = mem[64] + 64
                mem[_170] = 30
                mem[_170 + 32] = 'SafeMath: subtraction overflow'
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call treasuryPoolAddress with:
                     gas 2300 wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if ext_call.return_data[0] < ext_call.return_data[0] * cashoutFee / 100:
                    revert with 0, 17
                if not distributionPoolAddress:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not msg.sender:
                    revert with 0, 'ERC20: transfer to the zero address'
                _186 = mem[64]
                mem[64] = mem[64] + 96
                mem[_186] = 38
                mem[_186 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                if ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) > balanceOf[stor17]:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 38
                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_186 + 70 len 26]
                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                if balanceOf[stor17] < ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100):
                    revert with 0, 17
                balanceOf[stor17] = balanceOf[stor17] - ext_call.return_data[0] + (ext_call.return_data[0] * cashoutFee / 100)
                if balanceOf[msg.sender] > !(ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)):
                    revert with 0, 17
                if balanceOf[msg.sender] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) < balanceOf[msg.sender]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)
                emit Transfer((ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)), distributionPoolAddress, msg.sender);
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._cashoutNodeReward(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function addAllNodeValue() {
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'MANIA CSHT:  creation from the zero address'
    if stor35[address(msg.sender)]:
        revert with 0, 'MANIA CSHT: Blacklisted address'
    if treasuryPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur, dev and rewardsPool cannot cashout rewards'
    if distributionPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur, dev and rewardsPool cannot cashout rewards'
    if devPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur, dev and rewardsPool cannot cashout rewards'
    mem[100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 0:
        revert with 0, 'MANIA CSHT: You don't have enough reward to compound'
    if not uint8(stor27.field_8):
        if not distributionPoolAddress:
            revert with 0, 'ERC20: transfer from the zero address'
        if not this.address:
            revert with 0, 'ERC20: transfer to the zero address'
        if ext_call.return_data[0] > balanceOf[stor17]:
            revert with 0, 
                        32,
                        38,
                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                        0
        if balanceOf[stor17] < ext_call.return_data[0]:
            revert with 0, 17
        balanceOf[stor17] -= ext_call.return_data[0]
        if balanceOf[this.address] > !ext_call.return_data[0]:
            revert with 0, 17
        if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
            revert with 0, 'SafeMath: addition overflow'
        balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
        emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
    else:
        if not cashoutFee:
            if ext_call.return_data[0] < 0:
                revert with 0, 17
            if not distributionPoolAddress:
                revert with 0, 'ERC20: transfer from the zero address'
            if not this.address:
                revert with 0, 'ERC20: transfer to the zero address'
            if ext_call.return_data[0] > balanceOf[stor17]:
                revert with 0, 
                            32,
                            38,
                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                            0
            if balanceOf[stor17] < ext_call.return_data[0]:
                revert with 0, 17
            balanceOf[stor17] -= ext_call.return_data[0]
            if balanceOf[this.address] > !ext_call.return_data[0]:
                revert with 0, 17
            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                revert with 0, 'SafeMath: addition overflow'
            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
            emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
        else:
            if not ext_call.return_data[0]:
                mem[ceil32(return_data.size) + 96] = 26
                mem[ceil32(return_data.size) + 128] = 'SafeMath: division by zero'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                mem[0] = uniswapV2RouterAddress
                mem[32] = sha3(address(this.address), 1)
                allowance[address(this.address)][stor14].field_0 = 0
                mem[(2 * ceil32(return_data.size)) + 256] = 0
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = 0
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 512]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _173 = mem[64]
                mem[64] = mem[64] + 64
                mem[_173] = 30
                mem[_173 + 32] = 'SafeMath: subtraction overflow'
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call devPoolAddress with:
                     gas 2300 wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if ext_call.return_data[0] < 0:
                    revert with 0, 17
                if not distributionPoolAddress:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not this.address:
                    revert with 0, 'ERC20: transfer to the zero address'
                _191 = mem[64]
                mem[64] = mem[64] + 96
                mem[_191] = 38
                mem[_191 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                if ext_call.return_data[0] > balanceOf[stor17]:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 38
                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_191 + 70 len 26]
                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                if balanceOf[stor17] < ext_call.return_data[0]:
                    revert with 0, 17
                balanceOf[stor17] -= ext_call.return_data[0]
                if balanceOf[this.address] > !ext_call.return_data[0]:
                    revert with 0, 17
                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
            else:
                if ext_call.return_data[0] and cashoutFee > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0]:
                    revert with 0, 18
                if ext_call.return_data[0] * cashoutFee / ext_call.return_data[0] != cashoutFee:
                    revert with 0, 'SafeMath: multiplication overflow'
                mem[ceil32(return_data.size) + 96] = 26
                mem[ceil32(return_data.size) + 128] = 'SafeMath: division by zero'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                mem[0] = uniswapV2RouterAddress
                mem[32] = sha3(address(this.address), 1)
                allowance[address(this.address)][stor14].field_0 = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0] * cashoutFee / 100
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 512]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _172 = mem[64]
                mem[64] = mem[64] + 64
                mem[_172] = 30
                mem[_172 + 32] = 'SafeMath: subtraction overflow'
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call devPoolAddress with:
                     gas 2300 wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if ext_call.return_data[0] < ext_call.return_data[0] * cashoutFee / 100:
                    revert with 0, 17
                if not distributionPoolAddress:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not this.address:
                    revert with 0, 'ERC20: transfer to the zero address'
                _188 = mem[64]
                mem[64] = mem[64] + 96
                mem[_188] = 38
                mem[_188 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                if ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) > balanceOf[stor17]:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 38
                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_188 + 70 len 26]
                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                if balanceOf[stor17] < ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100):
                    revert with 0, 17
                balanceOf[stor17] = balanceOf[stor17] - ext_call.return_data[0] + (ext_call.return_data[0] * cashoutFee / 100)
                if balanceOf[this.address] > !(ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)):
                    revert with 0, 17
                if balanceOf[this.address] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) < balanceOf[this.address]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)
                emit Transfer((ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)), distributionPoolAddress, this.address);
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._addAllNodeValue(address arg1) with:
         gas gas_remaining wei
        args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function addNodeValue(uint256 arg1) {
    require calldata.size - 4 >= 32
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'CSHT:  creation from the zero address'
    if stor35[address(msg.sender)]:
        revert with 0, 'MANIA CSHT: Blacklisted address'
    if treasuryPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'CSHT: futur, dev and rewardsPool cannot compound nodes'
    if distributionPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'CSHT: futur, dev and rewardsPool cannot compound nodes'
    if devPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'CSHT: futur, dev and rewardsPool cannot compound nodes'
    mem[100] = msg.sender
    mem[132] = arg1
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1, uint256 arg2) with:
            gas gas_remaining wei
           args msg.sender, arg1
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 0:
        revert with 0, 'CSHT: You don't have enough reward to compound your node'
    if not uint8(stor27.field_8):
        if not distributionPoolAddress:
            revert with 0, 'ERC20: transfer from the zero address'
        if not this.address:
            revert with 0, 'ERC20: transfer to the zero address'
        if ext_call.return_data[0] > balanceOf[stor17]:
            revert with 0, 
                        32,
                        38,
                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                        0
        if balanceOf[stor17] < ext_call.return_data[0]:
            revert with 0, 17
        balanceOf[stor17] -= ext_call.return_data[0]
        if balanceOf[this.address] > !ext_call.return_data[0]:
            revert with 0, 17
        if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
            revert with 0, 'SafeMath: addition overflow'
        balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
        emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
    else:
        if not cashoutFee:
            if ext_call.return_data[0] < 0:
                revert with 0, 17
            if not distributionPoolAddress:
                revert with 0, 'ERC20: transfer from the zero address'
            if not this.address:
                revert with 0, 'ERC20: transfer to the zero address'
            if ext_call.return_data[0] > balanceOf[stor17]:
                revert with 0, 
                            32,
                            38,
                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                            0
            if balanceOf[stor17] < ext_call.return_data[0]:
                revert with 0, 17
            balanceOf[stor17] -= ext_call.return_data[0]
            if balanceOf[this.address] > !ext_call.return_data[0]:
                revert with 0, 17
            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                revert with 0, 'SafeMath: addition overflow'
            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
            emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
        else:
            if not ext_call.return_data[0]:
                mem[ceil32(return_data.size) + 96] = 26
                mem[ceil32(return_data.size) + 128] = 'SafeMath: division by zero'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                mem[0] = uniswapV2RouterAddress
                mem[32] = sha3(address(this.address), 1)
                allowance[address(this.address)][stor14].field_0 = 0
                mem[(2 * ceil32(return_data.size)) + 256] = 0
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = 0
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 512]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _173 = mem[64]
                mem[64] = mem[64] + 64
                mem[_173] = 30
                mem[_173 + 32] = 'SafeMath: subtraction overflow'
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call devPoolAddress with:
                     gas 2300 wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if ext_call.return_data[0] < 0:
                    revert with 0, 17
                if not distributionPoolAddress:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not this.address:
                    revert with 0, 'ERC20: transfer to the zero address'
                _191 = mem[64]
                mem[64] = mem[64] + 96
                mem[_191] = 38
                mem[_191 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                if ext_call.return_data[0] > balanceOf[stor17]:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 38
                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_191 + 70 len 26]
                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                if balanceOf[stor17] < ext_call.return_data[0]:
                    revert with 0, 17
                balanceOf[stor17] -= ext_call.return_data[0]
                if balanceOf[this.address] > !ext_call.return_data[0]:
                    revert with 0, 17
                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
            else:
                if ext_call.return_data[0] and cashoutFee > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0]:
                    revert with 0, 18
                if ext_call.return_data[0] * cashoutFee / ext_call.return_data[0] != cashoutFee:
                    revert with 0, 'SafeMath: multiplication overflow'
                mem[ceil32(return_data.size) + 96] = 26
                mem[ceil32(return_data.size) + 128] = 'SafeMath: division by zero'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                mem[0] = uniswapV2RouterAddress
                mem[32] = sha3(address(this.address), 1)
                allowance[address(this.address)][stor14].field_0 = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0] * cashoutFee / 100
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 512]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _172 = mem[64]
                mem[64] = mem[64] + 64
                mem[_172] = 30
                mem[_172 + 32] = 'SafeMath: subtraction overflow'
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call devPoolAddress with:
                     gas 2300 wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if ext_call.return_data[0] < ext_call.return_data[0] * cashoutFee / 100:
                    revert with 0, 17
                if not distributionPoolAddress:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not this.address:
                    revert with 0, 'ERC20: transfer to the zero address'
                _188 = mem[64]
                mem[64] = mem[64] + 96
                mem[_188] = 38
                mem[_188 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                if ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) > balanceOf[stor17]:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 38
                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_188 + 70 len 26]
                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                if balanceOf[stor17] < ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100):
                    revert with 0, 17
                balanceOf[stor17] = balanceOf[stor17] - ext_call.return_data[0] + (ext_call.return_data[0] * cashoutFee / 100)
                if balanceOf[this.address] > !(ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)):
                    revert with 0, 17
                if balanceOf[this.address] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) < balanceOf[this.address]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)
                emit Transfer((ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)), distributionPoolAddress, this.address);
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._addNodeValue(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function transfer(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if stor35[address(msg.sender)]:
        revert with 0, 'Blacklisted address'
    if stor35[address(arg1)]:
        revert with 0, 'Blacklisted address'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if uniswapV2RouterAddress != arg1:
        if owner == msg.sender:
            if not msg.sender:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
            if not arg1:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
            if arg2 > balanceOf[address(msg.sender)]:
                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
        else:
            if uniswapV2PairAddress == arg1:
                if not msg.sender:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                if not arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                if arg2 > balanceOf[address(msg.sender)]:
                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
            else:
                if uniswapV2RouterAddress == arg1:
                    if not msg.sender:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                    if arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                else:
                    if this.address == arg1:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                    else:
                        if this.address == msg.sender:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        else:
                            if not uint8(stor29.field_0):
                                revert with 0, 'Trading not yet enabled.'
                            if treasuryPoolAddress == arg1:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            else:
                                if distributionPoolAddress == arg1:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                else:
                                    if devPoolAddress == arg1:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    else:
                                        if treasuryPoolAddress == msg.sender:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        else:
                                            if distributionPoolAddress == msg.sender:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            else:
                                                if devPoolAddress == msg.sender:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                else:
                                                    if not totalSupply:
                                                        if arg2 > !balanceOf[address(arg1)]:
                                                            revert with 0, 17
                                                        if arg2 + balanceOf[address(arg1)] < arg2:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 + balanceOf[address(arg1)] > 0:
                                                            revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                    else:
                                                        if totalSupply and stor34 > -1 / totalSupply:
                                                            revert with 0, 17
                                                        if not totalSupply:
                                                            revert with 0, 18
                                                        if totalSupply * stor34 / totalSupply != stor34:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                        if arg2 > !balanceOf[address(arg1)]:
                                                            revert with 0, 17
                                                        if arg2 + balanceOf[address(arg1)] < arg2:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 + balanceOf[address(arg1)] > totalSupply * stor34 / 10000:
                                                            revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[230 len 26] >> 48, 0
        ('le', ('param', 'arg2'), ('stor', ('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('name', 'balanceOf', 0))))
        if balanceOf[address(msg.sender)] < arg2:
            revert with 0, 17
        balanceOf[address(msg.sender)] -= arg2
        if balanceOf[arg1] > !arg2:
            revert with 0, 17
        if balanceOf[arg1] + arg2 < balanceOf[arg1]:
            revert with 0, 'SafeMath: addition overflow'
        balanceOf[address(arg1)] = balanceOf[arg1] + arg2
        emit Transfer(arg2, msg.sender, arg1);
    else:
        if this.address == msg.sender:
            if owner == msg.sender:
                if not msg.sender:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                if not arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                if arg2 > balanceOf[address(msg.sender)]:
                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
            else:
                if uniswapV2PairAddress == arg1:
                    if not msg.sender:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                    if arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                else:
                    if uniswapV2RouterAddress == arg1:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                    else:
                        if this.address == arg1:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        else:
                            if this.address == msg.sender:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            else:
                                if not uint8(stor29.field_0):
                                    revert with 0, 'Trading not yet enabled.'
                                if treasuryPoolAddress == arg1:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                else:
                                    if distributionPoolAddress == arg1:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    else:
                                        if devPoolAddress == arg1:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        else:
                                            if treasuryPoolAddress == msg.sender:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            else:
                                                if distributionPoolAddress == msg.sender:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                else:
                                                    if devPoolAddress == msg.sender:
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                    else:
                                                        if not totalSupply:
                                                            if arg2 > !balanceOf[address(arg1)]:
                                                                revert with 0, 17
                                                            if arg2 + balanceOf[address(arg1)] < arg2:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if arg2 + balanceOf[address(arg1)] > 0:
                                                                revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                        else:
                                                            if totalSupply and stor34 > -1 / totalSupply:
                                                                revert with 0, 17
                                                            if not totalSupply:
                                                                revert with 0, 18
                                                            if totalSupply * stor34 / totalSupply != stor34:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                            if arg2 > !balanceOf[address(arg1)]:
                                                                revert with 0, 17
                                                            if arg2 + balanceOf[address(arg1)] < arg2:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if arg2 + balanceOf[address(arg1)] > totalSupply * stor34 / 10000:
                                                                revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[230 len 26] >> 48, 0
            ('le', ('param', 'arg2'), ('stor', ('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('name', 'balanceOf', 0))))
            if balanceOf[address(msg.sender)] < arg2:
                revert with 0, 17
            balanceOf[address(msg.sender)] -= arg2
            if balanceOf[arg1] > !arg2:
                revert with 0, 17
            if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                revert with 0, 'SafeMath: addition overflow'
            balanceOf[address(arg1)] = balanceOf[arg1] + arg2
            emit Transfer(arg2, msg.sender, arg1);
        else:
            if owner == msg.sender:
                if not msg.sender:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                if not arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                if arg2 > balanceOf[address(msg.sender)]:
                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                if balanceOf[address(msg.sender)] < arg2:
                    revert with 0, 17
                balanceOf[address(msg.sender)] -= arg2
                if balanceOf[arg1] > !arg2:
                    revert with 0, 17
                if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                emit Transfer(arg2, msg.sender, arg1);
            else:
                require ext_code.size(nodeRewardManagerAddress)
                staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'You need to own a node to be able to sell'
                if not arg2:
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not stor33:
                        revert with 0, 'ERC20: transfer to the zero address'
                    if 0 > balanceOf[address(msg.sender)]:
                        revert with 0, 
                                    32,
                                    38,
                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 230 len 26] >> 48,
                                    0
                    if balanceOf[address(msg.sender)] < 0:
                        revert with 0, 17
                    if balanceOf[stor33] > -1:
                        revert with 0, 17
                    if balanceOf[stor33] < balanceOf[stor33]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[stor33] = balanceOf[stor33]
                    emit Transfer(0, msg.sender, stor33);
                    if 0 > arg2:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if arg2 < 0:
                        revert with 0, 17
                    if owner == msg.sender:
                        if not msg.sender:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 
                                        32,
                                        38,
                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                        0
                    else:
                        if uniswapV2PairAddress == arg1:
                            if not msg.sender:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 
                                            32,
                                            38,
                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                            0
                        else:
                            if uniswapV2RouterAddress == arg1:
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 
                                                32,
                                                38,
                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                0
                            else:
                                if this.address == arg1:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                    0
                                else:
                                    if this.address == msg.sender:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                        0
                                    else:
                                        if not uint8(stor29.field_0):
                                            revert with 0, 'Trading not yet enabled.'
                                        if treasuryPoolAddress == arg1:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                            0
                                        else:
                                            if distributionPoolAddress == arg1:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 
                                                                32,
                                                                38,
                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                0
                                            else:
                                                if devPoolAddress == arg1:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 
                                                                    32,
                                                                    38,
                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                    0
                                                else:
                                                    if treasuryPoolAddress == msg.sender:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 
                                                                        32,
                                                                        38,
                                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                        0
                                                    else:
                                                        if distributionPoolAddress == msg.sender:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 
                                                                            32,
                                                                            38,
                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                            0
                                                        else:
                                                            if devPoolAddress == msg.sender:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if arg2 > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 
                                                                                32,
                                                                                38,
                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                                0
                                                            else:
                                                                if not totalSupply:
                                                                    if arg2 > !balanceOf[address(arg1)]:
                                                                        revert with 0, 17
                                                                    if arg2 + balanceOf[address(arg1)] < arg2:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    if arg2 + balanceOf[address(arg1)] > 0:
                                                                        revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                else:
                                                                    if totalSupply and stor34 > -1 / totalSupply:
                                                                        revert with 0, 17
                                                                    if not totalSupply:
                                                                        revert with 0, 18
                                                                    if totalSupply * stor34 / totalSupply != stor34:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    if arg2 > !balanceOf[address(arg1)]:
                                                                        revert with 0, 17
                                                                    if arg2 + balanceOf[address(arg1)] < arg2:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    if arg2 + balanceOf[address(arg1)] > totalSupply * stor34 / 10000:
                                                                        revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if arg2 > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 
                                                                                32,
                                                                                38,
                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 454 len 26] >> 48,
                                                                                0
                    ('le', ('param', 'arg2'), ('stor', ('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('name', 'balanceOf', 0))))
                    if balanceOf[address(msg.sender)] < arg2:
                        revert with 0, 17
                    balanceOf[address(msg.sender)] -= arg2
                    if balanceOf[arg1] > !arg2:
                        revert with 0, 17
                    if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                    emit Transfer(arg2, msg.sender, arg1);
                else:
                    if arg2 and sellTax > -1 / arg2:
                        revert with 0, 17
                    if not arg2:
                        revert with 0, 18
                    if arg2 * sellTax / arg2 != sellTax:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not stor33:
                        revert with 0, 'ERC20: transfer to the zero address'
                    if arg2 * sellTax / 100 > balanceOf[address(msg.sender)]:
                        revert with 0, 
                                    32,
                                    38,
                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 230 len 26] >> 48,
                                    0
                    if balanceOf[address(msg.sender)] < arg2 * sellTax / 100:
                        revert with 0, 17
                    balanceOf[address(msg.sender)] -= arg2 * sellTax / 100
                    if balanceOf[stor33] > !(arg2 * sellTax / 100):
                        revert with 0, 17
                    if balanceOf[stor33] + (arg2 * sellTax / 100) < balanceOf[stor33]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[stor33] += arg2 * sellTax / 100
                    emit Transfer((arg2 * sellTax / 100), msg.sender, stor33);
                    if arg2 * sellTax / 100 > arg2:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if arg2 < arg2 * sellTax / 100:
                        revert with 0, 17
                    if owner == msg.sender:
                        if not msg.sender:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0, 'ERC20: transfer to the zero address'
                        if arg2 - (arg2 * sellTax / 100) > balanceOf[address(msg.sender)]:
                            revert with 0, 
                                        32,
                                        38,
                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                        0
                    else:
                        if uniswapV2PairAddress == arg1:
                            if not msg.sender:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0, 'ERC20: transfer to the zero address'
                            if arg2 - (arg2 * sellTax / 100) > balanceOf[address(msg.sender)]:
                                revert with 0, 
                                            32,
                                            38,
                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                            0
                        else:
                            if uniswapV2RouterAddress == arg1:
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 - (arg2 * sellTax / 100) > balanceOf[address(msg.sender)]:
                                    revert with 0, 
                                                32,
                                                38,
                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                0
                            else:
                                if this.address == arg1:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * sellTax / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                    0
                                else:
                                    if this.address == msg.sender:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * sellTax / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                        0
                                    else:
                                        if not uint8(stor29.field_0):
                                            revert with 0, 'Trading not yet enabled.'
                                        if treasuryPoolAddress == arg1:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                            0
                                        else:
                                            if distributionPoolAddress == arg1:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 
                                                                32,
                                                                38,
                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                0
                                            else:
                                                if devPoolAddress == arg1:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 
                                                                    32,
                                                                    38,
                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                    0
                                                else:
                                                    if treasuryPoolAddress == msg.sender:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 
                                                                        32,
                                                                        38,
                                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                        0
                                                    else:
                                                        if distributionPoolAddress == msg.sender:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 
                                                                            32,
                                                                            38,
                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                            0
                                                        else:
                                                            if devPoolAddress == msg.sender:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if arg2 - (arg2 * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 
                                                                                32,
                                                                                38,
                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                                0
                                                            else:
                                                                if not totalSupply:
                                                                    if arg2 - (arg2 * sellTax / 100) > !balanceOf[address(arg1)]:
                                                                        revert with 0, 17
                                                                    if balanceOf[address(arg1)] < 0:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    if arg2 - (arg2 * sellTax / 100) + balanceOf[address(arg1)] > 0:
                                                                        revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                else:
                                                                    if totalSupply and stor34 > -1 / totalSupply:
                                                                        revert with 0, 17
                                                                    if not totalSupply:
                                                                        revert with 0, 18
                                                                    if totalSupply * stor34 / totalSupply != stor34:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    if arg2 - (arg2 * sellTax / 100) > !balanceOf[address(arg1)]:
                                                                        revert with 0, 17
                                                                    if balanceOf[address(arg1)] < 0:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    if arg2 - (arg2 * sellTax / 100) + balanceOf[address(arg1)] > totalSupply * stor34 / 10000:
                                                                        revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if arg2 - (arg2 * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 
                                                                                32,
                                                                                38,
                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 454 len 26] >> 48,
                                                                                0
                    ('le', ('add', ('param', 'arg2'), ('mul', -1, ('div', ('mul', ('param', 'arg2'), ('stor', ('name', 'sellTax', 32))), 100))), ('stor', ('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('name', 'balanceOf', 0))))
                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * sellTax / 100):
                        revert with 0, 17
                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * sellTax / 100)
                    if balanceOf[arg1] > !(arg2 - (arg2 * sellTax / 100)):
                        revert with 0, 17
                    if balanceOf[arg1] + arg2 - (arg2 * sellTax / 100) < balanceOf[arg1]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * sellTax / 100)
                    emit Transfer((arg2 - (arg2 * sellTax / 100)), msg.sender, arg1);
    return 1
}

function transferFrom(address arg1, address arg2, uint256 arg3) {
    require calldata.size - 4 >= 96
    require arg1 == arg1
    require arg2 == arg2
    if stor35[address(arg1)]:
        revert with 0, 'Blacklisted address'
    if stor35[address(arg2)]:
        revert with 0, 'Blacklisted address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if uniswapV2RouterAddress != arg2:
        if owner == arg1:
            if not arg1:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
            if not arg2:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
            if arg3 > balanceOf[address(arg1)]:
                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
            if balanceOf[address(arg1)] < arg3:
                revert with 0, 17
            balanceOf[address(arg1)] -= arg3
            if balanceOf[arg2] > !arg3:
                revert with 0, 17
            if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                revert with 0, 'SafeMath: addition overflow'
            balanceOf[address(arg2)] = balanceOf[arg2] + arg3
            emit Transfer(arg3, arg1, arg2);
            if arg3 > allowance[address(arg1)][msg.sender].field_0:
                revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
        else:
            if uniswapV2PairAddress == arg2:
                if not arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                if not arg2:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                if arg3 > balanceOf[address(arg1)]:
                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                if balanceOf[address(arg1)] < arg3:
                    revert with 0, 17
                balanceOf[address(arg1)] -= arg3
                if balanceOf[arg2] > !arg3:
                    revert with 0, 17
                if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                emit Transfer(arg3, arg1, arg2);
                if arg3 > allowance[address(arg1)][msg.sender].field_0:
                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
            else:
                if uniswapV2RouterAddress == arg2:
                    if not arg1:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                    if not arg2:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                    if arg3 > balanceOf[address(arg1)]:
                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                    if balanceOf[address(arg1)] < arg3:
                        revert with 0, 17
                    balanceOf[address(arg1)] -= arg3
                    if balanceOf[arg2] > !arg3:
                        revert with 0, 17
                    if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                    emit Transfer(arg3, arg1, arg2);
                    if arg3 > allowance[address(arg1)][msg.sender].field_0:
                        revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                else:
                    if this.address == arg2:
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg2:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg3 > balanceOf[address(arg1)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(arg1)] < arg3:
                            revert with 0, 17
                        balanceOf[address(arg1)] -= arg3
                        if balanceOf[arg2] > !arg3:
                            revert with 0, 17
                        if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                        emit Transfer(arg3, arg1, arg2);
                        if arg3 > allowance[address(arg1)][msg.sender].field_0:
                            revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                    else:
                        if this.address == arg1:
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg2:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg3 > balanceOf[address(arg1)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(arg1)] < arg3:
                                revert with 0, 17
                            balanceOf[address(arg1)] -= arg3
                            if balanceOf[arg2] > !arg3:
                                revert with 0, 17
                            if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                            emit Transfer(arg3, arg1, arg2);
                            if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                        else:
                            if not uint8(stor29.field_0):
                                revert with 0, 'Trading not yet enabled.'
                            if treasuryPoolAddress == arg2:
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg2:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg3 > balanceOf[address(arg1)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(arg1)] < arg3:
                                    revert with 0, 17
                                balanceOf[address(arg1)] -= arg3
                                if balanceOf[arg2] > !arg3:
                                    revert with 0, 17
                                if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                emit Transfer(arg3, arg1, arg2);
                                if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                            else:
                                if distributionPoolAddress == arg2:
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg3 > balanceOf[address(arg1)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(arg1)] < arg3:
                                        revert with 0, 17
                                    balanceOf[address(arg1)] -= arg3
                                    if balanceOf[arg2] > !arg3:
                                        revert with 0, 17
                                    if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                    emit Transfer(arg3, arg1, arg2);
                                    if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                        revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                                else:
                                    if devPoolAddress == arg2:
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg3 > balanceOf[address(arg1)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(arg1)] < arg3:
                                            revert with 0, 17
                                        balanceOf[address(arg1)] -= arg3
                                        if balanceOf[arg2] > !arg3:
                                            revert with 0, 17
                                        if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                        emit Transfer(arg3, arg1, arg2);
                                        if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                            revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                                    else:
                                        if treasuryPoolAddress == arg1:
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg3 > balanceOf[address(arg1)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(arg1)] < arg3:
                                                revert with 0, 17
                                            balanceOf[address(arg1)] -= arg3
                                            if balanceOf[arg2] > !arg3:
                                                revert with 0, 17
                                            if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                            emit Transfer(arg3, arg1, arg2);
                                            if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                                        else:
                                            if distributionPoolAddress == arg1:
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg3 > balanceOf[address(arg1)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(arg1)] < arg3:
                                                    revert with 0, 17
                                                balanceOf[address(arg1)] -= arg3
                                                if balanceOf[arg2] > !arg3:
                                                    revert with 0, 17
                                                if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                                emit Transfer(arg3, arg1, arg2);
                                                if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                                            else:
                                                if devPoolAddress == arg1:
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if arg3 > balanceOf[address(arg1)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                    if balanceOf[address(arg1)] < arg3:
                                                        revert with 0, 17
                                                    balanceOf[address(arg1)] -= arg3
                                                    if balanceOf[arg2] > !arg3:
                                                        revert with 0, 17
                                                    if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                                    emit Transfer(arg3, arg1, arg2);
                                                    if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                        revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                                                else:
                                                    if not totalSupply:
                                                        if arg3 > !balanceOf[address(arg2)]:
                                                            revert with 0, 17
                                                        if arg3 + balanceOf[address(arg2)] < arg3:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg3 + balanceOf[address(arg2)] > 0:
                                                            revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                    else:
                                                        if totalSupply and stor34 > -1 / totalSupply:
                                                            revert with 0, 17
                                                        if not totalSupply:
                                                            revert with 0, 18
                                                        if totalSupply * stor34 / totalSupply != stor34:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                        if arg3 > !balanceOf[address(arg2)]:
                                                            revert with 0, 17
                                                        if arg3 + balanceOf[address(arg2)] < arg3:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg3 + balanceOf[address(arg2)] > totalSupply * stor34 / 10000:
                                                            revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg2:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg3 > balanceOf[address(arg1)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[230 len 26] >> 48, 0
                                                    if balanceOf[address(arg1)] < arg3:
                                                        revert with 0, 17
                                                    balanceOf[address(arg1)] -= arg3
                                                    if balanceOf[arg2] > !arg3:
                                                        revert with 0, 17
                                                    if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                                    emit Transfer(arg3, arg1, arg2);
                                                    if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                        revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[328 len 24] >> 64, 0
    else:
        if this.address == arg1:
            if owner == arg1:
                if not arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                if not arg2:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                if arg3 > balanceOf[address(arg1)]:
                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                if balanceOf[address(arg1)] < arg3:
                    revert with 0, 17
                balanceOf[address(arg1)] -= arg3
                if balanceOf[arg2] > !arg3:
                    revert with 0, 17
                if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                emit Transfer(arg3, arg1, arg2);
                if arg3 > allowance[address(arg1)][msg.sender].field_0:
                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
            else:
                if uniswapV2PairAddress == arg2:
                    if not arg1:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                    if not arg2:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                    if arg3 > balanceOf[address(arg1)]:
                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                    if balanceOf[address(arg1)] < arg3:
                        revert with 0, 17
                    balanceOf[address(arg1)] -= arg3
                    if balanceOf[arg2] > !arg3:
                        revert with 0, 17
                    if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                    emit Transfer(arg3, arg1, arg2);
                    if arg3 > allowance[address(arg1)][msg.sender].field_0:
                        revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                else:
                    if uniswapV2RouterAddress == arg2:
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg2:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg3 > balanceOf[address(arg1)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(arg1)] < arg3:
                            revert with 0, 17
                        balanceOf[address(arg1)] -= arg3
                        if balanceOf[arg2] > !arg3:
                            revert with 0, 17
                        if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                        emit Transfer(arg3, arg1, arg2);
                        if arg3 > allowance[address(arg1)][msg.sender].field_0:
                            revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                    else:
                        if this.address == arg2:
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg2:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg3 > balanceOf[address(arg1)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(arg1)] < arg3:
                                revert with 0, 17
                            balanceOf[address(arg1)] -= arg3
                            if balanceOf[arg2] > !arg3:
                                revert with 0, 17
                            if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                            emit Transfer(arg3, arg1, arg2);
                            if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                        else:
                            if this.address == arg1:
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg2:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg3 > balanceOf[address(arg1)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(arg1)] < arg3:
                                    revert with 0, 17
                                balanceOf[address(arg1)] -= arg3
                                if balanceOf[arg2] > !arg3:
                                    revert with 0, 17
                                if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                emit Transfer(arg3, arg1, arg2);
                                if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                            else:
                                if not uint8(stor29.field_0):
                                    revert with 0, 'Trading not yet enabled.'
                                if treasuryPoolAddress == arg2:
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg3 > balanceOf[address(arg1)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(arg1)] < arg3:
                                        revert with 0, 17
                                    balanceOf[address(arg1)] -= arg3
                                    if balanceOf[arg2] > !arg3:
                                        revert with 0, 17
                                    if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                    emit Transfer(arg3, arg1, arg2);
                                    if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                        revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                                else:
                                    if distributionPoolAddress == arg2:
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg3 > balanceOf[address(arg1)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(arg1)] < arg3:
                                            revert with 0, 17
                                        balanceOf[address(arg1)] -= arg3
                                        if balanceOf[arg2] > !arg3:
                                            revert with 0, 17
                                        if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                        emit Transfer(arg3, arg1, arg2);
                                        if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                            revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                                    else:
                                        if devPoolAddress == arg2:
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg3 > balanceOf[address(arg1)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(arg1)] < arg3:
                                                revert with 0, 17
                                            balanceOf[address(arg1)] -= arg3
                                            if balanceOf[arg2] > !arg3:
                                                revert with 0, 17
                                            if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                            emit Transfer(arg3, arg1, arg2);
                                            if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                                        else:
                                            if treasuryPoolAddress == arg1:
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg3 > balanceOf[address(arg1)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(arg1)] < arg3:
                                                    revert with 0, 17
                                                balanceOf[address(arg1)] -= arg3
                                                if balanceOf[arg2] > !arg3:
                                                    revert with 0, 17
                                                if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                                emit Transfer(arg3, arg1, arg2);
                                                if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                                            else:
                                                if distributionPoolAddress == arg1:
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if arg3 > balanceOf[address(arg1)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                    if balanceOf[address(arg1)] < arg3:
                                                        revert with 0, 17
                                                    balanceOf[address(arg1)] -= arg3
                                                    if balanceOf[arg2] > !arg3:
                                                        revert with 0, 17
                                                    if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                                    emit Transfer(arg3, arg1, arg2);
                                                    if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                        revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                                                else:
                                                    if devPoolAddress == arg1:
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg2:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if arg3 > balanceOf[address(arg1)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                        if balanceOf[address(arg1)] < arg3:
                                                            revert with 0, 17
                                                        balanceOf[address(arg1)] -= arg3
                                                        if balanceOf[arg2] > !arg3:
                                                            revert with 0, 17
                                                        if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                                        emit Transfer(arg3, arg1, arg2);
                                                        if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                            revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                                                    else:
                                                        if not totalSupply:
                                                            if arg3 > !balanceOf[address(arg2)]:
                                                                revert with 0, 17
                                                            if arg3 + balanceOf[address(arg2)] < arg3:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if arg3 + balanceOf[address(arg2)] > 0:
                                                                revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                        else:
                                                            if totalSupply and stor34 > -1 / totalSupply:
                                                                revert with 0, 17
                                                            if not totalSupply:
                                                                revert with 0, 18
                                                            if totalSupply * stor34 / totalSupply != stor34:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                            if arg3 > !balanceOf[address(arg2)]:
                                                                revert with 0, 17
                                                            if arg3 + balanceOf[address(arg2)] < arg3:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if arg3 + balanceOf[address(arg2)] > totalSupply * stor34 / 10000:
                                                                revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg2:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg3 > balanceOf[address(arg1)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[230 len 26] >> 48, 0
                                                        if balanceOf[address(arg1)] < arg3:
                                                            revert with 0, 17
                                                        balanceOf[address(arg1)] -= arg3
                                                        if balanceOf[arg2] > !arg3:
                                                            revert with 0, 17
                                                        if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                                        emit Transfer(arg3, arg1, arg2);
                                                        if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                            revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[328 len 24] >> 64, 0
        else:
            if owner == arg1:
                if not arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                if not arg2:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                if arg3 > balanceOf[address(arg1)]:
                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                if balanceOf[address(arg1)] < arg3:
                    revert with 0, 17
                balanceOf[address(arg1)] -= arg3
                if balanceOf[arg2] > !arg3:
                    revert with 0, 17
                if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                emit Transfer(arg3, arg1, arg2);
                if arg3 > allowance[address(arg1)][msg.sender].field_0:
                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
            else:
                require ext_code.size(nodeRewardManagerAddress)
                staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
                        gas gas_remaining wei
                       args arg1
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'You need to own a node to be able to sell'
                if not arg3:
                    if not arg1:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not stor33:
                        revert with 0, 'ERC20: transfer to the zero address'
                    if 0 > balanceOf[address(arg1)]:
                        revert with 0, 
                                    32,
                                    38,
                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 230 len 26] >> 48,
                                    0
                    if balanceOf[address(arg1)] < 0:
                        revert with 0, 17
                    if balanceOf[stor33] > -1:
                        revert with 0, 17
                    if balanceOf[stor33] < balanceOf[stor33]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[stor33] = balanceOf[stor33]
                    emit Transfer(0, arg1, stor33);
                    if 0 > arg3:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if arg3 < 0:
                        revert with 0, 17
                    if owner == arg1:
                        if not arg1:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not arg2:
                            revert with 0, 'ERC20: transfer to the zero address'
                        if arg3 > balanceOf[address(arg1)]:
                            revert with 0, 
                                        32,
                                        38,
                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                        0
                        if balanceOf[address(arg1)] < arg3:
                            revert with 0, 17
                        balanceOf[address(arg1)] -= arg3
                        if balanceOf[arg2] > !arg3:
                            revert with 0, 17
                        if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                        emit Transfer(arg3, arg1, arg2);
                        if arg3 > allowance[address(arg1)][msg.sender].field_0:
                            revert with 0, 
                                        32,
                                        40,
                                        0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                        0
                    else:
                        if uniswapV2PairAddress == arg2:
                            if not arg1:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not arg2:
                                revert with 0, 'ERC20: transfer to the zero address'
                            if arg3 > balanceOf[address(arg1)]:
                                revert with 0, 
                                            32,
                                            38,
                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                            0
                            if balanceOf[address(arg1)] < arg3:
                                revert with 0, 17
                            balanceOf[address(arg1)] -= arg3
                            if balanceOf[arg2] > !arg3:
                                revert with 0, 17
                            if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                            emit Transfer(arg3, arg1, arg2);
                            if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                revert with 0, 
                                            32,
                                            40,
                                            0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                            0
                        else:
                            if uniswapV2RouterAddress == arg2:
                                if not arg1:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg2:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg3 > balanceOf[address(arg1)]:
                                    revert with 0, 
                                                32,
                                                38,
                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                0
                                if balanceOf[address(arg1)] < arg3:
                                    revert with 0, 17
                                balanceOf[address(arg1)] -= arg3
                                if balanceOf[arg2] > !arg3:
                                    revert with 0, 17
                                if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                emit Transfer(arg3, arg1, arg2);
                                if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                0
                            else:
                                if this.address == arg2:
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg2:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg3 > balanceOf[address(arg1)]:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                    0
                                    if balanceOf[address(arg1)] < arg3:
                                        revert with 0, 17
                                    balanceOf[address(arg1)] -= arg3
                                    if balanceOf[arg2] > !arg3:
                                        revert with 0, 17
                                    if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                    emit Transfer(arg3, arg1, arg2);
                                    if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                    0
                                else:
                                    if this.address == arg1:
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg2:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg3 > balanceOf[address(arg1)]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                        0
                                        if balanceOf[address(arg1)] < arg3:
                                            revert with 0, 17
                                        balanceOf[address(arg1)] -= arg3
                                        if balanceOf[arg2] > !arg3:
                                            revert with 0, 17
                                        if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                        emit Transfer(arg3, arg1, arg2);
                                        if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                        0
                                    else:
                                        if not uint8(stor29.field_0):
                                            revert with 0, 'Trading not yet enabled.'
                                        if treasuryPoolAddress == arg2:
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg2:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg3 > balanceOf[address(arg1)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                            0
                                            if balanceOf[address(arg1)] < arg3:
                                                revert with 0, 17
                                            balanceOf[address(arg1)] -= arg3
                                            if balanceOf[arg2] > !arg3:
                                                revert with 0, 17
                                            if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                            emit Transfer(arg3, arg1, arg2);
                                            if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                            0
                                        else:
                                            if distributionPoolAddress == arg2:
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg2:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg3 > balanceOf[address(arg1)]:
                                                    revert with 0, 
                                                                32,
                                                                38,
                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                0
                                                if balanceOf[address(arg1)] < arg3:
                                                    revert with 0, 17
                                                balanceOf[address(arg1)] -= arg3
                                                if balanceOf[arg2] > !arg3:
                                                    revert with 0, 17
                                                if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                                emit Transfer(arg3, arg1, arg2);
                                                if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                                0
                                            else:
                                                if devPoolAddress == arg2:
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg2:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg3 > balanceOf[address(arg1)]:
                                                        revert with 0, 
                                                                    32,
                                                                    38,
                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                    0
                                                    if balanceOf[address(arg1)] < arg3:
                                                        revert with 0, 17
                                                    balanceOf[address(arg1)] -= arg3
                                                    if balanceOf[arg2] > !arg3:
                                                        revert with 0, 17
                                                    if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                                    emit Transfer(arg3, arg1, arg2);
                                                    if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                                    0
                                                else:
                                                    if treasuryPoolAddress == arg1:
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg2:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg3 > balanceOf[address(arg1)]:
                                                            revert with 0, 
                                                                        32,
                                                                        38,
                                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                        0
                                                        if balanceOf[address(arg1)] < arg3:
                                                            revert with 0, 17
                                                        balanceOf[address(arg1)] -= arg3
                                                        if balanceOf[arg2] > !arg3:
                                                            revert with 0, 17
                                                        if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                                        emit Transfer(arg3, arg1, arg2);
                                                        if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                                        0
                                                    else:
                                                        if distributionPoolAddress == arg1:
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg2:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg3 > balanceOf[address(arg1)]:
                                                                revert with 0, 
                                                                            32,
                                                                            38,
                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                            0
                                                            if balanceOf[address(arg1)] < arg3:
                                                                revert with 0, 17
                                                            balanceOf[address(arg1)] -= arg3
                                                            if balanceOf[arg2] > !arg3:
                                                                revert with 0, 17
                                                            if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                                            emit Transfer(arg3, arg1, arg2);
                                                            if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                                revert with 0, 
                                                                            32,
                                                                            40,
                                                                            0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                                            0
                                                        else:
                                                            if devPoolAddress == arg1:
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg2:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if arg3 > balanceOf[address(arg1)]:
                                                                    revert with 0, 
                                                                                32,
                                                                                38,
                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                                0
                                                                if balanceOf[address(arg1)] < arg3:
                                                                    revert with 0, 17
                                                                balanceOf[address(arg1)] -= arg3
                                                                if balanceOf[arg2] > !arg3:
                                                                    revert with 0, 17
                                                                if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                                                emit Transfer(arg3, arg1, arg2);
                                                                if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                                    revert with 0, 
                                                                                32,
                                                                                40,
                                                                                0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                                                0
                                                            else:
                                                                if not totalSupply:
                                                                    if arg3 > !balanceOf[address(arg2)]:
                                                                        revert with 0, 17
                                                                    if arg3 + balanceOf[address(arg2)] < arg3:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    if arg3 + balanceOf[address(arg2)] > 0:
                                                                        revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                else:
                                                                    if totalSupply and stor34 > -1 / totalSupply:
                                                                        revert with 0, 17
                                                                    if not totalSupply:
                                                                        revert with 0, 18
                                                                    if totalSupply * stor34 / totalSupply != stor34:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    if arg3 > !balanceOf[address(arg2)]:
                                                                        revert with 0, 17
                                                                    if arg3 + balanceOf[address(arg2)] < arg3:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    if arg3 + balanceOf[address(arg2)] > totalSupply * stor34 / 10000:
                                                                        revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg2:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if arg3 > balanceOf[address(arg1)]:
                                                                    revert with 0, 
                                                                                32,
                                                                                38,
                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 454 len 26] >> 48,
                                                                                0
                                                                if balanceOf[address(arg1)] < arg3:
                                                                    revert with 0, 17
                                                                balanceOf[address(arg1)] -= arg3
                                                                if balanceOf[arg2] > !arg3:
                                                                    revert with 0, 17
                                                                if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                                                emit Transfer(arg3, arg1, arg2);
                                                                if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                                    revert with 0, 
                                                                                32,
                                                                                40,
                                                                                0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 552 len 24] >> 64,
                                                                                0
                else:
                    if arg3 and sellTax > -1 / arg3:
                        revert with 0, 17
                    if not arg3:
                        revert with 0, 18
                    if arg3 * sellTax / arg3 != sellTax:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not arg1:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not stor33:
                        revert with 0, 'ERC20: transfer to the zero address'
                    if arg3 * sellTax / 100 > balanceOf[address(arg1)]:
                        revert with 0, 
                                    32,
                                    38,
                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 230 len 26] >> 48,
                                    0
                    if balanceOf[address(arg1)] < arg3 * sellTax / 100:
                        revert with 0, 17
                    balanceOf[address(arg1)] -= arg3 * sellTax / 100
                    if balanceOf[stor33] > !(arg3 * sellTax / 100):
                        revert with 0, 17
                    if balanceOf[stor33] + (arg3 * sellTax / 100) < balanceOf[stor33]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[stor33] += arg3 * sellTax / 100
                    emit Transfer((arg3 * sellTax / 100), arg1, stor33);
                    if arg3 * sellTax / 100 > arg3:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if arg3 < arg3 * sellTax / 100:
                        revert with 0, 17
                    if owner == arg1:
                        if not arg1:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not arg2:
                            revert with 0, 'ERC20: transfer to the zero address'
                        if arg3 - (arg3 * sellTax / 100) > balanceOf[address(arg1)]:
                            revert with 0, 
                                        32,
                                        38,
                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                        0
                        if balanceOf[address(arg1)] < arg3 - (arg3 * sellTax / 100):
                            revert with 0, 17
                        balanceOf[address(arg1)] = balanceOf[address(arg1)] - arg3 + (arg3 * sellTax / 100)
                        if balanceOf[arg2] > !(arg3 - (arg3 * sellTax / 100)):
                            revert with 0, 17
                        if balanceOf[arg2] + arg3 - (arg3 * sellTax / 100) < balanceOf[arg2]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg2)] = balanceOf[arg2] + arg3 - (arg3 * sellTax / 100)
                        emit Transfer((arg3 - (arg3 * sellTax / 100)), arg1, arg2);
                        if arg3 > allowance[address(arg1)][msg.sender].field_0:
                            revert with 0, 
                                        32,
                                        40,
                                        0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                        0
                    else:
                        if uniswapV2PairAddress == arg2:
                            if not arg1:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not arg2:
                                revert with 0, 'ERC20: transfer to the zero address'
                            if arg3 - (arg3 * sellTax / 100) > balanceOf[address(arg1)]:
                                revert with 0, 
                                            32,
                                            38,
                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                            0
                            if balanceOf[address(arg1)] < arg3 - (arg3 * sellTax / 100):
                                revert with 0, 17
                            balanceOf[address(arg1)] = balanceOf[address(arg1)] - arg3 + (arg3 * sellTax / 100)
                            if balanceOf[arg2] > !(arg3 - (arg3 * sellTax / 100)):
                                revert with 0, 17
                            if balanceOf[arg2] + arg3 - (arg3 * sellTax / 100) < balanceOf[arg2]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg2)] = balanceOf[arg2] + arg3 - (arg3 * sellTax / 100)
                            emit Transfer((arg3 - (arg3 * sellTax / 100)), arg1, arg2);
                            if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                revert with 0, 
                                            32,
                                            40,
                                            0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                            0
                        else:
                            if uniswapV2RouterAddress == arg2:
                                if not arg1:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg2:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg3 - (arg3 * sellTax / 100) > balanceOf[address(arg1)]:
                                    revert with 0, 
                                                32,
                                                38,
                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                0
                                if balanceOf[address(arg1)] < arg3 - (arg3 * sellTax / 100):
                                    revert with 0, 17
                                balanceOf[address(arg1)] = balanceOf[address(arg1)] - arg3 + (arg3 * sellTax / 100)
                                if balanceOf[arg2] > !(arg3 - (arg3 * sellTax / 100)):
                                    revert with 0, 17
                                if balanceOf[arg2] + arg3 - (arg3 * sellTax / 100) < balanceOf[arg2]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg2)] = balanceOf[arg2] + arg3 - (arg3 * sellTax / 100)
                                emit Transfer((arg3 - (arg3 * sellTax / 100)), arg1, arg2);
                                if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                    revert with 0, 
                                                32,
                                                40,
                                                0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                0
                            else:
                                if this.address == arg2:
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg2:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg3 - (arg3 * sellTax / 100) > balanceOf[address(arg1)]:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                    0
                                    if balanceOf[address(arg1)] < arg3 - (arg3 * sellTax / 100):
                                        revert with 0, 17
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] - arg3 + (arg3 * sellTax / 100)
                                    if balanceOf[arg2] > !(arg3 - (arg3 * sellTax / 100)):
                                        revert with 0, 17
                                    if balanceOf[arg2] + arg3 - (arg3 * sellTax / 100) < balanceOf[arg2]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg2)] = balanceOf[arg2] + arg3 - (arg3 * sellTax / 100)
                                    emit Transfer((arg3 - (arg3 * sellTax / 100)), arg1, arg2);
                                    if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                    0
                                else:
                                    if this.address == arg1:
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg2:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg3 - (arg3 * sellTax / 100) > balanceOf[address(arg1)]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                        0
                                        if balanceOf[address(arg1)] < arg3 - (arg3 * sellTax / 100):
                                            revert with 0, 17
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] - arg3 + (arg3 * sellTax / 100)
                                        if balanceOf[arg2] > !(arg3 - (arg3 * sellTax / 100)):
                                            revert with 0, 17
                                        if balanceOf[arg2] + arg3 - (arg3 * sellTax / 100) < balanceOf[arg2]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg2)] = balanceOf[arg2] + arg3 - (arg3 * sellTax / 100)
                                        emit Transfer((arg3 - (arg3 * sellTax / 100)), arg1, arg2);
                                        if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                        0
                                    else:
                                        if not uint8(stor29.field_0):
                                            revert with 0, 'Trading not yet enabled.'
                                        if treasuryPoolAddress == arg2:
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg2:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg3 - (arg3 * sellTax / 100) > balanceOf[address(arg1)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                            0
                                            if balanceOf[address(arg1)] < arg3 - (arg3 * sellTax / 100):
                                                revert with 0, 17
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] - arg3 + (arg3 * sellTax / 100)
                                            if balanceOf[arg2] > !(arg3 - (arg3 * sellTax / 100)):
                                                revert with 0, 17
                                            if balanceOf[arg2] + arg3 - (arg3 * sellTax / 100) < balanceOf[arg2]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg2)] = balanceOf[arg2] + arg3 - (arg3 * sellTax / 100)
                                            emit Transfer((arg3 - (arg3 * sellTax / 100)), arg1, arg2);
                                            if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                            0
                                        else:
                                            if distributionPoolAddress == arg2:
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg2:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg3 - (arg3 * sellTax / 100) > balanceOf[address(arg1)]:
                                                    revert with 0, 
                                                                32,
                                                                38,
                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                0
                                                if balanceOf[address(arg1)] < arg3 - (arg3 * sellTax / 100):
                                                    revert with 0, 17
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] - arg3 + (arg3 * sellTax / 100)
                                                if balanceOf[arg2] > !(arg3 - (arg3 * sellTax / 100)):
                                                    revert with 0, 17
                                                if balanceOf[arg2] + arg3 - (arg3 * sellTax / 100) < balanceOf[arg2]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg2)] = balanceOf[arg2] + arg3 - (arg3 * sellTax / 100)
                                                emit Transfer((arg3 - (arg3 * sellTax / 100)), arg1, arg2);
                                                if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                                0
                                            else:
                                                if devPoolAddress == arg2:
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg2:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg3 - (arg3 * sellTax / 100) > balanceOf[address(arg1)]:
                                                        revert with 0, 
                                                                    32,
                                                                    38,
                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                    0
                                                    if balanceOf[address(arg1)] < arg3 - (arg3 * sellTax / 100):
                                                        revert with 0, 17
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] - arg3 + (arg3 * sellTax / 100)
                                                    if balanceOf[arg2] > !(arg3 - (arg3 * sellTax / 100)):
                                                        revert with 0, 17
                                                    if balanceOf[arg2] + arg3 - (arg3 * sellTax / 100) < balanceOf[arg2]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg2)] = balanceOf[arg2] + arg3 - (arg3 * sellTax / 100)
                                                    emit Transfer((arg3 - (arg3 * sellTax / 100)), arg1, arg2);
                                                    if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                                    0
                                                else:
                                                    if treasuryPoolAddress == arg1:
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg2:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg3 - (arg3 * sellTax / 100) > balanceOf[address(arg1)]:
                                                            revert with 0, 
                                                                        32,
                                                                        38,
                                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                        0
                                                        if balanceOf[address(arg1)] < arg3 - (arg3 * sellTax / 100):
                                                            revert with 0, 17
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] - arg3 + (arg3 * sellTax / 100)
                                                        if balanceOf[arg2] > !(arg3 - (arg3 * sellTax / 100)):
                                                            revert with 0, 17
                                                        if balanceOf[arg2] + arg3 - (arg3 * sellTax / 100) < balanceOf[arg2]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg2)] = balanceOf[arg2] + arg3 - (arg3 * sellTax / 100)
                                                        emit Transfer((arg3 - (arg3 * sellTax / 100)), arg1, arg2);
                                                        if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                                        0
                                                    else:
                                                        if distributionPoolAddress == arg1:
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg2:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg3 - (arg3 * sellTax / 100) > balanceOf[address(arg1)]:
                                                                revert with 0, 
                                                                            32,
                                                                            38,
                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                            0
                                                            if balanceOf[address(arg1)] < arg3 - (arg3 * sellTax / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] - arg3 + (arg3 * sellTax / 100)
                                                            if balanceOf[arg2] > !(arg3 - (arg3 * sellTax / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[arg2] + arg3 - (arg3 * sellTax / 100) < balanceOf[arg2]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg2)] = balanceOf[arg2] + arg3 - (arg3 * sellTax / 100)
                                                            emit Transfer((arg3 - (arg3 * sellTax / 100)), arg1, arg2);
                                                            if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                                revert with 0, 
                                                                            32,
                                                                            40,
                                                                            0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                                            0
                                                        else:
                                                            if devPoolAddress == arg1:
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg2:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if arg3 - (arg3 * sellTax / 100) > balanceOf[address(arg1)]:
                                                                    revert with 0, 
                                                                                32,
                                                                                38,
                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 390 len 26] >> 48,
                                                                                0
                                                                if balanceOf[address(arg1)] < arg3 - (arg3 * sellTax / 100):
                                                                    revert with 0, 17
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] - arg3 + (arg3 * sellTax / 100)
                                                                if balanceOf[arg2] > !(arg3 - (arg3 * sellTax / 100)):
                                                                    revert with 0, 17
                                                                if balanceOf[arg2] + arg3 - (arg3 * sellTax / 100) < balanceOf[arg2]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg2)] = balanceOf[arg2] + arg3 - (arg3 * sellTax / 100)
                                                                emit Transfer((arg3 - (arg3 * sellTax / 100)), arg1, arg2);
                                                                if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                                    revert with 0, 
                                                                                32,
                                                                                40,
                                                                                0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 488 len 24] >> 64,
                                                                                0
                                                            else:
                                                                if not totalSupply:
                                                                    if arg3 - (arg3 * sellTax / 100) > !balanceOf[address(arg2)]:
                                                                        revert with 0, 17
                                                                    if balanceOf[address(arg2)] < 0:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    if arg3 - (arg3 * sellTax / 100) + balanceOf[address(arg2)] > 0:
                                                                        revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                else:
                                                                    if totalSupply and stor34 > -1 / totalSupply:
                                                                        revert with 0, 17
                                                                    if not totalSupply:
                                                                        revert with 0, 18
                                                                    if totalSupply * stor34 / totalSupply != stor34:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    if arg3 - (arg3 * sellTax / 100) > !balanceOf[address(arg2)]:
                                                                        revert with 0, 17
                                                                    if balanceOf[address(arg2)] < 0:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    if arg3 - (arg3 * sellTax / 100) + balanceOf[address(arg2)] > totalSupply * stor34 / 10000:
                                                                        revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg2:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if arg3 - (arg3 * sellTax / 100) > balanceOf[address(arg1)]:
                                                                    revert with 0, 
                                                                                32,
                                                                                38,
                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 454 len 26] >> 48,
                                                                                0
                                                                if balanceOf[address(arg1)] < arg3 - (arg3 * sellTax / 100):
                                                                    revert with 0, 17
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] - arg3 + (arg3 * sellTax / 100)
                                                                if balanceOf[arg2] > !(arg3 - (arg3 * sellTax / 100)):
                                                                    revert with 0, 17
                                                                if balanceOf[arg2] + arg3 - (arg3 * sellTax / 100) < balanceOf[arg2]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg2)] = balanceOf[arg2] + arg3 - (arg3 * sellTax / 100)
                                                                emit Transfer((arg3 - (arg3 * sellTax / 100)), arg1, arg2);
                                                                if arg3 > allowance[address(arg1)][msg.sender].field_0:
                                                                    revert with 0, 
                                                                                32,
                                                                                40,
                                                                                0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 552 len 24] >> 64,
                                                                                0
    ('le', ('param', 'arg3'), ('field', 0, ('stor', ('map', 'msg.sender', ('map', ('mask_shl', 160, 0, 0, ('param', 'arg1')), ('name', 'allowance', 1))))))
    if allowance[address(arg1)][msg.sender].field_0 < arg3:
        revert with 0, 17
    if not arg1:
        revert with 0, 'ERC20: approve from the zero address'
    if not msg.sender:
        revert with 0, 'ERC20: approve to the zero address'
    allowance[address(arg1)][address(msg.sender)].field_0 = allowance[address(arg1)][msg.sender].field_0 - arg3
    emit Approval((allowance[address(arg1)][msg.sender].field_0 - arg3), arg1, msg.sender);
    return 1
}

function _fallback() payable {
    if calldata.size < 4:
        require not calldata.size
        emit PaymentReceived(msg.sender, msg.value);
    else:
        if unknown_0x88c41d7c(?????) > uint32(call.func_hash) >> 224:
            if unknown_0x54557973(?????) > uint32(call.func_hash) >> 224:
                if unknown_0x2bb14e1d(?????) <= uint32(call.func_hash) >> 224:
                    if unknown_0x4195fbf3(?????) > uint32(call.func_hash) >> 224:
                        if unknown_0x2bb14e1d(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            return rewardsFee
                        if unknown_0x2e5bb6ff(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require calldata.size - 4 >= 32
                            if owner != msg.sender:
                                revert with 0, 'Ownable: caller is not the owner'
                            sellTax = cd[4]
                        if unknown_0x313ce567(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            return 18
                        if uint32(call.func_hash) >> 224 != unknown_0x39509351(?????):
                            if unknown_0x3a98ef39(?????) == uint32(call.func_hash) >> 224:
                                require not msg.value
                                return totalShares
                            require unknown_0x406072a9(?????) == uint32(call.func_hash) >> 224
                            require not msg.value
                            require calldata.size - 4 >= 64
                            require cd[4] == address(cd[4])
                            require cd[36] == address(cd[36])
                            return released[address(cd[4])][address(cd[36])]
                        require not msg.value
                        require calldata.size - 4 >= 64
                        require cd[4] == address(cd[4])
                        if allowance[msg.sender][address(cd[4])].field_0 > !cd[36]:
                            revert with 0, 17
                        if allowance[msg.sender][address(cd[4])].field_0 + cd[36] < allowance[msg.sender][address(cd[4])].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        if not msg.sender:
                            revert with 0, 'ERC20: approve from the zero address'
                        if not address(cd[4]):
                            revert with 0, 'ERC20: approve to the zero address'
                        allowance[address(msg.sender)][address(cd[4])].field_0 = allowance[msg.sender][address(cd[4])].field_0 + cd[36]
                        emit Approval((allowance[msg.sender][address(cd[4])].field_0 + cd[36]), msg.sender, address(cd[4]));
                        return 1
                    if unknown_0x4195fbf3(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        if cd[4] <= eth.balance(this.address):
                            call owner with:
                               value cd[4] wei
                                 gas 2300 * is_zero(value) wei
                        else:
                            call owner with:
                               value eth.balance(this.address) wei
                                 gas 2300 * is_zero(value) wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                    else:
                        if unknown_0x42bc9fca(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require calldata.size - 4 >= 32
                            if owner != msg.sender:
                                revert with 0, 'Ownable: caller is not the owner'
                            liquidityPoolFee = cd[4]
                            if rewardsFee > !cd[4]:
                                revert with 0, 17
                            if rewardsFee + cd[4] < rewardsFee:
                                revert with 0, 'SafeMath: addition overflow'
                            if rewardsFee + cd[4] > !treasuryFee:
                                revert with 0, 17
                            if treasuryFee < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees = rewardsFee + cd[4] + treasuryFee
                        else:
                            if uint32(call.func_hash) >> 224 != unknown_0x48b75044(?????):
                                if unknown_0x48df5829(?????) == uint32(call.func_hash) >> 224:
                                    require not msg.value
                                    return treasuryPoolAddress
                                if uint32(call.func_hash) >> 224 != unknown_0x48e5642b(?????):
                                    require unknown_0x49bd5a5e(?????) == uint32(call.func_hash) >> 224
                                    require not msg.value
                                    return uniswapV2PairAddress
                                require not msg.value
                                require ext_code.size(nodeRewardManagerAddress)
                                staticcall nodeRewardManagerAddress.totalRewardStaked() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                return ext_call.return_data[0]
                            require not msg.value
                            require calldata.size - 4 >= 64
                            require cd[4] == address(cd[4])
                            require cd[36] == address(cd[36])
                            if not shares[address(cd[36])]:
                                revert with 0, 'PaymentSplitter: account has no shares'
                            mem[132] = this.address
                            require ext_code.size(address(cd[4]))
                            staticcall address(cd[4]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] > !totalReleased[address(cd[4])]:
                                revert with 0, 17
                            if ext_call.return_data[0] + totalReleased[address(cd[4])] and shares[address(cd[36])] > -1 / ext_call.return_data[0] + totalReleased[address(cd[4])]:
                                revert with 0, 17
                            if not totalShares:
                                revert with 0, 18
                            if (ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares < released[address(cd[4])][address(cd[36])]:
                                revert with 0, 17
                            if not ((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) - released[address(cd[4])][address(cd[36])]:
                                revert with 0, 'PaymentSplitter: account is not due payment'
                            if released[address(cd[4])][address(cd[36])] > !(((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) - released[address(cd[4])][address(cd[36])]):
                                revert with 0, 17
                            released[address(cd[4])][address(cd[36])] = (ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares
                            if totalReleased[address(cd[4])] > !(((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) - released[address(cd[4])][address(cd[36])]):
                                revert with 0, 17
                            totalReleased[address(cd[4])] = totalReleased[address(cd[4])] + ((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) - released[address(cd[4])][address(cd[36])]
                            mem[ceil32(return_data.size) + 164] = address(cd[36])
                            mem[ceil32(return_data.size) + 196] = ((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) - released[address(cd[4])][address(cd[36])]
                            mem[ceil32(return_data.size) + 128] = 68
                            mem[ceil32(return_data.size) + 164 len 28] = address(cd[36]) << 64
                            mem[ceil32(return_data.size) + 160 len 4] = unknown_0xa9059cbb(?????)
                            mem[ceil32(return_data.size) + 228] = 32
                            mem[ceil32(return_data.size) + 260] = 'SafeERC20: low-level call failed'
                            if not ext_code.size(address(cd[4])):
                                revert with 0, 'Address: call to non-contract'
                            mem[ceil32(return_data.size) + 292 len 96] = unknown_0xa9059cbb(?????), address(cd[36]) << 64, 0, ((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) - released[address(cd[4])][address(cd[36])], 0
                            mem[ceil32(return_data.size) + 360] = 0
                            call address(cd[4]) with:
                               funct Mask(32, 224, unknown_0xa9059cbb(?????), address(cd[36]) << 64, 0, ((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) - released[address(cd[4])][address(cd[36])], 0) >> 224
                                 gas gas_remaining wei
                                args (Mask(512, -288, unknown_0xa9059cbb(?????), address(cd[36]) << 64, 0, ((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) - released[address(cd[4])][address(cd[36])], 0) << 288)
                            if not return_data.size:
                                if not ext_call.success:
                                    if mem[96]:
                                        revert with memory
                                          from 128
                                           len mem[96]
                                    revert with 0, 'SafeERC20: low-level call failed'
                                if mem[96]:
                                    require mem[96] >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                            else:
                                mem[ceil32(return_data.size) + 324 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeERC20: low-level call failed'
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[ceil32(return_data.size) + 324] == bool(mem[ceil32(return_data.size) + 324])
                                    if not mem[ceil32(return_data.size) + 324]:
                                        revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                            emit ERC20PaymentReleased(address(cd[36]), ((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) - released[address(cd[4])][address(cd[36])], address(cd[4]));
                if unknown_0x138a634a(?????) > uint32(call.func_hash) >> 224:
                    if name() == uint32(call.func_hash) >> 224:
                        require not msg.value
                        if bool(stor3.length):
                            if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
                                revert with 0, 34
                            if bool(stor3.length):
                                if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
                                    revert with 0, 34
                                if Mask(256, -1, stor3.length):
                                    if 31 < uint255(stor3.length) * 0.5:
                                        mem[160] = uint256(stor3.field_0)
                                        idx = 160
                                        s = 0
                                        while (uint255(stor3.length) * 0.5) + 128 > idx:
                                            mem[idx + 32] = stor3[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        return Array(len=2 * Mask(256, -1, stor3.length), data=mem[160 len ceil32(uint255(stor3.length) * 0.5)])
                                    mem[160] = 256 * stor3.length.field_8
                            else:
                                if bool(stor3.length) == stor3.length.field_1 < 32:
                                    revert with 0, 34
                                if stor3.length.field_1:
                                    if 31 < stor3.length.field_1:
                                        mem[160] = uint256(stor3.field_0)
                                        idx = 160
                                        s = 0
                                        while stor3.length.field_1 + 128 > idx:
                                            mem[idx + 32] = stor3[s].field_256
                                            idx = idx + 32
                                            s = s + 1
                                            continue 
                                        return Array(len=2 * Mask(256, -1, stor3.length), data=mem[160 len ceil32(uint255(stor3.length) * 0.5)])
                                    mem[160] = 256 * stor3.length.field_8
                            mem[ceil32(uint255(stor3.length) * 0.5) + 224 len ceil32(uint255(stor3.length) * 0.5)] = mem[160 len ceil32(uint255(stor3.length) * 0.5)]
                            if ceil32(uint255(stor3.length) * 0.5) > uint255(stor3.length) * 0.5:
                                mem[(uint255(stor3.length) * 0.5) + ceil32(uint255(stor3.length) * 0.5) + 224] = 0
                            return Array(len=2 * Mask(256, -1, stor3.length), data=mem[160 len ceil32(uint255(stor3.length) * 0.5)], mem[(2 * ceil32(uint255(stor3.length) * 0.5)) + 224 len 2 * ceil32(uint255(stor3.length) * 0.5)]), 
                        if bool(stor3.length) == stor3.length.field_1 < 32:
                            revert with 0, 34
                        if bool(stor3.length):
                            if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
                                revert with 0, 34
                            if Mask(256, -1, stor3.length):
                                if 31 < uint255(stor3.length) * 0.5:
                                    mem[160] = uint256(stor3.field_0)
                                    idx = 160
                                    s = 0
                                    while (uint255(stor3.length) * 0.5) + 128 > idx:
                                        mem[idx + 32] = stor3[s].field_256
                                        idx = idx + 32
                                        s = s + 1
                                        continue 
                                    return Array(len=stor3.length % 128, data=mem[160 len ceil32(stor3.length.field_1)])
                                mem[160] = 256 * stor3.length.field_8
                        else:
                            if bool(stor3.length) == stor3.length.field_1 < 32:
                                revert with 0, 34
                            if stor3.length.field_1:
                                if 31 < stor3.length.field_1:
                                    mem[160] = uint256(stor3.field_0)
                                    idx = 160
                                    s = 0
                                    while stor3.length.field_1 + 128 > idx:
                                        mem[idx + 32] = stor3[s].field_256
                                        idx = idx + 32
                                        s = s + 1
                                        continue 
                                    return Array(len=stor3.length % 128, data=mem[160 len ceil32(stor3.length.field_1)])
                                mem[160] = 256 * stor3.length.field_8
                        mem[ceil32(stor3.length.field_1) + 224 len ceil32(stor3.length.field_1)] = mem[160 len ceil32(stor3.length.field_1)]
                        if ceil32(stor3.length.field_1) > stor3.length.field_1:
                            mem[stor3.length.field_1 + ceil32(stor3.length.field_1) + 224] = 0
                        return Array(len=stor3.length % 128, data=mem[160 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 224 len 2 * ceil32(stor3.length.field_1)]), 
                    if updateRewardsFee(uint256 arg1) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        rewardsFee = cd[4]
                        if cd[4] > !liquidityPoolFee:
                            revert with 0, 17
                        if cd[4] + liquidityPoolFee < cd[4]:
                            revert with 0, 'SafeMath: addition overflow'
                        if cd[4] + liquidityPoolFee > !treasuryFee:
                            revert with 0, 17
                        if treasuryFee < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees = cd[4] + liquidityPoolFee + treasuryFee
                    if approve(address arg1, uint256 arg2) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 64
                        require cd[4] == address(cd[4])
                        if not msg.sender:
                            revert with 0, 'ERC20: approve from the zero address'
                        if not address(cd[4]):
                            revert with 0, 'ERC20: approve to the zero address'
                        allowance[address(msg.sender)][address(cd[4])].field_0 = cd[36]
                        emit Approval(cd[36], msg.sender, address(cd[4]));
                        return 1
                    if uint32(call.func_hash) >> 224 != getRewardAmount():
                        if uint32(call.func_hash) >> 224 != updateFuturWall(address arg1):
                            require unknown_0x13114a9d(?????) == uint32(call.func_hash) >> 224
                            require not msg.value
                            return totalFees
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == address(cd[4])
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        treasuryPoolAddress = address(cd[4])
                    require not msg.value
                    if not msg.sender:
                        revert with 0, 'SENDER CAN'T BE ZERO'
                    require ext_code.size(nodeRewardManagerAddress)
                    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    require ext_code.size(nodeRewardManagerAddress)
                    staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1) with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    return ext_call.return_data[0]
                if unknown_0x138a634a(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    if not msg.sender:
                        revert with 0, 'SENDER CAN'T BE ZERO'
                    mem[132] = msg.sender
                    require ext_code.size(nodeRewardManagerAddress)
                    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    require ext_code.size(nodeRewardManagerAddress)
                    staticcall nodeRewardManagerAddress._getNodesNames(address arg1) with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _430 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _498 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _498
                    require _430 + _498 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_498)] = mem[ceil32(return_data.size) + _430 + 160 len ceil32(_498)]
                    if ceil32(_498) <= _498:
                        _6087 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _498
                        mem[mem[64] + 64 len ceil32(_498)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_498)]
                        if ceil32(_498) <= _498:
                            return Array(len=_498, data=mem[mem[64] + 64 len ceil32(_498)])
                        mem[_498 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_498) + _6087 + -mem[64] + 64
                    mem[_498 + (2 * ceil32(return_data.size)) + 160] = 0
                    _6088 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _498
                    mem[mem[64] + 64 len ceil32(_498)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_498)]
                    if ceil32(_498) <= _498:
                        return Array(len=_498, data=mem[mem[64] + 64 len ceil32(_498)])
                    mem[_498 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_498) + _6088 + -mem[64] + 64
                if unknown_0x1694505e(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    return uniswapV2RouterAddress
                if unknown_0x18160ddd(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    return totalSupply
                if unknown_0x19165587(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 32
                    require cd[4] == address(cd[4])
                    if not shares[address(cd[4])]:
                        revert with 0, 'PaymentSplitter: account has no shares'
                    if eth.balance(this.address) > !totalReleased:
                        revert with 0, 17
                    if eth.balance(this.address) + totalReleased and shares[address(cd[4])] > -1 / eth.balance(this.address) + totalReleased:
                        revert with 0, 17
                    if not totalShares:
                        revert with 0, 18
                    if (eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares < released[address(cd[4])]:
                        revert with 0, 17
                    if not ((eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares) - released[address(cd[4])]:
                        revert with 0, 'PaymentSplitter: account is not due payment'
                    if released[address(cd[4])] > !(((eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares) - released[address(cd[4])]):
                        revert with 0, 17
                    released[address(cd[4])] = (eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares
                    if totalReleased > !(((eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares) - released[address(cd[4])]):
                        revert with 0, 17
                    totalReleased = totalReleased + ((eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares) - released[address(cd[4])]
                    if eth.balance(this.address) < ((eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares) - released[address(cd[4])]:
                        revert with 0, 'Address: insufficient balance'
                    call address(cd[4]) with:
                       value ((eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares) - released[address(cd[4])] wei
                         gas gas_remaining wei
                    if not ext_call.success:
                        revert with 0, 'Address: unable to send value, recipient may have reverted'
                    emit PaymentReleased(address(cd[4]), ((eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares) - released[address(cd[4])]);
                if unknown_0x1cdd3be3(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 32
                    require cd[4] == address(cd[4])
                    return bool(stor35[cd[4]])
                require unknown_0x23b872dd(?????) == uint32(call.func_hash) >> 224
                require not msg.value
                require calldata.size - 4 >= 96
                require cd[4] == address(cd[4])
                require cd[36] == address(cd[36])
                if stor35[address(cd[4])]:
                    revert with 0, 'Blacklisted address'
                if stor35[address(cd[36])]:
                    revert with 0, 'Blacklisted address'
                if not address(cd[4]):
                    revert with 0, 'ERC20: transfer from the zero address'
                if not address(cd[36]):
                    revert with 0, 'ERC20: transfer to the zero address'
                if uniswapV2RouterAddress != address(cd[36]):
                    if owner == address(cd[4]):
                        if not address(cd[4]):
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not address(cd[36]):
                            revert with 0, 'ERC20: transfer to the zero address'
                        if cd[68] > balanceOf[address(cd[4])]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                        if balanceOf[address(cd[4])] < cd[68]:
                            revert with 0, 17
                        balanceOf[address(cd[4])] -= cd[68]
                        if balanceOf[address(cd[36])] > !cd[68]:
                            revert with 0, 17
                        if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(cd[36])] += cd[68]
                        emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                        if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                            revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                    else:
                        if uniswapV2PairAddress == address(cd[36]):
                            if not address(cd[4]):
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not address(cd[36]):
                                revert with 0, 'ERC20: transfer to the zero address'
                            if cd[68] > balanceOf[address(cd[4])]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                            if balanceOf[address(cd[4])] < cd[68]:
                                revert with 0, 17
                            balanceOf[address(cd[4])] -= cd[68]
                            if balanceOf[address(cd[36])] > !cd[68]:
                                revert with 0, 17
                            if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(cd[36])] += cd[68]
                            emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                            if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                        else:
                            if uniswapV2RouterAddress == address(cd[36]):
                                if not address(cd[4]):
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not address(cd[36]):
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if cd[68] > balanceOf[address(cd[4])]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                if balanceOf[address(cd[4])] < cd[68]:
                                    revert with 0, 17
                                balanceOf[address(cd[4])] -= cd[68]
                                if balanceOf[address(cd[36])] > !cd[68]:
                                    revert with 0, 17
                                if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(cd[36])] += cd[68]
                                emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                            else:
                                if this.address == address(cd[36]):
                                    if not address(cd[4]):
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not address(cd[36]):
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if cd[68] > balanceOf[address(cd[4])]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                    if balanceOf[address(cd[4])] < cd[68]:
                                        revert with 0, 17
                                    balanceOf[address(cd[4])] -= cd[68]
                                    if balanceOf[address(cd[36])] > !cd[68]:
                                        revert with 0, 17
                                    if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(cd[36])] += cd[68]
                                    emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                    if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                        revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                                else:
                                    if this.address == address(cd[4]):
                                        if not address(cd[4]):
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not address(cd[36]):
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if cd[68] > balanceOf[address(cd[4])]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                        if balanceOf[address(cd[4])] < cd[68]:
                                            revert with 0, 17
                                        balanceOf[address(cd[4])] -= cd[68]
                                        if balanceOf[address(cd[36])] > !cd[68]:
                                            revert with 0, 17
                                        if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(cd[36])] += cd[68]
                                        emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                        if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                            revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                                    else:
                                        if not uint8(stor29.field_0):
                                            revert with 0, 'Trading not yet enabled.'
                                        if treasuryPoolAddress == address(cd[36]):
                                            if not address(cd[4]):
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not address(cd[36]):
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if cd[68] > balanceOf[address(cd[4])]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                            if balanceOf[address(cd[4])] < cd[68]:
                                                revert with 0, 17
                                            balanceOf[address(cd[4])] -= cd[68]
                                            if balanceOf[address(cd[36])] > !cd[68]:
                                                revert with 0, 17
                                            if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(cd[36])] += cd[68]
                                            emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                            if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                                        else:
                                            if distributionPoolAddress == address(cd[36]):
                                                if not address(cd[4]):
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not address(cd[36]):
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if cd[68] > balanceOf[address(cd[4])]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                if balanceOf[address(cd[4])] < cd[68]:
                                                    revert with 0, 17
                                                balanceOf[address(cd[4])] -= cd[68]
                                                if balanceOf[address(cd[36])] > !cd[68]:
                                                    revert with 0, 17
                                                if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(cd[36])] += cd[68]
                                                emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                                            else:
                                                if devPoolAddress == address(cd[36]):
                                                    if not address(cd[4]):
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not address(cd[36]):
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if cd[68] > balanceOf[address(cd[4])]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                    if balanceOf[address(cd[4])] < cd[68]:
                                                        revert with 0, 17
                                                    balanceOf[address(cd[4])] -= cd[68]
                                                    if balanceOf[address(cd[36])] > !cd[68]:
                                                        revert with 0, 17
                                                    if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(cd[36])] += cd[68]
                                                    emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                    if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                        revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                                                else:
                                                    if treasuryPoolAddress == address(cd[4]):
                                                        if not address(cd[4]):
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not address(cd[36]):
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if cd[68] > balanceOf[address(cd[4])]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                        if balanceOf[address(cd[4])] < cd[68]:
                                                            revert with 0, 17
                                                        balanceOf[address(cd[4])] -= cd[68]
                                                        if balanceOf[address(cd[36])] > !cd[68]:
                                                            revert with 0, 17
                                                        if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(cd[36])] += cd[68]
                                                        emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                        if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                            revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                                                    else:
                                                        if distributionPoolAddress == address(cd[4]):
                                                            if not address(cd[4]):
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not address(cd[36]):
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if cd[68] > balanceOf[address(cd[4])]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                            if balanceOf[address(cd[4])] < cd[68]:
                                                                revert with 0, 17
                                                            balanceOf[address(cd[4])] -= cd[68]
                                                            if balanceOf[address(cd[36])] > !cd[68]:
                                                                revert with 0, 17
                                                            if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(cd[36])] += cd[68]
                                                            emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                            if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                                                        else:
                                                            if devPoolAddress == address(cd[4]):
                                                                if not address(cd[4]):
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not address(cd[36]):
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if cd[68] > balanceOf[address(cd[4])]:
                                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                                if balanceOf[address(cd[4])] < cd[68]:
                                                                    revert with 0, 17
                                                                balanceOf[address(cd[4])] -= cd[68]
                                                                if balanceOf[address(cd[36])] > !cd[68]:
                                                                    revert with 0, 17
                                                                if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(cd[36])] += cd[68]
                                                                emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                                if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                                                            else:
                                                                if not totalSupply:
                                                                    if cd[68] > !balanceOf[address(cd[36])]:
                                                                        revert with 0, 17
                                                                    if cd[68] + balanceOf[address(cd[36])] < cd[68]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    if cd[68] + balanceOf[address(cd[36])] > 0:
                                                                        revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                else:
                                                                    if totalSupply and stor34 > -1 / totalSupply:
                                                                        revert with 0, 17
                                                                    if not totalSupply:
                                                                        revert with 0, 18
                                                                    if totalSupply * stor34 / totalSupply != stor34:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    if cd[68] > !balanceOf[address(cd[36])]:
                                                                        revert with 0, 17
                                                                    if cd[68] + balanceOf[address(cd[36])] < cd[68]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    if cd[68] + balanceOf[address(cd[36])] > totalSupply * stor34 / 10000:
                                                                        revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                if not address(cd[4]):
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not address(cd[36]):
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if cd[68] > balanceOf[address(cd[4])]:
                                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[262 len 26] >> 48, 0
                                                                if balanceOf[address(cd[4])] < cd[68]:
                                                                    revert with 0, 17
                                                                balanceOf[address(cd[4])] -= cd[68]
                                                                if balanceOf[address(cd[36])] > !cd[68]:
                                                                    revert with 0, 17
                                                                if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(cd[36])] += cd[68]
                                                                emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                                if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[360 len 24] >> 64, 0
                else:
                    if this.address == address(cd[4]):
                        if owner == address(cd[4]):
                            if not address(cd[4]):
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not address(cd[36]):
                                revert with 0, 'ERC20: transfer to the zero address'
                            if cd[68] > balanceOf[address(cd[4])]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                            if balanceOf[address(cd[4])] < cd[68]:
                                revert with 0, 17
                            balanceOf[address(cd[4])] -= cd[68]
                            if balanceOf[address(cd[36])] > !cd[68]:
                                revert with 0, 17
                            if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(cd[36])] += cd[68]
                            emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                            if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                        else:
                            if uniswapV2PairAddress == address(cd[36]):
                                if not address(cd[4]):
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not address(cd[36]):
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if cd[68] > balanceOf[address(cd[4])]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                if balanceOf[address(cd[4])] < cd[68]:
                                    revert with 0, 17
                                balanceOf[address(cd[4])] -= cd[68]
                                if balanceOf[address(cd[36])] > !cd[68]:
                                    revert with 0, 17
                                if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(cd[36])] += cd[68]
                                emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                            else:
                                if uniswapV2RouterAddress == address(cd[36]):
                                    if not address(cd[4]):
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not address(cd[36]):
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if cd[68] > balanceOf[address(cd[4])]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                    if balanceOf[address(cd[4])] < cd[68]:
                                        revert with 0, 17
                                    balanceOf[address(cd[4])] -= cd[68]
                                    if balanceOf[address(cd[36])] > !cd[68]:
                                        revert with 0, 17
                                    if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(cd[36])] += cd[68]
                                    emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                    if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                        revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                                else:
                                    if this.address == address(cd[36]):
                                        if not address(cd[4]):
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not address(cd[36]):
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if cd[68] > balanceOf[address(cd[4])]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                        if balanceOf[address(cd[4])] < cd[68]:
                                            revert with 0, 17
                                        balanceOf[address(cd[4])] -= cd[68]
                                        if balanceOf[address(cd[36])] > !cd[68]:
                                            revert with 0, 17
                                        if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(cd[36])] += cd[68]
                                        emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                        if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                            revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                                    else:
                                        if this.address == address(cd[4]):
                                            if not address(cd[4]):
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not address(cd[36]):
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if cd[68] > balanceOf[address(cd[4])]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                            if balanceOf[address(cd[4])] < cd[68]:
                                                revert with 0, 17
                                            balanceOf[address(cd[4])] -= cd[68]
                                            if balanceOf[address(cd[36])] > !cd[68]:
                                                revert with 0, 17
                                            if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(cd[36])] += cd[68]
                                            emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                            if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                                        else:
                                            if not uint8(stor29.field_0):
                                                revert with 0, 'Trading not yet enabled.'
                                            if treasuryPoolAddress == address(cd[36]):
                                                if not address(cd[4]):
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not address(cd[36]):
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if cd[68] > balanceOf[address(cd[4])]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                if balanceOf[address(cd[4])] < cd[68]:
                                                    revert with 0, 17
                                                balanceOf[address(cd[4])] -= cd[68]
                                                if balanceOf[address(cd[36])] > !cd[68]:
                                                    revert with 0, 17
                                                if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(cd[36])] += cd[68]
                                                emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                                            else:
                                                if distributionPoolAddress == address(cd[36]):
                                                    if not address(cd[4]):
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not address(cd[36]):
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if cd[68] > balanceOf[address(cd[4])]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                    if balanceOf[address(cd[4])] < cd[68]:
                                                        revert with 0, 17
                                                    balanceOf[address(cd[4])] -= cd[68]
                                                    if balanceOf[address(cd[36])] > !cd[68]:
                                                        revert with 0, 17
                                                    if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(cd[36])] += cd[68]
                                                    emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                    if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                        revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                                                else:
                                                    if devPoolAddress == address(cd[36]):
                                                        if not address(cd[4]):
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not address(cd[36]):
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if cd[68] > balanceOf[address(cd[4])]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                        if balanceOf[address(cd[4])] < cd[68]:
                                                            revert with 0, 17
                                                        balanceOf[address(cd[4])] -= cd[68]
                                                        if balanceOf[address(cd[36])] > !cd[68]:
                                                            revert with 0, 17
                                                        if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(cd[36])] += cd[68]
                                                        emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                        if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                            revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                                                    else:
                                                        if treasuryPoolAddress == address(cd[4]):
                                                            if not address(cd[4]):
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not address(cd[36]):
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if cd[68] > balanceOf[address(cd[4])]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                            if balanceOf[address(cd[4])] < cd[68]:
                                                                revert with 0, 17
                                                            balanceOf[address(cd[4])] -= cd[68]
                                                            if balanceOf[address(cd[36])] > !cd[68]:
                                                                revert with 0, 17
                                                            if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(cd[36])] += cd[68]
                                                            emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                            if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                                                        else:
                                                            if distributionPoolAddress == address(cd[4]):
                                                                if not address(cd[4]):
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not address(cd[36]):
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if cd[68] > balanceOf[address(cd[4])]:
                                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                                if balanceOf[address(cd[4])] < cd[68]:
                                                                    revert with 0, 17
                                                                balanceOf[address(cd[4])] -= cd[68]
                                                                if balanceOf[address(cd[36])] > !cd[68]:
                                                                    revert with 0, 17
                                                                if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(cd[36])] += cd[68]
                                                                emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                                if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                                                            else:
                                                                if devPoolAddress == address(cd[4]):
                                                                    if not address(cd[4]):
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not address(cd[36]):
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if cd[68] > balanceOf[address(cd[4])]:
                                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                                    if balanceOf[address(cd[4])] < cd[68]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(cd[4])] -= cd[68]
                                                                    if balanceOf[address(cd[36])] > !cd[68]:
                                                                        revert with 0, 17
                                                                    if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(cd[36])] += cd[68]
                                                                    emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                                    if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                        revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                                                                else:
                                                                    if not totalSupply:
                                                                        if cd[68] > !balanceOf[address(cd[36])]:
                                                                            revert with 0, 17
                                                                        if cd[68] + balanceOf[address(cd[36])] < cd[68]:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        if cd[68] + balanceOf[address(cd[36])] > 0:
                                                                            revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                    else:
                                                                        if totalSupply and stor34 > -1 / totalSupply:
                                                                            revert with 0, 17
                                                                        if not totalSupply:
                                                                            revert with 0, 18
                                                                        if totalSupply * stor34 / totalSupply != stor34:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        if cd[68] > !balanceOf[address(cd[36])]:
                                                                            revert with 0, 17
                                                                        if cd[68] + balanceOf[address(cd[36])] < cd[68]:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        if cd[68] + balanceOf[address(cd[36])] > totalSupply * stor34 / 10000:
                                                                            revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                    if not address(cd[4]):
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not address(cd[36]):
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if cd[68] > balanceOf[address(cd[4])]:
                                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[262 len 26] >> 48, 0
                                                                    if balanceOf[address(cd[4])] < cd[68]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(cd[4])] -= cd[68]
                                                                    if balanceOf[address(cd[36])] > !cd[68]:
                                                                        revert with 0, 17
                                                                    if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(cd[36])] += cd[68]
                                                                    emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                                    if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                        revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[360 len 24] >> 64, 0
                    else:
                        if owner == address(cd[4]):
                            if not address(cd[4]):
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not address(cd[36]):
                                revert with 0, 'ERC20: transfer to the zero address'
                            if cd[68] > balanceOf[address(cd[4])]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                            if balanceOf[address(cd[4])] < cd[68]:
                                revert with 0, 17
                            balanceOf[address(cd[4])] -= cd[68]
                            if balanceOf[address(cd[36])] > !cd[68]:
                                revert with 0, 17
                            if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(cd[36])] += cd[68]
                            emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                            if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[296 len 24] >> 64, 0
                        else:
                            require ext_code.size(nodeRewardManagerAddress)
                            staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
                                    gas gas_remaining wei
                                   args address(cd[4])
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'You need to own a node to be able to sell'
                            if not cd[68]:
                                if not address(cd[4]):
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not stor33:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if 0 > balanceOf[address(cd[4])]:
                                    revert with 0, 
                                                32,
                                                38,
                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 262 len 26] >> 48,
                                                0
                                if balanceOf[address(cd[4])] < 0:
                                    revert with 0, 17
                                if balanceOf[stor33] > -1:
                                    revert with 0, 17
                                if balanceOf[stor33] < balanceOf[stor33]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[stor33] = balanceOf[stor33]
                                emit Transfer(0, address(cd[4]), stor33);
                                if 0 > cd[68]:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if cd[68] < 0:
                                    revert with 0, 17
                                if owner == address(cd[4]):
                                    if not address(cd[4]):
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not address(cd[36]):
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if cd[68] > balanceOf[address(cd[4])]:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                    0
                                    if balanceOf[address(cd[4])] < cd[68]:
                                        revert with 0, 17
                                    balanceOf[address(cd[4])] -= cd[68]
                                    if balanceOf[address(cd[36])] > !cd[68]:
                                        revert with 0, 17
                                    if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(cd[36])] += cd[68]
                                    emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                    if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                    0
                                else:
                                    if uniswapV2PairAddress == address(cd[36]):
                                        if not address(cd[4]):
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not address(cd[36]):
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if cd[68] > balanceOf[address(cd[4])]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                        0
                                        if balanceOf[address(cd[4])] < cd[68]:
                                            revert with 0, 17
                                        balanceOf[address(cd[4])] -= cd[68]
                                        if balanceOf[address(cd[36])] > !cd[68]:
                                            revert with 0, 17
                                        if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(cd[36])] += cd[68]
                                        emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                        if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                        0
                                    else:
                                        if uniswapV2RouterAddress == address(cd[36]):
                                            if not address(cd[4]):
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not address(cd[36]):
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if cd[68] > balanceOf[address(cd[4])]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                            0
                                            if balanceOf[address(cd[4])] < cd[68]:
                                                revert with 0, 17
                                            balanceOf[address(cd[4])] -= cd[68]
                                            if balanceOf[address(cd[36])] > !cd[68]:
                                                revert with 0, 17
                                            if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(cd[36])] += cd[68]
                                            emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                            if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                            0
                                        else:
                                            if this.address == address(cd[36]):
                                                if not address(cd[4]):
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not address(cd[36]):
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if cd[68] > balanceOf[address(cd[4])]:
                                                    revert with 0, 
                                                                32,
                                                                38,
                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                0
                                                if balanceOf[address(cd[4])] < cd[68]:
                                                    revert with 0, 17
                                                balanceOf[address(cd[4])] -= cd[68]
                                                if balanceOf[address(cd[36])] > !cd[68]:
                                                    revert with 0, 17
                                                if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(cd[36])] += cd[68]
                                                emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                                0
                                            else:
                                                if this.address == address(cd[4]):
                                                    if not address(cd[4]):
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not address(cd[36]):
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if cd[68] > balanceOf[address(cd[4])]:
                                                        revert with 0, 
                                                                    32,
                                                                    38,
                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                    0
                                                    if balanceOf[address(cd[4])] < cd[68]:
                                                        revert with 0, 17
                                                    balanceOf[address(cd[4])] -= cd[68]
                                                    if balanceOf[address(cd[36])] > !cd[68]:
                                                        revert with 0, 17
                                                    if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(cd[36])] += cd[68]
                                                    emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                    if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                                    0
                                                else:
                                                    if not uint8(stor29.field_0):
                                                        revert with 0, 'Trading not yet enabled.'
                                                    if treasuryPoolAddress == address(cd[36]):
                                                        if not address(cd[4]):
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not address(cd[36]):
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if cd[68] > balanceOf[address(cd[4])]:
                                                            revert with 0, 
                                                                        32,
                                                                        38,
                                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                        0
                                                        if balanceOf[address(cd[4])] < cd[68]:
                                                            revert with 0, 17
                                                        balanceOf[address(cd[4])] -= cd[68]
                                                        if balanceOf[address(cd[36])] > !cd[68]:
                                                            revert with 0, 17
                                                        if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(cd[36])] += cd[68]
                                                        emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                        if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                                        0
                                                    else:
                                                        if distributionPoolAddress == address(cd[36]):
                                                            if not address(cd[4]):
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not address(cd[36]):
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if cd[68] > balanceOf[address(cd[4])]:
                                                                revert with 0, 
                                                                            32,
                                                                            38,
                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                            0
                                                            if balanceOf[address(cd[4])] < cd[68]:
                                                                revert with 0, 17
                                                            balanceOf[address(cd[4])] -= cd[68]
                                                            if balanceOf[address(cd[36])] > !cd[68]:
                                                                revert with 0, 17
                                                            if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(cd[36])] += cd[68]
                                                            emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                            if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                revert with 0, 
                                                                            32,
                                                                            40,
                                                                            0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                                            0
                                                        else:
                                                            if devPoolAddress == address(cd[36]):
                                                                if not address(cd[4]):
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not address(cd[36]):
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if cd[68] > balanceOf[address(cd[4])]:
                                                                    revert with 0, 
                                                                                32,
                                                                                38,
                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                0
                                                                if balanceOf[address(cd[4])] < cd[68]:
                                                                    revert with 0, 17
                                                                balanceOf[address(cd[4])] -= cd[68]
                                                                if balanceOf[address(cd[36])] > !cd[68]:
                                                                    revert with 0, 17
                                                                if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(cd[36])] += cd[68]
                                                                emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                                if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                    revert with 0, 
                                                                                32,
                                                                                40,
                                                                                0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                                                0
                                                            else:
                                                                if treasuryPoolAddress == address(cd[4]):
                                                                    if not address(cd[4]):
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not address(cd[36]):
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if cd[68] > balanceOf[address(cd[4])]:
                                                                        revert with 0, 
                                                                                    32,
                                                                                    38,
                                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                    0
                                                                    if balanceOf[address(cd[4])] < cd[68]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(cd[4])] -= cd[68]
                                                                    if balanceOf[address(cd[36])] > !cd[68]:
                                                                        revert with 0, 17
                                                                    if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(cd[36])] += cd[68]
                                                                    emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                                    if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                        revert with 0, 
                                                                                    32,
                                                                                    40,
                                                                                    0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                                                    0
                                                                else:
                                                                    if distributionPoolAddress == address(cd[4]):
                                                                        if not address(cd[4]):
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not address(cd[36]):
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if cd[68] > balanceOf[address(cd[4])]:
                                                                            revert with 0, 
                                                                                        32,
                                                                                        38,
                                                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                        0
                                                                        if balanceOf[address(cd[4])] < cd[68]:
                                                                            revert with 0, 17
                                                                        balanceOf[address(cd[4])] -= cd[68]
                                                                        if balanceOf[address(cd[36])] > !cd[68]:
                                                                            revert with 0, 17
                                                                        if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        balanceOf[address(cd[36])] += cd[68]
                                                                        emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                                        if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                            revert with 0, 
                                                                                        32,
                                                                                        40,
                                                                                        0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                                                        0
                                                                    else:
                                                                        if devPoolAddress == address(cd[4]):
                                                                            if not address(cd[4]):
                                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                                            if not address(cd[36]):
                                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                                            if cd[68] > balanceOf[address(cd[4])]:
                                                                                revert with 0, 
                                                                                            32,
                                                                                            38,
                                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                            0
                                                                            if balanceOf[address(cd[4])] < cd[68]:
                                                                                revert with 0, 17
                                                                            balanceOf[address(cd[4])] -= cd[68]
                                                                            if balanceOf[address(cd[36])] > !cd[68]:
                                                                                revert with 0, 17
                                                                            if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            balanceOf[address(cd[36])] += cd[68]
                                                                            emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                                            if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                                revert with 0, 
                                                                                            32,
                                                                                            40,
                                                                                            0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                                                            0
                                                                        else:
                                                                            if not totalSupply:
                                                                                if cd[68] > !balanceOf[address(cd[36])]:
                                                                                    revert with 0, 17
                                                                                if cd[68] + balanceOf[address(cd[36])] < cd[68]:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                if cd[68] + balanceOf[address(cd[36])] > 0:
                                                                                    revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                            else:
                                                                                if totalSupply and stor34 > -1 / totalSupply:
                                                                                    revert with 0, 17
                                                                                if not totalSupply:
                                                                                    revert with 0, 18
                                                                                if totalSupply * stor34 / totalSupply != stor34:
                                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                                if cd[68] > !balanceOf[address(cd[36])]:
                                                                                    revert with 0, 17
                                                                                if cd[68] + balanceOf[address(cd[36])] < cd[68]:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                if cd[68] + balanceOf[address(cd[36])] > totalSupply * stor34 / 10000:
                                                                                    revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                            if not address(cd[4]):
                                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                                            if not address(cd[36]):
                                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                                            if cd[68] > balanceOf[address(cd[4])]:
                                                                                revert with 0, 
                                                                                            32,
                                                                                            38,
                                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 486 len 26] >> 48,
                                                                                            0
                                                                            if balanceOf[address(cd[4])] < cd[68]:
                                                                                revert with 0, 17
                                                                            balanceOf[address(cd[4])] -= cd[68]
                                                                            if balanceOf[address(cd[36])] > !cd[68]:
                                                                                revert with 0, 17
                                                                            if balanceOf[address(cd[36])] + cd[68] < balanceOf[address(cd[36])]:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            balanceOf[address(cd[36])] += cd[68]
                                                                            emit Transfer(cd[68], address(cd[4]), address(cd[36]));
                                                                            if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                                revert with 0, 
                                                                                            32,
                                                                                            40,
                                                                                            0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 584 len 24] >> 64,
                                                                                            0
                            else:
                                if cd[68] and sellTax > -1 / cd[68]:
                                    revert with 0, 17
                                if not cd[68]:
                                    revert with 0, 18
                                if cd[68] * sellTax / cd[68] != sellTax:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not address(cd[4]):
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not stor33:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if cd[68] * sellTax / 100 > balanceOf[address(cd[4])]:
                                    revert with 0, 
                                                32,
                                                38,
                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 262 len 26] >> 48,
                                                0
                                if balanceOf[address(cd[4])] < cd[68] * sellTax / 100:
                                    revert with 0, 17
                                balanceOf[address(cd[4])] -= cd[68] * sellTax / 100
                                if balanceOf[stor33] > !(cd[68] * sellTax / 100):
                                    revert with 0, 17
                                if balanceOf[stor33] + (cd[68] * sellTax / 100) < balanceOf[stor33]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[stor33] += cd[68] * sellTax / 100
                                emit Transfer((cd[68] * sellTax / 100), address(cd[4]), stor33);
                                if cd[68] * sellTax / 100 > cd[68]:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if cd[68] < cd[68] * sellTax / 100:
                                    revert with 0, 17
                                if owner == address(cd[4]):
                                    if not address(cd[4]):
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not address(cd[36]):
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if cd[68] - (cd[68] * sellTax / 100) > balanceOf[address(cd[4])]:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                    0
                                    if balanceOf[address(cd[4])] < cd[68] - (cd[68] * sellTax / 100):
                                        revert with 0, 17
                                    balanceOf[address(cd[4])] = balanceOf[address(cd[4])] - cd[68] + (cd[68] * sellTax / 100)
                                    if balanceOf[address(cd[36])] > !(cd[68] - (cd[68] * sellTax / 100)):
                                        revert with 0, 17
                                    if balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100) < balanceOf[address(cd[36])]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(cd[36])] = balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100)
                                    emit Transfer((cd[68] - (cd[68] * sellTax / 100)), address(cd[4]), address(cd[36]));
                                    if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                        revert with 0, 
                                                    32,
                                                    40,
                                                    0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                    0
                                else:
                                    if uniswapV2PairAddress == address(cd[36]):
                                        if not address(cd[4]):
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not address(cd[36]):
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if cd[68] - (cd[68] * sellTax / 100) > balanceOf[address(cd[4])]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                        0
                                        if balanceOf[address(cd[4])] < cd[68] - (cd[68] * sellTax / 100):
                                            revert with 0, 17
                                        balanceOf[address(cd[4])] = balanceOf[address(cd[4])] - cd[68] + (cd[68] * sellTax / 100)
                                        if balanceOf[address(cd[36])] > !(cd[68] - (cd[68] * sellTax / 100)):
                                            revert with 0, 17
                                        if balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100) < balanceOf[address(cd[36])]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(cd[36])] = balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100)
                                        emit Transfer((cd[68] - (cd[68] * sellTax / 100)), address(cd[4]), address(cd[36]));
                                        if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                            revert with 0, 
                                                        32,
                                                        40,
                                                        0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                        0
                                    else:
                                        if uniswapV2RouterAddress == address(cd[36]):
                                            if not address(cd[4]):
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not address(cd[36]):
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if cd[68] - (cd[68] * sellTax / 100) > balanceOf[address(cd[4])]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                            0
                                            if balanceOf[address(cd[4])] < cd[68] - (cd[68] * sellTax / 100):
                                                revert with 0, 17
                                            balanceOf[address(cd[4])] = balanceOf[address(cd[4])] - cd[68] + (cd[68] * sellTax / 100)
                                            if balanceOf[address(cd[36])] > !(cd[68] - (cd[68] * sellTax / 100)):
                                                revert with 0, 17
                                            if balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100) < balanceOf[address(cd[36])]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(cd[36])] = balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100)
                                            emit Transfer((cd[68] - (cd[68] * sellTax / 100)), address(cd[4]), address(cd[36]));
                                            if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                revert with 0, 
                                                            32,
                                                            40,
                                                            0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                            0
                                        else:
                                            if this.address == address(cd[36]):
                                                if not address(cd[4]):
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not address(cd[36]):
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if cd[68] - (cd[68] * sellTax / 100) > balanceOf[address(cd[4])]:
                                                    revert with 0, 
                                                                32,
                                                                38,
                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                0
                                                if balanceOf[address(cd[4])] < cd[68] - (cd[68] * sellTax / 100):
                                                    revert with 0, 17
                                                balanceOf[address(cd[4])] = balanceOf[address(cd[4])] - cd[68] + (cd[68] * sellTax / 100)
                                                if balanceOf[address(cd[36])] > !(cd[68] - (cd[68] * sellTax / 100)):
                                                    revert with 0, 17
                                                if balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100) < balanceOf[address(cd[36])]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(cd[36])] = balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100)
                                                emit Transfer((cd[68] - (cd[68] * sellTax / 100)), address(cd[4]), address(cd[36]));
                                                if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                    revert with 0, 
                                                                32,
                                                                40,
                                                                0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                                0
                                            else:
                                                if this.address == address(cd[4]):
                                                    if not address(cd[4]):
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not address(cd[36]):
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if cd[68] - (cd[68] * sellTax / 100) > balanceOf[address(cd[4])]:
                                                        revert with 0, 
                                                                    32,
                                                                    38,
                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                    0
                                                    if balanceOf[address(cd[4])] < cd[68] - (cd[68] * sellTax / 100):
                                                        revert with 0, 17
                                                    balanceOf[address(cd[4])] = balanceOf[address(cd[4])] - cd[68] + (cd[68] * sellTax / 100)
                                                    if balanceOf[address(cd[36])] > !(cd[68] - (cd[68] * sellTax / 100)):
                                                        revert with 0, 17
                                                    if balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100) < balanceOf[address(cd[36])]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(cd[36])] = balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100)
                                                    emit Transfer((cd[68] - (cd[68] * sellTax / 100)), address(cd[4]), address(cd[36]));
                                                    if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                        revert with 0, 
                                                                    32,
                                                                    40,
                                                                    0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                                    0
                                                else:
                                                    if not uint8(stor29.field_0):
                                                        revert with 0, 'Trading not yet enabled.'
                                                    if treasuryPoolAddress == address(cd[36]):
                                                        if not address(cd[4]):
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not address(cd[36]):
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if cd[68] - (cd[68] * sellTax / 100) > balanceOf[address(cd[4])]:
                                                            revert with 0, 
                                                                        32,
                                                                        38,
                                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                        0
                                                        if balanceOf[address(cd[4])] < cd[68] - (cd[68] * sellTax / 100):
                                                            revert with 0, 17
                                                        balanceOf[address(cd[4])] = balanceOf[address(cd[4])] - cd[68] + (cd[68] * sellTax / 100)
                                                        if balanceOf[address(cd[36])] > !(cd[68] - (cd[68] * sellTax / 100)):
                                                            revert with 0, 17
                                                        if balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100) < balanceOf[address(cd[36])]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(cd[36])] = balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100)
                                                        emit Transfer((cd[68] - (cd[68] * sellTax / 100)), address(cd[4]), address(cd[36]));
                                                        if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                            revert with 0, 
                                                                        32,
                                                                        40,
                                                                        0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                                        0
                                                    else:
                                                        if distributionPoolAddress == address(cd[36]):
                                                            if not address(cd[4]):
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not address(cd[36]):
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if cd[68] - (cd[68] * sellTax / 100) > balanceOf[address(cd[4])]:
                                                                revert with 0, 
                                                                            32,
                                                                            38,
                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                            0
                                                            if balanceOf[address(cd[4])] < cd[68] - (cd[68] * sellTax / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(cd[4])] = balanceOf[address(cd[4])] - cd[68] + (cd[68] * sellTax / 100)
                                                            if balanceOf[address(cd[36])] > !(cd[68] - (cd[68] * sellTax / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100) < balanceOf[address(cd[36])]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(cd[36])] = balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100)
                                                            emit Transfer((cd[68] - (cd[68] * sellTax / 100)), address(cd[4]), address(cd[36]));
                                                            if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                revert with 0, 
                                                                            32,
                                                                            40,
                                                                            0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                                            0
                                                        else:
                                                            if devPoolAddress == address(cd[36]):
                                                                if not address(cd[4]):
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not address(cd[36]):
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if cd[68] - (cd[68] * sellTax / 100) > balanceOf[address(cd[4])]:
                                                                    revert with 0, 
                                                                                32,
                                                                                38,
                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                0
                                                                if balanceOf[address(cd[4])] < cd[68] - (cd[68] * sellTax / 100):
                                                                    revert with 0, 17
                                                                balanceOf[address(cd[4])] = balanceOf[address(cd[4])] - cd[68] + (cd[68] * sellTax / 100)
                                                                if balanceOf[address(cd[36])] > !(cd[68] - (cd[68] * sellTax / 100)):
                                                                    revert with 0, 17
                                                                if balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100) < balanceOf[address(cd[36])]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(cd[36])] = balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100)
                                                                emit Transfer((cd[68] - (cd[68] * sellTax / 100)), address(cd[4]), address(cd[36]));
                                                                if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                    revert with 0, 
                                                                                32,
                                                                                40,
                                                                                0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                                                0
                                                            else:
                                                                if treasuryPoolAddress == address(cd[4]):
                                                                    if not address(cd[4]):
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not address(cd[36]):
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if cd[68] - (cd[68] * sellTax / 100) > balanceOf[address(cd[4])]:
                                                                        revert with 0, 
                                                                                    32,
                                                                                    38,
                                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                    0
                                                                    if balanceOf[address(cd[4])] < cd[68] - (cd[68] * sellTax / 100):
                                                                        revert with 0, 17
                                                                    balanceOf[address(cd[4])] = balanceOf[address(cd[4])] - cd[68] + (cd[68] * sellTax / 100)
                                                                    if balanceOf[address(cd[36])] > !(cd[68] - (cd[68] * sellTax / 100)):
                                                                        revert with 0, 17
                                                                    if balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100) < balanceOf[address(cd[36])]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(cd[36])] = balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100)
                                                                    emit Transfer((cd[68] - (cd[68] * sellTax / 100)), address(cd[4]), address(cd[36]));
                                                                    if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                        revert with 0, 
                                                                                    32,
                                                                                    40,
                                                                                    0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                                                    0
                                                                else:
                                                                    if distributionPoolAddress == address(cd[4]):
                                                                        if not address(cd[4]):
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not address(cd[36]):
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if cd[68] - (cd[68] * sellTax / 100) > balanceOf[address(cd[4])]:
                                                                            revert with 0, 
                                                                                        32,
                                                                                        38,
                                                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                        0
                                                                        if balanceOf[address(cd[4])] < cd[68] - (cd[68] * sellTax / 100):
                                                                            revert with 0, 17
                                                                        balanceOf[address(cd[4])] = balanceOf[address(cd[4])] - cd[68] + (cd[68] * sellTax / 100)
                                                                        if balanceOf[address(cd[36])] > !(cd[68] - (cd[68] * sellTax / 100)):
                                                                            revert with 0, 17
                                                                        if balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100) < balanceOf[address(cd[36])]:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        balanceOf[address(cd[36])] = balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100)
                                                                        emit Transfer((cd[68] - (cd[68] * sellTax / 100)), address(cd[4]), address(cd[36]));
                                                                        if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                            revert with 0, 
                                                                                        32,
                                                                                        40,
                                                                                        0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                                                        0
                                                                    else:
                                                                        if devPoolAddress == address(cd[4]):
                                                                            if not address(cd[4]):
                                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                                            if not address(cd[36]):
                                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                                            if cd[68] - (cd[68] * sellTax / 100) > balanceOf[address(cd[4])]:
                                                                                revert with 0, 
                                                                                            32,
                                                                                            38,
                                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                            0
                                                                            if balanceOf[address(cd[4])] < cd[68] - (cd[68] * sellTax / 100):
                                                                                revert with 0, 17
                                                                            balanceOf[address(cd[4])] = balanceOf[address(cd[4])] - cd[68] + (cd[68] * sellTax / 100)
                                                                            if balanceOf[address(cd[36])] > !(cd[68] - (cd[68] * sellTax / 100)):
                                                                                revert with 0, 17
                                                                            if balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100) < balanceOf[address(cd[36])]:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            balanceOf[address(cd[36])] = balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100)
                                                                            emit Transfer((cd[68] - (cd[68] * sellTax / 100)), address(cd[4]), address(cd[36]));
                                                                            if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                                revert with 0, 
                                                                                            32,
                                                                                            40,
                                                                                            0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 520 len 24] >> 64,
                                                                                            0
                                                                        else:
                                                                            if not totalSupply:
                                                                                if cd[68] - (cd[68] * sellTax / 100) > !balanceOf[address(cd[36])]:
                                                                                    revert with 0, 17
                                                                                if balanceOf[address(cd[36])] < 0:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                if cd[68] - (cd[68] * sellTax / 100) + balanceOf[address(cd[36])] > 0:
                                                                                    revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                            else:
                                                                                if totalSupply and stor34 > -1 / totalSupply:
                                                                                    revert with 0, 17
                                                                                if not totalSupply:
                                                                                    revert with 0, 18
                                                                                if totalSupply * stor34 / totalSupply != stor34:
                                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                                if cd[68] - (cd[68] * sellTax / 100) > !balanceOf[address(cd[36])]:
                                                                                    revert with 0, 17
                                                                                if balanceOf[address(cd[36])] < 0:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                if cd[68] - (cd[68] * sellTax / 100) + balanceOf[address(cd[36])] > totalSupply * stor34 / 10000:
                                                                                    revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                            if not address(cd[4]):
                                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                                            if not address(cd[36]):
                                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                                            if cd[68] - (cd[68] * sellTax / 100) > balanceOf[address(cd[4])]:
                                                                                revert with 0, 
                                                                                            32,
                                                                                            38,
                                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 486 len 26] >> 48,
                                                                                            0
                                                                            if balanceOf[address(cd[4])] < cd[68] - (cd[68] * sellTax / 100):
                                                                                revert with 0, 17
                                                                            balanceOf[address(cd[4])] = balanceOf[address(cd[4])] - cd[68] + (cd[68] * sellTax / 100)
                                                                            if balanceOf[address(cd[36])] > !(cd[68] - (cd[68] * sellTax / 100)):
                                                                                revert with 0, 17
                                                                            if balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100) < balanceOf[address(cd[36])]:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            balanceOf[address(cd[36])] = balanceOf[address(cd[36])] + cd[68] - (cd[68] * sellTax / 100)
                                                                            emit Transfer((cd[68] - (cd[68] * sellTax / 100)), address(cd[4]), address(cd[36]));
                                                                            if cd[68] > allowance[address(cd[4])][msg.sender].field_0:
                                                                                revert with 0, 
                                                                                            32,
                                                                                            40,
                                                                                            0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[ceil32(return_data.size) + 584 len 24] >> 64,
                                                                                            0
                ('le', ('cd', 68), ('field', 0, ('stor', ('map', 'msg.sender', ('map', ('mask_shl', 160, 0, 0, ('cd', 4)), ('name', 'allowance', 1))))))
                if allowance[address(cd[4])][msg.sender].field_0 < cd[68]:
                    revert with 0, 17
                if not address(cd[4]):
                    revert with 0, 'ERC20: approve from the zero address'
                if not msg.sender:
                    revert with 0, 'ERC20: approve to the zero address'
                allowance[address(cd[4])][address(msg.sender)].field_0 = allowance[address(cd[4])][msg.sender].field_0 - cd[68]
                emit Approval((allowance[address(cd[4])][msg.sender].field_0 - cd[68]), address(cd[4]), msg.sender);
                return 1
            if unknown_0x6ba550a0(?????) <= uint32(call.func_hash) >> 224:
                if unknown_0x7628b3d7(?????) > uint32(call.func_hash) >> 224:
                    if unknown_0x6ba550a0(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 64
                        require cd[4] == address(cd[4])
                        require ext_code.size(nodeRewardManagerAddress)
                        staticcall nodeRewardManagerAddress._getNodeValueOf(address arg1, uint256 arg2) with:
                                gas gas_remaining wei
                               args address(cd[4]), cd[36]
                    else:
                        if unknown_0x6d9ae0be(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            return cashoutFee
                        if unknown_0x6f4a2cd0(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            if owner != msg.sender:
                                revert with 0, 'Ownable: caller is not the owner'
                            require ext_code.size(nodeRewardManagerAddress)
                            call nodeRewardManagerAddress._distributeRewards() with:
                                 gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 96
                            return ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64]
                        if unknown_0x70a08231(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require calldata.size - 4 >= 32
                            require cd[4] == address(cd[4])
                            return balanceOf[address(cd[4])]
                        if unknown_0x715018a6(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            if owner != msg.sender:
                                revert with 0, 'Ownable: caller is not the owner'
                            emit OwnershipTransferred(owner, 0);
                            owner = 0
                        require unknown_0x7398437d(?????) == uint32(call.func_hash) >> 224
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require ext_code.size(nodeRewardManagerAddress)
                        staticcall nodeRewardManagerAddress._getNodeValueOf(address arg1, uint256 arg2) with:
                                gas gas_remaining wei
                               args msg.sender, cd[4]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    return ext_call.return_data[0]
                if unknown_0x846b8d63(?????) > uint32(call.func_hash) >> 224:
                    if unknown_0x7628b3d7(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        return nodeRewardManagerAddress
                    if unknown_0x77d57c33(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        require ext_code.size(nodeRewardManagerAddress)
                        call nodeRewardManagerAddress._changeRewardPerValue(uint256 arg1) with:
                             gas gas_remaining wei
                            args cd[4]
                    else:
                        require unknown_0x8005f735(?????) == uint32(call.func_hash) >> 224
                        require not msg.value
                        require calldata.size - 4 >= 32
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        require ext_code.size(nodeRewardManagerAddress)
                        call nodeRewardManagerAddress._changeNodeMinPrice(uint256 arg1) with:
                             gas gas_remaining wei
                            args cd[4]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                else:
                    if uint32(call.func_hash) >> 224 != unknown_0x846b8d63(?????):
                        if unknown_0x85141a77(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            return deadWalletAddress
                        if unknown_0x8689af84(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require ext_code.size(nodeRewardManagerAddress)
                            staticcall nodeRewardManagerAddress.0x728f0b4b with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            return ext_call.return_data[0]
                        require unknown_0x8743ef6d(?????) == uint32(call.func_hash) >> 224
                        require not msg.value
                        require ext_code.size(nodeRewardManagerAddress)
                        call nodeRewardManagerAddress._distributeRewards() with:
                             gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                    else:
                        require not msg.value
                        require calldata.size - 4 >= 64
                        require cd[4] <= test266151307()
                        require cd[4] + 35 < calldata.size
                        if ('cd', 4).length > test266151307():
                            revert with 0, 65
                        if ceil32(32 * ('cd', 4).length) + 129 < 128 or ceil32(32 * ('cd', 4).length) + 129 > test266151307():
                            revert with 0, 65
                        mem[128] = ('cd', 4).length
                        require calldata.size >= cd[4] + (32 * ('cd', 4).length) + 36
                        s = cd[4] + 36
                        t = 160
                        idx = 0
                        while idx < ('cd', 4).length:
                            mem[t] = cd[s]
                            s = s + 32
                            t = t + 32
                            idx = idx + 1
                            continue 
                        require cd[36] <= test266151307()
                        require cd[36] + 35 < calldata.size
                        if ('cd', 36).length > test266151307():
                            revert with 0, 65
                        if ceil32(32 * ('cd', 36).length) + 130 < 129 or ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 130 > test266151307():
                            revert with 0, 65
                        mem[ceil32(32 * ('cd', 4).length) + 129] = ('cd', 36).length
                        require calldata.size >= cd[36] + (32 * ('cd', 36).length) + 36
                        s = cd[36] + 36
                        t = ceil32(32 * ('cd', 4).length) + 161
                        idx = 0
                        while idx < ('cd', 36).length:
                            mem[t] = cd[s]
                            s = s + 32
                            t = t + 32
                            idx = idx + 1
                            continue 
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        if ('cd', 4).length != 6:
                            revert with 0, 'newTierLevels length has to be 6'
                        if ('cd', 36).length != 6:
                            revert with 0, 'newTierSlopes length has to be 6'
                        mem[ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 130] = 0x57829c6100000000000000000000000000000000000000000000000000000000
                        mem[ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 134] = 64
                        require ext_code.size(nodeRewardManagerAddress)
                        call nodeRewardManagerAddress.0x57829c61 with:
                             gas gas_remaining wei
                            args Array(len=('cd', 4).length, data=mem[160 len 32 * ('cd', 4).length], ('cd', 36).length, mem[ceil32(32 * ('cd', 4).length) + 161 len 32 * ('cd', 36).length]), (32 * ('cd', 4).length) + 96
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
            else:
                if unknown_0x5f1c3182(?????) > uint32(call.func_hash) >> 224:
                    if unknown_0x54557973(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        if not msg.sender:
                            revert with 0, 'MANIA CSHT:  creation from the zero address'
                        if stor35[address(msg.sender)]:
                            revert with 0, 'MANIA CSHT: Blacklisted address'
                        if treasuryPoolAddress == msg.sender:
                            revert with 0, 'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
                        if distributionPoolAddress == msg.sender:
                            revert with 0, 'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
                        mem[132] = msg.sender
                        require ext_code.size(nodeRewardManagerAddress)
                        staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1) with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'MANIA CSHT: You don't have enough reward to cash out'
                        if not uint8(stor27.field_8):
                            if not distributionPoolAddress:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not msg.sender:
                                revert with 0, 'ERC20: transfer to the zero address'
                            if ext_call.return_data[0] > balanceOf[stor17]:
                                revert with 0, 
                                            32,
                                            38,
                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 198 len 26] >> 48,
                                            0
                            if balanceOf[stor17] < ext_call.return_data[0]:
                                revert with 0, 17
                            balanceOf[stor17] -= ext_call.return_data[0]
                            if balanceOf[msg.sender] > !ext_call.return_data[0]:
                                revert with 0, 17
                            if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
                            emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
                        else:
                            if not cashoutFee:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 17
                                if not distributionPoolAddress:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if ext_call.return_data[0] > balanceOf[stor17]:
                                    revert with 0, 
                                                32,
                                                38,
                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 198 len 26] >> 48,
                                                0
                                if balanceOf[stor17] < ext_call.return_data[0]:
                                    revert with 0, 17
                                balanceOf[stor17] -= ext_call.return_data[0]
                                if balanceOf[msg.sender] > !ext_call.return_data[0]:
                                    revert with 0, 17
                                if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
                                emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
                            else:
                                if not ext_call.return_data[0]:
                                    mem[ceil32(return_data.size) + 128] = 26
                                    mem[ceil32(return_data.size) + 160] = 'SafeMath: division by zero'
                                    mem[ceil32(return_data.size) + 192] = 2
                                    mem[ceil32(return_data.size) + 224] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = (2 * ceil32(return_data.size)) + 288
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[(2 * ceil32(return_data.size)) + 292] = 32
                                        mem[(2 * ceil32(return_data.size)) + 324] = 36
                                        mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve from the zero add'
                                        mem[(2 * ceil32(return_data.size)) + 388] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                        revert with memory
                                          from (2 * ceil32(return_data.size)) + 288
                                           len ceil32(return_data.size) + 132
                                    if not uniswapV2RouterAddress:
                                        mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[(2 * ceil32(return_data.size)) + 292] = 32
                                        mem[(2 * ceil32(return_data.size)) + 324] = 34
                                        mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve to the zero addre'
                                        mem[(2 * ceil32(return_data.size)) + 388] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                        revert with memory
                                          from (2 * ceil32(return_data.size)) + 288
                                           len ceil32(return_data.size) + 132
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 1)
                                    allowance[address(this.address)][stor14].field_0 = 0
                                    mem[(2 * ceil32(return_data.size)) + 288] = 0
                                    emit Approval(mem[(2 * ceil32(return_data.size)) + 288 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                    mem[(2 * ceil32(return_data.size)) + 288] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[(2 * ceil32(return_data.size)) + 292] = 0
                                    mem[(2 * ceil32(return_data.size)) + 324] = 0
                                    mem[(2 * ceil32(return_data.size)) + 356] = 160
                                    mem[(2 * ceil32(return_data.size)) + 452] = 2
                                    idx = 0
                                    s = (2 * ceil32(return_data.size)) + 484
                                    t = ceil32(return_data.size) + 224
                                    while idx < mem[ceil32(return_data.size) + 192]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                    mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 544]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6598 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6598] = 30
                                    mem[_6598 + 32] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call treasuryPoolAddress with:
                                         gas 2300 wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if ext_call.return_data[0] < 0:
                                        revert with 0, 17
                                    if not distributionPoolAddress:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    _6863 = mem[64]
                                    mem[64] = mem[64] + 96
                                    mem[_6863] = 38
                                    mem[_6863 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                    if ext_call.return_data[0] > balanceOf[stor17]:
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 38
                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6863 + 70 len 26]
                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                    if balanceOf[stor17] < ext_call.return_data[0]:
                                        revert with 0, 17
                                    balanceOf[stor17] -= ext_call.return_data[0]
                                    if balanceOf[msg.sender] > !ext_call.return_data[0]:
                                        revert with 0, 17
                                    if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
                                else:
                                    if ext_call.return_data[0] and cashoutFee > -1 / ext_call.return_data[0]:
                                        revert with 0, 17
                                    if not ext_call.return_data[0]:
                                        revert with 0, 18
                                    if ext_call.return_data[0] * cashoutFee / ext_call.return_data[0] != cashoutFee:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    mem[ceil32(return_data.size) + 128] = 26
                                    mem[ceil32(return_data.size) + 160] = 'SafeMath: division by zero'
                                    mem[ceil32(return_data.size) + 192] = 2
                                    mem[ceil32(return_data.size) + 224] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = (2 * ceil32(return_data.size)) + 288
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[(2 * ceil32(return_data.size)) + 292] = 32
                                        mem[(2 * ceil32(return_data.size)) + 324] = 36
                                        mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve from the zero add'
                                        mem[(2 * ceil32(return_data.size)) + 388] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                        revert with memory
                                          from (2 * ceil32(return_data.size)) + 288
                                           len ceil32(return_data.size) + 132
                                    if not uniswapV2RouterAddress:
                                        mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[(2 * ceil32(return_data.size)) + 292] = 32
                                        mem[(2 * ceil32(return_data.size)) + 324] = 34
                                        mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve to the zero addre'
                                        mem[(2 * ceil32(return_data.size)) + 388] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                        revert with memory
                                          from (2 * ceil32(return_data.size)) + 288
                                           len ceil32(return_data.size) + 132
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 1)
                                    allowance[address(this.address)][stor14].field_0 = ext_call.return_data[0] * cashoutFee / 100
                                    mem[(2 * ceil32(return_data.size)) + 288] = ext_call.return_data[0] * cashoutFee / 100
                                    emit Approval(mem[(2 * ceil32(return_data.size)) + 288 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                    mem[(2 * ceil32(return_data.size)) + 288] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[(2 * ceil32(return_data.size)) + 292] = ext_call.return_data[0] * cashoutFee / 100
                                    mem[(2 * ceil32(return_data.size)) + 324] = 0
                                    mem[(2 * ceil32(return_data.size)) + 356] = 160
                                    mem[(2 * ceil32(return_data.size)) + 452] = 2
                                    idx = 0
                                    s = (2 * ceil32(return_data.size)) + 484
                                    t = ceil32(return_data.size) + 224
                                    while idx < mem[ceil32(return_data.size) + 192]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                    mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 544]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6597 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6597] = 30
                                    mem[_6597 + 32] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call treasuryPoolAddress with:
                                         gas 2300 wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if ext_call.return_data[0] < ext_call.return_data[0] * cashoutFee / 100:
                                        revert with 0, 17
                                    if not distributionPoolAddress:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    _6860 = mem[64]
                                    mem[64] = mem[64] + 96
                                    mem[_6860] = 38
                                    mem[_6860 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                    if ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) > balanceOf[stor17]:
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 38
                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6860 + 70 len 26]
                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                    if balanceOf[stor17] < ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100):
                                        revert with 0, 17
                                    balanceOf[stor17] = balanceOf[stor17] - ext_call.return_data[0] + (ext_call.return_data[0] * cashoutFee / 100)
                                    if balanceOf[msg.sender] > !(ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)):
                                        revert with 0, 17
                                    if balanceOf[msg.sender] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) < balanceOf[msg.sender]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)
                                    emit Transfer((ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)), distributionPoolAddress, msg.sender);
                        require ext_code.size(nodeRewardManagerAddress)
                        call nodeRewardManagerAddress._cashoutAllNodesReward(address arg1) with:
                             gas gas_remaining wei
                            args msg.sender
                    else:
                        if unknown_0x54f12f1f(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            return liquidityPoolFee
                        if uint32(call.func_hash) >> 224 != unknown_0x576ffa03(?????):
                            if unknown_0x583bd7a6(?????) == uint32(call.func_hash) >> 224:
                                require not msg.value
                                require calldata.size - 4 >= 32
                                require cd[4] == bool(cd[4])
                                if owner != msg.sender:
                                    revert with 0, 'Ownable: caller is not the owner'
                                Mask(248, 0, stor27.field_8) = Mask(248, 0, bool(cd[4]))
                            if unknown_0x59640ed9(?????) == uint32(call.func_hash) >> 224:
                                require not msg.value
                                require calldata.size - 4 >= 32
                                if owner != msg.sender:
                                    revert with 0, 'Ownable: caller is not the owner'
                                require ext_code.size(nodeRewardManagerAddress)
                                call nodeRewardManagerAddress._changeGasDistri(uint256 arg1) with:
                                     gas gas_remaining wei
                                    args cd[4]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            require unknown_0x5b0d4674(?????) == uint32(call.func_hash) >> 224
                            require not msg.value
                            if not msg.sender:
                                revert with 0, 'SENDER CAN'T BE ZERO'
                            mem[132] = msg.sender
                            require ext_code.size(nodeRewardManagerAddress)
                            staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
                                    gas gas_remaining wei
                                   args msg.sender
                            mem[128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'NO NODE OWNER'
                            mem[ceil32(return_data.size) + 128] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                            mem[ceil32(return_data.size) + 132] = msg.sender
                            require ext_code.size(nodeRewardManagerAddress)
                            staticcall nodeRewardManagerAddress._getNodesRewardAvailable(address arg1) with:
                                    gas gas_remaining wei
                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = (2 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            _591 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                            require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                            require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                            _641 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                revert with 0, 65
                            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                revert with 0, 65
                            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                            mem[(2 * ceil32(return_data.size)) + 128] = _641
                            require _591 + _641 + 32 <= return_data.size
                            mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_641)] = mem[ceil32(return_data.size) + _591 + 160 len ceil32(_641)]
                            if ceil32(_641) <= _641:
                                _6319 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _641
                                mem[mem[64] + 64 len ceil32(_641)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_641)]
                                if ceil32(_641) <= _641:
                                    return Array(len=_641, data=mem[mem[64] + 64 len ceil32(_641)])
                                mem[_641 + mem[64] + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_641) + _6319 + -mem[64] + 64
                            mem[_641 + (2 * ceil32(return_data.size)) + 160] = 0
                            _6320 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _641
                            mem[mem[64] + 64 len ceil32(_641)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_641)]
                            if ceil32(_641) <= _641:
                                return Array(len=_641, data=mem[mem[64] + 64 len ceil32(_641)])
                            mem[_641 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_641) + _6320 + -mem[64] + 64
                        require not msg.value
                        if not msg.sender:
                            revert with 0, 'MANIA CSHT:  creation from the zero address'
                        if stor35[address(msg.sender)]:
                            revert with 0, 'MANIA CSHT: Blacklisted address'
                        if treasuryPoolAddress == msg.sender:
                            revert with 0, 'MANIA CSHT: futur, dev and rewardsPool cannot cashout rewards'
                        if distributionPoolAddress == msg.sender:
                            revert with 0, 'MANIA CSHT: futur, dev and rewardsPool cannot cashout rewards'
                        if devPoolAddress == msg.sender:
                            revert with 0, 'MANIA CSHT: futur, dev and rewardsPool cannot cashout rewards'
                        mem[132] = msg.sender
                        require ext_code.size(nodeRewardManagerAddress)
                        staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1) with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'MANIA CSHT: You don't have enough reward to compound'
                        if not uint8(stor27.field_8):
                            if not distributionPoolAddress:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not this.address:
                                revert with 0, 'ERC20: transfer to the zero address'
                            if ext_call.return_data[0] > balanceOf[stor17]:
                                revert with 0, 
                                            32,
                                            38,
                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 198 len 26] >> 48,
                                            0
                            if balanceOf[stor17] < ext_call.return_data[0]:
                                revert with 0, 17
                            balanceOf[stor17] -= ext_call.return_data[0]
                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                revert with 0, 17
                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                            emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
                        else:
                            if not cashoutFee:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 17
                                if not distributionPoolAddress:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if ext_call.return_data[0] > balanceOf[stor17]:
                                    revert with 0, 
                                                32,
                                                38,
                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 198 len 26] >> 48,
                                                0
                                if balanceOf[stor17] < ext_call.return_data[0]:
                                    revert with 0, 17
                                balanceOf[stor17] -= ext_call.return_data[0]
                                if balanceOf[this.address] > !ext_call.return_data[0]:
                                    revert with 0, 17
                                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
                            else:
                                if not ext_call.return_data[0]:
                                    mem[ceil32(return_data.size) + 128] = 26
                                    mem[ceil32(return_data.size) + 160] = 'SafeMath: division by zero'
                                    mem[ceil32(return_data.size) + 192] = 2
                                    mem[ceil32(return_data.size) + 224] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = (2 * ceil32(return_data.size)) + 288
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[(2 * ceil32(return_data.size)) + 292] = 32
                                        mem[(2 * ceil32(return_data.size)) + 324] = 36
                                        mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve from the zero add'
                                        mem[(2 * ceil32(return_data.size)) + 388] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                        revert with memory
                                          from (2 * ceil32(return_data.size)) + 288
                                           len ceil32(return_data.size) + 132
                                    if not uniswapV2RouterAddress:
                                        mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[(2 * ceil32(return_data.size)) + 292] = 32
                                        mem[(2 * ceil32(return_data.size)) + 324] = 34
                                        mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve to the zero addre'
                                        mem[(2 * ceil32(return_data.size)) + 388] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                        revert with memory
                                          from (2 * ceil32(return_data.size)) + 288
                                           len ceil32(return_data.size) + 132
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 1)
                                    allowance[address(this.address)][stor14].field_0 = 0
                                    mem[(2 * ceil32(return_data.size)) + 288] = 0
                                    emit Approval(mem[(2 * ceil32(return_data.size)) + 288 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                    mem[(2 * ceil32(return_data.size)) + 288] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[(2 * ceil32(return_data.size)) + 292] = 0
                                    mem[(2 * ceil32(return_data.size)) + 324] = 0
                                    mem[(2 * ceil32(return_data.size)) + 356] = 160
                                    mem[(2 * ceil32(return_data.size)) + 452] = 2
                                    idx = 0
                                    s = (2 * ceil32(return_data.size)) + 484
                                    t = ceil32(return_data.size) + 224
                                    while idx < mem[ceil32(return_data.size) + 192]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                    mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 544]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6600 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6600] = 30
                                    mem[_6600 + 32] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call devPoolAddress with:
                                         gas 2300 wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if ext_call.return_data[0] < 0:
                                        revert with 0, 17
                                    if not distributionPoolAddress:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    _6869 = mem[64]
                                    mem[64] = mem[64] + 96
                                    mem[_6869] = 38
                                    mem[_6869 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                    if ext_call.return_data[0] > balanceOf[stor17]:
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 38
                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6869 + 70 len 26]
                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                    if balanceOf[stor17] < ext_call.return_data[0]:
                                        revert with 0, 17
                                    balanceOf[stor17] -= ext_call.return_data[0]
                                    if balanceOf[this.address] > !ext_call.return_data[0]:
                                        revert with 0, 17
                                    if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
                                else:
                                    if ext_call.return_data[0] and cashoutFee > -1 / ext_call.return_data[0]:
                                        revert with 0, 17
                                    if not ext_call.return_data[0]:
                                        revert with 0, 18
                                    if ext_call.return_data[0] * cashoutFee / ext_call.return_data[0] != cashoutFee:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    mem[ceil32(return_data.size) + 128] = 26
                                    mem[ceil32(return_data.size) + 160] = 'SafeMath: division by zero'
                                    mem[ceil32(return_data.size) + 192] = 2
                                    mem[ceil32(return_data.size) + 224] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = (2 * ceil32(return_data.size)) + 288
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[(2 * ceil32(return_data.size)) + 292] = 32
                                        mem[(2 * ceil32(return_data.size)) + 324] = 36
                                        mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve from the zero add'
                                        mem[(2 * ceil32(return_data.size)) + 388] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                        revert with memory
                                          from (2 * ceil32(return_data.size)) + 288
                                           len ceil32(return_data.size) + 132
                                    if not uniswapV2RouterAddress:
                                        mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[(2 * ceil32(return_data.size)) + 292] = 32
                                        mem[(2 * ceil32(return_data.size)) + 324] = 34
                                        mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve to the zero addre'
                                        mem[(2 * ceil32(return_data.size)) + 388] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                        revert with memory
                                          from (2 * ceil32(return_data.size)) + 288
                                           len ceil32(return_data.size) + 132
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 1)
                                    allowance[address(this.address)][stor14].field_0 = ext_call.return_data[0] * cashoutFee / 100
                                    mem[(2 * ceil32(return_data.size)) + 288] = ext_call.return_data[0] * cashoutFee / 100
                                    emit Approval(mem[(2 * ceil32(return_data.size)) + 288 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                    mem[(2 * ceil32(return_data.size)) + 288] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[(2 * ceil32(return_data.size)) + 292] = ext_call.return_data[0] * cashoutFee / 100
                                    mem[(2 * ceil32(return_data.size)) + 324] = 0
                                    mem[(2 * ceil32(return_data.size)) + 356] = 160
                                    mem[(2 * ceil32(return_data.size)) + 452] = 2
                                    idx = 0
                                    s = (2 * ceil32(return_data.size)) + 484
                                    t = ceil32(return_data.size) + 224
                                    while idx < mem[ceil32(return_data.size) + 192]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                    mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 544]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6599 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6599] = 30
                                    mem[_6599 + 32] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call devPoolAddress with:
                                         gas 2300 wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if ext_call.return_data[0] < ext_call.return_data[0] * cashoutFee / 100:
                                        revert with 0, 17
                                    if not distributionPoolAddress:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    _6866 = mem[64]
                                    mem[64] = mem[64] + 96
                                    mem[_6866] = 38
                                    mem[_6866 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                    if ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) > balanceOf[stor17]:
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 38
                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6866 + 70 len 26]
                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                    if balanceOf[stor17] < ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100):
                                        revert with 0, 17
                                    balanceOf[stor17] = balanceOf[stor17] - ext_call.return_data[0] + (ext_call.return_data[0] * cashoutFee / 100)
                                    if balanceOf[this.address] > !(ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)):
                                        revert with 0, 17
                                    if balanceOf[this.address] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) < balanceOf[this.address]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)
                                    emit Transfer((ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)), distributionPoolAddress, this.address);
                        require ext_code.size(nodeRewardManagerAddress)
                        call nodeRewardManagerAddress._addAllNodeValue(address arg1) with:
                             gas gas_remaining wei
                            args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                else:
                    if unknown_0x5f1c3182(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        return swapTokensAmount
                    if unknown_0x6256d181(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        stor34 = cd[4]
                    else:
                        if unknown_0x65b8dbc0(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require calldata.size - 4 >= 32
                            require cd[4] == address(cd[4])
                            if owner != msg.sender:
                                revert with 0, 'Ownable: caller is not the owner'
                            if uniswapV2RouterAddress == address(cd[4]):
                                revert with 0, 'TKN: The router already has that address'
                            emit UpdateUniswapV2Router(address(cd[4]), uniswapV2RouterAddress);
                            uniswapV2RouterAddress = address(cd[4])
                            require ext_code.size(address(cd[4]))
                            staticcall address(cd[4]).factory() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            require ext_code.size(uniswapV2RouterAddress)
                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).createPair(address arg1, address arg2) with:
                                 gas gas_remaining wei
                                args address(this.address), address(ext_call.return_data[0])
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            uniswapV2PairAddress = ext_call.return_data[12 len 20]
                        else:
                            if uint32(call.func_hash) >> 224 != unknown_0x65bfe430(?????):
                                if unknown_0x6770474b(?????) == uint32(call.func_hash) >> 224:
                                    require not msg.value
                                    require calldata.size - 4 >= 32
                                    if owner != msg.sender:
                                        revert with 0, 'Ownable: caller is not the owner'
                                    swapTokensAmount = cd[4]
                                else:
                                    require unknown_0x6815a91c(?????) == uint32(call.func_hash) >> 224
                                    require not msg.value
                                    require calldata.size - 4 >= 32
                                    if owner != msg.sender:
                                        revert with 0, 'Ownable: caller is not the owner'
                                    cashoutFee = cd[4]
                            else:
                                require not msg.value
                                require calldata.size - 4 >= 32
                                if not msg.sender:
                                    revert with 0, 'CSHT:  creation from the zero address'
                                if stor35[address(msg.sender)]:
                                    revert with 0, 'MANIA CSHT: Blacklisted address'
                                if treasuryPoolAddress == msg.sender:
                                    revert with 0, 'CSHT: futur and rewardsPool cannot cashout rewards'
                                if distributionPoolAddress == msg.sender:
                                    revert with 0, 'CSHT: futur and rewardsPool cannot cashout rewards'
                                mem[132] = msg.sender
                                mem[164] = cd[4]
                                require ext_code.size(nodeRewardManagerAddress)
                                staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1, uint256 arg2) with:
                                        gas gas_remaining wei
                                       args msg.sender, cd[4]
                                mem[128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'CSHT: You don't have enough reward to cash out'
                                if not uint8(stor27.field_8):
                                    if not distributionPoolAddress:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if ext_call.return_data[0] > balanceOf[stor17]:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 198 len 26] >> 48,
                                                    0
                                    if balanceOf[stor17] < ext_call.return_data[0]:
                                        revert with 0, 17
                                    balanceOf[stor17] -= ext_call.return_data[0]
                                    if balanceOf[msg.sender] > !ext_call.return_data[0]:
                                        revert with 0, 17
                                    if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
                                else:
                                    if not cashoutFee:
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 17
                                        if not distributionPoolAddress:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if ext_call.return_data[0] > balanceOf[stor17]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 198 len 26] >> 48,
                                                        0
                                        if balanceOf[stor17] < ext_call.return_data[0]:
                                            revert with 0, 17
                                        balanceOf[stor17] -= ext_call.return_data[0]
                                        if balanceOf[msg.sender] > !ext_call.return_data[0]:
                                            revert with 0, 17
                                        if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            mem[ceil32(return_data.size) + 128] = 26
                                            mem[ceil32(return_data.size) + 160] = 'SafeMath: division by zero'
                                            mem[ceil32(return_data.size) + 192] = 2
                                            mem[ceil32(return_data.size) + 224] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (2 * ceil32(return_data.size)) + 288
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(2 * ceil32(return_data.size)) + 292] = 32
                                                mem[(2 * ceil32(return_data.size)) + 324] = 36
                                                mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve from the zero add'
                                                mem[(2 * ceil32(return_data.size)) + 388] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from (2 * ceil32(return_data.size)) + 288
                                                   len ceil32(return_data.size) + 132
                                            if not uniswapV2RouterAddress:
                                                mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(2 * ceil32(return_data.size)) + 292] = 32
                                                mem[(2 * ceil32(return_data.size)) + 324] = 34
                                                mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve to the zero addre'
                                                mem[(2 * ceil32(return_data.size)) + 388] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from (2 * ceil32(return_data.size)) + 288
                                                   len ceil32(return_data.size) + 132
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            mem[(2 * ceil32(return_data.size)) + 288] = 0
                                            emit Approval(mem[(2 * ceil32(return_data.size)) + 288 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                            mem[(2 * ceil32(return_data.size)) + 288] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[(2 * ceil32(return_data.size)) + 292] = 0
                                            mem[(2 * ceil32(return_data.size)) + 324] = 0
                                            mem[(2 * ceil32(return_data.size)) + 356] = 160
                                            mem[(2 * ceil32(return_data.size)) + 452] = 2
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 484
                                            t = ceil32(return_data.size) + 224
                                            while idx < mem[ceil32(return_data.size) + 192]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                            mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 544]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _6602 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_6602] = 30
                                            mem[_6602 + 32] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            call treasuryPoolAddress with:
                                                 gas 2300 wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 17
                                            if not distributionPoolAddress:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _6875 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_6875] = 38
                                            mem[_6875 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if ext_call.return_data[0] > balanceOf[stor17]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6875 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[stor17] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[stor17] -= ext_call.return_data[0]
                                            if balanceOf[msg.sender] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
                                        else:
                                            if ext_call.return_data[0] and cashoutFee > -1 / ext_call.return_data[0]:
                                                revert with 0, 17
                                            if not ext_call.return_data[0]:
                                                revert with 0, 18
                                            if ext_call.return_data[0] * cashoutFee / ext_call.return_data[0] != cashoutFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[ceil32(return_data.size) + 128] = 26
                                            mem[ceil32(return_data.size) + 160] = 'SafeMath: division by zero'
                                            mem[ceil32(return_data.size) + 192] = 2
                                            mem[ceil32(return_data.size) + 224] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (2 * ceil32(return_data.size)) + 288
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(2 * ceil32(return_data.size)) + 292] = 32
                                                mem[(2 * ceil32(return_data.size)) + 324] = 36
                                                mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve from the zero add'
                                                mem[(2 * ceil32(return_data.size)) + 388] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from (2 * ceil32(return_data.size)) + 288
                                                   len ceil32(return_data.size) + 132
                                            if not uniswapV2RouterAddress:
                                                mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(2 * ceil32(return_data.size)) + 292] = 32
                                                mem[(2 * ceil32(return_data.size)) + 324] = 34
                                                mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve to the zero addre'
                                                mem[(2 * ceil32(return_data.size)) + 388] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from (2 * ceil32(return_data.size)) + 288
                                                   len ceil32(return_data.size) + 132
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = ext_call.return_data[0] * cashoutFee / 100
                                            mem[(2 * ceil32(return_data.size)) + 288] = ext_call.return_data[0] * cashoutFee / 100
                                            emit Approval(mem[(2 * ceil32(return_data.size)) + 288 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                            mem[(2 * ceil32(return_data.size)) + 288] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[(2 * ceil32(return_data.size)) + 292] = ext_call.return_data[0] * cashoutFee / 100
                                            mem[(2 * ceil32(return_data.size)) + 324] = 0
                                            mem[(2 * ceil32(return_data.size)) + 356] = 160
                                            mem[(2 * ceil32(return_data.size)) + 452] = 2
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 484
                                            t = ceil32(return_data.size) + 224
                                            while idx < mem[ceil32(return_data.size) + 192]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                            mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 544]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _6601 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_6601] = 30
                                            mem[_6601 + 32] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            call treasuryPoolAddress with:
                                                 gas 2300 wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if ext_call.return_data[0] < ext_call.return_data[0] * cashoutFee / 100:
                                                revert with 0, 17
                                            if not distributionPoolAddress:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _6872 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_6872] = 38
                                            mem[_6872 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) > balanceOf[stor17]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6872 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[stor17] < ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100):
                                                revert with 0, 17
                                            balanceOf[stor17] = balanceOf[stor17] - ext_call.return_data[0] + (ext_call.return_data[0] * cashoutFee / 100)
                                            if balanceOf[msg.sender] > !(ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)):
                                                revert with 0, 17
                                            if balanceOf[msg.sender] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) < balanceOf[msg.sender]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)
                                            emit Transfer((ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)), distributionPoolAddress, msg.sender);
                                require ext_code.size(nodeRewardManagerAddress)
                                call nodeRewardManagerAddress._cashoutNodeReward(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args msg.sender, cd[4]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
        else:
            if unknown_0xc5ca7d6d(?????) <= uint32(call.func_hash) >> 224:
                if unknown_0xdd62ed3e(?????) > uint32(call.func_hash) >> 224:
                    if unknown_0xd0f77474(?????) > uint32(call.func_hash) >> 224:
                        if unknown_0xc5ca7d6d(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            return distributionPoolAddress
                        if unknown_0xc9567bf9(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            if owner != msg.sender:
                                revert with 0, 'Ownable: caller is not the owner'
                            if uint8(stor29.field_0):
                                revert with 0, 'trading is already open'
                            uint8(stor29.field_0) = 1
                            stor31 = block.number
                        else:
                            if unknown_0xcc1776d3(?????) == uint32(call.func_hash) >> 224:
                                require not msg.value
                                return sellTax
                            if unknown_0xcc32d176(?????) == uint32(call.func_hash) >> 224:
                                require not msg.value
                                return treasuryFee
                            if unknown_0xce7c2ac2(?????) == uint32(call.func_hash) >> 224:
                                require not msg.value
                                require calldata.size - 4 >= 32
                                require cd[4] == address(cd[4])
                                return shares[address(cd[4])]
                            require unknown_0xcf04520c(?????) == uint32(call.func_hash) >> 224
                            require not msg.value
                            require calldata.size - 4 >= 32
                            if owner != msg.sender:
                                revert with 0, 'Ownable: caller is not the owner'
                            stor26 = cd[4]
                    if unknown_0xd0f77474(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == bool(cd[4])
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        require ext_code.size(nodeRewardManagerAddress)
                        call nodeRewardManagerAddress._changeAutoDistri(bool arg1) with:
                             gas gas_remaining wei
                            args bool(cd[4])
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                    if unknown_0xd19dd862(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require ext_code.size(nodeRewardManagerAddress)
                        staticcall nodeRewardManagerAddress.0x943ab261 with:
                                gas gas_remaining wei
                    else:
                        if unknown_0xd766636b(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require ext_code.size(nodeRewardManagerAddress)
                            staticcall nodeRewardManagerAddress._getNodeValueOf(address arg1) with:
                                    gas gas_remaining wei
                                   args msg.sender
                        else:
                            if unknown_0xd79779b2(?????) == uint32(call.func_hash) >> 224:
                                require not msg.value
                                require calldata.size - 4 >= 32
                                require cd[4] == address(cd[4])
                                return totalReleased[address(cd[4])]
                            if unknown_0xd8929342(?????) == uint32(call.func_hash) >> 224:
                                require not msg.value
                                require calldata.size - 4 >= 64
                                require cd[4] == address(cd[4])
                                require cd[36] == bool(cd[36])
                                if owner != msg.sender:
                                    revert with 0, 'Ownable: caller is not the owner'
                                stor35[address(cd[4])] = uint8(bool(cd[36]))
                            require unknown_0xda41b333(?????) == uint32(call.func_hash) >> 224
                            require not msg.value
                            require ext_code.size(nodeRewardManagerAddress)
                            staticcall nodeRewardManagerAddress.lastDistributionCount() with:
                                    gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    return ext_call.return_data[0]
                if unknown_0xf74c9934(?????) > uint32(call.func_hash) >> 224:
                    if unknown_0xdd62ed3e(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 64
                        require cd[4] == address(cd[4])
                        require cd[36] == address(cd[36])
                        return allowance[address(cd[4])][address(cd[36])].field_0
                    if unknown_0xe06fc519(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        return bool(sub_e06fc519)
                    if unknown_0xe33b7de3(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        return totalReleased
                    if uint32(call.func_hash) >> 224 != unknown_0xee1afdbf(?????):
                        if uint32(call.func_hash) >> 224 != unknown_0xf2fde38b(?????):
                            require unknown_0xf5a07256(?????) == uint32(call.func_hash) >> 224
                            require not msg.value
                            require ext_code.size(nodeRewardManagerAddress)
                            staticcall nodeRewardManagerAddress.claimTime() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            return ext_call.return_data[0]
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == address(cd[4])
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        if not address(cd[4]):
                            revert with 0, 'Ownable: new owner is the zero address'
                        emit OwnershipTransferred(owner, address(cd[4]));
                        owner = address(cd[4])
                    require not msg.value
                    if not msg.sender:
                        revert with 0, 'SENDER CAN'T BE ZERO'
                    mem[132] = msg.sender
                    require ext_code.size(nodeRewardManagerAddress)
                    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    require ext_code.size(nodeRewardManagerAddress)
                    staticcall nodeRewardManagerAddress._getNodesLastClaimTime(address arg1) with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _552 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _606 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _606
                    require _552 + _606 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_606)] = mem[ceil32(return_data.size) + _552 + 160 len ceil32(_606)]
                    if ceil32(_606) > _606:
                        mem[_606 + (2 * ceil32(return_data.size)) + 160] = 0
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _606
                    mem[mem[64] + 64 len ceil32(_606)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_606)]
                    if ceil32(_606) > _606:
                        mem[_606 + mem[64] + 64] = 0
                    return Array(len=_606, data=mem[mem[64] + 64 len ceil32(_606)])
                if unknown_0xf9afc763(?????) > uint32(call.func_hash) >> 224:
                    if unknown_0xf74c9934(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == address(cd[4])
                        require ext_code.size(nodeRewardManagerAddress)
                        staticcall nodeRewardManagerAddress._getNodeNumberOf(address arg1) with:
                                gas gas_remaining wei
                               args address(cd[4])
                    else:
                        if unknown_0xf7791bcf(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require calldata.size - 4 >= 32
                            require ext_code.size(nodeRewardManagerAddress)
                            staticcall nodeRewardManagerAddress._getRewardMultOf(address arg1, uint256 arg2) with:
                                    gas gas_remaining wei
                                   args msg.sender, cd[4]
                        else:
                            require unknown_0xf7b9f943(?????) == uint32(call.func_hash) >> 224
                            require not msg.value
                            require ext_code.size(nodeRewardManagerAddress)
                            staticcall nodeRewardManagerAddress.gasForDistribution() with:
                                    gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    return ext_call.return_data[0]
                if unknown_0xf9afc763(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require ext_code.size(nodeRewardManagerAddress)
                    staticcall nodeRewardManagerAddress.autoDistri() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    return bool(ext_call.return_data[0])
                if unknown_0xfa41f64b(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 64
                    require cd[4] == address(cd[4])
                    require ext_code.size(nodeRewardManagerAddress)
                    staticcall nodeRewardManagerAddress._getRewardMultOf(address arg1, uint256 arg2) with:
                            gas gas_remaining wei
                           args address(cd[4]), cd[36]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    return ext_call.return_data[0]
                if unknown_0xfb0a7494(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 32
                    require cd[4] == address(cd[4])
                    if owner != msg.sender:
                        revert with 0, 'Ownable: caller is not the owner'
                    nodeRewardManagerAddress = address(cd[4])
                else:
                    require unknown_0xfdaaadf7(?????) == uint32(call.func_hash) >> 224
                    require not msg.value
                    require calldata.size - 4 >= 32
                    if not msg.sender:
                        revert with 0, 'CSHT:  creation from the zero address'
                    if stor35[address(msg.sender)]:
                        revert with 0, 'MANIA CSHT: Blacklisted address'
                    if treasuryPoolAddress == msg.sender:
                        revert with 0, 'CSHT: futur, dev and rewardsPool cannot compound nodes'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'CSHT: futur, dev and rewardsPool cannot compound nodes'
                    if devPoolAddress == msg.sender:
                        revert with 0, 'CSHT: futur, dev and rewardsPool cannot compound nodes'
                    mem[132] = msg.sender
                    mem[164] = cd[4]
                    require ext_code.size(nodeRewardManagerAddress)
                    staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1, uint256 arg2) with:
                            gas gas_remaining wei
                           args msg.sender, cd[4]
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'CSHT: You don't have enough reward to compound your node'
                    if not uint8(stor27.field_8):
                        if not distributionPoolAddress:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not this.address:
                            revert with 0, 'ERC20: transfer to the zero address'
                        if ext_call.return_data[0] > balanceOf[stor17]:
                            revert with 0, 
                                        32,
                                        38,
                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 198 len 26] >> 48,
                                        0
                        if balanceOf[stor17] < ext_call.return_data[0]:
                            revert with 0, 17
                        balanceOf[stor17] -= ext_call.return_data[0]
                        if balanceOf[this.address] > !ext_call.return_data[0]:
                            revert with 0, 17
                        if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                        emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
                    else:
                        if not cashoutFee:
                            if ext_call.return_data[0] < 0:
                                revert with 0, 17
                            if not distributionPoolAddress:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not this.address:
                                revert with 0, 'ERC20: transfer to the zero address'
                            if ext_call.return_data[0] > balanceOf[stor17]:
                                revert with 0, 
                                            32,
                                            38,
                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 198 len 26] >> 48,
                                            0
                            if balanceOf[stor17] < ext_call.return_data[0]:
                                revert with 0, 17
                            balanceOf[stor17] -= ext_call.return_data[0]
                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                revert with 0, 17
                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                            emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
                        else:
                            if not ext_call.return_data[0]:
                                mem[ceil32(return_data.size) + 128] = 26
                                mem[ceil32(return_data.size) + 160] = 'SafeMath: division by zero'
                                mem[ceil32(return_data.size) + 192] = 2
                                mem[ceil32(return_data.size) + 224] = this.address
                                require ext_code.size(uniswapV2RouterAddress)
                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                        gas gas_remaining wei
                                mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = (2 * ceil32(return_data.size)) + 288
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                if not this.address:
                                    mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[(2 * ceil32(return_data.size)) + 292] = 32
                                    mem[(2 * ceil32(return_data.size)) + 324] = 36
                                    mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve from the zero add'
                                    mem[(2 * ceil32(return_data.size)) + 388] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                    revert with memory
                                      from (2 * ceil32(return_data.size)) + 288
                                       len ceil32(return_data.size) + 132
                                if not uniswapV2RouterAddress:
                                    mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[(2 * ceil32(return_data.size)) + 292] = 32
                                    mem[(2 * ceil32(return_data.size)) + 324] = 34
                                    mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve to the zero addre'
                                    mem[(2 * ceil32(return_data.size)) + 388] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                    revert with memory
                                      from (2 * ceil32(return_data.size)) + 288
                                       len ceil32(return_data.size) + 132
                                mem[0] = uniswapV2RouterAddress
                                mem[32] = sha3(address(this.address), 1)
                                allowance[address(this.address)][stor14].field_0 = 0
                                mem[(2 * ceil32(return_data.size)) + 288] = 0
                                emit Approval(mem[(2 * ceil32(return_data.size)) + 288 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                mem[(2 * ceil32(return_data.size)) + 288] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                mem[(2 * ceil32(return_data.size)) + 292] = 0
                                mem[(2 * ceil32(return_data.size)) + 324] = 0
                                mem[(2 * ceil32(return_data.size)) + 356] = 160
                                mem[(2 * ceil32(return_data.size)) + 452] = 2
                                idx = 0
                                s = (2 * ceil32(return_data.size)) + 484
                                t = ceil32(return_data.size) + 224
                                while idx < mem[ceil32(return_data.size) + 192]:
                                    mem[s] = mem[t + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                require ext_code.size(uniswapV2RouterAddress)
                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                     gas gas_remaining wei
                                    args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 544]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6610 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6610] = 30
                                mem[_6610 + 32] = 'SafeMath: subtraction overflow'
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if eth.balance(this.address) < eth.balance(this.address):
                                    revert with 0, 17
                                call devPoolAddress with:
                                     gas 2300 wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 17
                                if not distributionPoolAddress:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                _6888 = mem[64]
                                mem[64] = mem[64] + 96
                                mem[_6888] = 38
                                mem[_6888 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                if ext_call.return_data[0] > balanceOf[stor17]:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 38
                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6888 + 70 len 26]
                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                if balanceOf[stor17] < ext_call.return_data[0]:
                                    revert with 0, 17
                                balanceOf[stor17] -= ext_call.return_data[0]
                                if balanceOf[this.address] > !ext_call.return_data[0]:
                                    revert with 0, 17
                                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
                            else:
                                if ext_call.return_data[0] and cashoutFee > -1 / ext_call.return_data[0]:
                                    revert with 0, 17
                                if not ext_call.return_data[0]:
                                    revert with 0, 18
                                if ext_call.return_data[0] * cashoutFee / ext_call.return_data[0] != cashoutFee:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                mem[ceil32(return_data.size) + 128] = 26
                                mem[ceil32(return_data.size) + 160] = 'SafeMath: division by zero'
                                mem[ceil32(return_data.size) + 192] = 2
                                mem[ceil32(return_data.size) + 224] = this.address
                                require ext_code.size(uniswapV2RouterAddress)
                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                        gas gas_remaining wei
                                mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = (2 * ceil32(return_data.size)) + 288
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                if not this.address:
                                    mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[(2 * ceil32(return_data.size)) + 292] = 32
                                    mem[(2 * ceil32(return_data.size)) + 324] = 36
                                    mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve from the zero add'
                                    mem[(2 * ceil32(return_data.size)) + 388] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                    revert with memory
                                      from (2 * ceil32(return_data.size)) + 288
                                       len ceil32(return_data.size) + 132
                                if not uniswapV2RouterAddress:
                                    mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[(2 * ceil32(return_data.size)) + 292] = 32
                                    mem[(2 * ceil32(return_data.size)) + 324] = 34
                                    mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve to the zero addre'
                                    mem[(2 * ceil32(return_data.size)) + 388] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                    revert with memory
                                      from (2 * ceil32(return_data.size)) + 288
                                       len ceil32(return_data.size) + 132
                                mem[0] = uniswapV2RouterAddress
                                mem[32] = sha3(address(this.address), 1)
                                allowance[address(this.address)][stor14].field_0 = ext_call.return_data[0] * cashoutFee / 100
                                mem[(2 * ceil32(return_data.size)) + 288] = ext_call.return_data[0] * cashoutFee / 100
                                emit Approval(mem[(2 * ceil32(return_data.size)) + 288 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                mem[(2 * ceil32(return_data.size)) + 288] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                mem[(2 * ceil32(return_data.size)) + 292] = ext_call.return_data[0] * cashoutFee / 100
                                mem[(2 * ceil32(return_data.size)) + 324] = 0
                                mem[(2 * ceil32(return_data.size)) + 356] = 160
                                mem[(2 * ceil32(return_data.size)) + 452] = 2
                                idx = 0
                                s = (2 * ceil32(return_data.size)) + 484
                                t = ceil32(return_data.size) + 224
                                while idx < mem[ceil32(return_data.size) + 192]:
                                    mem[s] = mem[t + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                require ext_code.size(uniswapV2RouterAddress)
                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                     gas gas_remaining wei
                                    args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 544]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6609 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6609] = 30
                                mem[_6609 + 32] = 'SafeMath: subtraction overflow'
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if eth.balance(this.address) < eth.balance(this.address):
                                    revert with 0, 17
                                call devPoolAddress with:
                                     gas 2300 wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if ext_call.return_data[0] < ext_call.return_data[0] * cashoutFee / 100:
                                    revert with 0, 17
                                if not distributionPoolAddress:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                _6885 = mem[64]
                                mem[64] = mem[64] + 96
                                mem[_6885] = 38
                                mem[_6885 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                if ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) > balanceOf[stor17]:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 38
                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6885 + 70 len 26]
                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                if balanceOf[stor17] < ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100):
                                    revert with 0, 17
                                balanceOf[stor17] = balanceOf[stor17] - ext_call.return_data[0] + (ext_call.return_data[0] * cashoutFee / 100)
                                if balanceOf[this.address] > !(ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)):
                                    revert with 0, 17
                                if balanceOf[this.address] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) < balanceOf[this.address]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)
                                emit Transfer((ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)), distributionPoolAddress, this.address);
                    require ext_code.size(nodeRewardManagerAddress)
                    call nodeRewardManagerAddress._addNodeValue(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args msg.sender, cd[4]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
            else:
                if unknown_0xa0a8fe65(?????) > uint32(call.func_hash) >> 224:
                    if unknown_0x9852595c(?????) <= uint32(call.func_hash) >> 224:
                        if unknown_0x9852595c(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require calldata.size - 4 >= 32
                            require cd[4] == address(cd[4])
                            return released[address(cd[4])]
                        if unknown_0x9a33de4f(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require calldata.size - 4 >= 32
                            require cd[4] == bool(cd[4])
                            if owner != msg.sender:
                                revert with 0, 'Ownable: caller is not the owner'
                            Mask(248, 0, stor29.field_8) = Mask(248, 0, bool(cd[4]))
                        else:
                            if unknown_0x9a7a23d6(?????) == uint32(call.func_hash) >> 224:
                                require not msg.value
                                require calldata.size - 4 >= 64
                                require cd[4] == address(cd[4])
                                require cd[36] == bool(cd[36])
                                if owner != msg.sender:
                                    revert with 0, 'Ownable: caller is not the owner'
                                if uniswapV2PairAddress == address(cd[4]):
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                'TKN: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs'
                                if bool(cd[36]) == bool(stor36[address(cd[4])]):
                                    revert with 0, 'TKN: Automated market maker pair is already set to that value'
                                stor36[address(cd[4])] = uint8(bool(cd[36]))
                                emit SetAutomatedMarketMakerPair(address(cd[4]), bool(cd[36]));
                            else:
                                if unknown_0x9c79f449(?????) == uint32(call.func_hash) >> 224:
                                    require not msg.value
                                    require calldata.size - 4 >= 32
                                    if owner != msg.sender:
                                        revert with 0, 'Ownable: caller is not the owner'
                                    if eth.balance(this.address) < cd[4]:
                                        revert with 0, 'insufficient AVAX balance'
                                    call msg.sender with:
                                       value cd[4] wei
                                         gas 2300 * is_zero(value) wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    if unknown_0x9c82751c(?????) == uint32(call.func_hash) >> 224:
                                        require not msg.value
                                        require calldata.size - 4 >= 32
                                        if owner != msg.sender:
                                            revert with 0, 'Ownable: caller is not the owner'
                                        require ext_code.size(nodeRewardManagerAddress)
                                        call nodeRewardManagerAddress._changeClaimTime(uint256 arg1) with:
                                             gas gas_remaining wei
                                            args cd[4]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require unknown_0x9dd267e6(?????) == uint32(call.func_hash) >> 224
                                        require not msg.value
                                        require calldata.size - 4 >= 64
                                        require cd[4] == address(cd[4])
                                        if owner != msg.sender:
                                            revert with 0, 'Ownable: caller is not the owner'
                                        require ext_code.size(address(cd[4]))
                                        call address(cd[4]).0xa9059cbb with:
                                             gas gas_remaining wei
                                            args treasuryPoolAddress, cd[36]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if unknown_0x88c41d7c(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        treasuryFee = cd[4]
                        if rewardsFee > !liquidityPoolFee:
                            revert with 0, 17
                        if rewardsFee + liquidityPoolFee < rewardsFee:
                            revert with 0, 'SafeMath: addition overflow'
                        if rewardsFee + liquidityPoolFee > !cd[4]:
                            revert with 0, 17
                        if cd[4] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees = rewardsFee + liquidityPoolFee + cd[4]
                    if unknown_0x8b83209b(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        if cd[4] >= payee.length:
                            revert with 0, 50
                        return payee[cd[4]]
                    if unknown_0x8bc9c7b0(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        stor25 = cd[4]
                    if unknown_0x8da5cb5b(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        return owner
                    if unknown_0x9349c47d(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == address(cd[4])
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        distributionPoolAddress = address(cd[4])
                    require unknown_0x95d89b41(?????) == uint32(call.func_hash) >> 224
                    require not msg.value
                    if bool(stor4.length):
                        if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
                            revert with 0, 34
                        if bool(stor4.length):
                            if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
                                revert with 0, 34
                            if Mask(256, -1, stor4.length):
                                if 31 < uint255(stor4.length) * 0.5:
                                    mem[160] = uint256(stor4.field_0)
                                    idx = 160
                                    s = 0
                                    while (uint255(stor4.length) * 0.5) + 128 > idx:
                                        mem[idx + 32] = stor4[s].field_256
                                        idx = idx + 32
                                        s = s + 1
                                        continue 
                                    return Array(len=2 * Mask(256, -1, stor4.length), data=mem[160 len ceil32(uint255(stor4.length) * 0.5)])
                                mem[160] = 256 * stor4.length.field_8
                        else:
                            if bool(stor4.length) == stor4.length.field_1 < 32:
                                revert with 0, 34
                            if stor4.length.field_1:
                                if 31 < stor4.length.field_1:
                                    mem[160] = uint256(stor4.field_0)
                                    idx = 160
                                    s = 0
                                    while stor4.length.field_1 + 128 > idx:
                                        mem[idx + 32] = stor4[s].field_256
                                        idx = idx + 32
                                        s = s + 1
                                        continue 
                                    return Array(len=2 * Mask(256, -1, stor4.length), data=mem[160 len ceil32(uint255(stor4.length) * 0.5)])
                                mem[160] = 256 * stor4.length.field_8
                        mem[ceil32(uint255(stor4.length) * 0.5) + 224 len ceil32(uint255(stor4.length) * 0.5)] = mem[160 len ceil32(uint255(stor4.length) * 0.5)]
                        if ceil32(uint255(stor4.length) * 0.5) > uint255(stor4.length) * 0.5:
                            mem[(uint255(stor4.length) * 0.5) + ceil32(uint255(stor4.length) * 0.5) + 224] = 0
                        return Array(len=2 * Mask(256, -1, stor4.length), data=mem[160 len ceil32(uint255(stor4.length) * 0.5)], mem[(2 * ceil32(uint255(stor4.length) * 0.5)) + 224 len 2 * ceil32(uint255(stor4.length) * 0.5)]), 
                    if bool(stor4.length) == stor4.length.field_1 < 32:
                        revert with 0, 34
                    if bool(stor4.length):
                        if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
                            revert with 0, 34
                        if Mask(256, -1, stor4.length):
                            if 31 < uint255(stor4.length) * 0.5:
                                mem[160] = uint256(stor4.field_0)
                                idx = 160
                                s = 0
                                while (uint255(stor4.length) * 0.5) + 128 > idx:
                                    mem[idx + 32] = stor4[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                return Array(len=stor4.length % 128, data=mem[160 len ceil32(stor4.length.field_1)])
                            mem[160] = 256 * stor4.length.field_8
                    else:
                        if bool(stor4.length) == stor4.length.field_1 < 32:
                            revert with 0, 34
                        if stor4.length.field_1:
                            if 31 < stor4.length.field_1:
                                mem[160] = uint256(stor4.field_0)
                                idx = 160
                                s = 0
                                while stor4.length.field_1 + 128 > idx:
                                    mem[idx + 32] = stor4[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                return Array(len=stor4.length % 128, data=mem[160 len ceil32(stor4.length.field_1)])
                            mem[160] = 256 * stor4.length.field_8
                    mem[ceil32(stor4.length.field_1) + 224 len ceil32(stor4.length.field_1)] = mem[160 len ceil32(stor4.length.field_1)]
                    if ceil32(stor4.length.field_1) > stor4.length.field_1:
                        mem[stor4.length.field_1 + ceil32(stor4.length.field_1) + 224] = 0
                    return Array(len=stor4.length % 128, data=mem[160 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 224 len 2 * ceil32(stor4.length.field_1)]), 
                if unknown_0xaf153182(?????) > uint32(call.func_hash) >> 224:
                    if unknown_0xa0a8fe65(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require ext_code.size(nodeRewardManagerAddress)
                        staticcall nodeRewardManagerAddress.totalNodesCreated() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        return ext_call.return_data[0]
                    if unknown_0xa1883d26(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == address(cd[4])
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        stor33 = address(cd[4])
                    if unknown_0xa457c2d7(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 64
                        require cd[4] == address(cd[4])
                        if cd[36] > allowance[msg.sender][address(cd[4])].field_0:
                            revert with 0, 32, 37, 0x6545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a6572, mem[197 len 27] >> 40, 0
                        if allowance[msg.sender][address(cd[4])].field_0 < cd[36]:
                            revert with 0, 17
                        if not msg.sender:
                            revert with 0, 'ERC20: approve from the zero address'
                        if not address(cd[4]):
                            revert with 0, 'ERC20: approve to the zero address'
                        allowance[address(msg.sender)][address(cd[4])].field_0 = allowance[msg.sender][address(cd[4])].field_0 - cd[36]
                        emit Approval((allowance[msg.sender][address(cd[4])].field_0 - cd[36]), msg.sender, address(cd[4]));
                    else:
                        if unknown_0xa64b6e5f(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require calldata.size - 4 >= 96
                            require cd[4] == address(cd[4])
                            require cd[36] == address(cd[36])
                            if owner != msg.sender:
                                revert with 0, 'Ownable: caller is not the owner'
                            if this.address == address(cd[4]):
                                revert with 0, 'Cannot transfer out own tokens'
                            require ext_code.size(address(cd[4]))
                            call address(cd[4]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(cd[36]), cd[68]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if uint32(call.func_hash) >> 224 != unknown_0xa9059cbb(?????):
                            require unknown_0xa9e2374b(?????) == uint32(call.func_hash) >> 224
                            require not msg.value
                            require calldata.size - 4 >= 32
                            require cd[4] == address(cd[4])
                            require ext_code.size(nodeRewardManagerAddress)
                            staticcall nodeRewardManagerAddress._getNodeValueOf(address arg1) with:
                                    gas gas_remaining wei
                                   args address(cd[4])
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            return ext_call.return_data[0]
                        require not msg.value
                        require calldata.size - 4 >= 64
                        require cd[4] == address(cd[4])
                        if stor35[address(msg.sender)]:
                            revert with 0, 'Blacklisted address'
                        if stor35[address(cd[4])]:
                            revert with 0, 'Blacklisted address'
                        if not msg.sender:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not address(cd[4]):
                            revert with 0, 'ERC20: transfer to the zero address'
                        if uniswapV2RouterAddress != address(cd[4]):
                            if owner == msg.sender:
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not address(cd[4]):
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if cd[36] > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                            else:
                                if uniswapV2PairAddress == address(cd[4]):
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not address(cd[4]):
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if cd[36] > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                else:
                                    if uniswapV2RouterAddress == address(cd[4]):
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not address(cd[4]):
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if cd[36] > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                    else:
                                        if this.address == address(cd[4]):
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not address(cd[4]):
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if cd[36] > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                        else:
                                            if this.address == msg.sender:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not address(cd[4]):
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if cd[36] > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                            else:
                                                if not uint8(stor29.field_0):
                                                    revert with 0, 'Trading not yet enabled.'
                                                if treasuryPoolAddress == address(cd[4]):
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not address(cd[4]):
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if cd[36] > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                else:
                                                    if distributionPoolAddress == address(cd[4]):
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not address(cd[4]):
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if cd[36] > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                    else:
                                                        if devPoolAddress == address(cd[4]):
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not address(cd[4]):
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if cd[36] > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                        else:
                                                            if treasuryPoolAddress == msg.sender:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not address(cd[4]):
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if cd[36] > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                            else:
                                                                if distributionPoolAddress == msg.sender:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not address(cd[4]):
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if cd[36] > balanceOf[address(msg.sender)]:
                                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                                else:
                                                                    if devPoolAddress == msg.sender:
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not address(cd[4]):
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if cd[36] > balanceOf[address(msg.sender)]:
                                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                                    else:
                                                                        if not totalSupply:
                                                                            if cd[36] > !balanceOf[address(cd[4])]:
                                                                                revert with 0, 17
                                                                            if cd[36] + balanceOf[address(cd[4])] < cd[36]:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            if cd[36] + balanceOf[address(cd[4])] > 0:
                                                                                revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                        else:
                                                                            if totalSupply and stor34 > -1 / totalSupply:
                                                                                revert with 0, 17
                                                                            if not totalSupply:
                                                                                revert with 0, 18
                                                                            if totalSupply * stor34 / totalSupply != stor34:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            if cd[36] > !balanceOf[address(cd[4])]:
                                                                                revert with 0, 17
                                                                            if cd[36] + balanceOf[address(cd[4])] < cd[36]:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            if cd[36] + balanceOf[address(cd[4])] > totalSupply * stor34 / 10000:
                                                                                revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not address(cd[4]):
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if cd[36] > balanceOf[address(msg.sender)]:
                                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[262 len 26] >> 48, 0
                            ('le', ('cd', 36), ('stor', ('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('name', 'balanceOf', 0))))
                            if balanceOf[address(msg.sender)] < cd[36]:
                                revert with 0, 17
                            balanceOf[address(msg.sender)] -= cd[36]
                            if balanceOf[address(cd[4])] > !cd[36]:
                                revert with 0, 17
                            if balanceOf[address(cd[4])] + cd[36] < balanceOf[address(cd[4])]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(cd[4])] += cd[36]
                            emit Transfer(cd[36], msg.sender, address(cd[4]));
                        else:
                            if this.address == msg.sender:
                                if owner == msg.sender:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not address(cd[4]):
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if cd[36] > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                else:
                                    if uniswapV2PairAddress == address(cd[4]):
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not address(cd[4]):
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if cd[36] > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                    else:
                                        if uniswapV2RouterAddress == address(cd[4]):
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not address(cd[4]):
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if cd[36] > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                        else:
                                            if this.address == address(cd[4]):
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not address(cd[4]):
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if cd[36] > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                            else:
                                                if this.address == msg.sender:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not address(cd[4]):
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if cd[36] > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                else:
                                                    if not uint8(stor29.field_0):
                                                        revert with 0, 'Trading not yet enabled.'
                                                    if treasuryPoolAddress == address(cd[4]):
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not address(cd[4]):
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if cd[36] > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                    else:
                                                        if distributionPoolAddress == address(cd[4]):
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not address(cd[4]):
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if cd[36] > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                        else:
                                                            if devPoolAddress == address(cd[4]):
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not address(cd[4]):
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if cd[36] > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                            else:
                                                                if treasuryPoolAddress == msg.sender:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not address(cd[4]):
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if cd[36] > balanceOf[address(msg.sender)]:
                                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                                else:
                                                                    if distributionPoolAddress == msg.sender:
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not address(cd[4]):
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if cd[36] > balanceOf[address(msg.sender)]:
                                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                                    else:
                                                                        if devPoolAddress == msg.sender:
                                                                            if not msg.sender:
                                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                                            if not address(cd[4]):
                                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                                            if cd[36] > balanceOf[address(msg.sender)]:
                                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                                                        else:
                                                                            if not totalSupply:
                                                                                if cd[36] > !balanceOf[address(cd[4])]:
                                                                                    revert with 0, 17
                                                                                if cd[36] + balanceOf[address(cd[4])] < cd[36]:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                if cd[36] + balanceOf[address(cd[4])] > 0:
                                                                                    revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                            else:
                                                                                if totalSupply and stor34 > -1 / totalSupply:
                                                                                    revert with 0, 17
                                                                                if not totalSupply:
                                                                                    revert with 0, 18
                                                                                if totalSupply * stor34 / totalSupply != stor34:
                                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                                if cd[36] > !balanceOf[address(cd[4])]:
                                                                                    revert with 0, 17
                                                                                if cd[36] + balanceOf[address(cd[4])] < cd[36]:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                if cd[36] + balanceOf[address(cd[4])] > totalSupply * stor34 / 10000:
                                                                                    revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                            if not msg.sender:
                                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                                            if not address(cd[4]):
                                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                                            if cd[36] > balanceOf[address(msg.sender)]:
                                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[262 len 26] >> 48, 0
                                ('le', ('cd', 36), ('stor', ('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('name', 'balanceOf', 0))))
                                if balanceOf[address(msg.sender)] < cd[36]:
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] -= cd[36]
                                if balanceOf[address(cd[4])] > !cd[36]:
                                    revert with 0, 17
                                if balanceOf[address(cd[4])] + cd[36] < balanceOf[address(cd[4])]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(cd[4])] += cd[36]
                                emit Transfer(cd[36], msg.sender, address(cd[4]));
                            else:
                                if owner == msg.sender:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not address(cd[4]):
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if cd[36] > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[198 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < cd[36]:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] -= cd[36]
                                    if balanceOf[address(cd[4])] > !cd[36]:
                                        revert with 0, 17
                                    if balanceOf[address(cd[4])] + cd[36] < balanceOf[address(cd[4])]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(cd[4])] += cd[36]
                                    emit Transfer(cd[36], msg.sender, address(cd[4]));
                                else:
                                    require ext_code.size(nodeRewardManagerAddress)
                                    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'You need to own a node to be able to sell'
                                    if not cd[36]:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not stor33:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 262 len 26] >> 48,
                                                        0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 0, 17
                                        if balanceOf[stor33] > -1:
                                            revert with 0, 17
                                        if balanceOf[stor33] < balanceOf[stor33]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[stor33] = balanceOf[stor33]
                                        emit Transfer(0, msg.sender, stor33);
                                        if 0 > cd[36]:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if cd[36] < 0:
                                            revert with 0, 17
                                        if owner == msg.sender:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not address(cd[4]):
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if cd[36] > balanceOf[address(msg.sender)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                            0
                                        else:
                                            if uniswapV2PairAddress == address(cd[4]):
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not address(cd[4]):
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if cd[36] > balanceOf[address(msg.sender)]:
                                                    revert with 0, 
                                                                32,
                                                                38,
                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                0
                                            else:
                                                if uniswapV2RouterAddress == address(cd[4]):
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not address(cd[4]):
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if cd[36] > balanceOf[address(msg.sender)]:
                                                        revert with 0, 
                                                                    32,
                                                                    38,
                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                    0
                                                else:
                                                    if this.address == address(cd[4]):
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not address(cd[4]):
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if cd[36] > balanceOf[address(msg.sender)]:
                                                            revert with 0, 
                                                                        32,
                                                                        38,
                                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                        0
                                                    else:
                                                        if this.address == msg.sender:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not address(cd[4]):
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if cd[36] > balanceOf[address(msg.sender)]:
                                                                revert with 0, 
                                                                            32,
                                                                            38,
                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                            0
                                                        else:
                                                            if not uint8(stor29.field_0):
                                                                revert with 0, 'Trading not yet enabled.'
                                                            if treasuryPoolAddress == address(cd[4]):
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not address(cd[4]):
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if cd[36] > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 
                                                                                32,
                                                                                38,
                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                0
                                                            else:
                                                                if distributionPoolAddress == address(cd[4]):
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not address(cd[4]):
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if cd[36] > balanceOf[address(msg.sender)]:
                                                                        revert with 0, 
                                                                                    32,
                                                                                    38,
                                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                    0
                                                                else:
                                                                    if devPoolAddress == address(cd[4]):
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not address(cd[4]):
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if cd[36] > balanceOf[address(msg.sender)]:
                                                                            revert with 0, 
                                                                                        32,
                                                                                        38,
                                                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                        0
                                                                    else:
                                                                        if treasuryPoolAddress == msg.sender:
                                                                            if not msg.sender:
                                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                                            if not address(cd[4]):
                                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                                            if cd[36] > balanceOf[address(msg.sender)]:
                                                                                revert with 0, 
                                                                                            32,
                                                                                            38,
                                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                            0
                                                                        else:
                                                                            if distributionPoolAddress == msg.sender:
                                                                                if not msg.sender:
                                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                                if not address(cd[4]):
                                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                                if cd[36] > balanceOf[address(msg.sender)]:
                                                                                    revert with 0, 
                                                                                                32,
                                                                                                38,
                                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                                0
                                                                            else:
                                                                                if devPoolAddress == msg.sender:
                                                                                    if not msg.sender:
                                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                                    if not address(cd[4]):
                                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                                    if cd[36] > balanceOf[address(msg.sender)]:
                                                                                        revert with 0, 
                                                                                                    32,
                                                                                                    38,
                                                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                                    0
                                                                                else:
                                                                                    if not totalSupply:
                                                                                        if cd[36] > !balanceOf[address(cd[4])]:
                                                                                            revert with 0, 17
                                                                                        if cd[36] + balanceOf[address(cd[4])] < cd[36]:
                                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                                        if cd[36] + balanceOf[address(cd[4])] > 0:
                                                                                            revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                                    else:
                                                                                        if totalSupply and stor34 > -1 / totalSupply:
                                                                                            revert with 0, 17
                                                                                        if not totalSupply:
                                                                                            revert with 0, 18
                                                                                        if totalSupply * stor34 / totalSupply != stor34:
                                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                                        if cd[36] > !balanceOf[address(cd[4])]:
                                                                                            revert with 0, 17
                                                                                        if cd[36] + balanceOf[address(cd[4])] < cd[36]:
                                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                                        if cd[36] + balanceOf[address(cd[4])] > totalSupply * stor34 / 10000:
                                                                                            revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                                    if not msg.sender:
                                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                                    if not address(cd[4]):
                                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                                    if cd[36] > balanceOf[address(msg.sender)]:
                                                                                        revert with 0, 
                                                                                                    32,
                                                                                                    38,
                                                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 486 len 26] >> 48,
                                                                                                    0
                                        ('le', ('cd', 36), ('stor', ('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('name', 'balanceOf', 0))))
                                        if balanceOf[address(msg.sender)] < cd[36]:
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] -= cd[36]
                                        if balanceOf[address(cd[4])] > !cd[36]:
                                            revert with 0, 17
                                        if balanceOf[address(cd[4])] + cd[36] < balanceOf[address(cd[4])]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(cd[4])] += cd[36]
                                        emit Transfer(cd[36], msg.sender, address(cd[4]));
                                    else:
                                        if cd[36] and sellTax > -1 / cd[36]:
                                            revert with 0, 17
                                        if not cd[36]:
                                            revert with 0, 18
                                        if cd[36] * sellTax / cd[36] != sellTax:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not stor33:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if cd[36] * sellTax / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 262 len 26] >> 48,
                                                        0
                                        if balanceOf[address(msg.sender)] < cd[36] * sellTax / 100:
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] -= cd[36] * sellTax / 100
                                        if balanceOf[stor33] > !(cd[36] * sellTax / 100):
                                            revert with 0, 17
                                        if balanceOf[stor33] + (cd[36] * sellTax / 100) < balanceOf[stor33]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[stor33] += cd[36] * sellTax / 100
                                        emit Transfer((cd[36] * sellTax / 100), msg.sender, stor33);
                                        if cd[36] * sellTax / 100 > cd[36]:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if cd[36] < cd[36] * sellTax / 100:
                                            revert with 0, 17
                                        if owner == msg.sender:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not address(cd[4]):
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if cd[36] - (cd[36] * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                            0
                                        else:
                                            if uniswapV2PairAddress == address(cd[4]):
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not address(cd[4]):
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if cd[36] - (cd[36] * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 
                                                                32,
                                                                38,
                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                0
                                            else:
                                                if uniswapV2RouterAddress == address(cd[4]):
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not address(cd[4]):
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if cd[36] - (cd[36] * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 
                                                                    32,
                                                                    38,
                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                    0
                                                else:
                                                    if this.address == address(cd[4]):
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not address(cd[4]):
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if cd[36] - (cd[36] * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 
                                                                        32,
                                                                        38,
                                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                        0
                                                    else:
                                                        if this.address == msg.sender:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not address(cd[4]):
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if cd[36] - (cd[36] * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 
                                                                            32,
                                                                            38,
                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                            0
                                                        else:
                                                            if not uint8(stor29.field_0):
                                                                revert with 0, 'Trading not yet enabled.'
                                                            if treasuryPoolAddress == address(cd[4]):
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not address(cd[4]):
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if cd[36] - (cd[36] * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 
                                                                                32,
                                                                                38,
                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                0
                                                            else:
                                                                if distributionPoolAddress == address(cd[4]):
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not address(cd[4]):
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if cd[36] - (cd[36] * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                                        revert with 0, 
                                                                                    32,
                                                                                    38,
                                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                    0
                                                                else:
                                                                    if devPoolAddress == address(cd[4]):
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not address(cd[4]):
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if cd[36] - (cd[36] * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                                            revert with 0, 
                                                                                        32,
                                                                                        38,
                                                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                        0
                                                                    else:
                                                                        if treasuryPoolAddress == msg.sender:
                                                                            if not msg.sender:
                                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                                            if not address(cd[4]):
                                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                                            if cd[36] - (cd[36] * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                                                revert with 0, 
                                                                                            32,
                                                                                            38,
                                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                            0
                                                                        else:
                                                                            if distributionPoolAddress == msg.sender:
                                                                                if not msg.sender:
                                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                                if not address(cd[4]):
                                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                                if cd[36] - (cd[36] * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                                                    revert with 0, 
                                                                                                32,
                                                                                                38,
                                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                                0
                                                                            else:
                                                                                if devPoolAddress == msg.sender:
                                                                                    if not msg.sender:
                                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                                    if not address(cd[4]):
                                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                                    if cd[36] - (cd[36] * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                                                        revert with 0, 
                                                                                                    32,
                                                                                                    38,
                                                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 422 len 26] >> 48,
                                                                                                    0
                                                                                else:
                                                                                    if not totalSupply:
                                                                                        if cd[36] - (cd[36] * sellTax / 100) > !balanceOf[address(cd[4])]:
                                                                                            revert with 0, 17
                                                                                        if balanceOf[address(cd[4])] < 0:
                                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                                        if cd[36] - (cd[36] * sellTax / 100) + balanceOf[address(cd[4])] > 0:
                                                                                            revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                                    else:
                                                                                        if totalSupply and stor34 > -1 / totalSupply:
                                                                                            revert with 0, 17
                                                                                        if not totalSupply:
                                                                                            revert with 0, 18
                                                                                        if totalSupply * stor34 / totalSupply != stor34:
                                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                                        if cd[36] - (cd[36] * sellTax / 100) > !balanceOf[address(cd[4])]:
                                                                                            revert with 0, 17
                                                                                        if balanceOf[address(cd[4])] < 0:
                                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                                        if cd[36] - (cd[36] * sellTax / 100) + balanceOf[address(cd[4])] > totalSupply * stor34 / 10000:
                                                                                            revert with 0, 'STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.'
                                                                                    if not msg.sender:
                                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                                    if not address(cd[4]):
                                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                                    if cd[36] - (cd[36] * sellTax / 100) > balanceOf[address(msg.sender)]:
                                                                                        revert with 0, 
                                                                                                    32,
                                                                                                    38,
                                                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 486 len 26] >> 48,
                                                                                                    0
                                        ('le', ('add', ('cd', 36), ('mul', -1, ('div', ('mul', ('cd', 36), ('stor', ('name', 'sellTax', 32))), 100))), ('stor', ('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('name', 'balanceOf', 0))))
                                        if balanceOf[address(msg.sender)] < cd[36] - (cd[36] * sellTax / 100):
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - cd[36] + (cd[36] * sellTax / 100)
                                        if balanceOf[address(cd[4])] > !(cd[36] - (cd[36] * sellTax / 100)):
                                            revert with 0, 17
                                        if balanceOf[address(cd[4])] + cd[36] - (cd[36] * sellTax / 100) < balanceOf[address(cd[4])]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(cd[4])] = balanceOf[address(cd[4])] + cd[36] - (cd[36] * sellTax / 100)
                                        emit Transfer((cd[36] - (cd[36] * sellTax / 100)), msg.sender, address(cd[4]));
                    return 1
                if unknown_0xaf153182(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 32
                    require cd[4] == address(cd[4])
                    if owner != msg.sender:
                        revert with 0, 'Ownable: caller is not the owner'
                    devPoolAddress = address(cd[4])
                else:
                    if unknown_0xb5838a27(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        return devPoolAddress
                    if unknown_0xb62496f5(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == address(cd[4])
                        return bool(stor36[cd[4]])
                    if unknown_0xb96392c1(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == address(cd[4])
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        require ext_code.size(nodeRewardManagerAddress)
                        staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1) with:
                                gas gas_remaining wei
                               args address(cd[4])
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        return ext_call.return_data[0]
                    if uint32(call.func_hash) >> 224 != unknown_0xbbc67998(?????):
                        require unknown_0xbdf24a53(?????) == uint32(call.func_hash) >> 224
                        require not msg.value
                        if not msg.sender:
                            revert with 0, 'SENDER CAN'T BE ZERO'
                        mem[132] = msg.sender
                        require ext_code.size(nodeRewardManagerAddress)
                        staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        require ext_code.size(nodeRewardManagerAddress)
                        staticcall nodeRewardManagerAddress._getNodesCreationTime(address arg1) with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _605 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _651 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _651
                        require _605 + _651 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_651)] = mem[ceil32(return_data.size) + _605 + 160 len ceil32(_651)]
                        if ceil32(_651) > _651:
                            mem[_651 + (2 * ceil32(return_data.size)) + 160] = 0
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _651
                        mem[mem[64] + 64 len ceil32(_651)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_651)]
                        if ceil32(_651) > _651:
                            mem[_651 + mem[64] + 64] = 0
                        return Array(len=_651, data=mem[mem[64] + 64 len ceil32(_651)])
                    require not msg.value
                    require calldata.size - 4 >= 64
                    require cd[4] <= test266151307()
                    require calldata.size > cd[4] + 35
                    if ('cd', 4).length > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(('cd', 4).length)) + 129 < 128 or ceil32(ceil32(('cd', 4).length)) + 129 > test266151307():
                        revert with 0, 65
                    mem[128] = ('cd', 4).length
                    require cd[4] + ('cd', 4).length + 36 <= calldata.size
                    mem[160 len ('cd', 4).length] = call.data[cd[4] + 36 len ('cd', 4).length]
                    mem[('cd', 4).length + 160] = 0
                    if ('cd', 4).length <= 3:
                        revert with 0, 'NODE CREATION: NAME SIZE INVALID'
                    if ('cd', 4).length >= 32:
                        revert with 0, 'NODE CREATION: NAME SIZE INVALID'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor35[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if treasuryPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur, dev and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur, dev and rewardsPool cannot create node'
                    if devPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur, dev and rewardsPool cannot create node'
                    require ext_code.size(nodeRewardManagerAddress)
                    staticcall nodeRewardManagerAddress.0x943ab261 with:
                            gas gas_remaining wei
                    mem[ceil32(ceil32(('cd', 4).length)) + 129] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if cd[36] < ext_call.return_data[0]:
                        revert with 0, 'NODE CREATION: Node Value set below nodeMinPrice'
                    if not cd[36]:
                        if balanceOf[address(msg.sender)] < 0:
                            revert with 0, 'NODE CREATION: Balance too low for creation. Use lower initValue'
                        if balanceOf[this.address] < swapTokensAmount:
                            if not cd[36]:
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 
                                                32,
                                                38,
                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 0, 17
                                if balanceOf[this.address] > -1:
                                    revert with 0, 17
                                if balanceOf[this.address] < balanceOf[this.address]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] = balanceOf[this.address]
                                emit Transfer(0, msg.sender, this.address);
                            else:
                                if cd[36] and 10^18 > -1 / cd[36]:
                                    revert with 0, 17
                                if not cd[36]:
                                    revert with 0, 18
                                if 10^18 * cd[36] / cd[36] != 10^18:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                    revert with 0, 
                                                32,
                                                38,
                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                0
                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                    revert with 0, 17
                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                            if not cd[36]:
                                require ext_code.size(nodeRewardManagerAddress)
                                call nodeRewardManagerAddress.0x90219732 with:
                                     gas gas_remaining wei
                                    args msg.sender, 96, 0, ('cd', 4).length, call.data[cd[4] + 36 len ('cd', 4).length], ext_call.return_data[('cd', 4).length + -ceil32(ceil32(('cd', 4).length)) + 31 len ceil32(('cd', 4).length) - ('cd', 4).length]
                            else:
                                if cd[36] and 10^18 > -1 / cd[36]:
                                    revert with 0, 17
                                if not cd[36]:
                                    revert with 0, 18
                                if 10^18 * cd[36] / cd[36] != 10^18:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                require ext_code.size(nodeRewardManagerAddress)
                                call nodeRewardManagerAddress.0x90219732 with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 10^18 * cd[36]
                        else:
                            if not uint8(stor27.field_8):
                                if not cd[36]:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                    0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 0, 17
                                    if balanceOf[this.address] > -1:
                                        revert with 0, 17
                                    if balanceOf[this.address] < balanceOf[this.address]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                    emit Transfer(0, msg.sender, this.address);
                                else:
                                    if cd[36] and 10^18 > -1 / cd[36]:
                                        revert with 0, 17
                                    if not cd[36]:
                                        revert with 0, 18
                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                    0
                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                        revert with 0, 17
                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                if not cd[36]:
                                    require ext_code.size(nodeRewardManagerAddress)
                                    call nodeRewardManagerAddress.0x90219732 with:
                                         gas gas_remaining wei
                                        args msg.sender, 96, 0, ('cd', 4).length, call.data[cd[4] + 36 len ('cd', 4).length], ext_call.return_data[('cd', 4).length + -ceil32(ceil32(('cd', 4).length)) + 31 len ceil32(('cd', 4).length) - ('cd', 4).length]
                                else:
                                    if cd[36] and 10^18 > -1 / cd[36]:
                                        revert with 0, 17
                                    if not cd[36]:
                                        revert with 0, 18
                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    require ext_code.size(nodeRewardManagerAddress)
                                    call nodeRewardManagerAddress.0x90219732 with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 10^18 * cd[36]
                            else:
                                if uint8(stor27.field_0):
                                    if not cd[36]:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                        0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 0, 17
                                        if balanceOf[this.address] > -1:
                                            revert with 0, 17
                                        if balanceOf[this.address] < balanceOf[this.address]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] = balanceOf[this.address]
                                        emit Transfer(0, msg.sender, this.address);
                                    else:
                                        if cd[36] and 10^18 > -1 / cd[36]:
                                            revert with 0, 17
                                        if not cd[36]:
                                            revert with 0, 18
                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                        0
                                        if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                        if balanceOf[this.address] > !(10^18 * cd[36]):
                                            revert with 0, 17
                                        if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                        emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                    if not cd[36]:
                                        require ext_code.size(nodeRewardManagerAddress)
                                        call nodeRewardManagerAddress.0x90219732 with:
                                             gas gas_remaining wei
                                            args msg.sender, 96, 0, ('cd', 4).length, call.data[cd[4] + 36 len ('cd', 4).length], ext_call.return_data[('cd', 4).length + -ceil32(ceil32(('cd', 4).length)) + 31 len ceil32(('cd', 4).length) - ('cd', 4).length]
                                    else:
                                        if cd[36] and 10^18 > -1 / cd[36]:
                                            revert with 0, 17
                                        if not cd[36]:
                                            revert with 0, 18
                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(nodeRewardManagerAddress)
                                        call nodeRewardManagerAddress.0x90219732 with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 10^18 * cd[36]
                                else:
                                    if owner == msg.sender:
                                        if not cd[36]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                            0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 0, 17
                                            if balanceOf[this.address] > -1:
                                                revert with 0, 17
                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                            emit Transfer(0, msg.sender, this.address);
                                        else:
                                            if cd[36] and 10^18 > -1 / cd[36]:
                                                revert with 0, 17
                                            if not cd[36]:
                                                revert with 0, 18
                                            if 10^18 * cd[36] / cd[36] != 10^18:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                            0
                                            if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                            if balanceOf[this.address] > !(10^18 * cd[36]):
                                                revert with 0, 17
                                            if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                            emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                        if not cd[36]:
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0x90219732 with:
                                                 gas gas_remaining wei
                                                args msg.sender, 96, 0, ('cd', 4).length, call.data[cd[4] + 36 len ('cd', 4).length], ext_call.return_data[('cd', 4).length + -ceil32(ceil32(('cd', 4).length)) + 31 len ceil32(('cd', 4).length) - ('cd', 4).length]
                                        else:
                                            if cd[36] and 10^18 > -1 / cd[36]:
                                                revert with 0, 17
                                            if not cd[36]:
                                                revert with 0, 18
                                            if 10^18 * cd[36] / cd[36] != 10^18:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0x90219732 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 10^18 * cd[36]
                                    else:
                                        if stor36[address(msg.sender)]:
                                            if not cd[36]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 
                                                                32,
                                                                38,
                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                                0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                            else:
                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                    revert with 0, 17
                                                if not cd[36]:
                                                    revert with 0, 18
                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                    revert with 0, 
                                                                32,
                                                                38,
                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                                0
                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                            if not cd[36]:
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, 96, 0, ('cd', 4).length, call.data[cd[4] + 36 len ('cd', 4).length], ext_call.return_data[('cd', 4).length + -ceil32(ceil32(('cd', 4).length)) + 31 len ceil32(('cd', 4).length) - ('cd', 4).length]
                                            else:
                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                    revert with 0, 17
                                                if not cd[36]:
                                                    revert with 0, 18
                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 10^18 * cd[36]
                                        else:
                                            uint8(stor27.field_0) = 1
                                            if not balanceOf[this.address]:
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 129] = 26
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 161] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 193] = 26
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 225] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 257] = 30
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 289] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 321] = 2
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 353] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 417] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 385] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = 32
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 36
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 'ERC20: approve from the zero add'
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                       len ceil32(return_data.size) + 132
                                                if not uniswapV2RouterAddress:
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = 32
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 34
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 'ERC20: approve to the zero addre'
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                       len ceil32(return_data.size) + 132
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0
                                                emit Approval(mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = 0
                                                mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 0
                                                mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 160
                                                mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 581] = 2
                                                idx = 0
                                                s = ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 613
                                                t = ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 353
                                                while idx < mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 321]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = this.address
                                                mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 549] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + -mem[64] + 673]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _6608 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_6608] = 30
                                                mem[_6608 + 32] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                call devPoolAddress with:
                                                     gas 2300 wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _6800 = mem[64]
                                                mem[mem[64]] = 2
                                                mem[64] = mem[64] + 96
                                                mem[_6800 + 32 len 64] = call.data[calldata.size len 64]
                                                if 0 >= mem[_6800]:
                                                    revert with 0, 50
                                                mem[_6800 + 32] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_6800 + 96] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _6800 + ceil32(return_data.size) + 96
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                if 1 >= mem[_6800]:
                                                    revert with 0, 50
                                                mem[_6800 + 64] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[_6800 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_6800 + ceil32(return_data.size) + 100] = 0
                                                mem[_6800 + ceil32(return_data.size) + 132] = 0
                                                mem[_6800 + ceil32(return_data.size) + 164] = 160
                                                mem[_6800 + ceil32(return_data.size) + 260] = mem[_6800]
                                                idx = 0
                                                s = _6800 + ceil32(return_data.size) + 292
                                                t = _6800 + 32
                                                while idx < mem[_6800]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[_6800 + ceil32(return_data.size) + 260 len (32 * mem[_6800]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[_6800 + ceil32(return_data.size) + 96] = 30
                                                mem[_6800 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                call treasuryPoolAddress with:
                                                     gas 2300 wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not balanceOf[this.address]:
                                                    mem[_6800 + ceil32(return_data.size) + 160] = 26
                                                    mem[_6800 + ceil32(return_data.size) + 192] = 'SafeMath: division by zero'
                                                    mem[_6800 + ceil32(return_data.size) + 224] = 26
                                                    mem[_6800 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                                    mem[_6800 + ceil32(return_data.size) + 288] = 2
                                                    mem[_6800 + ceil32(return_data.size) + 320] = this.address
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                            gas gas_remaining wei
                                                    mem[_6800 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _6800 + (2 * ceil32(return_data.size)) + 384
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                    mem[_6800 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                                    if not this.address:
                                                        revert with 0, 'ERC20: approve from the zero address'
                                                    if not uniswapV2RouterAddress:
                                                        revert with 0, 'ERC20: approve to the zero address'
                                                    mem[0] = uniswapV2RouterAddress
                                                    mem[32] = sha3(address(this.address), 1)
                                                    allowance[address(this.address)][stor14].field_0 = 0
                                                    emit Approval(0, this.address, uniswapV2RouterAddress);
                                                    mem[_6800 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                    mem[_6800 + (2 * ceil32(return_data.size)) + 388] = 0
                                                    mem[_6800 + (2 * ceil32(return_data.size)) + 420] = 0
                                                    mem[_6800 + (2 * ceil32(return_data.size)) + 452] = 160
                                                    mem[_6800 + (2 * ceil32(return_data.size)) + 548] = 2
                                                    idx = 0
                                                    s = _6800 + (2 * ceil32(return_data.size)) + 580
                                                    t = _6800 + ceil32(return_data.size) + 320
                                                    while idx < mem[_6800 + ceil32(return_data.size) + 288]:
                                                        mem[s] = mem[t + 12 len 20]
                                                        idx = idx + 1
                                                        s = s + 32
                                                        t = t + 32
                                                        continue 
                                                    mem[_6800 + (2 * ceil32(return_data.size)) + 484] = this.address
                                                    mem[_6800 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, 160, address(this.address), block.timestamp, mem[_6800 + (2 * ceil32(return_data.size)) + 548 len (32 * mem[_6800 + ceil32(return_data.size) + 288]) + 32]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[_6800 + (2 * ceil32(return_data.size)) + 384] = 30
                                                    mem[_6800 + (2 * ceil32(return_data.size)) + 416] = 'SafeMath: subtraction overflow'
                                                    if eth.balance(this.address) > eth.balance(this.address):
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 448] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 452] = 32
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 484] = 30
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 516] = 'SafeMath: subtraction overflow'
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 546] = 0
                                                        revert with memory
                                                          from _6800 + (2 * ceil32(return_data.size)) + 448
                                                           len ceil32(return_data.size) + 100
                                                    if eth.balance(this.address) < eth.balance(this.address):
                                                        revert with 0, 17
                                                    call distributionPoolAddress with:
                                                         gas 2300 wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[_6800 + (2 * ceil32(return_data.size)) + 448] = 30
                                                    mem[_6800 + (2 * ceil32(return_data.size)) + 480] = 'SafeMath: subtraction overflow'
                                                    if not this.address:
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 516] = 32
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 548] = 37
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer from the zero ad'
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 612] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from _6800 + (2 * ceil32(return_data.size)) + 512
                                                           len ceil32(return_data.size) + 132
                                                    if not distributionPoolAddress:
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 516] = 32
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 548] = 35
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer to the zero addr'
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 612] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from _6800 + (2 * ceil32(return_data.size)) + 512
                                                           len ceil32(return_data.size) + 132
                                                    mem[_6800 + (2 * ceil32(return_data.size)) + 512] = 38
                                                    mem[_6800 + (2 * ceil32(return_data.size)) + 544 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 0 > balanceOf[address(this.address)]:
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 612] = 32
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 644] = 38
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 676 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6800 + (2 * ceil32(return_data.size)) + 582 len 26]
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 714] = 0
                                                        revert with memory
                                                          from _6800 + (2 * ceil32(return_data.size)) + 608
                                                           len ceil32(return_data.size) + 132
                                                    if balanceOf[address(this.address)] < 0:
                                                        revert with 0, 17
                                                    if balanceOf[stor17] > -1:
                                                        revert with 0, 17
                                                    if balanceOf[stor17] < balanceOf[stor17]:
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 612] = 32
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 644] = 27
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from _6800 + (2 * ceil32(return_data.size)) + 608
                                                           len ceil32(return_data.size) + 100
                                                    balanceOf[stor17] = balanceOf[stor17]
                                                    emit Transfer(0, this.address, distributionPoolAddress);
                                                    if not balanceOf[this.address]:
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 608] = 26
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 672] = 26
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 736] = 30
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 800] = 2
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                gas gas_remaining wei
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[64] = _6800 + (4 * ceil32(return_data.size)) + 896
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        mem[0] = uniswapV2RouterAddress
                                                        mem[32] = sha3(address(this.address), 1)
                                                        allowance[address(this.address)][stor14].field_0 = 0
                                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 900] = 0
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 932] = 0
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 964] = 160
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                        idx = 0
                                                        s = _6800 + (4 * ceil32(return_data.size)) + 1092
                                                        t = _6800 + (2 * ceil32(return_data.size)) + 832
                                                        while idx < mem[_6800 + (2 * ceil32(return_data.size)) + 800]:
                                                            mem[s] = mem[t + 12 len 20]
                                                            idx = idx + 1
                                                            s = s + 32
                                                            t = t + 32
                                                            continue 
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args 0, 0, 160, address(this.address), block.timestamp, mem[_6800 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_6800 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 896] = 30
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                                        if eth.balance(this.address) > eth.balance(this.address):
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 964] = 32
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 996] = 30
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1028] = 'SafeMath: subtraction overflow'
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1058] = 0
                                                            revert with memory
                                                              from _6800 + (4 * ceil32(return_data.size)) + 960
                                                               len (5 * ceil32(return_data.size)) + 100
                                                        if eth.balance(this.address) < eth.balance(this.address):
                                                            revert with 0, 17
                                                        if not this.address:
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 964] = 32
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 996] = 36
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve from the zero add'
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1060] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                            revert with memory
                                                              from _6800 + (4 * ceil32(return_data.size)) + 960
                                                               len (5 * ceil32(return_data.size)) + 132
                                                        if not uniswapV2RouterAddress:
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 964] = 32
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 996] = 34
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve to the zero addre'
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1060] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                            revert with memory
                                                              from _6800 + (4 * ceil32(return_data.size)) + 960
                                                               len (5 * ceil32(return_data.size)) + 132
                                                        allowance[address(this.address)][stor14].field_0 = 0
                                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 964] = this.address
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 996] = 0
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1028] = 0
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1060] = 0
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1092] = stor33
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                             gas gas_remaining wei
                                                            args mem[_6800 + (4 * ceil32(return_data.size)) + 964 len (5 * ceil32(return_data.size)) + 192]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 96
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 960] = 0
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 992] = 0
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1024] = 0
                                                        emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 960 len (7 * ceil32(return_data.size)) + 96],
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 960] = 2
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 992] = this.address
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                gas gas_remaining wei
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[64] = _6800 + (6 * ceil32(return_data.size)) + 1056
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        mem[0] = uniswapV2RouterAddress
                                                        mem[32] = sha3(address(this.address), 1)
                                                        allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                        emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                        mem[_6800 + (6 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                        mem[_6800 + (6 * ceil32(return_data.size)) + 1060] = balanceOf[this.address]
                                                        mem[_6800 + (6 * ceil32(return_data.size)) + 1092] = 0
                                                        mem[_6800 + (6 * ceil32(return_data.size)) + 1124] = 160
                                                        mem[_6800 + (6 * ceil32(return_data.size)) + 1220] = 2
                                                        idx = 0
                                                        s = _6800 + (6 * ceil32(return_data.size)) + 1252
                                                        t = _6800 + (4 * ceil32(return_data.size)) + 992
                                                        while idx < mem[_6800 + (4 * ceil32(return_data.size)) + 960]:
                                                            mem[s] = mem[t + 12 len 20]
                                                            idx = idx + 1
                                                            s = s + 32
                                                            t = t + 32
                                                            continue 
                                                        mem[_6800 + (6 * ceil32(return_data.size)) + 1188] = block.timestamp
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_6800 + (6 * ceil32(return_data.size)) + 1220 len (32 * mem[_6800 + (4 * ceil32(return_data.size)) + 960]) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        uint8(stor27.field_0) = 0
                                                        if not cd[36]:
                                                            if not msg.sender:
                                                                revert with 0, 
                                                                            'ERC20: transfer from the zero address',
                                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                            if not this.address:
                                                                revert with 0, 
                                                                            'ERC20: transfer to the zero address',
                                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1056] = 38
                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[_6800 + (6 * ceil32(return_data.size)) + 1258] = 0
                                                                revert with 0, 
                                                                            32,
                                                                            38,
                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1258 len (9 * ceil32(return_data.size)) + 26]
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 0, 17
                                                            if balanceOf[this.address] > -1:
                                                                revert with 0, 17
                                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow', mem[_6800 + (6 * ceil32(return_data.size)) + 1252 len 9 * ceil32(return_data.size)]
                                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                                            emit Transfer(0, msg.sender, this.address);
                                                        else:
                                                            if cd[36] and 10^18 > -1 / cd[36]:
                                                                revert with 0, 17
                                                            if not cd[36]:
                                                                revert with 0, 18
                                                            if 10^18 * cd[36] / cd[36] != 10^18:
                                                                revert with 0, 
                                                                            'SafeMath: multiplication overflow',
                                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                            if not msg.sender:
                                                                revert with 0, 
                                                                            'ERC20: transfer from the zero address',
                                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                            if not this.address:
                                                                revert with 0, 
                                                                            'ERC20: transfer to the zero address',
                                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1056] = 38
                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                mem[_6800 + (6 * ceil32(return_data.size)) + 1258] = 0
                                                                revert with 0, 
                                                                            32,
                                                                            38,
                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1258 len (9 * ceil32(return_data.size)) + 26]
                                                            if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                            if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                revert with 0, 17
                                                            if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow', mem[_6800 + (6 * ceil32(return_data.size)) + 1252 len 9 * ceil32(return_data.size)]
                                                            balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                            emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                        if not cd[36]:
                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1156] = msg.sender
                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1188] = 96
                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1252] = mem[128]
                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1284 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                            if ceil32(mem[128]) > mem[128]:
                                                                mem[mem[128] + _6800 + (6 * ceil32(return_data.size)) + 1284] = 0
                                                            require ext_code.size(nodeRewardManagerAddress)
                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, 96, 0, mem[128], mem[_6800 + (6 * ceil32(return_data.size)) + 1284 len (9 * ceil32(return_data.size)) + ceil32(mem[128])]
                                                        else:
                                                            if cd[36] and 10^18 > -1 / cd[36]:
                                                                revert with 0, 17
                                                            if not cd[36]:
                                                                revert with 0, 18
                                                            if 10^18 * cd[36] / cd[36] != 10^18:
                                                                revert with 0, 
                                                                            'SafeMath: multiplication overflow',
                                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1284 len 9 * ceil32(return_data.size)]
                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1156] = msg.sender
                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1188] = 96
                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1252] = mem[128]
                                                            mem[_6800 + (6 * ceil32(return_data.size)) + 1284 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                            if ceil32(mem[128]) > mem[128]:
                                                                mem[mem[128] + _6800 + (6 * ceil32(return_data.size)) + 1284] = 0
                                                            require ext_code.size(nodeRewardManagerAddress)
                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, Array(len=mem[128], data=mem[_6800 + (6 * ceil32(return_data.size)) + 1284 len (9 * ceil32(return_data.size)) + ceil32(mem[128])]), 10^18 * cd[36]
                                                    else:
                                                        if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                            revert with 0, 17
                                                        if not balanceOf[this.address]:
                                                            revert with 0, 18
                                                        if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 612] = 32
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 644] = 33
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: multiplication overflo'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 708] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                            revert with memory
                                                              from _6800 + (2 * ceil32(return_data.size)) + 608
                                                               len ceil32(return_data.size) + 132
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 608] = 26
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 672] = 26
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 736] = 30
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                        if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 800] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 804] = 32
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 836] = 30
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 868] = 'SafeMath: subtraction overflow'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 898] = 0
                                                            revert with memory
                                                              from _6800 + (2 * ceil32(return_data.size)) + 800
                                                               len ceil32(return_data.size) + 100
                                                        if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                            revert with 0, 17
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 800] = 2
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                gas gas_remaining wei
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[64] = _6800 + (4 * ceil32(return_data.size)) + 896
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        mem[0] = uniswapV2RouterAddress
                                                        mem[32] = sha3(address(this.address), 1)
                                                        allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                        allowance[address(this.address)][stor14].field_255 = 0
                                                        emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 900] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 932] = 0
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 964] = 160
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                        idx = 0
                                                        s = _6800 + (4 * ceil32(return_data.size)) + 1092
                                                        t = _6800 + (2 * ceil32(return_data.size)) + 832
                                                        while idx < mem[_6800 + (2 * ceil32(return_data.size)) + 800]:
                                                            mem[s] = mem[t + 12 len 20]
                                                            idx = idx + 1
                                                            s = s + 32
                                                            t = t + 32
                                                            continue 
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_6800 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_6800 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 896] = 30
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                                        if eth.balance(this.address) > eth.balance(this.address):
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 964] = 32
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 996] = 30
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1028] = 'SafeMath: subtraction overflow'
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1058] = 0
                                                            revert with memory
                                                              from _6800 + (4 * ceil32(return_data.size)) + 960
                                                               len (5 * ceil32(return_data.size)) + 100
                                                        if eth.balance(this.address) < eth.balance(this.address):
                                                            revert with 0, 17
                                                        if not this.address:
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 964] = 32
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 996] = 36
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve from the zero add'
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1060] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                            revert with memory
                                                              from _6800 + (4 * ceil32(return_data.size)) + 960
                                                               len (5 * ceil32(return_data.size)) + 132
                                                        if not uniswapV2RouterAddress:
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 964] = 32
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 996] = 34
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve to the zero addre'
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1060] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                            revert with memory
                                                              from _6800 + (4 * ceil32(return_data.size)) + 960
                                                               len (5 * ceil32(return_data.size)) + 132
                                                        allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                        emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 964] = this.address
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 996] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1028] = 0
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1060] = 0
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1092] = stor33
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                             gas gas_remaining wei
                                                            args mem[_6800 + (4 * ceil32(return_data.size)) + 964 len (5 * ceil32(return_data.size)) + 192]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 96
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 960] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 992] = 0
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1024] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                        emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 960 len (7 * ceil32(return_data.size)) + 96],
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 960] = 2
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 992] = this.address
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                gas gas_remaining wei
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[64] = _6800 + (6 * ceil32(return_data.size)) + 1056
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                        mem[_6800 + (4 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        mem[0] = uniswapV2RouterAddress
                                                        mem[32] = sha3(address(this.address), 1)
                                                        allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                        emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                        mem[_6800 + (6 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                        mem[_6800 + (6 * ceil32(return_data.size)) + 1060] = balanceOf[this.address]
                                                        mem[_6800 + (6 * ceil32(return_data.size)) + 1092] = 0
                                                        mem[_6800 + (6 * ceil32(return_data.size)) + 1124] = 160
                                                        mem[_6800 + (6 * ceil32(return_data.size)) + 1220] = 2
                                                        idx = 0
                                                        s = _6800 + (6 * ceil32(return_data.size)) + 1252
                                                        t = _6800 + (4 * ceil32(return_data.size)) + 992
                                                        while idx < mem[_6800 + (4 * ceil32(return_data.size)) + 960]:
                                                            mem[s] = mem[t + 12 len 20]
                                                            idx = idx + 1
                                                            s = s + 32
                                                            t = t + 32
                                                            continue 
                                                        mem[_6800 + (6 * ceil32(return_data.size)) + 1156] = this.address
                                                        mem[_6800 + (6 * ceil32(return_data.size)) + 1188] = block.timestamp
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _6800 + (6 * ceil32(return_data.size)) + (32 * mem[_6800 + (4 * ceil32(return_data.size)) + 960]) + -mem[64] + 1248]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        uint8(stor27.field_0) = 0
                                                        if not cd[36]:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _22194 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_22194] = 38
                                                            mem[_22194 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22194 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 0, 17
                                                            if balanceOf[this.address] > -1:
                                                                revert with 0, 17
                                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not cd[36]:
                                                                _23419 = mem[64]
                                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = msg.sender
                                                                mem[mem[64] + 36] = 96
                                                                mem[mem[64] + 100] = mem[128]
                                                                mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) <= mem[128]:
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                else:
                                                                    mem[mem[128] + mem[64] + 132] = 0
                                                                    mem[mem[64] + 68] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len ceil32(mem[128]) + _23419 + -mem[64] + 128]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _23671 = mem[64]
                                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = msg.sender
                                                                mem[mem[64] + 36] = 96
                                                                _23745 = mem[128]
                                                                mem[mem[64] + 100] = mem[128]
                                                                mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) <= mem[128]:
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                else:
                                                                    mem[mem[128] + mem[64] + 132] = 0
                                                                    mem[mem[64] + 68] = 10^18 * cd[36]
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len ceil32(_23745) + _23671 + -mem[64] + 128]
                                                        else:
                                                            if cd[36] and 10^18 > -1 / cd[36]:
                                                                revert with 0, 17
                                                            if not cd[36]:
                                                                revert with 0, 18
                                                            if 10^18 * cd[36] / cd[36] != 10^18:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _22622 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_22622] = 38
                                                            mem[_22622 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22622 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                            if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                revert with 0, 17
                                                            if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                            emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                            if not cd[36]:
                                                                _23670 = mem[64]
                                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = msg.sender
                                                                mem[mem[64] + 36] = 96
                                                                mem[mem[64] + 100] = mem[128]
                                                                mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) <= mem[128]:
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                else:
                                                                    mem[mem[128] + mem[64] + 132] = 0
                                                                    mem[mem[64] + 68] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len ceil32(mem[128]) + _23670 + -mem[64] + 128]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _23996 = mem[64]
                                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = msg.sender
                                                                mem[mem[64] + 36] = 96
                                                                _24034 = mem[128]
                                                                mem[mem[64] + 100] = mem[128]
                                                                mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) <= mem[128]:
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                else:
                                                                    mem[mem[128] + mem[64] + 132] = 0
                                                                    mem[mem[64] + 68] = 10^18 * cd[36]
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len ceil32(_24034) + _23996 + -mem[64] + 128]
                                                else:
                                                    if balanceOf[this.address] and rewardsFee > -1 / balanceOf[this.address]:
                                                        revert with 0, 17
                                                    if not balanceOf[this.address]:
                                                        revert with 0, 18
                                                    if balanceOf[this.address] * rewardsFee / balanceOf[this.address] != rewardsFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    mem[_6800 + ceil32(return_data.size) + 160] = 26
                                                    mem[_6800 + ceil32(return_data.size) + 192] = 'SafeMath: division by zero'
                                                    if balanceOf[this.address] * rewardsFee / 100:
                                                        if balanceOf[this.address] * rewardsFee / 100 and stor25 > -1 / balanceOf[this.address] * rewardsFee / 100:
                                                            revert with 0, 17
                                                        if not balanceOf[this.address] * rewardsFee / 100:
                                                            revert with 0, 18
                                                        if balanceOf[this.address] * rewardsFee / 100 * stor25 / balanceOf[this.address] * rewardsFee / 100 != stor25:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        mem[_6800 + ceil32(return_data.size) + 224] = 26
                                                        mem[_6800 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                                        mem[_6800 + ceil32(return_data.size) + 288] = 2
                                                        mem[_6800 + ceil32(return_data.size) + 320] = this.address
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                gas gas_remaining wei
                                                        mem[_6800 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[64] = _6800 + (2 * ceil32(return_data.size)) + 384
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                        mem[_6800 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        mem[0] = uniswapV2RouterAddress
                                                        mem[32] = sha3(address(this.address), 1)
                                                        allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * rewardsFee / 100 * stor25 / 100
                                                        emit Approval((balanceOf[this.address] * rewardsFee / 100 * stor25 / 100), this.address, uniswapV2RouterAddress);
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 388] = balanceOf[this.address] * rewardsFee / 100 * stor25 / 100
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 420] = 0
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 452] = 160
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 548] = 2
                                                        idx = 0
                                                        s = _6800 + (2 * ceil32(return_data.size)) + 580
                                                        t = _6800 + ceil32(return_data.size) + 320
                                                        while idx < mem[_6800 + ceil32(return_data.size) + 288]:
                                                            mem[s] = mem[t + 12 len 20]
                                                            idx = idx + 1
                                                            s = s + 32
                                                            t = t + 32
                                                            continue 
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 484] = this.address
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args balanceOf[this.address] * rewardsFee / 100 * stor25 / 100, 0, 160, address(this.address), block.timestamp, mem[_6800 + (2 * ceil32(return_data.size)) + 548 len (32 * mem[_6800 + ceil32(return_data.size) + 288]) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 384] = 30
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 416] = 'SafeMath: subtraction overflow'
                                                        if eth.balance(this.address) > eth.balance(this.address):
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 448] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 452] = 32
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 484] = 30
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 516] = 'SafeMath: subtraction overflow'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 546] = 0
                                                            revert with memory
                                                              from _6800 + (2 * ceil32(return_data.size)) + 448
                                                               len ceil32(return_data.size) + 100
                                                        if eth.balance(this.address) < eth.balance(this.address):
                                                            revert with 0, 17
                                                        call distributionPoolAddress with:
                                                             gas 2300 wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 448] = 30
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 480] = 'SafeMath: subtraction overflow'
                                                        if balanceOf[this.address] * rewardsFee / 100 * stor25 / 100 > balanceOf[this.address] * rewardsFee / 100:
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 516] = 32
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 548] = 30
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 580] = 'SafeMath: subtraction overflow'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 610] = 0
                                                            revert with memory
                                                              from _6800 + (2 * ceil32(return_data.size)) + 512
                                                               len ceil32(return_data.size) + 100
                                                        if balanceOf[this.address] * rewardsFee / 100 < balanceOf[this.address] * rewardsFee / 100 * stor25 / 100:
                                                            revert with 0, 17
                                                        if not this.address:
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 516] = 32
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 548] = 37
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer from the zero ad'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 612] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                            revert with memory
                                                              from _6800 + (2 * ceil32(return_data.size)) + 512
                                                               len ceil32(return_data.size) + 132
                                                        if not distributionPoolAddress:
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 516] = 32
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 548] = 35
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer to the zero addr'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 612] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                            revert with memory
                                                              from _6800 + (2 * ceil32(return_data.size)) + 512
                                                               len ceil32(return_data.size) + 132
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 512] = 38
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 544 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100) > balanceOf[address(this.address)]:
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 612] = 32
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 644] = 38
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 676 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6800 + (2 * ceil32(return_data.size)) + 582 len 26]
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 714] = 0
                                                            revert with memory
                                                              from _6800 + (2 * ceil32(return_data.size)) + 608
                                                               len ceil32(return_data.size) + 132
                                                        if balanceOf[address(this.address)] < (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100):
                                                            revert with 0, 17
                                                        balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[this.address] * rewardsFee / 100) + (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)
                                                        if balanceOf[stor17] > !((balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)):
                                                            revert with 0, 17
                                                        if balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100) < balanceOf[stor17]:
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 612] = 32
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 644] = 27
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from _6800 + (2 * ceil32(return_data.size)) + 608
                                                               len ceil32(return_data.size) + 100
                                                        balanceOf[stor17] = balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)
                                                        emit Transfer(((balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)), this.address, distributionPoolAddress);
                                                        if not balanceOf[this.address]:
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 608] = 26
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 672] = 26
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 736] = 30
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 800] = 2
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _6800 + (4 * ceil32(return_data.size)) + 896
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 900] = 0
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 932] = 0
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 964] = 160
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                            idx = 0
                                                            s = _6800 + (4 * ceil32(return_data.size)) + 1092
                                                            t = _6800 + (2 * ceil32(return_data.size)) + 832
                                                            while idx < mem[_6800 + (2 * ceil32(return_data.size)) + 800]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _6800 + (4 * ceil32(return_data.size)) + (32 * mem[_6800 + (2 * ceil32(return_data.size)) + 800]) + -mem[64] + 1088]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _18163 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_18163] = 30
                                                            mem[_18163 + 32] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[mem[64] + 68] = 0
                                                            mem[mem[64] + 100] = 0
                                                            mem[mem[64] + 132] = stor33
                                                            mem[mem[64] + 164] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                 gas gas_remaining wei
                                                                args this.address, 0, 0, 0, stor33, block.timestamp
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            mem[mem[64] + 32] = 0
                                                            mem[mem[64] + 64] = 0
                                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                0,
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            _19022 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_19022 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_19022]:
                                                                revert with 0, 50
                                                            mem[_19022 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_19022 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _19022 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_19022]:
                                                                revert with 0, 50
                                                            mem[_19022 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                            mem[_19022 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_19022 + ceil32(return_data.size) + 100] = balanceOf[this.address]
                                                            mem[_19022 + ceil32(return_data.size) + 132] = 0
                                                            mem[_19022 + ceil32(return_data.size) + 164] = 160
                                                            mem[_19022 + ceil32(return_data.size) + 260] = mem[_19022]
                                                            idx = 0
                                                            s = _19022 + ceil32(return_data.size) + 292
                                                            t = _19022 + 32
                                                            while idx < mem[_19022]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_19022 + ceil32(return_data.size) + 260 len (32 * mem[_19022]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            uint8(stor27.field_0) = 0
                                                            if not cd[36]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                mem[_19022 + ceil32(return_data.size) + 96] = 38
                                                                mem[_19022 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] > -1:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                                emit Transfer(0, msg.sender, this.address);
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                mem[_19022 + ceil32(return_data.size) + 96] = 38
                                                                mem[_19022 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                    revert with 0, 17
                                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                            if not cd[36]:
                                                                mem[_19022 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_19022 + ceil32(return_data.size) + 196] = msg.sender
                                                                mem[_19022 + ceil32(return_data.size) + 228] = 96
                                                                mem[_19022 + ceil32(return_data.size) + 292] = mem[128]
                                                                mem[_19022 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _19022 + ceil32(return_data.size) + 324] = 0
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, 96, 0, mem[128], mem[_19022 + ceil32(return_data.size) + 324 len ceil32(mem[128])]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                mem[_19022 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_19022 + ceil32(return_data.size) + 196] = msg.sender
                                                                mem[_19022 + ceil32(return_data.size) + 228] = 96
                                                                mem[_19022 + ceil32(return_data.size) + 292] = mem[128]
                                                                mem[_19022 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _19022 + ceil32(return_data.size) + 324] = 0
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, Array(len=mem[128], data=mem[_19022 + ceil32(return_data.size) + 324 len ceil32(mem[128])]), 10^18 * cd[36]
                                                        else:
                                                            if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                                revert with 0, 17
                                                            if not balanceOf[this.address]:
                                                                revert with 0, 18
                                                            if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 612] = 32
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 644] = 33
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: multiplication overflo'
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 708] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _6800 + (2 * ceil32(return_data.size)) + 608
                                                                   len ceil32(return_data.size) + 132
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 608] = 26
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 672] = 26
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 736] = 30
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                            if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 800] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 804] = 32
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 836] = 30
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 868] = 'SafeMath: subtraction overflow'
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 898] = 0
                                                                revert with memory
                                                                  from _6800 + (2 * ceil32(return_data.size)) + 800
                                                                   len ceil32(return_data.size) + 100
                                                            if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                                revert with 0, 17
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 800] = 2
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _6800 + (4 * ceil32(return_data.size)) + 896
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                            allowance[address(this.address)][stor14].field_255 = 0
                                                            emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 900] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 932] = 0
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 964] = 160
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                            idx = 0
                                                            s = _6800 + (4 * ceil32(return_data.size)) + 1092
                                                            t = _6800 + (2 * ceil32(return_data.size)) + 832
                                                            while idx < mem[_6800 + (2 * ceil32(return_data.size)) + 800]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _6800 + (4 * ceil32(return_data.size)) + (32 * mem[_6800 + (2 * ceil32(return_data.size)) + 800]) + -mem[64] + 1088]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _18162 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_18162] = 30
                                                            mem[_18162 + 32] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                            emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                            mem[mem[64] + 68] = 0
                                                            mem[mem[64] + 100] = 0
                                                            mem[mem[64] + 132] = stor33
                                                            mem[mem[64] + 164] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                 gas gas_remaining wei
                                                                args this.address, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2), 0, 0, stor33, block.timestamp
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            mem[mem[64] + 32] = 0
                                                            mem[mem[64] + 64] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2));
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            _19020 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_19020 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_19020]:
                                                                revert with 0, 50
                                                            mem[_19020 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_19020 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _19020 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_19020]:
                                                                revert with 0, 50
                                                            mem[_19020 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                            mem[_19020 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_19020 + ceil32(return_data.size) + 100] = balanceOf[this.address]
                                                            mem[_19020 + ceil32(return_data.size) + 132] = 0
                                                            mem[_19020 + ceil32(return_data.size) + 164] = 160
                                                            mem[_19020 + ceil32(return_data.size) + 260] = mem[_19020]
                                                            idx = 0
                                                            s = _19020 + ceil32(return_data.size) + 292
                                                            t = _19020 + 32
                                                            while idx < mem[_19020]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_19020 + ceil32(return_data.size) + 260 len (32 * mem[_19020]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            uint8(stor27.field_0) = 0
                                                            if not cd[36]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                mem[_19020 + ceil32(return_data.size) + 96] = 38
                                                                mem[_19020 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] > -1:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                                emit Transfer(0, msg.sender, this.address);
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                mem[_19020 + ceil32(return_data.size) + 96] = 38
                                                                mem[_19020 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                    revert with 0, 17
                                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                            if not cd[36]:
                                                                mem[_19020 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_19020 + ceil32(return_data.size) + 196] = msg.sender
                                                                mem[_19020 + ceil32(return_data.size) + 228] = 96
                                                                mem[_19020 + ceil32(return_data.size) + 292] = mem[128]
                                                                mem[_19020 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _19020 + ceil32(return_data.size) + 324] = 0
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, 96, 0, mem[128], mem[_19020 + ceil32(return_data.size) + 324 len ceil32(mem[128])]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                mem[_19020 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_19020 + ceil32(return_data.size) + 196] = msg.sender
                                                                mem[_19020 + ceil32(return_data.size) + 228] = 96
                                                                mem[_19020 + ceil32(return_data.size) + 292] = mem[128]
                                                                mem[_19020 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _19020 + ceil32(return_data.size) + 324] = 0
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, Array(len=mem[128], data=mem[_19020 + ceil32(return_data.size) + 324 len ceil32(mem[128])]), 10^18 * cd[36]
                                                    else:
                                                        mem[_6800 + ceil32(return_data.size) + 224] = 26
                                                        mem[_6800 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                                        mem[_6800 + ceil32(return_data.size) + 288] = 2
                                                        mem[_6800 + ceil32(return_data.size) + 320] = this.address
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                gas gas_remaining wei
                                                        mem[_6800 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[64] = _6800 + (2 * ceil32(return_data.size)) + 384
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                        mem[_6800 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        mem[0] = uniswapV2RouterAddress
                                                        mem[32] = sha3(address(this.address), 1)
                                                        allowance[address(this.address)][stor14].field_0 = 0
                                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 388] = 0
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 420] = 0
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 452] = 160
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 548] = 2
                                                        idx = 0
                                                        s = _6800 + (2 * ceil32(return_data.size)) + 580
                                                        t = _6800 + ceil32(return_data.size) + 320
                                                        while idx < mem[_6800 + ceil32(return_data.size) + 288]:
                                                            mem[s] = mem[t + 12 len 20]
                                                            idx = idx + 1
                                                            s = s + 32
                                                            t = t + 32
                                                            continue 
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 484] = this.address
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args 0, 0, 160, address(this.address), block.timestamp, mem[_6800 + (2 * ceil32(return_data.size)) + 548 len (32 * mem[_6800 + ceil32(return_data.size) + 288]) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 384] = 30
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 416] = 'SafeMath: subtraction overflow'
                                                        if eth.balance(this.address) > eth.balance(this.address):
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 448] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 452] = 32
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 484] = 30
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 516] = 'SafeMath: subtraction overflow'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 546] = 0
                                                            revert with memory
                                                              from _6800 + (2 * ceil32(return_data.size)) + 448
                                                               len ceil32(return_data.size) + 100
                                                        if eth.balance(this.address) < eth.balance(this.address):
                                                            revert with 0, 17
                                                        call distributionPoolAddress with:
                                                             gas 2300 wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 448] = 30
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 480] = 'SafeMath: subtraction overflow'
                                                        if 0 > balanceOf[this.address] * rewardsFee / 100:
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 516] = 32
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 548] = 30
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 580] = 'SafeMath: subtraction overflow'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 610] = 0
                                                            revert with memory
                                                              from _6800 + (2 * ceil32(return_data.size)) + 512
                                                               len ceil32(return_data.size) + 100
                                                        if balanceOf[this.address] * rewardsFee / 100 < 0:
                                                            revert with 0, 17
                                                        if not this.address:
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 516] = 32
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 548] = 37
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer from the zero ad'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 612] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                            revert with memory
                                                              from _6800 + (2 * ceil32(return_data.size)) + 512
                                                               len ceil32(return_data.size) + 132
                                                        if not distributionPoolAddress:
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 516] = 32
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 548] = 35
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer to the zero addr'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 612] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                            revert with memory
                                                              from _6800 + (2 * ceil32(return_data.size)) + 512
                                                               len ceil32(return_data.size) + 132
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 512] = 38
                                                        mem[_6800 + (2 * ceil32(return_data.size)) + 544 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if balanceOf[this.address] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 612] = 32
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 644] = 38
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 676 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6800 + (2 * ceil32(return_data.size)) + 582 len 26]
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 714] = 0
                                                            revert with memory
                                                              from _6800 + (2 * ceil32(return_data.size)) + 608
                                                               len ceil32(return_data.size) + 132
                                                        if balanceOf[address(this.address)] < balanceOf[this.address] * rewardsFee / 100:
                                                            revert with 0, 17
                                                        balanceOf[address(this.address)] -= balanceOf[this.address] * rewardsFee / 100
                                                        if balanceOf[stor17] > !(balanceOf[this.address] * rewardsFee / 100):
                                                            revert with 0, 17
                                                        if balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) < balanceOf[stor17]:
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 612] = 32
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 644] = 27
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from _6800 + (2 * ceil32(return_data.size)) + 608
                                                               len ceil32(return_data.size) + 100
                                                        balanceOf[stor17] += balanceOf[this.address] * rewardsFee / 100
                                                        emit Transfer((balanceOf[this.address] * rewardsFee / 100), this.address, distributionPoolAddress);
                                                        if not balanceOf[this.address]:
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 608] = 26
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 672] = 26
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 736] = 30
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 800] = 2
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _6800 + (4 * ceil32(return_data.size)) + 896
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 900] = 0
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 932] = 0
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 964] = 160
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                            idx = 0
                                                            s = _6800 + (4 * ceil32(return_data.size)) + 1092
                                                            t = _6800 + (2 * ceil32(return_data.size)) + 832
                                                            while idx < mem[_6800 + (2 * ceil32(return_data.size)) + 800]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _6800 + (4 * ceil32(return_data.size)) + (32 * mem[_6800 + (2 * ceil32(return_data.size)) + 800]) + -mem[64] + 1088]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _18165 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_18165] = 30
                                                            mem[_18165 + 32] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[mem[64] + 68] = 0
                                                            mem[mem[64] + 100] = 0
                                                            mem[mem[64] + 132] = stor33
                                                            mem[mem[64] + 164] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                 gas gas_remaining wei
                                                                args this.address, 0, 0, 0, stor33, block.timestamp
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            mem[mem[64] + 32] = 0
                                                            mem[mem[64] + 64] = 0
                                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                0,
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            _19026 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_19026 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_19026]:
                                                                revert with 0, 50
                                                            mem[_19026 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_19026 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _19026 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_19026]:
                                                                revert with 0, 50
                                                            mem[_19026 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                            mem[_19026 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_19026 + ceil32(return_data.size) + 100] = balanceOf[this.address]
                                                            mem[_19026 + ceil32(return_data.size) + 132] = 0
                                                            mem[_19026 + ceil32(return_data.size) + 164] = 160
                                                            mem[_19026 + ceil32(return_data.size) + 260] = mem[_19026]
                                                            idx = 0
                                                            s = _19026 + ceil32(return_data.size) + 292
                                                            t = _19026 + 32
                                                            while idx < mem[_19026]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_19026 + ceil32(return_data.size) + 260 len (32 * mem[_19026]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            uint8(stor27.field_0) = 0
                                                            if not cd[36]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                mem[_19026 + ceil32(return_data.size) + 96] = 38
                                                                mem[_19026 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] > -1:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                                emit Transfer(0, msg.sender, this.address);
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                mem[_19026 + ceil32(return_data.size) + 96] = 38
                                                                mem[_19026 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                    revert with 0, 17
                                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                            if not cd[36]:
                                                                mem[_19026 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_19026 + ceil32(return_data.size) + 196] = msg.sender
                                                                mem[_19026 + ceil32(return_data.size) + 228] = 96
                                                                mem[_19026 + ceil32(return_data.size) + 292] = mem[128]
                                                                mem[_19026 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _19026 + ceil32(return_data.size) + 324] = 0
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, 96, 0, mem[128], mem[_19026 + ceil32(return_data.size) + 324 len ceil32(mem[128])]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                mem[_19026 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_19026 + ceil32(return_data.size) + 196] = msg.sender
                                                                mem[_19026 + ceil32(return_data.size) + 228] = 96
                                                                mem[_19026 + ceil32(return_data.size) + 292] = mem[128]
                                                                mem[_19026 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _19026 + ceil32(return_data.size) + 324] = 0
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, Array(len=mem[128], data=mem[_19026 + ceil32(return_data.size) + 324 len ceil32(mem[128])]), 10^18 * cd[36]
                                                        else:
                                                            if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                                revert with 0, 17
                                                            if not balanceOf[this.address]:
                                                                revert with 0, 18
                                                            if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 612] = 32
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 644] = 33
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: multiplication overflo'
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 708] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _6800 + (2 * ceil32(return_data.size)) + 608
                                                                   len ceil32(return_data.size) + 132
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 608] = 26
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 672] = 26
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 736] = 30
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                            if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 800] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 804] = 32
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 836] = 30
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 868] = 'SafeMath: subtraction overflow'
                                                                mem[_6800 + (2 * ceil32(return_data.size)) + 898] = 0
                                                                revert with memory
                                                                  from _6800 + (2 * ceil32(return_data.size)) + 800
                                                                   len ceil32(return_data.size) + 100
                                                            if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                                revert with 0, 17
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 800] = 2
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _6800 + (4 * ceil32(return_data.size)) + 896
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_6800 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                            allowance[address(this.address)][stor14].field_255 = 0
                                                            emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 900] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 932] = 0
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 964] = 160
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                            idx = 0
                                                            s = _6800 + (4 * ceil32(return_data.size)) + 1092
                                                            t = _6800 + (2 * ceil32(return_data.size)) + 832
                                                            while idx < mem[_6800 + (2 * ceil32(return_data.size)) + 800]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                            mem[_6800 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _6800 + (4 * ceil32(return_data.size)) + (32 * mem[_6800 + (2 * ceil32(return_data.size)) + 800]) + -mem[64] + 1088]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _18164 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_18164] = 30
                                                            mem[_18164 + 32] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                            emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                            mem[mem[64] + 68] = 0
                                                            mem[mem[64] + 100] = 0
                                                            mem[mem[64] + 132] = stor33
                                                            mem[mem[64] + 164] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                 gas gas_remaining wei
                                                                args this.address, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2), 0, 0, stor33, block.timestamp
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            mem[mem[64] + 32] = 0
                                                            mem[mem[64] + 64] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2));
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            _19024 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_19024 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_19024]:
                                                                revert with 0, 50
                                                            mem[_19024 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_19024 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _19024 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_19024]:
                                                                revert with 0, 50
                                                            mem[_19024 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                            mem[_19024 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_19024 + ceil32(return_data.size) + 100] = balanceOf[this.address]
                                                            mem[_19024 + ceil32(return_data.size) + 132] = 0
                                                            mem[_19024 + ceil32(return_data.size) + 164] = 160
                                                            mem[_19024 + ceil32(return_data.size) + 260] = mem[_19024]
                                                            idx = 0
                                                            s = _19024 + ceil32(return_data.size) + 292
                                                            t = _19024 + 32
                                                            while idx < mem[_19024]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_19024 + ceil32(return_data.size) + 196] = this.address
                                                            mem[_19024 + ceil32(return_data.size) + 228] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _19024 + ceil32(return_data.size) + (32 * mem[_19024]) + -mem[64] + 288]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            uint8(stor27.field_0) = 0
                                                            if not cd[36]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _22188 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_22188] = 38
                                                                mem[_22188 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22188 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] > -1:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not cd[36]:
                                                                    _23411 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 0
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(mem[128]) + _23411 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _23665 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    _23741 = mem[128]
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 10^18 * cd[36]
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(_23741) + _23665 + -mem[64] + 128]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _22612 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_22612] = 38
                                                                mem[_22612 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22612 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                    revert with 0, 17
                                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                if not cd[36]:
                                                                    _23664 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 0
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(mem[128]) + _23664 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _23992 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    _24032 = mem[128]
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 10^18 * cd[36]
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(_24032) + _23992 + -mem[64] + 128]
                                            else:
                                                if balanceOf[this.address] and treasuryFee > -1 / balanceOf[this.address]:
                                                    revert with 0, 17
                                                if not balanceOf[this.address]:
                                                    revert with 0, 18
                                                if balanceOf[this.address] * treasuryFee / balanceOf[this.address] != treasuryFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 129] = 26
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 161] = 'SafeMath: division by zero'
                                                if not balanceOf[this.address] * treasuryFee / 100:
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 193] = 26
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 225] = 'SafeMath: division by zero'
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 257] = 30
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 289] = 'SafeMath: subtraction overflow'
                                                    if 0 > balanceOf[this.address] * treasuryFee / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if balanceOf[this.address] * treasuryFee / 100 < 0:
                                                        revert with 0, 17
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 321] = 2
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 353] = this.address
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                            gas gas_remaining wei
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 417] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 385] = ext_call.return_data[12 len 20]
                                                    if not this.address:
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = 32
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 36
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 'ERC20: approve from the zero add'
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                           len ceil32(return_data.size) + 132
                                                    if not uniswapV2RouterAddress:
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = 32
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 34
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 'ERC20: approve to the zero addre'
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                           len ceil32(return_data.size) + 132
                                                    mem[0] = uniswapV2RouterAddress
                                                    mem[32] = sha3(address(this.address), 1)
                                                    allowance[address(this.address)][stor14].field_0 = 0
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0
                                                    emit Approval(mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = 0
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 0
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 160
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 581] = 2
                                                    idx = 0
                                                    s = ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 613
                                                    t = ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 353
                                                    while idx < mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 321]:
                                                        mem[s] = mem[t + 12 len 20]
                                                        idx = idx + 1
                                                        s = s + 32
                                                        t = t + 32
                                                        continue 
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = this.address
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 549] = block.timestamp
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + -mem[64] + 673]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _6607 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_6607] = 30
                                                    mem[_6607 + 32] = 'SafeMath: subtraction overflow'
                                                    if eth.balance(this.address) > eth.balance(this.address):
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if eth.balance(this.address) < eth.balance(this.address):
                                                        revert with 0, 17
                                                    call devPoolAddress with:
                                                         gas 2300 wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _6796 = mem[64]
                                                    mem[mem[64]] = 2
                                                    mem[64] = mem[64] + 96
                                                    mem[_6796 + 32 len 64] = call.data[calldata.size len 64]
                                                    if 0 >= mem[_6796]:
                                                        revert with 0, 50
                                                    mem[_6796 + 32] = this.address
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                            gas gas_remaining wei
                                                    mem[_6796 + 96] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _6796 + ceil32(return_data.size) + 96
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                    if 1 >= mem[_6796]:
                                                        revert with 0, 50
                                                    mem[_6796 + 64] = ext_call.return_data[12 len 20]
                                                    if not this.address:
                                                        revert with 0, 'ERC20: approve from the zero address'
                                                    if not uniswapV2RouterAddress:
                                                        revert with 0, 'ERC20: approve to the zero address'
                                                    mem[0] = uniswapV2RouterAddress
                                                    mem[32] = sha3(address(this.address), 1)
                                                    allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * treasuryFee / 100
                                                    emit Approval((balanceOf[this.address] * treasuryFee / 100), this.address, uniswapV2RouterAddress);
                                                    mem[_6796 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                    mem[_6796 + ceil32(return_data.size) + 100] = balanceOf[this.address] * treasuryFee / 100
                                                    mem[_6796 + ceil32(return_data.size) + 132] = 0
                                                    mem[_6796 + ceil32(return_data.size) + 164] = 160
                                                    mem[_6796 + ceil32(return_data.size) + 260] = mem[_6796]
                                                    idx = 0
                                                    s = _6796 + ceil32(return_data.size) + 292
                                                    t = _6796 + 32
                                                    while idx < mem[_6796]:
                                                        mem[s] = mem[t + 12 len 20]
                                                        idx = idx + 1
                                                        s = s + 32
                                                        t = t + 32
                                                        continue 
                                                    mem[_6796 + ceil32(return_data.size) + 196] = this.address
                                                    mem[_6796 + ceil32(return_data.size) + 228] = block.timestamp
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len _6796 + ceil32(return_data.size) + (32 * mem[_6796]) + -mem[64] + 288]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _9318 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_9318] = 30
                                                    mem[_9318 + 32] = 'SafeMath: subtraction overflow'
                                                    if eth.balance(this.address) > eth.balance(this.address):
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if eth.balance(this.address) < eth.balance(this.address):
                                                        revert with 0, 17
                                                    call treasuryPoolAddress with:
                                                         gas 2300 wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not balanceOf[this.address]:
                                                        _9370 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_9370] = 26
                                                        mem[_9370 + 32] = 'SafeMath: division by zero'
                                                        _9394 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_9394] = 26
                                                        mem[_9394 + 32] = 'SafeMath: division by zero'
                                                        _9410 = mem[64]
                                                        mem[mem[64]] = 2
                                                        mem[64] = mem[64] + 96
                                                        mem[_9410 + 32 len 64] = call.data[calldata.size len 64]
                                                        if 0 >= mem[_9410]:
                                                            revert with 0, 50
                                                        mem[_9410 + 32] = this.address
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                gas gas_remaining wei
                                                        mem[_9410 + 96] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[64] = _9410 + ceil32(return_data.size) + 96
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                        if 1 >= mem[_9410]:
                                                            revert with 0, 50
                                                        mem[_9410 + 64] = ext_call.return_data[12 len 20]
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        mem[0] = uniswapV2RouterAddress
                                                        mem[32] = sha3(address(this.address), 1)
                                                        allowance[address(this.address)][stor14].field_0 = 0
                                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                                        mem[_9410 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                        mem[_9410 + ceil32(return_data.size) + 100] = 0
                                                        mem[_9410 + ceil32(return_data.size) + 132] = 0
                                                        mem[_9410 + ceil32(return_data.size) + 164] = 160
                                                        mem[_9410 + ceil32(return_data.size) + 260] = mem[_9410]
                                                        idx = 0
                                                        s = _9410 + ceil32(return_data.size) + 292
                                                        t = _9410 + 32
                                                        while idx < mem[_9410]:
                                                            mem[s] = mem[t + 12 len 20]
                                                            idx = idx + 1
                                                            s = s + 32
                                                            t = t + 32
                                                            continue 
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args 0, 0, 160, address(this.address), block.timestamp, mem[_9410 + ceil32(return_data.size) + 260 len (32 * mem[_9410]) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[_9410 + ceil32(return_data.size) + 96] = 30
                                                        mem[_9410 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                        if eth.balance(this.address) > eth.balance(this.address):
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if eth.balance(this.address) < eth.balance(this.address):
                                                            revert with 0, 17
                                                        call distributionPoolAddress with:
                                                             gas 2300 wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[_9410 + ceil32(return_data.size) + 160] = 30
                                                        mem[_9410 + ceil32(return_data.size) + 192] = 'SafeMath: subtraction overflow'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not distributionPoolAddress:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        mem[_9410 + ceil32(return_data.size) + 224] = 38
                                                        mem[_9410 + ceil32(return_data.size) + 256 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(this.address)]:
                                                            revert with 0, 
                                                                        32,
                                                                        38,
                                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_9410 + ceil32(return_data.size) + 294 len 26] >> 48,
                                                                        0
                                                        if balanceOf[address(this.address)] < 0:
                                                            revert with 0, 17
                                                        if balanceOf[stor17] > -1:
                                                            revert with 0, 17
                                                        if balanceOf[stor17] < balanceOf[stor17]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[stor17] = balanceOf[stor17]
                                                        emit Transfer(0, this.address, distributionPoolAddress);
                                                        if balanceOf[this.address]:
                                                            if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                                revert with 0, 17
                                                            if not balanceOf[this.address]:
                                                                revert with 0, 18
                                                            if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            mem[_9410 + ceil32(return_data.size) + 320] = 26
                                                            mem[_9410 + ceil32(return_data.size) + 352] = 'SafeMath: division by zero'
                                                            mem[_9410 + ceil32(return_data.size) + 384] = 26
                                                            mem[_9410 + ceil32(return_data.size) + 416] = 'SafeMath: division by zero'
                                                            mem[_9410 + ceil32(return_data.size) + 448] = 30
                                                            mem[_9410 + ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                            if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                                revert with 0, 17
                                                            mem[_9410 + ceil32(return_data.size) + 512] = 2
                                                            mem[_9410 + ceil32(return_data.size) + 544] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_9410 + ceil32(return_data.size) + 608] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _9410 + (2 * ceil32(return_data.size)) + 608
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_9410 + ceil32(return_data.size) + 576] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                            allowance[address(this.address)][stor14].field_255 = 0
                                                            emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                            mem[_9410 + (2 * ceil32(return_data.size)) + 608] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_9410 + (2 * ceil32(return_data.size)) + 612] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                            mem[_9410 + (2 * ceil32(return_data.size)) + 644] = 0
                                                            mem[_9410 + (2 * ceil32(return_data.size)) + 676] = 160
                                                            mem[_9410 + (2 * ceil32(return_data.size)) + 772] = 2
                                                            idx = 0
                                                            s = _9410 + (2 * ceil32(return_data.size)) + 804
                                                            t = _9410 + ceil32(return_data.size) + 544
                                                            while idx < mem[_9410 + ceil32(return_data.size) + 512]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_9410 + (2 * ceil32(return_data.size)) + 708] = this.address
                                                            mem[_9410 + (2 * ceil32(return_data.size)) + 740] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _9410 + (2 * ceil32(return_data.size)) + (32 * mem[_9410 + ceil32(return_data.size) + 512]) + -mem[64] + 800]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _18160 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_18160] = 30
                                                            mem[_18160 + 32] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                            emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                            mem[mem[64] + 68] = 0
                                                            mem[mem[64] + 100] = 0
                                                            mem[mem[64] + 132] = stor33
                                                            mem[mem[64] + 164] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                 gas gas_remaining wei
                                                                args this.address, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2), 0, 0, stor33, block.timestamp
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            mem[mem[64] + 32] = 0
                                                            mem[mem[64] + 64] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2));
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            _19016 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_19016 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_19016]:
                                                                revert with 0, 50
                                                            mem[_19016 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_19016 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _19016 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_19016]:
                                                                revert with 0, 50
                                                            mem[_19016 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                            mem[_19016 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_19016 + ceil32(return_data.size) + 100] = balanceOf[this.address]
                                                            mem[_19016 + ceil32(return_data.size) + 132] = 0
                                                            mem[_19016 + ceil32(return_data.size) + 164] = 160
                                                            mem[_19016 + ceil32(return_data.size) + 260] = mem[_19016]
                                                            idx = 0
                                                            s = _19016 + ceil32(return_data.size) + 292
                                                            t = _19016 + 32
                                                            while idx < mem[_19016]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_19016 + ceil32(return_data.size) + 260 len (32 * mem[_19016]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            uint8(stor27.field_0) = 0
                                                            if not cd[36]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                mem[_19016 + ceil32(return_data.size) + 96] = 38
                                                                mem[_19016 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] > -1:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                                emit Transfer(0, msg.sender, this.address);
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                mem[_19016 + ceil32(return_data.size) + 96] = 38
                                                                mem[_19016 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                    revert with 0, 17
                                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                            if not cd[36]:
                                                                mem[_19016 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_19016 + ceil32(return_data.size) + 196] = msg.sender
                                                                mem[_19016 + ceil32(return_data.size) + 228] = 96
                                                                mem[_19016 + ceil32(return_data.size) + 292] = mem[128]
                                                                mem[_19016 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _19016 + ceil32(return_data.size) + 324] = 0
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, 96, 0, mem[128], mem[_19016 + ceil32(return_data.size) + 324 len ceil32(mem[128])]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                mem[_19016 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_19016 + ceil32(return_data.size) + 196] = msg.sender
                                                                mem[_19016 + ceil32(return_data.size) + 228] = 96
                                                                mem[_19016 + ceil32(return_data.size) + 292] = mem[128]
                                                                mem[_19016 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _19016 + ceil32(return_data.size) + 324] = 0
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, Array(len=mem[128], data=mem[_19016 + ceil32(return_data.size) + 324 len ceil32(mem[128])]), 10^18 * cd[36]
                                                        else:
                                                            mem[_9410 + ceil32(return_data.size) + 320] = 26
                                                            mem[_9410 + ceil32(return_data.size) + 352] = 'SafeMath: division by zero'
                                                            mem[_9410 + ceil32(return_data.size) + 384] = 26
                                                            mem[_9410 + ceil32(return_data.size) + 416] = 'SafeMath: division by zero'
                                                            mem[_9410 + ceil32(return_data.size) + 448] = 30
                                                            mem[_9410 + ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                            mem[_9410 + ceil32(return_data.size) + 512] = 2
                                                            mem[_9410 + ceil32(return_data.size) + 544] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_9410 + ceil32(return_data.size) + 608] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _9410 + (2 * ceil32(return_data.size)) + 608
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_9410 + ceil32(return_data.size) + 576] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[_9410 + (2 * ceil32(return_data.size)) + 608] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_9410 + (2 * ceil32(return_data.size)) + 612] = 0
                                                            mem[_9410 + (2 * ceil32(return_data.size)) + 644] = 0
                                                            mem[_9410 + (2 * ceil32(return_data.size)) + 676] = 160
                                                            mem[_9410 + (2 * ceil32(return_data.size)) + 772] = 2
                                                            idx = 0
                                                            s = _9410 + (2 * ceil32(return_data.size)) + 804
                                                            t = _9410 + ceil32(return_data.size) + 544
                                                            while idx < mem[_9410 + ceil32(return_data.size) + 512]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_9410 + (2 * ceil32(return_data.size)) + 708] = this.address
                                                            mem[_9410 + (2 * ceil32(return_data.size)) + 740] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _9410 + (2 * ceil32(return_data.size)) + (32 * mem[_9410 + ceil32(return_data.size) + 512]) + -mem[64] + 800]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _18161 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_18161] = 30
                                                            mem[_18161 + 32] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[mem[64] + 68] = 0
                                                            mem[mem[64] + 100] = 0
                                                            mem[mem[64] + 132] = stor33
                                                            mem[mem[64] + 164] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                 gas gas_remaining wei
                                                                args this.address, 0, 0, 0, stor33, block.timestamp
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            mem[mem[64] + 32] = 0
                                                            mem[mem[64] + 64] = 0
                                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                0,
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            _19018 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_19018 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_19018]:
                                                                revert with 0, 50
                                                            mem[_19018 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_19018 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _19018 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_19018]:
                                                                revert with 0, 50
                                                            mem[_19018 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                            mem[_19018 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_19018 + ceil32(return_data.size) + 100] = balanceOf[this.address]
                                                            mem[_19018 + ceil32(return_data.size) + 132] = 0
                                                            mem[_19018 + ceil32(return_data.size) + 164] = 160
                                                            mem[_19018 + ceil32(return_data.size) + 260] = mem[_19018]
                                                            idx = 0
                                                            s = _19018 + ceil32(return_data.size) + 292
                                                            t = _19018 + 32
                                                            while idx < mem[_19018]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_19018 + ceil32(return_data.size) + 196] = this.address
                                                            mem[_19018 + ceil32(return_data.size) + 228] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _19018 + ceil32(return_data.size) + (32 * mem[_19018]) + -mem[64] + 288]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            uint8(stor27.field_0) = 0
                                                            if not cd[36]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _22179 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_22179] = 38
                                                                mem[_22179 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22179 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] > -1:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not cd[36]:
                                                                    _23399 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 0
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(mem[128]) + _23399 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _23656 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    _23735 = mem[128]
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 10^18 * cd[36]
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(_23735) + _23656 + -mem[64] + 128]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _22597 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_22597] = 38
                                                                mem[_22597 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22597 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                    revert with 0, 17
                                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                if not cd[36]:
                                                                    _23655 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 0
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(mem[128]) + _23655 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _23986 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    _24029 = mem[128]
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 10^18 * cd[36]
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(_24029) + _23986 + -mem[64] + 128]
                                                    else:
                                                        if balanceOf[this.address] and rewardsFee > -1 / balanceOf[this.address]:
                                                            revert with 0, 17
                                                        if not balanceOf[this.address]:
                                                            revert with 0, 18
                                                        if balanceOf[this.address] * rewardsFee / balanceOf[this.address] != rewardsFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _9388 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_9388] = 26
                                                        mem[_9388 + 32] = 'SafeMath: division by zero'
                                                        if not balanceOf[this.address] * rewardsFee / 100:
                                                            _9400 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_9400] = 26
                                                            mem[_9400 + 32] = 'SafeMath: division by zero'
                                                            _9464 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_9464 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_9464]:
                                                                revert with 0, 50
                                                            mem[_9464 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_9464 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _9464 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_9464]:
                                                                revert with 0, 50
                                                            mem[_9464 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[_9464 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_9464 + ceil32(return_data.size) + 100] = 0
                                                            mem[_9464 + ceil32(return_data.size) + 132] = 0
                                                            mem[_9464 + ceil32(return_data.size) + 164] = 160
                                                            mem[_9464 + ceil32(return_data.size) + 260] = mem[_9464]
                                                            idx = 0
                                                            s = _9464 + ceil32(return_data.size) + 292
                                                            t = _9464 + 32
                                                            while idx < mem[_9464]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args 0, 0, 160, address(this.address), block.timestamp, mem[_9464 + ceil32(return_data.size) + 260 len (32 * mem[_9464]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_9464 + ceil32(return_data.size) + 96] = 30
                                                            mem[_9464 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            call distributionPoolAddress with:
                                                                 gas 2300 wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_9464 + ceil32(return_data.size) + 160] = 30
                                                            mem[_9464 + ceil32(return_data.size) + 192] = 'SafeMath: subtraction overflow'
                                                            if 0 > balanceOf[this.address] * rewardsFee / 100:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if balanceOf[this.address] * rewardsFee / 100 < 0:
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not distributionPoolAddress:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            mem[_9464 + ceil32(return_data.size) + 224] = 38
                                                            mem[_9464 + ceil32(return_data.size) + 256 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if balanceOf[this.address] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                                revert with 0, 
                                                                            32,
                                                                            38,
                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_9464 + ceil32(return_data.size) + 294 len 26] >> 48,
                                                                            0
                                                            if balanceOf[address(this.address)] < balanceOf[this.address] * rewardsFee / 100:
                                                                revert with 0, 17
                                                            balanceOf[address(this.address)] -= balanceOf[this.address] * rewardsFee / 100
                                                            if balanceOf[stor17] > !(balanceOf[this.address] * rewardsFee / 100):
                                                                revert with 0, 17
                                                            if balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) < balanceOf[stor17]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[stor17] += balanceOf[this.address] * rewardsFee / 100
                                                            emit Transfer((balanceOf[this.address] * rewardsFee / 100), this.address, distributionPoolAddress);
                                                            if balanceOf[this.address]:
                                                                if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                                    revert with 0, 17
                                                                if not balanceOf[this.address]:
                                                                    revert with 0, 18
                                                                if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                mem[_9464 + ceil32(return_data.size) + 320] = 26
                                                                mem[_9464 + ceil32(return_data.size) + 352] = 'SafeMath: division by zero'
                                                                mem[_9464 + ceil32(return_data.size) + 384] = 26
                                                                mem[_9464 + ceil32(return_data.size) + 416] = 'SafeMath: division by zero'
                                                                mem[_9464 + ceil32(return_data.size) + 448] = 30
                                                                mem[_9464 + ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                                if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                                    revert with 0, 17
                                                                mem[_9464 + ceil32(return_data.size) + 512] = 2
                                                                mem[_9464 + ceil32(return_data.size) + 544] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_9464 + ceil32(return_data.size) + 608] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _9464 + (2 * ceil32(return_data.size)) + 608
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_9464 + ceil32(return_data.size) + 576] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                allowance[address(this.address)][stor14].field_255 = 0
                                                                emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 608] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 612] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 644] = 0
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 676] = 160
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 772] = 2
                                                                idx = 0
                                                                s = _9464 + (2 * ceil32(return_data.size)) + 804
                                                                t = _9464 + ceil32(return_data.size) + 544
                                                                while idx < mem[_9464 + ceil32(return_data.size) + 512]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 708] = this.address
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 740] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_9464 + (2 * ceil32(return_data.size)) + 772 len (32 * mem[_9464 + ceil32(return_data.size) + 512]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 608] = 30
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: subtraction overflow'
                                                                if eth.balance(this.address) > eth.balance(this.address):
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 672] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 676] = 32
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 708] = 30
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 740] = 'SafeMath: subtraction overflow'
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 770] = 0
                                                                    revert with memory
                                                                      from _9464 + (2 * ceil32(return_data.size)) + 672
                                                                       len ceil32(return_data.size) + 100
                                                                if eth.balance(this.address) < eth.balance(this.address):
                                                                    revert with 0, 17
                                                                if not this.address:
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 672] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 676] = 32
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 708] = 36
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 740] = 'ERC20: approve from the zero add'
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 772] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _9464 + (2 * ceil32(return_data.size)) + 672
                                                                       len ceil32(return_data.size) + 132
                                                                if not uniswapV2RouterAddress:
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 672] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 676] = 32
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 708] = 34
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 740] = 'ERC20: approve to the zero addre'
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 772] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _9464 + (2 * ceil32(return_data.size)) + 672
                                                                       len ceil32(return_data.size) + 132
                                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 676] = this.address
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 708] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 740] = 0
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 772] = 0
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 804] = stor33
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 836] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                     gas gas_remaining wei
                                                                    args mem[_9464 + (2 * ceil32(return_data.size)) + 676 len ceil32(return_data.size) + 192]
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 672 len 96] = ext_call.return_data[0 len 96]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 96
                                                                mem[_9464 + (4 * ceil32(return_data.size)) + 672] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                mem[_9464 + (4 * ceil32(return_data.size)) + 704] = 0
                                                                mem[_9464 + (4 * ceil32(return_data.size)) + 736] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                    mem[_9464 + (4 * ceil32(return_data.size)) + 672 len (5 * ceil32(return_data.size)) + 96],
                                                                mem[_9464 + (4 * ceil32(return_data.size)) + 672] = 2
                                                                mem[_9464 + (4 * ceil32(return_data.size)) + 704] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_9464 + (4 * ceil32(return_data.size)) + 768] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _9464 + (6 * ceil32(return_data.size)) + 768
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_9464 + (4 * ceil32(return_data.size)) + 736] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                                mem[_9464 + (6 * ceil32(return_data.size)) + 768] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_9464 + (6 * ceil32(return_data.size)) + 772] = balanceOf[this.address]
                                                                mem[_9464 + (6 * ceil32(return_data.size)) + 804] = 0
                                                                mem[_9464 + (6 * ceil32(return_data.size)) + 836] = 160
                                                                mem[_9464 + (6 * ceil32(return_data.size)) + 932] = 2
                                                                idx = 0
                                                                s = _9464 + (6 * ceil32(return_data.size)) + 964
                                                                t = _9464 + (4 * ceil32(return_data.size)) + 704
                                                                while idx < mem[_9464 + (4 * ceil32(return_data.size)) + 672]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_9464 + (6 * ceil32(return_data.size)) + 900] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_9464 + (6 * ceil32(return_data.size)) + 932 len (32 * mem[_9464 + (4 * ceil32(return_data.size)) + 672]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                uint8(stor27.field_0) = 0
                                                                if not cd[36]:
                                                                    if not msg.sender:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer from the zero address',
                                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 900 len 9 * ceil32(return_data.size)]
                                                                    if not this.address:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer to the zero address',
                                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 900 len 9 * ceil32(return_data.size)]
                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 768] = 38
                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 800 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[_9464 + (6 * ceil32(return_data.size)) + 970] = 0
                                                                        revert with 0, 
                                                                                    32,
                                                                                    38,
                                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 970 len (9 * ceil32(return_data.size)) + 26]
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] > -1:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow', mem[_9464 + (6 * ceil32(return_data.size)) + 964 len 9 * ceil32(return_data.size)]
                                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 
                                                                                    'SafeMath: multiplication overflow',
                                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 900 len 9 * ceil32(return_data.size)]
                                                                    if not msg.sender:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer from the zero address',
                                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 900 len 9 * ceil32(return_data.size)]
                                                                    if not this.address:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer to the zero address',
                                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 900 len 9 * ceil32(return_data.size)]
                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 768] = 38
                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 800 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                        mem[_9464 + (6 * ceil32(return_data.size)) + 970] = 0
                                                                        revert with 0, 
                                                                                    32,
                                                                                    38,
                                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 970 len (9 * ceil32(return_data.size)) + 26]
                                                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow', mem[_9464 + (6 * ceil32(return_data.size)) + 964 len 9 * ceil32(return_data.size)]
                                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                if not cd[36]:
                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 864] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 868] = msg.sender
                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 900] = 96
                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 964] = mem[128]
                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 996 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _9464 + (6 * ceil32(return_data.size)) + 996] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, 96, 0, mem[128], mem[_9464 + (6 * ceil32(return_data.size)) + 996 len (9 * ceil32(return_data.size)) + ceil32(mem[128])]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 
                                                                                    'SafeMath: multiplication overflow',
                                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 996 len 9 * ceil32(return_data.size)]
                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 864] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 868] = msg.sender
                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 900] = 96
                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 964] = mem[128]
                                                                    mem[_9464 + (6 * ceil32(return_data.size)) + 996 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _9464 + (6 * ceil32(return_data.size)) + 996] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, Array(len=mem[128], data=mem[_9464 + (6 * ceil32(return_data.size)) + 996 len (9 * ceil32(return_data.size)) + ceil32(mem[128])]), 10^18 * cd[36]
                                                            else:
                                                                mem[_9464 + ceil32(return_data.size) + 320] = 26
                                                                mem[_9464 + ceil32(return_data.size) + 352] = 'SafeMath: division by zero'
                                                                mem[_9464 + ceil32(return_data.size) + 384] = 26
                                                                mem[_9464 + ceil32(return_data.size) + 416] = 'SafeMath: division by zero'
                                                                mem[_9464 + ceil32(return_data.size) + 448] = 30
                                                                mem[_9464 + ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                                mem[_9464 + ceil32(return_data.size) + 512] = 2
                                                                mem[_9464 + ceil32(return_data.size) + 544] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_9464 + ceil32(return_data.size) + 608] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _9464 + (2 * ceil32(return_data.size)) + 608
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_9464 + ceil32(return_data.size) + 576] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = 0
                                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 608] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 612] = 0
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 644] = 0
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 676] = 160
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 772] = 2
                                                                idx = 0
                                                                s = _9464 + (2 * ceil32(return_data.size)) + 804
                                                                t = _9464 + ceil32(return_data.size) + 544
                                                                while idx < mem[_9464 + ceil32(return_data.size) + 512]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 708] = this.address
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 740] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[_9464 + (2 * ceil32(return_data.size)) + 772 len (32 * mem[_9464 + ceil32(return_data.size) + 512]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 608] = 30
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: subtraction overflow'
                                                                if eth.balance(this.address) > eth.balance(this.address):
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 672] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 676] = 32
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 708] = 30
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 740] = 'SafeMath: subtraction overflow'
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 770] = 0
                                                                    revert with memory
                                                                      from _9464 + (2 * ceil32(return_data.size)) + 672
                                                                       len ceil32(return_data.size) + 100
                                                                if eth.balance(this.address) < eth.balance(this.address):
                                                                    revert with 0, 17
                                                                if not this.address:
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 672] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 676] = 32
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 708] = 36
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 740] = 'ERC20: approve from the zero add'
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 772] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _9464 + (2 * ceil32(return_data.size)) + 672
                                                                       len ceil32(return_data.size) + 132
                                                                if not uniswapV2RouterAddress:
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 672] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 676] = 32
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 708] = 34
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 740] = 'ERC20: approve to the zero addre'
                                                                    mem[_9464 + (2 * ceil32(return_data.size)) + 772] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _9464 + (2 * ceil32(return_data.size)) + 672
                                                                       len ceil32(return_data.size) + 132
                                                                allowance[address(this.address)][stor14].field_0 = 0
                                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 676] = this.address
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 708] = 0
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 740] = 0
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 772] = 0
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 804] = stor33
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 836] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                     gas gas_remaining wei
                                                                    args mem[_9464 + (2 * ceil32(return_data.size)) + 676 len ceil32(return_data.size) + 192]
                                                                mem[_9464 + (2 * ceil32(return_data.size)) + 672 len 96] = ext_call.return_data[0 len 96]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 96
                                                                mem[_9464 + (4 * ceil32(return_data.size)) + 672] = 0
                                                                mem[_9464 + (4 * ceil32(return_data.size)) + 704] = 0
                                                                mem[_9464 + (4 * ceil32(return_data.size)) + 736] = 0
                                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                    mem[_9464 + (4 * ceil32(return_data.size)) + 672 len (5 * ceil32(return_data.size)) + 96],
                                                                mem[_9464 + (4 * ceil32(return_data.size)) + 672] = 2
                                                                mem[_9464 + (4 * ceil32(return_data.size)) + 704] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_9464 + (4 * ceil32(return_data.size)) + 768] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _9464 + (6 * ceil32(return_data.size)) + 768
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_9464 + (4 * ceil32(return_data.size)) + 736] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                                mem[_9464 + (6 * ceil32(return_data.size)) + 768] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_9464 + (6 * ceil32(return_data.size)) + 772] = balanceOf[this.address]
                                                                mem[_9464 + (6 * ceil32(return_data.size)) + 804] = 0
                                                                mem[_9464 + (6 * ceil32(return_data.size)) + 836] = 160
                                                                mem[_9464 + (6 * ceil32(return_data.size)) + 932] = 2
                                                                idx = 0
                                                                s = _9464 + (6 * ceil32(return_data.size)) + 964
                                                                t = _9464 + (4 * ceil32(return_data.size)) + 704
                                                                while idx < mem[_9464 + (4 * ceil32(return_data.size)) + 672]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_9464 + (6 * ceil32(return_data.size)) + 868] = this.address
                                                                mem[_9464 + (6 * ceil32(return_data.size)) + 900] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _9464 + (6 * ceil32(return_data.size)) + (32 * mem[_9464 + (4 * ceil32(return_data.size)) + 672]) + -mem[64] + 960]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                uint8(stor27.field_0) = 0
                                                                if not cd[36]:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _22173 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_22173] = 38
                                                                    mem[_22173 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22173 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] > -1:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                    if not cd[36]:
                                                                        _23391 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _23487 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 0
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_23487) + _23391 + -mem[64] + 128]
                                                                    else:
                                                                        if cd[36] and 10^18 > -1 / cd[36]:
                                                                            revert with 0, 17
                                                                        if not cd[36]:
                                                                            revert with 0, 18
                                                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _23650 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 10^18 * cd[36]
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(mem[128]) + _23650 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _22587 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_22587] = 38
                                                                    mem[_22587 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22587 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                    if not cd[36]:
                                                                        _23649 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _23730 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 0
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_23730) + _23649 + -mem[64] + 128]
                                                                    else:
                                                                        if cd[36] and 10^18 > -1 / cd[36]:
                                                                            revert with 0, 17
                                                                        if not cd[36]:
                                                                            revert with 0, 18
                                                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _23982 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _24027 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 10^18 * cd[36]
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_24027) + _23982 + -mem[64] + 128]
                                                        else:
                                                            if balanceOf[this.address] * rewardsFee / 100 and stor25 > -1 / balanceOf[this.address] * rewardsFee / 100:
                                                                revert with 0, 17
                                                            if not balanceOf[this.address] * rewardsFee / 100:
                                                                revert with 0, 18
                                                            if balanceOf[this.address] * rewardsFee / 100 * stor25 / balanceOf[this.address] * rewardsFee / 100 != stor25:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _9446 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_9446] = 26
                                                            mem[_9446 + 32] = 'SafeMath: division by zero'
                                                            _9510 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_9510 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_9510]:
                                                                revert with 0, 50
                                                            mem[_9510 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_9510 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _9510 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_9510]:
                                                                revert with 0, 50
                                                            mem[_9510 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * rewardsFee / 100 * stor25 / 100
                                                            emit Approval((balanceOf[this.address] * rewardsFee / 100 * stor25 / 100), this.address, uniswapV2RouterAddress);
                                                            mem[_9510 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_9510 + ceil32(return_data.size) + 100] = balanceOf[this.address] * rewardsFee / 100 * stor25 / 100
                                                            mem[_9510 + ceil32(return_data.size) + 132] = 0
                                                            mem[_9510 + ceil32(return_data.size) + 164] = 160
                                                            mem[_9510 + ceil32(return_data.size) + 260] = mem[_9510]
                                                            idx = 0
                                                            s = _9510 + ceil32(return_data.size) + 292
                                                            t = _9510 + 32
                                                            while idx < mem[_9510]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args balanceOf[this.address] * rewardsFee / 100 * stor25 / 100, 0, 160, address(this.address), block.timestamp, mem[_9510 + ceil32(return_data.size) + 260 len (32 * mem[_9510]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_9510 + ceil32(return_data.size) + 96] = 30
                                                            mem[_9510 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            call distributionPoolAddress with:
                                                                 gas 2300 wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_9510 + ceil32(return_data.size) + 160] = 30
                                                            mem[_9510 + ceil32(return_data.size) + 192] = 'SafeMath: subtraction overflow'
                                                            if balanceOf[this.address] * rewardsFee / 100 * stor25 / 100 > balanceOf[this.address] * rewardsFee / 100:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if balanceOf[this.address] * rewardsFee / 100 < balanceOf[this.address] * rewardsFee / 100 * stor25 / 100:
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not distributionPoolAddress:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            mem[_9510 + ceil32(return_data.size) + 224] = 38
                                                            mem[_9510 + ceil32(return_data.size) + 256 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100) > balanceOf[address(this.address)]:
                                                                revert with 0, 
                                                                            32,
                                                                            38,
                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_9510 + ceil32(return_data.size) + 294 len 26] >> 48,
                                                                            0
                                                            if balanceOf[address(this.address)] < (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[this.address] * rewardsFee / 100) + (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)
                                                            if balanceOf[stor17] > !((balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100) < balanceOf[stor17]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[stor17] = balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)
                                                            emit Transfer(((balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)), this.address, distributionPoolAddress);
                                                            if not balanceOf[this.address]:
                                                                mem[_9510 + ceil32(return_data.size) + 320] = 26
                                                                mem[_9510 + ceil32(return_data.size) + 352] = 'SafeMath: division by zero'
                                                                mem[_9510 + ceil32(return_data.size) + 384] = 26
                                                                mem[_9510 + ceil32(return_data.size) + 416] = 'SafeMath: division by zero'
                                                                mem[_9510 + ceil32(return_data.size) + 448] = 30
                                                                mem[_9510 + ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                                mem[_9510 + ceil32(return_data.size) + 512] = 2
                                                                mem[_9510 + ceil32(return_data.size) + 544] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_9510 + ceil32(return_data.size) + 608] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _9510 + (2 * ceil32(return_data.size)) + 608
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_9510 + ceil32(return_data.size) + 576] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = 0
                                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 608] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 612] = 0
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 644] = 0
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 676] = 160
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 772] = 2
                                                                idx = 0
                                                                s = _9510 + (2 * ceil32(return_data.size)) + 804
                                                                t = _9510 + ceil32(return_data.size) + 544
                                                                while idx < mem[_9510 + ceil32(return_data.size) + 512]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 708] = this.address
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 740] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[_9510 + (2 * ceil32(return_data.size)) + 772 len (32 * mem[_9510 + ceil32(return_data.size) + 512]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 608] = 30
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: subtraction overflow'
                                                                if eth.balance(this.address) > eth.balance(this.address):
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 672] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 676] = 32
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 708] = 30
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 740] = 'SafeMath: subtraction overflow'
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 770] = 0
                                                                    revert with memory
                                                                      from _9510 + (2 * ceil32(return_data.size)) + 672
                                                                       len ceil32(return_data.size) + 100
                                                                if eth.balance(this.address) < eth.balance(this.address):
                                                                    revert with 0, 17
                                                                if not this.address:
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 672] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 676] = 32
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 708] = 36
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 740] = 'ERC20: approve from the zero add'
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 772] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _9510 + (2 * ceil32(return_data.size)) + 672
                                                                       len ceil32(return_data.size) + 132
                                                                if not uniswapV2RouterAddress:
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 672] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 676] = 32
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 708] = 34
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 740] = 'ERC20: approve to the zero addre'
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 772] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _9510 + (2 * ceil32(return_data.size)) + 672
                                                                       len ceil32(return_data.size) + 132
                                                                allowance[address(this.address)][stor14].field_0 = 0
                                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 676] = this.address
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 708] = 0
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 740] = 0
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 772] = 0
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 804] = stor33
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 836] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                     gas gas_remaining wei
                                                                    args mem[_9510 + (2 * ceil32(return_data.size)) + 676 len ceil32(return_data.size) + 192]
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 672 len 96] = ext_call.return_data[0 len 96]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 96
                                                                mem[_9510 + (4 * ceil32(return_data.size)) + 672] = 0
                                                                mem[_9510 + (4 * ceil32(return_data.size)) + 704] = 0
                                                                mem[_9510 + (4 * ceil32(return_data.size)) + 736] = 0
                                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                    mem[_9510 + (4 * ceil32(return_data.size)) + 672 len (5 * ceil32(return_data.size)) + 96],
                                                                mem[_9510 + (4 * ceil32(return_data.size)) + 672] = 2
                                                                mem[_9510 + (4 * ceil32(return_data.size)) + 704] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_9510 + (4 * ceil32(return_data.size)) + 768] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _9510 + (6 * ceil32(return_data.size)) + 768
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_9510 + (4 * ceil32(return_data.size)) + 736] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                                mem[_9510 + (6 * ceil32(return_data.size)) + 768] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_9510 + (6 * ceil32(return_data.size)) + 772] = balanceOf[this.address]
                                                                mem[_9510 + (6 * ceil32(return_data.size)) + 804] = 0
                                                                mem[_9510 + (6 * ceil32(return_data.size)) + 836] = 160
                                                                mem[_9510 + (6 * ceil32(return_data.size)) + 932] = 2
                                                                idx = 0
                                                                s = _9510 + (6 * ceil32(return_data.size)) + 964
                                                                t = _9510 + (4 * ceil32(return_data.size)) + 704
                                                                while idx < mem[_9510 + (4 * ceil32(return_data.size)) + 672]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_9510 + (6 * ceil32(return_data.size)) + 900] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_9510 + (6 * ceil32(return_data.size)) + 932 len (32 * mem[_9510 + (4 * ceil32(return_data.size)) + 672]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                uint8(stor27.field_0) = 0
                                                                if not cd[36]:
                                                                    if not msg.sender:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer from the zero address',
                                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 900 len 9 * ceil32(return_data.size)]
                                                                    if not this.address:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer to the zero address',
                                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 900 len 9 * ceil32(return_data.size)]
                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 768] = 38
                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 800 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[_9510 + (6 * ceil32(return_data.size)) + 970] = 0
                                                                        revert with 0, 
                                                                                    32,
                                                                                    38,
                                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 970 len (9 * ceil32(return_data.size)) + 26]
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] > -1:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow', mem[_9510 + (6 * ceil32(return_data.size)) + 964 len 9 * ceil32(return_data.size)]
                                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 
                                                                                    'SafeMath: multiplication overflow',
                                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 900 len 9 * ceil32(return_data.size)]
                                                                    if not msg.sender:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer from the zero address',
                                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 900 len 9 * ceil32(return_data.size)]
                                                                    if not this.address:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer to the zero address',
                                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 900 len 9 * ceil32(return_data.size)]
                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 768] = 38
                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 800 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                        mem[_9510 + (6 * ceil32(return_data.size)) + 970] = 0
                                                                        revert with 0, 
                                                                                    32,
                                                                                    38,
                                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 970 len (9 * ceil32(return_data.size)) + 26]
                                                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow', mem[_9510 + (6 * ceil32(return_data.size)) + 964 len 9 * ceil32(return_data.size)]
                                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                if not cd[36]:
                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 864] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 868] = msg.sender
                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 900] = 96
                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 964] = mem[128]
                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 996 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _9510 + (6 * ceil32(return_data.size)) + 996] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, 96, 0, mem[128], mem[_9510 + (6 * ceil32(return_data.size)) + 996 len (9 * ceil32(return_data.size)) + ceil32(mem[128])]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 
                                                                                    'SafeMath: multiplication overflow',
                                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 996 len 9 * ceil32(return_data.size)]
                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 864] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 868] = msg.sender
                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 900] = 96
                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 964] = mem[128]
                                                                    mem[_9510 + (6 * ceil32(return_data.size)) + 996 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _9510 + (6 * ceil32(return_data.size)) + 996] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, Array(len=mem[128], data=mem[_9510 + (6 * ceil32(return_data.size)) + 996 len (9 * ceil32(return_data.size)) + ceil32(mem[128])]), 10^18 * cd[36]
                                                            else:
                                                                if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                                    revert with 0, 17
                                                                if not balanceOf[this.address]:
                                                                    revert with 0, 18
                                                                if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                mem[_9510 + ceil32(return_data.size) + 320] = 26
                                                                mem[_9510 + ceil32(return_data.size) + 352] = 'SafeMath: division by zero'
                                                                mem[_9510 + ceil32(return_data.size) + 384] = 26
                                                                mem[_9510 + ceil32(return_data.size) + 416] = 'SafeMath: division by zero'
                                                                mem[_9510 + ceil32(return_data.size) + 448] = 30
                                                                mem[_9510 + ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                                if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                                    revert with 0, 17
                                                                mem[_9510 + ceil32(return_data.size) + 512] = 2
                                                                mem[_9510 + ceil32(return_data.size) + 544] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_9510 + ceil32(return_data.size) + 608] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _9510 + (2 * ceil32(return_data.size)) + 608
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_9510 + ceil32(return_data.size) + 576] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                allowance[address(this.address)][stor14].field_255 = 0
                                                                emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 608] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 612] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 644] = 0
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 676] = 160
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 772] = 2
                                                                idx = 0
                                                                s = _9510 + (2 * ceil32(return_data.size)) + 804
                                                                t = _9510 + ceil32(return_data.size) + 544
                                                                while idx < mem[_9510 + ceil32(return_data.size) + 512]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 708] = this.address
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 740] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_9510 + (2 * ceil32(return_data.size)) + 772 len (32 * mem[_9510 + ceil32(return_data.size) + 512]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 608] = 30
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: subtraction overflow'
                                                                if eth.balance(this.address) > eth.balance(this.address):
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 672] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 676] = 32
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 708] = 30
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 740] = 'SafeMath: subtraction overflow'
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 770] = 0
                                                                    revert with memory
                                                                      from _9510 + (2 * ceil32(return_data.size)) + 672
                                                                       len ceil32(return_data.size) + 100
                                                                if eth.balance(this.address) < eth.balance(this.address):
                                                                    revert with 0, 17
                                                                if not this.address:
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 672] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 676] = 32
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 708] = 36
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 740] = 'ERC20: approve from the zero add'
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 772] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _9510 + (2 * ceil32(return_data.size)) + 672
                                                                       len ceil32(return_data.size) + 132
                                                                if not uniswapV2RouterAddress:
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 672] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 676] = 32
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 708] = 34
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 740] = 'ERC20: approve to the zero addre'
                                                                    mem[_9510 + (2 * ceil32(return_data.size)) + 772] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _9510 + (2 * ceil32(return_data.size)) + 672
                                                                       len ceil32(return_data.size) + 132
                                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 676] = this.address
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 708] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 740] = 0
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 772] = 0
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 804] = stor33
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 836] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                     gas gas_remaining wei
                                                                    args mem[_9510 + (2 * ceil32(return_data.size)) + 676 len ceil32(return_data.size) + 192]
                                                                mem[_9510 + (2 * ceil32(return_data.size)) + 672 len 96] = ext_call.return_data[0 len 96]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 96
                                                                mem[_9510 + (4 * ceil32(return_data.size)) + 672] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                mem[_9510 + (4 * ceil32(return_data.size)) + 704] = 0
                                                                mem[_9510 + (4 * ceil32(return_data.size)) + 736] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                    mem[_9510 + (4 * ceil32(return_data.size)) + 672 len (5 * ceil32(return_data.size)) + 96],
                                                                mem[_9510 + (4 * ceil32(return_data.size)) + 672] = 2
                                                                mem[_9510 + (4 * ceil32(return_data.size)) + 704] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_9510 + (4 * ceil32(return_data.size)) + 768] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _9510 + (6 * ceil32(return_data.size)) + 768
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_9510 + (4 * ceil32(return_data.size)) + 736] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                                mem[_9510 + (6 * ceil32(return_data.size)) + 768] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_9510 + (6 * ceil32(return_data.size)) + 772] = balanceOf[this.address]
                                                                mem[_9510 + (6 * ceil32(return_data.size)) + 804] = 0
                                                                mem[_9510 + (6 * ceil32(return_data.size)) + 836] = 160
                                                                mem[_9510 + (6 * ceil32(return_data.size)) + 932] = 2
                                                                idx = 0
                                                                s = _9510 + (6 * ceil32(return_data.size)) + 964
                                                                t = _9510 + (4 * ceil32(return_data.size)) + 704
                                                                while idx < mem[_9510 + (4 * ceil32(return_data.size)) + 672]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_9510 + (6 * ceil32(return_data.size)) + 868] = this.address
                                                                mem[_9510 + (6 * ceil32(return_data.size)) + 900] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _9510 + (6 * ceil32(return_data.size)) + (32 * mem[_9510 + (4 * ceil32(return_data.size)) + 672]) + -mem[64] + 960]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                uint8(stor27.field_0) = 0
                                                                if not cd[36]:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _22164 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_22164] = 38
                                                                    mem[_22164 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22164 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] > -1:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                    if not cd[36]:
                                                                        _23379 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _23484 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 0
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_23484) + _23379 + -mem[64] + 128]
                                                                    else:
                                                                        if cd[36] and 10^18 > -1 / cd[36]:
                                                                            revert with 0, 17
                                                                        if not cd[36]:
                                                                            revert with 0, 18
                                                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _23641 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _23725 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 10^18 * cd[36]
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_23725) + _23641 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _22572 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_22572] = 38
                                                                    mem[_22572 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22572 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                    if not cd[36]:
                                                                        _23640 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _23724 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 0
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_23724) + _23640 + -mem[64] + 128]
                                                                    else:
                                                                        if cd[36] and 10^18 > -1 / cd[36]:
                                                                            revert with 0, 17
                                                                        if not cd[36]:
                                                                            revert with 0, 18
                                                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _23976 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _24024 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 10^18 * cd[36]
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_24024) + _23976 + -mem[64] + 128]
                                                else:
                                                    if balanceOf[this.address] * treasuryFee / 100 and stor26 > -1 / balanceOf[this.address] * treasuryFee / 100:
                                                        revert with 0, 17
                                                    if not balanceOf[this.address] * treasuryFee / 100:
                                                        revert with 0, 18
                                                    if balanceOf[this.address] * treasuryFee / 100 * stor26 / balanceOf[this.address] * treasuryFee / 100 != stor26:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 193] = 26
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 225] = 'SafeMath: division by zero'
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 257] = 30
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 289] = 'SafeMath: subtraction overflow'
                                                    if balanceOf[this.address] * treasuryFee / 100 * stor26 / 100 > balanceOf[this.address] * treasuryFee / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if balanceOf[this.address] * treasuryFee / 100 < balanceOf[this.address] * treasuryFee / 100 * stor26 / 100:
                                                        revert with 0, 17
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 321] = 2
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 353] = this.address
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                            gas gas_remaining wei
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 417] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 385] = ext_call.return_data[12 len 20]
                                                    if not this.address:
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = 32
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 36
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 'ERC20: approve from the zero add'
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                           len ceil32(return_data.size) + 132
                                                    if not uniswapV2RouterAddress:
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = 32
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 34
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 'ERC20: approve to the zero addre'
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                           len ceil32(return_data.size) + 132
                                                    mem[0] = uniswapV2RouterAddress
                                                    mem[32] = sha3(address(this.address), 1)
                                                    allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * treasuryFee / 100 * stor26 / 100
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = balanceOf[this.address] * treasuryFee / 100 * stor26 / 100
                                                    emit Approval(mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = balanceOf[this.address] * treasuryFee / 100 * stor26 / 100
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 0
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 160
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 581] = 2
                                                    idx = 0
                                                    s = ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 613
                                                    t = ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 353
                                                    while idx < mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 321]:
                                                        mem[s] = mem[t + 12 len 20]
                                                        idx = idx + 1
                                                        s = s + 32
                                                        t = t + 32
                                                        continue 
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = this.address
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 549] = block.timestamp
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + -mem[64] + 673]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _6606 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_6606] = 30
                                                    mem[_6606 + 32] = 'SafeMath: subtraction overflow'
                                                    if eth.balance(this.address) > eth.balance(this.address):
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if eth.balance(this.address) < eth.balance(this.address):
                                                        revert with 0, 17
                                                    call devPoolAddress with:
                                                         gas 2300 wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _6792 = mem[64]
                                                    mem[mem[64]] = 2
                                                    mem[64] = mem[64] + 96
                                                    mem[_6792 + 32 len 64] = call.data[calldata.size len 64]
                                                    if 0 >= mem[_6792]:
                                                        revert with 0, 50
                                                    mem[_6792 + 32] = this.address
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                            gas gas_remaining wei
                                                    mem[_6792 + 96] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _6792 + ceil32(return_data.size) + 96
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                    if 1 >= mem[_6792]:
                                                        revert with 0, 50
                                                    mem[_6792 + 64] = ext_call.return_data[12 len 20]
                                                    if not this.address:
                                                        revert with 0, 'ERC20: approve from the zero address'
                                                    if not uniswapV2RouterAddress:
                                                        revert with 0, 'ERC20: approve to the zero address'
                                                    mem[0] = uniswapV2RouterAddress
                                                    mem[32] = sha3(address(this.address), 1)
                                                    allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * treasuryFee / 100) - (balanceOf[this.address] * treasuryFee / 100 * stor26 / 100)
                                                    emit Approval(((balanceOf[this.address] * treasuryFee / 100) - (balanceOf[this.address] * treasuryFee / 100 * stor26 / 100)), this.address, uniswapV2RouterAddress);
                                                    mem[_6792 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                    mem[_6792 + ceil32(return_data.size) + 100] = (balanceOf[this.address] * treasuryFee / 100) - (balanceOf[this.address] * treasuryFee / 100 * stor26 / 100)
                                                    mem[_6792 + ceil32(return_data.size) + 132] = 0
                                                    mem[_6792 + ceil32(return_data.size) + 164] = 160
                                                    mem[_6792 + ceil32(return_data.size) + 260] = mem[_6792]
                                                    idx = 0
                                                    s = _6792 + ceil32(return_data.size) + 292
                                                    t = _6792 + 32
                                                    while idx < mem[_6792]:
                                                        mem[s] = mem[t + 12 len 20]
                                                        idx = idx + 1
                                                        s = s + 32
                                                        t = t + 32
                                                        continue 
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args (balanceOf[this.address] * treasuryFee / 100) - (balanceOf[this.address] * treasuryFee / 100 * stor26 / 100), 0, 160, address(this.address), block.timestamp, mem[_6792 + ceil32(return_data.size) + 260 len (32 * mem[_6792]) + 32]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[_6792 + ceil32(return_data.size) + 96] = 30
                                                    mem[_6792 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                    if eth.balance(this.address) > eth.balance(this.address):
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if eth.balance(this.address) < eth.balance(this.address):
                                                        revert with 0, 17
                                                    call treasuryPoolAddress with:
                                                         gas 2300 wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if balanceOf[this.address]:
                                                        if balanceOf[this.address] and rewardsFee > -1 / balanceOf[this.address]:
                                                            revert with 0, 17
                                                        if not balanceOf[this.address]:
                                                            revert with 0, 18
                                                        if balanceOf[this.address] * rewardsFee / balanceOf[this.address] != rewardsFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        mem[_6792 + ceil32(return_data.size) + 160] = 26
                                                        mem[_6792 + ceil32(return_data.size) + 192] = 'SafeMath: division by zero'
                                                        if balanceOf[this.address] * rewardsFee / 100:
                                                            if balanceOf[this.address] * rewardsFee / 100 and stor25 > -1 / balanceOf[this.address] * rewardsFee / 100:
                                                                revert with 0, 17
                                                            if not balanceOf[this.address] * rewardsFee / 100:
                                                                revert with 0, 18
                                                            if balanceOf[this.address] * rewardsFee / 100 * stor25 / balanceOf[this.address] * rewardsFee / 100 != stor25:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            mem[_6792 + ceil32(return_data.size) + 224] = 26
                                                            mem[_6792 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                                            mem[_6792 + ceil32(return_data.size) + 288] = 2
                                                            mem[_6792 + ceil32(return_data.size) + 320] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_6792 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _6792 + (2 * ceil32(return_data.size)) + 384
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_6792 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * rewardsFee / 100 * stor25 / 100
                                                            emit Approval((balanceOf[this.address] * rewardsFee / 100 * stor25 / 100), this.address, uniswapV2RouterAddress);
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 388] = balanceOf[this.address] * rewardsFee / 100 * stor25 / 100
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 420] = 0
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 452] = 160
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 548] = 2
                                                            idx = 0
                                                            s = _6792 + (2 * ceil32(return_data.size)) + 580
                                                            t = _6792 + ceil32(return_data.size) + 320
                                                            while idx < mem[_6792 + ceil32(return_data.size) + 288]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 484] = this.address
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args balanceOf[this.address] * rewardsFee / 100 * stor25 / 100, 0, 160, address(this.address), block.timestamp, mem[_6792 + (2 * ceil32(return_data.size)) + 548 len (32 * mem[_6792 + ceil32(return_data.size) + 288]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 384] = 30
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 416] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 448] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 452] = 32
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 484] = 30
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 516] = 'SafeMath: subtraction overflow'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 546] = 0
                                                                revert with memory
                                                                  from _6792 + (2 * ceil32(return_data.size)) + 448
                                                                   len ceil32(return_data.size) + 100
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            call distributionPoolAddress with:
                                                                 gas 2300 wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 448] = 30
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 480] = 'SafeMath: subtraction overflow'
                                                            if balanceOf[this.address] * rewardsFee / 100 * stor25 / 100 > balanceOf[this.address] * rewardsFee / 100:
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 516] = 32
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 548] = 30
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 580] = 'SafeMath: subtraction overflow'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 610] = 0
                                                                revert with memory
                                                                  from _6792 + (2 * ceil32(return_data.size)) + 512
                                                                   len ceil32(return_data.size) + 100
                                                            if balanceOf[this.address] * rewardsFee / 100 < balanceOf[this.address] * rewardsFee / 100 * stor25 / 100:
                                                                revert with 0, 17
                                                            if not this.address:
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 516] = 32
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 548] = 37
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer from the zero ad'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 612] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _6792 + (2 * ceil32(return_data.size)) + 512
                                                                   len ceil32(return_data.size) + 132
                                                            if not distributionPoolAddress:
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 516] = 32
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 548] = 35
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer to the zero addr'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 612] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _6792 + (2 * ceil32(return_data.size)) + 512
                                                                   len ceil32(return_data.size) + 132
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 512] = 38
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 544 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100) > balanceOf[address(this.address)]:
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 612] = 32
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 644] = 38
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 676 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6792 + (2 * ceil32(return_data.size)) + 582 len 26]
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 714] = 0
                                                                revert with memory
                                                                  from _6792 + (2 * ceil32(return_data.size)) + 608
                                                                   len ceil32(return_data.size) + 132
                                                            if balanceOf[address(this.address)] < (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[this.address] * rewardsFee / 100) + (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)
                                                            if balanceOf[stor17] > !((balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100) < balanceOf[stor17]:
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 612] = 32
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 644] = 27
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: addition overflow'
                                                                revert with memory
                                                                  from _6792 + (2 * ceil32(return_data.size)) + 608
                                                                   len ceil32(return_data.size) + 100
                                                            balanceOf[stor17] = balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)
                                                            emit Transfer(((balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)), this.address, distributionPoolAddress);
                                                            if balanceOf[this.address]:
                                                                if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                                    revert with 0, 17
                                                                if not balanceOf[this.address]:
                                                                    revert with 0, 18
                                                                if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 612] = 32
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 644] = 33
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: multiplication overflo'
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 708] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _6792 + (2 * ceil32(return_data.size)) + 608
                                                                       len ceil32(return_data.size) + 132
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 608] = 26
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 672] = 26
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 736] = 30
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                                if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 800] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 804] = 32
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 836] = 30
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 868] = 'SafeMath: subtraction overflow'
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 898] = 0
                                                                    revert with memory
                                                                      from _6792 + (2 * ceil32(return_data.size)) + 800
                                                                       len ceil32(return_data.size) + 100
                                                                if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                                    revert with 0, 17
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 800] = 2
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _6792 + (4 * ceil32(return_data.size)) + 896
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                allowance[address(this.address)][stor14].field_255 = 0
                                                                emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 900] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 932] = 0
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 964] = 160
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                                idx = 0
                                                                s = _6792 + (4 * ceil32(return_data.size)) + 1092
                                                                t = _6792 + (2 * ceil32(return_data.size)) + 832
                                                                while idx < mem[_6792 + (2 * ceil32(return_data.size)) + 800]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_6792 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_6792 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 896] = 30
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                                                if eth.balance(this.address) > eth.balance(this.address):
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 996] = 30
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1028] = 'SafeMath: subtraction overflow'
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1058] = 0
                                                                    revert with memory
                                                                      from _6792 + (4 * ceil32(return_data.size)) + 960
                                                                       len (5 * ceil32(return_data.size)) + 100
                                                                if eth.balance(this.address) < eth.balance(this.address):
                                                                    revert with 0, 17
                                                                if not this.address:
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 996] = 36
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve from the zero add'
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1060] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _6792 + (4 * ceil32(return_data.size)) + 960
                                                                       len (5 * ceil32(return_data.size)) + 132
                                                                if not uniswapV2RouterAddress:
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 996] = 34
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve to the zero addre'
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1060] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _6792 + (4 * ceil32(return_data.size)) + 960
                                                                       len (5 * ceil32(return_data.size)) + 132
                                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 964] = this.address
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 996] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1028] = 0
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1060] = 0
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1092] = stor33
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                     gas gas_remaining wei
                                                                    args mem[_6792 + (4 * ceil32(return_data.size)) + 964 len (5 * ceil32(return_data.size)) + 192]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 96
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 960] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 992] = 0
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1024] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 960 len (7 * ceil32(return_data.size)) + 96],
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 960] = 2
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 992] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _6792 + (6 * ceil32(return_data.size)) + 1056
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1060] = balanceOf[this.address]
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1092] = 0
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1124] = 160
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1220] = 2
                                                                idx = 0
                                                                s = _6792 + (6 * ceil32(return_data.size)) + 1252
                                                                t = _6792 + (4 * ceil32(return_data.size)) + 992
                                                                while idx < mem[_6792 + (4 * ceil32(return_data.size)) + 960]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1188] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_6792 + (6 * ceil32(return_data.size)) + 1220 len (32 * mem[_6792 + (4 * ceil32(return_data.size)) + 960]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                uint8(stor27.field_0) = 0
                                                                if not cd[36]:
                                                                    if not msg.sender:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer from the zero address',
                                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                    if not this.address:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer to the zero address',
                                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1056] = 38
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[_6792 + (6 * ceil32(return_data.size)) + 1258] = 0
                                                                        revert with 0, 
                                                                                    32,
                                                                                    38,
                                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1258 len (9 * ceil32(return_data.size)) + 26]
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] > -1:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow', mem[_6792 + (6 * ceil32(return_data.size)) + 1252 len 9 * ceil32(return_data.size)]
                                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 
                                                                                    'SafeMath: multiplication overflow',
                                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                    if not msg.sender:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer from the zero address',
                                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                    if not this.address:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer to the zero address',
                                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1056] = 38
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                        mem[_6792 + (6 * ceil32(return_data.size)) + 1258] = 0
                                                                        revert with 0, 
                                                                                    32,
                                                                                    38,
                                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1258 len (9 * ceil32(return_data.size)) + 26]
                                                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow', mem[_6792 + (6 * ceil32(return_data.size)) + 1252 len 9 * ceil32(return_data.size)]
                                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                if not cd[36]:
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1156] = msg.sender
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1188] = 96
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1252] = mem[128]
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1284 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _6792 + (6 * ceil32(return_data.size)) + 1284] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, 96, 0, mem[128], mem[_6792 + (6 * ceil32(return_data.size)) + 1284 len (9 * ceil32(return_data.size)) + ceil32(mem[128])]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 
                                                                                    'SafeMath: multiplication overflow',
                                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1284 len 9 * ceil32(return_data.size)]
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1156] = msg.sender
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1188] = 96
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1252] = mem[128]
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1284 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _6792 + (6 * ceil32(return_data.size)) + 1284] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, Array(len=mem[128], data=mem[_6792 + (6 * ceil32(return_data.size)) + 1284 len (9 * ceil32(return_data.size)) + ceil32(mem[128])]), 10^18 * cd[36]
                                                            else:
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 608] = 26
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 672] = 26
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 736] = 30
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 800] = 2
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _6792 + (4 * ceil32(return_data.size)) + 896
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = 0
                                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 900] = 0
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 932] = 0
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 964] = 160
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                                idx = 0
                                                                s = _6792 + (4 * ceil32(return_data.size)) + 1092
                                                                t = _6792 + (2 * ceil32(return_data.size)) + 832
                                                                while idx < mem[_6792 + (2 * ceil32(return_data.size)) + 800]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _6792 + (4 * ceil32(return_data.size)) + (32 * mem[_6792 + (2 * ceil32(return_data.size)) + 800]) + -mem[64] + 1088]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _18151 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_18151] = 30
                                                                mem[_18151 + 32] = 'SafeMath: subtraction overflow'
                                                                if eth.balance(this.address) > eth.balance(this.address):
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if eth.balance(this.address) < eth.balance(this.address):
                                                                    revert with 0, 17
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = 0
                                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                                mem[mem[64] + 68] = 0
                                                                mem[mem[64] + 100] = 0
                                                                mem[mem[64] + 132] = stor33
                                                                mem[mem[64] + 164] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                     gas gas_remaining wei
                                                                    args this.address, 0, 0, 0, stor33, block.timestamp
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                mem[mem[64] + 32] = 0
                                                                mem[mem[64] + 64] = 0
                                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                    0,
                                                                mem[0] = this.address
                                                                mem[32] = 0
                                                                _18998 = mem[64]
                                                                mem[mem[64]] = 2
                                                                mem[64] = mem[64] + 96
                                                                mem[_18998 + 32 len 64] = call.data[calldata.size len 64]
                                                                if 0 >= mem[_18998]:
                                                                    revert with 0, 50
                                                                mem[_18998 + 32] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_18998 + 96] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _18998 + ceil32(return_data.size) + 96
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                if 1 >= mem[_18998]:
                                                                    revert with 0, 50
                                                                mem[_18998 + 64] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                                mem[_18998 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_18998 + ceil32(return_data.size) + 100] = balanceOf[this.address]
                                                                mem[_18998 + ceil32(return_data.size) + 132] = 0
                                                                mem[_18998 + ceil32(return_data.size) + 164] = 160
                                                                mem[_18998 + ceil32(return_data.size) + 260] = mem[_18998]
                                                                idx = 0
                                                                s = _18998 + ceil32(return_data.size) + 292
                                                                t = _18998 + 32
                                                                while idx < mem[_18998]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_18998 + ceil32(return_data.size) + 260 len (32 * mem[_18998]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                uint8(stor27.field_0) = 0
                                                                if not cd[36]:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    mem[_18998 + ceil32(return_data.size) + 96] = 38
                                                                    mem[_18998 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] > -1:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    mem[_18998 + ceil32(return_data.size) + 96] = 38
                                                                    mem[_18998 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                if not cd[36]:
                                                                    mem[_18998 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_18998 + ceil32(return_data.size) + 196] = msg.sender
                                                                    mem[_18998 + ceil32(return_data.size) + 228] = 96
                                                                    mem[_18998 + ceil32(return_data.size) + 292] = mem[128]
                                                                    mem[_18998 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _18998 + ceil32(return_data.size) + 324] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, 96, 0, mem[128], mem[_18998 + ceil32(return_data.size) + 324 len ceil32(mem[128])]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    mem[_18998 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_18998 + ceil32(return_data.size) + 196] = msg.sender
                                                                    mem[_18998 + ceil32(return_data.size) + 228] = 96
                                                                    mem[_18998 + ceil32(return_data.size) + 292] = mem[128]
                                                                    mem[_18998 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _18998 + ceil32(return_data.size) + 324] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, Array(len=mem[128], data=mem[_18998 + ceil32(return_data.size) + 324 len ceil32(mem[128])]), 10^18 * cd[36]
                                                        else:
                                                            mem[_6792 + ceil32(return_data.size) + 224] = 26
                                                            mem[_6792 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                                            mem[_6792 + ceil32(return_data.size) + 288] = 2
                                                            mem[_6792 + ceil32(return_data.size) + 320] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_6792 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _6792 + (2 * ceil32(return_data.size)) + 384
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_6792 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 388] = 0
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 420] = 0
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 452] = 160
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 548] = 2
                                                            idx = 0
                                                            s = _6792 + (2 * ceil32(return_data.size)) + 580
                                                            t = _6792 + ceil32(return_data.size) + 320
                                                            while idx < mem[_6792 + ceil32(return_data.size) + 288]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 484] = this.address
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args 0, 0, 160, address(this.address), block.timestamp, mem[_6792 + (2 * ceil32(return_data.size)) + 548 len (32 * mem[_6792 + ceil32(return_data.size) + 288]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 384] = 30
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 416] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 448] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 452] = 32
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 484] = 30
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 516] = 'SafeMath: subtraction overflow'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 546] = 0
                                                                revert with memory
                                                                  from _6792 + (2 * ceil32(return_data.size)) + 448
                                                                   len ceil32(return_data.size) + 100
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            call distributionPoolAddress with:
                                                                 gas 2300 wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 448] = 30
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 480] = 'SafeMath: subtraction overflow'
                                                            if 0 > balanceOf[this.address] * rewardsFee / 100:
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 516] = 32
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 548] = 30
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 580] = 'SafeMath: subtraction overflow'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 610] = 0
                                                                revert with memory
                                                                  from _6792 + (2 * ceil32(return_data.size)) + 512
                                                                   len ceil32(return_data.size) + 100
                                                            if balanceOf[this.address] * rewardsFee / 100 < 0:
                                                                revert with 0, 17
                                                            if not this.address:
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 516] = 32
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 548] = 37
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer from the zero ad'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 612] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _6792 + (2 * ceil32(return_data.size)) + 512
                                                                   len ceil32(return_data.size) + 132
                                                            if not distributionPoolAddress:
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 516] = 32
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 548] = 35
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer to the zero addr'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 612] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _6792 + (2 * ceil32(return_data.size)) + 512
                                                                   len ceil32(return_data.size) + 132
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 512] = 38
                                                            mem[_6792 + (2 * ceil32(return_data.size)) + 544 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if balanceOf[this.address] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 612] = 32
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 644] = 38
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 676 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6792 + (2 * ceil32(return_data.size)) + 582 len 26]
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 714] = 0
                                                                revert with memory
                                                                  from _6792 + (2 * ceil32(return_data.size)) + 608
                                                                   len ceil32(return_data.size) + 132
                                                            if balanceOf[address(this.address)] < balanceOf[this.address] * rewardsFee / 100:
                                                                revert with 0, 17
                                                            balanceOf[address(this.address)] -= balanceOf[this.address] * rewardsFee / 100
                                                            if balanceOf[stor17] > !(balanceOf[this.address] * rewardsFee / 100):
                                                                revert with 0, 17
                                                            if balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) < balanceOf[stor17]:
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 612] = 32
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 644] = 27
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: addition overflow'
                                                                revert with memory
                                                                  from _6792 + (2 * ceil32(return_data.size)) + 608
                                                                   len ceil32(return_data.size) + 100
                                                            balanceOf[stor17] += balanceOf[this.address] * rewardsFee / 100
                                                            emit Transfer((balanceOf[this.address] * rewardsFee / 100), this.address, distributionPoolAddress);
                                                            if not balanceOf[this.address]:
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 608] = 26
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 672] = 26
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 736] = 30
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 800] = 2
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _6792 + (4 * ceil32(return_data.size)) + 896
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = 0
                                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 900] = 0
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 932] = 0
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 964] = 160
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                                idx = 0
                                                                s = _6792 + (4 * ceil32(return_data.size)) + 1092
                                                                t = _6792 + (2 * ceil32(return_data.size)) + 832
                                                                while idx < mem[_6792 + (2 * ceil32(return_data.size)) + 800]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[_6792 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_6792 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 896] = 30
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                                                if eth.balance(this.address) > eth.balance(this.address):
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 996] = 30
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1028] = 'SafeMath: subtraction overflow'
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1058] = 0
                                                                    revert with memory
                                                                      from _6792 + (4 * ceil32(return_data.size)) + 960
                                                                       len (5 * ceil32(return_data.size)) + 100
                                                                if eth.balance(this.address) < eth.balance(this.address):
                                                                    revert with 0, 17
                                                                if not this.address:
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 996] = 36
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve from the zero add'
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1060] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _6792 + (4 * ceil32(return_data.size)) + 960
                                                                       len (5 * ceil32(return_data.size)) + 132
                                                                if not uniswapV2RouterAddress:
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 996] = 34
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve to the zero addre'
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1060] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _6792 + (4 * ceil32(return_data.size)) + 960
                                                                       len (5 * ceil32(return_data.size)) + 132
                                                                allowance[address(this.address)][stor14].field_0 = 0
                                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 964] = this.address
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 996] = 0
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1028] = 0
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1060] = 0
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1092] = stor33
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                     gas gas_remaining wei
                                                                    args mem[_6792 + (4 * ceil32(return_data.size)) + 964 len (5 * ceil32(return_data.size)) + 192]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 96
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 960] = 0
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 992] = 0
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1024] = 0
                                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 960 len (7 * ceil32(return_data.size)) + 96],
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 960] = 2
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 992] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _6792 + (6 * ceil32(return_data.size)) + 1056
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1060] = balanceOf[this.address]
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1092] = 0
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1124] = 160
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1220] = 2
                                                                idx = 0
                                                                s = _6792 + (6 * ceil32(return_data.size)) + 1252
                                                                t = _6792 + (4 * ceil32(return_data.size)) + 992
                                                                while idx < mem[_6792 + (4 * ceil32(return_data.size)) + 960]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1188] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_6792 + (6 * ceil32(return_data.size)) + 1220 len (32 * mem[_6792 + (4 * ceil32(return_data.size)) + 960]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                uint8(stor27.field_0) = 0
                                                                if not cd[36]:
                                                                    if not msg.sender:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer from the zero address',
                                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                    if not this.address:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer to the zero address',
                                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1056] = 38
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[_6792 + (6 * ceil32(return_data.size)) + 1258] = 0
                                                                        revert with 0, 
                                                                                    32,
                                                                                    38,
                                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1258 len (9 * ceil32(return_data.size)) + 26]
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] > -1:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow', mem[_6792 + (6 * ceil32(return_data.size)) + 1252 len 9 * ceil32(return_data.size)]
                                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 
                                                                                    'SafeMath: multiplication overflow',
                                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                    if not msg.sender:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer from the zero address',
                                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                    if not this.address:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer to the zero address',
                                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1056] = 38
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                        mem[_6792 + (6 * ceil32(return_data.size)) + 1258] = 0
                                                                        revert with 0, 
                                                                                    32,
                                                                                    38,
                                                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1258 len (9 * ceil32(return_data.size)) + 26]
                                                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow', mem[_6792 + (6 * ceil32(return_data.size)) + 1252 len 9 * ceil32(return_data.size)]
                                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                if not cd[36]:
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1156] = msg.sender
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1188] = 96
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1252] = mem[128]
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1284 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _6792 + (6 * ceil32(return_data.size)) + 1284] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, 96, 0, mem[128], mem[_6792 + (6 * ceil32(return_data.size)) + 1284 len (9 * ceil32(return_data.size)) + ceil32(mem[128])]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 
                                                                                    'SafeMath: multiplication overflow',
                                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1284 len 9 * ceil32(return_data.size)]
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1156] = msg.sender
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1188] = 96
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1252] = mem[128]
                                                                    mem[_6792 + (6 * ceil32(return_data.size)) + 1284 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _6792 + (6 * ceil32(return_data.size)) + 1284] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, Array(len=mem[128], data=mem[_6792 + (6 * ceil32(return_data.size)) + 1284 len (9 * ceil32(return_data.size)) + ceil32(mem[128])]), 10^18 * cd[36]
                                                            else:
                                                                if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                                    revert with 0, 17
                                                                if not balanceOf[this.address]:
                                                                    revert with 0, 18
                                                                if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 612] = 32
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 644] = 33
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: multiplication overflo'
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 708] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _6792 + (2 * ceil32(return_data.size)) + 608
                                                                       len ceil32(return_data.size) + 132
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 608] = 26
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 672] = 26
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 736] = 30
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                                if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 800] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 804] = 32
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 836] = 30
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 868] = 'SafeMath: subtraction overflow'
                                                                    mem[_6792 + (2 * ceil32(return_data.size)) + 898] = 0
                                                                    revert with memory
                                                                      from _6792 + (2 * ceil32(return_data.size)) + 800
                                                                       len ceil32(return_data.size) + 100
                                                                if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                                    revert with 0, 17
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 800] = 2
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _6792 + (4 * ceil32(return_data.size)) + 896
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_6792 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                allowance[address(this.address)][stor14].field_255 = 0
                                                                emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 900] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 932] = 0
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 964] = 160
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                                idx = 0
                                                                s = _6792 + (4 * ceil32(return_data.size)) + 1092
                                                                t = _6792 + (2 * ceil32(return_data.size)) + 832
                                                                while idx < mem[_6792 + (2 * ceil32(return_data.size)) + 800]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_6792 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_6792 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 896] = 30
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                                                if eth.balance(this.address) > eth.balance(this.address):
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 996] = 30
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1028] = 'SafeMath: subtraction overflow'
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1058] = 0
                                                                    revert with memory
                                                                      from _6792 + (4 * ceil32(return_data.size)) + 960
                                                                       len (5 * ceil32(return_data.size)) + 100
                                                                if eth.balance(this.address) < eth.balance(this.address):
                                                                    revert with 0, 17
                                                                if not this.address:
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 996] = 36
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve from the zero add'
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1060] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _6792 + (4 * ceil32(return_data.size)) + 960
                                                                       len (5 * ceil32(return_data.size)) + 132
                                                                if not uniswapV2RouterAddress:
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 996] = 34
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve to the zero addre'
                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 1060] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _6792 + (4 * ceil32(return_data.size)) + 960
                                                                       len (5 * ceil32(return_data.size)) + 132
                                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 964] = this.address
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 996] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1028] = 0
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1060] = 0
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1092] = stor33
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                     gas gas_remaining wei
                                                                    args mem[_6792 + (4 * ceil32(return_data.size)) + 964 len (5 * ceil32(return_data.size)) + 192]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 96
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 960] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 992] = 0
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1024] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                    mem[_6792 + (4 * ceil32(return_data.size)) + 960 len (7 * ceil32(return_data.size)) + 96],
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 960] = 2
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 992] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _6792 + (6 * ceil32(return_data.size)) + 1056
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_6792 + (4 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1060] = balanceOf[this.address]
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1092] = 0
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1124] = 160
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1220] = 2
                                                                idx = 0
                                                                s = _6792 + (6 * ceil32(return_data.size)) + 1252
                                                                t = _6792 + (4 * ceil32(return_data.size)) + 992
                                                                while idx < mem[_6792 + (4 * ceil32(return_data.size)) + 960]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1156] = this.address
                                                                mem[_6792 + (6 * ceil32(return_data.size)) + 1188] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _6792 + (6 * ceil32(return_data.size)) + (32 * mem[_6792 + (4 * ceil32(return_data.size)) + 960]) + -mem[64] + 1248]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                uint8(stor27.field_0) = 0
                                                                if not cd[36]:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _22152 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_22152] = 38
                                                                    mem[_22152 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22152 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] > -1:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                    if not cd[36]:
                                                                        _23363 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _23480 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 0
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_23480) + _23363 + -mem[64] + 128]
                                                                    else:
                                                                        if cd[36] and 10^18 > -1 / cd[36]:
                                                                            revert with 0, 17
                                                                        if not cd[36]:
                                                                            revert with 0, 18
                                                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _23629 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _23717 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 10^18 * cd[36]
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_23717) + _23629 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _22552 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_22552] = 38
                                                                    mem[_22552 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22552 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                    if not cd[36]:
                                                                        _23628 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 0
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(mem[128]) + _23628 + -mem[64] + 128]
                                                                    else:
                                                                        if cd[36] and 10^18 > -1 / cd[36]:
                                                                            revert with 0, 17
                                                                        if not cd[36]:
                                                                            revert with 0, 18
                                                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _23968 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _24020 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 10^18 * cd[36]
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_24020) + _23968 + -mem[64] + 128]
                                                    else:
                                                        mem[_6792 + ceil32(return_data.size) + 160] = 26
                                                        mem[_6792 + ceil32(return_data.size) + 192] = 'SafeMath: division by zero'
                                                        mem[_6792 + ceil32(return_data.size) + 224] = 26
                                                        mem[_6792 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                                        mem[_6792 + ceil32(return_data.size) + 288] = 2
                                                        mem[_6792 + ceil32(return_data.size) + 320] = this.address
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                gas gas_remaining wei
                                                        mem[_6792 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[64] = _6792 + (2 * ceil32(return_data.size)) + 384
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                        mem[_6792 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        mem[0] = uniswapV2RouterAddress
                                                        mem[32] = sha3(address(this.address), 1)
                                                        allowance[address(this.address)][stor14].field_0 = 0
                                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                                        mem[_6792 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                        mem[_6792 + (2 * ceil32(return_data.size)) + 388] = 0
                                                        mem[_6792 + (2 * ceil32(return_data.size)) + 420] = 0
                                                        mem[_6792 + (2 * ceil32(return_data.size)) + 452] = 160
                                                        mem[_6792 + (2 * ceil32(return_data.size)) + 548] = 2
                                                        idx = 0
                                                        s = _6792 + (2 * ceil32(return_data.size)) + 580
                                                        t = _6792 + ceil32(return_data.size) + 320
                                                        while idx < mem[_6792 + ceil32(return_data.size) + 288]:
                                                            mem[s] = mem[t + 12 len 20]
                                                            idx = idx + 1
                                                            s = s + 32
                                                            t = t + 32
                                                            continue 
                                                        mem[_6792 + (2 * ceil32(return_data.size)) + 484] = this.address
                                                        mem[_6792 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _6792 + (2 * ceil32(return_data.size)) + (32 * mem[_6792 + ceil32(return_data.size) + 288]) + -mem[64] + 576]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12680 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_12680] = 30
                                                        mem[_12680 + 32] = 'SafeMath: subtraction overflow'
                                                        if eth.balance(this.address) > eth.balance(this.address):
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if eth.balance(this.address) < eth.balance(this.address):
                                                            revert with 0, 17
                                                        call distributionPoolAddress with:
                                                             gas 2300 wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12771 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_12771] = 30
                                                        mem[_12771 + 32] = 'SafeMath: subtraction overflow'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not distributionPoolAddress:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12901 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12901] = 38
                                                        mem[_12901 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(this.address)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12901 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(this.address)] < 0:
                                                            revert with 0, 17
                                                        if balanceOf[stor17] > -1:
                                                            revert with 0, 17
                                                        if balanceOf[stor17] < balanceOf[stor17]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = distributionPoolAddress
                                                        mem[32] = 0
                                                        balanceOf[stor17] = balanceOf[stor17]
                                                        emit Transfer(0, this.address, distributionPoolAddress);
                                                        if not balanceOf[this.address]:
                                                            _13209 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13209] = 26
                                                            mem[_13209 + 32] = 'SafeMath: division by zero'
                                                            _13281 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13281] = 26
                                                            mem[_13281 + 32] = 'SafeMath: division by zero'
                                                            _13317 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13317] = 30
                                                            mem[_13317 + 32] = 'SafeMath: subtraction overflow'
                                                            _13376 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_13376 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_13376]:
                                                                revert with 0, 50
                                                            mem[_13376 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_13376 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _13376 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_13376]:
                                                                revert with 0, 50
                                                            mem[_13376 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[_13376 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_13376 + ceil32(return_data.size) + 100] = 0
                                                            mem[_13376 + ceil32(return_data.size) + 132] = 0
                                                            mem[_13376 + ceil32(return_data.size) + 164] = 160
                                                            mem[_13376 + ceil32(return_data.size) + 260] = mem[_13376]
                                                            idx = 0
                                                            s = _13376 + ceil32(return_data.size) + 292
                                                            t = _13376 + 32
                                                            while idx < mem[_13376]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args 0, 0, 160, address(this.address), block.timestamp, mem[_13376 + ceil32(return_data.size) + 260 len (32 * mem[_13376]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_13376 + ceil32(return_data.size) + 96] = 30
                                                            mem[_13376 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[_13376 + ceil32(return_data.size) + 228] = 0
                                                            mem[_13376 + ceil32(return_data.size) + 260] = 0
                                                            mem[_13376 + ceil32(return_data.size) + 292] = stor33
                                                            mem[_13376 + ceil32(return_data.size) + 324] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                 gas gas_remaining wei
                                                                args this.address, 0, 0, 0, stor33, block.timestamp
                                                            mem[_13376 + ceil32(return_data.size) + 160 len 96] = ext_call.return_data[0 len 96]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 96
                                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                0,
                                                            mem[_13376 + (2 * ceil32(return_data.size)) + 160] = 2
                                                            mem[_13376 + (2 * ceil32(return_data.size)) + 192] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_13376 + (2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _13376 + (4 * ceil32(return_data.size)) + 256
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_13376 + (2 * ceil32(return_data.size)) + 224] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                            mem[_13376 + (4 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_13376 + (4 * ceil32(return_data.size)) + 260] = balanceOf[this.address]
                                                            mem[_13376 + (4 * ceil32(return_data.size)) + 292] = 0
                                                            mem[_13376 + (4 * ceil32(return_data.size)) + 324] = 160
                                                            mem[_13376 + (4 * ceil32(return_data.size)) + 420] = 2
                                                            idx = 0
                                                            s = _13376 + (4 * ceil32(return_data.size)) + 452
                                                            t = _13376 + (2 * ceil32(return_data.size)) + 192
                                                            while idx < mem[_13376 + (2 * ceil32(return_data.size)) + 160]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_13376 + (4 * ceil32(return_data.size)) + 356] = this.address
                                                            mem[_13376 + (4 * ceil32(return_data.size)) + 388] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13376 + (4 * ceil32(return_data.size)) + (32 * mem[_13376 + (2 * ceil32(return_data.size)) + 160]) + -mem[64] + 448]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            uint8(stor27.field_0) = 0
                                                            if not cd[36]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _22161 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_22161] = 38
                                                                mem[_22161 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22161 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] > -1:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not cd[36]:
                                                                    _23375 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 0
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(mem[128]) + _23375 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _23638 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    _23723 = mem[128]
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 10^18 * cd[36]
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(_23723) + _23638 + -mem[64] + 128]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _22567 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_22567] = 38
                                                                mem[_22567 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22567 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                    revert with 0, 17
                                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                if not cd[36]:
                                                                    _23637 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 0
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(mem[128]) + _23637 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _23974 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 10^18 * cd[36]
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(mem[128]) + _23974 + -mem[64] + 128]
                                                        else:
                                                            if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                                revert with 0, 17
                                                            if not balanceOf[this.address]:
                                                                revert with 0, 18
                                                            if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _13263 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13263] = 26
                                                            mem[_13263 + 32] = 'SafeMath: division by zero'
                                                            _13299 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13299] = 26
                                                            mem[_13299 + 32] = 'SafeMath: division by zero'
                                                            _13335 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13335] = 30
                                                            mem[_13335 + 32] = 'SafeMath: subtraction overflow'
                                                            if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                                revert with 0, 17
                                                            _13526 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_13526 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_13526]:
                                                                revert with 0, 50
                                                            mem[_13526 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_13526 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _13526 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_13526]:
                                                                revert with 0, 50
                                                            mem[_13526 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                            allowance[address(this.address)][stor14].field_255 = 0
                                                            emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                            mem[_13526 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_13526 + ceil32(return_data.size) + 100] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                            mem[_13526 + ceil32(return_data.size) + 132] = 0
                                                            mem[_13526 + ceil32(return_data.size) + 164] = 160
                                                            mem[_13526 + ceil32(return_data.size) + 260] = mem[_13526]
                                                            idx = 0
                                                            s = _13526 + ceil32(return_data.size) + 292
                                                            t = _13526 + 32
                                                            while idx < mem[_13526]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_13526 + ceil32(return_data.size) + 196] = this.address
                                                            mem[_13526 + ceil32(return_data.size) + 228] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13526 + ceil32(return_data.size) + (32 * mem[_13526]) + -mem[64] + 288]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _18154 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_18154] = 30
                                                            mem[_18154 + 32] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                            emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                            mem[mem[64] + 68] = 0
                                                            mem[mem[64] + 100] = 0
                                                            mem[mem[64] + 132] = stor33
                                                            mem[mem[64] + 164] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                 gas gas_remaining wei
                                                                args this.address, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2), 0, 0, stor33, block.timestamp
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            mem[mem[64] + 32] = 0
                                                            mem[mem[64] + 64] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2));
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            _19004 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_19004 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_19004]:
                                                                revert with 0, 50
                                                            mem[_19004 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_19004 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _19004 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_19004]:
                                                                revert with 0, 50
                                                            mem[_19004 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                            mem[_19004 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_19004 + ceil32(return_data.size) + 100] = balanceOf[this.address]
                                                            mem[_19004 + ceil32(return_data.size) + 132] = 0
                                                            mem[_19004 + ceil32(return_data.size) + 164] = 160
                                                            mem[_19004 + ceil32(return_data.size) + 260] = mem[_19004]
                                                            idx = 0
                                                            s = _19004 + ceil32(return_data.size) + 292
                                                            t = _19004 + 32
                                                            while idx < mem[_19004]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_19004 + ceil32(return_data.size) + 196] = this.address
                                                            mem[_19004 + ceil32(return_data.size) + 228] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _19004 + ceil32(return_data.size) + (32 * mem[_19004]) + -mem[64] + 288]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            uint8(stor27.field_0) = 0
                                                            if not cd[36]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _22158 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_22158] = 38
                                                                mem[_22158 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22158 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] > -1:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not cd[36]:
                                                                    _23371 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 0
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(mem[128]) + _23371 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _23635 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    _23721 = mem[128]
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 10^18 * cd[36]
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(_23721) + _23635 + -mem[64] + 128]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _22562 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_22562] = 38
                                                                mem[_22562 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22562 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                    revert with 0, 17
                                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                if not cd[36]:
                                                                    _23634 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    _23720 = mem[128]
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 0
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(_23720) + _23634 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _23972 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    _24022 = mem[128]
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 10^18 * cd[36]
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(_24022) + _23972 + -mem[64] + 128]
                    else:
                        if cd[36] and 10^18 > -1 / cd[36]:
                            revert with 0, 17
                        if not cd[36]:
                            revert with 0, 18
                        if 10^18 * cd[36] / cd[36] != 10^18:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                            revert with 0, 'NODE CREATION: Balance too low for creation. Use lower initValue'
                        if balanceOf[this.address] < swapTokensAmount:
                            if not cd[36]:
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 
                                                32,
                                                38,
                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 0, 17
                                if balanceOf[this.address] > -1:
                                    revert with 0, 17
                                if balanceOf[this.address] < balanceOf[this.address]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] = balanceOf[this.address]
                                emit Transfer(0, msg.sender, this.address);
                            else:
                                if cd[36] and 10^18 > -1 / cd[36]:
                                    revert with 0, 17
                                if not cd[36]:
                                    revert with 0, 18
                                if 10^18 * cd[36] / cd[36] != 10^18:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                    revert with 0, 
                                                32,
                                                38,
                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                0
                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                    revert with 0, 17
                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                            if not cd[36]:
                                require ext_code.size(nodeRewardManagerAddress)
                                call nodeRewardManagerAddress.0x90219732 with:
                                     gas gas_remaining wei
                                    args msg.sender, 96, 0, ('cd', 4).length, call.data[cd[4] + 36 len ('cd', 4).length], ext_call.return_data[('cd', 4).length + -ceil32(ceil32(('cd', 4).length)) + 31 len ceil32(('cd', 4).length) - ('cd', 4).length]
                            else:
                                if cd[36] and 10^18 > -1 / cd[36]:
                                    revert with 0, 17
                                if not cd[36]:
                                    revert with 0, 18
                                if 10^18 * cd[36] / cd[36] != 10^18:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                require ext_code.size(nodeRewardManagerAddress)
                                call nodeRewardManagerAddress.0x90219732 with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 10^18 * cd[36]
                        else:
                            if not uint8(stor27.field_8):
                                if not cd[36]:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                    0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 0, 17
                                    if balanceOf[this.address] > -1:
                                        revert with 0, 17
                                    if balanceOf[this.address] < balanceOf[this.address]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                    emit Transfer(0, msg.sender, this.address);
                                else:
                                    if cd[36] and 10^18 > -1 / cd[36]:
                                        revert with 0, 17
                                    if not cd[36]:
                                        revert with 0, 18
                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                    0
                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                        revert with 0, 17
                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                if not cd[36]:
                                    require ext_code.size(nodeRewardManagerAddress)
                                    call nodeRewardManagerAddress.0x90219732 with:
                                         gas gas_remaining wei
                                        args msg.sender, 96, 0, ('cd', 4).length, call.data[cd[4] + 36 len ('cd', 4).length], ext_call.return_data[('cd', 4).length + -ceil32(ceil32(('cd', 4).length)) + 31 len ceil32(('cd', 4).length) - ('cd', 4).length]
                                else:
                                    if cd[36] and 10^18 > -1 / cd[36]:
                                        revert with 0, 17
                                    if not cd[36]:
                                        revert with 0, 18
                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    require ext_code.size(nodeRewardManagerAddress)
                                    call nodeRewardManagerAddress.0x90219732 with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 10^18 * cd[36]
                            else:
                                if uint8(stor27.field_0):
                                    if not cd[36]:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                        0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 0, 17
                                        if balanceOf[this.address] > -1:
                                            revert with 0, 17
                                        if balanceOf[this.address] < balanceOf[this.address]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] = balanceOf[this.address]
                                        emit Transfer(0, msg.sender, this.address);
                                    else:
                                        if cd[36] and 10^18 > -1 / cd[36]:
                                            revert with 0, 17
                                        if not cd[36]:
                                            revert with 0, 18
                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                        0
                                        if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                        if balanceOf[this.address] > !(10^18 * cd[36]):
                                            revert with 0, 17
                                        if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                        emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                    if not cd[36]:
                                        require ext_code.size(nodeRewardManagerAddress)
                                        call nodeRewardManagerAddress.0x90219732 with:
                                             gas gas_remaining wei
                                            args msg.sender, 96, 0, ('cd', 4).length, call.data[cd[4] + 36 len ('cd', 4).length], ext_call.return_data[('cd', 4).length + -ceil32(ceil32(('cd', 4).length)) + 31 len ceil32(('cd', 4).length) - ('cd', 4).length]
                                    else:
                                        if cd[36] and 10^18 > -1 / cd[36]:
                                            revert with 0, 17
                                        if not cd[36]:
                                            revert with 0, 18
                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        require ext_code.size(nodeRewardManagerAddress)
                                        call nodeRewardManagerAddress.0x90219732 with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 10^18 * cd[36]
                                else:
                                    if owner == msg.sender:
                                        if not cd[36]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                            0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 0, 17
                                            if balanceOf[this.address] > -1:
                                                revert with 0, 17
                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                            emit Transfer(0, msg.sender, this.address);
                                        else:
                                            if cd[36] and 10^18 > -1 / cd[36]:
                                                revert with 0, 17
                                            if not cd[36]:
                                                revert with 0, 18
                                            if 10^18 * cd[36] / cd[36] != 10^18:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                            0
                                            if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                            if balanceOf[this.address] > !(10^18 * cd[36]):
                                                revert with 0, 17
                                            if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                            emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                        if not cd[36]:
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0x90219732 with:
                                                 gas gas_remaining wei
                                                args msg.sender, 96, 0, ('cd', 4).length, call.data[cd[4] + 36 len ('cd', 4).length], ext_call.return_data[('cd', 4).length + -ceil32(ceil32(('cd', 4).length)) + 31 len ceil32(('cd', 4).length) - ('cd', 4).length]
                                        else:
                                            if cd[36] and 10^18 > -1 / cd[36]:
                                                revert with 0, 17
                                            if not cd[36]:
                                                revert with 0, 18
                                            if 10^18 * cd[36] / cd[36] != 10^18:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0x90219732 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 10^18 * cd[36]
                                    else:
                                        if stor36[address(msg.sender)]:
                                            if not cd[36]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 
                                                                32,
                                                                38,
                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                                0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                            else:
                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                    revert with 0, 17
                                                if not cd[36]:
                                                    revert with 0, 18
                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                    revert with 0, 
                                                                32,
                                                                38,
                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 199 len 26] >> 48,
                                                                0
                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                            if not cd[36]:
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, 96, 0, ('cd', 4).length, call.data[cd[4] + 36 len ('cd', 4).length], ext_call.return_data[('cd', 4).length + -ceil32(ceil32(('cd', 4).length)) + 31 len ceil32(('cd', 4).length) - ('cd', 4).length]
                                            else:
                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                    revert with 0, 17
                                                if not cd[36]:
                                                    revert with 0, 18
                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 10^18 * cd[36]
                                        else:
                                            uint8(stor27.field_0) = 1
                                            if not balanceOf[this.address]:
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 129] = 26
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 161] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 193] = 26
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 225] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 257] = 30
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 289] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 321] = 2
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 353] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 417] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 385] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = 32
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 36
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 'ERC20: approve from the zero add'
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                       len ceil32(return_data.size) + 132
                                                if not uniswapV2RouterAddress:
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = 32
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 34
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 'ERC20: approve to the zero addre'
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                       len ceil32(return_data.size) + 132
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0
                                                emit Approval(mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = 0
                                                mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 0
                                                mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 160
                                                mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 581] = 2
                                                idx = 0
                                                s = ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 613
                                                t = ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 353
                                                while idx < mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 321]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = this.address
                                                mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 549] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + -mem[64] + 673]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _6605 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_6605] = 30
                                                mem[_6605 + 32] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                call devPoolAddress with:
                                                     gas 2300 wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _6788 = mem[64]
                                                mem[mem[64]] = 2
                                                mem[64] = mem[64] + 96
                                                mem[_6788 + 32 len 64] = call.data[calldata.size len 64]
                                                if 0 >= mem[_6788]:
                                                    revert with 0, 50
                                                mem[_6788 + 32] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_6788 + 96] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _6788 + ceil32(return_data.size) + 96
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                if 1 >= mem[_6788]:
                                                    revert with 0, 50
                                                mem[_6788 + 64] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[_6788 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_6788 + ceil32(return_data.size) + 100] = 0
                                                mem[_6788 + ceil32(return_data.size) + 132] = 0
                                                mem[_6788 + ceil32(return_data.size) + 164] = 160
                                                mem[_6788 + ceil32(return_data.size) + 260] = mem[_6788]
                                                idx = 0
                                                s = _6788 + ceil32(return_data.size) + 292
                                                t = _6788 + 32
                                                while idx < mem[_6788]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[_6788 + ceil32(return_data.size) + 260 len (32 * mem[_6788]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[_6788 + ceil32(return_data.size) + 96] = 30
                                                mem[_6788 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                call treasuryPoolAddress with:
                                                     gas 2300 wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not balanceOf[this.address]:
                                                    mem[_6788 + ceil32(return_data.size) + 160] = 26
                                                    mem[_6788 + ceil32(return_data.size) + 192] = 'SafeMath: division by zero'
                                                    mem[_6788 + ceil32(return_data.size) + 224] = 26
                                                    mem[_6788 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                                    mem[_6788 + ceil32(return_data.size) + 288] = 2
                                                    mem[_6788 + ceil32(return_data.size) + 320] = this.address
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                            gas gas_remaining wei
                                                    mem[_6788 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _6788 + (2 * ceil32(return_data.size)) + 384
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                    mem[_6788 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                                    if not this.address:
                                                        revert with 0, 'ERC20: approve from the zero address'
                                                    if not uniswapV2RouterAddress:
                                                        revert with 0, 'ERC20: approve to the zero address'
                                                    mem[0] = uniswapV2RouterAddress
                                                    mem[32] = sha3(address(this.address), 1)
                                                    allowance[address(this.address)][stor14].field_0 = 0
                                                    emit Approval(0, this.address, uniswapV2RouterAddress);
                                                    mem[_6788 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                    mem[_6788 + (2 * ceil32(return_data.size)) + 388] = 0
                                                    mem[_6788 + (2 * ceil32(return_data.size)) + 420] = 0
                                                    mem[_6788 + (2 * ceil32(return_data.size)) + 452] = 160
                                                    mem[_6788 + (2 * ceil32(return_data.size)) + 548] = 2
                                                    idx = 0
                                                    s = _6788 + (2 * ceil32(return_data.size)) + 580
                                                    t = _6788 + ceil32(return_data.size) + 320
                                                    while idx < mem[_6788 + ceil32(return_data.size) + 288]:
                                                        mem[s] = mem[t + 12 len 20]
                                                        idx = idx + 1
                                                        s = s + 32
                                                        t = t + 32
                                                        continue 
                                                    mem[_6788 + (2 * ceil32(return_data.size)) + 484] = this.address
                                                    mem[_6788 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len _6788 + (2 * ceil32(return_data.size)) + (32 * mem[_6788 + ceil32(return_data.size) + 288]) + -mem[64] + 576]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _12677 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_12677] = 30
                                                    mem[_12677 + 32] = 'SafeMath: subtraction overflow'
                                                    if eth.balance(this.address) > eth.balance(this.address):
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if eth.balance(this.address) < eth.balance(this.address):
                                                        revert with 0, 17
                                                    call distributionPoolAddress with:
                                                         gas 2300 wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _12768 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_12768] = 30
                                                    mem[_12768 + 32] = 'SafeMath: subtraction overflow'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not distributionPoolAddress:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _12892 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_12892] = 38
                                                    mem[_12892 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 0 > balanceOf[address(this.address)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12892 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(this.address)] < 0:
                                                        revert with 0, 17
                                                    if balanceOf[stor17] > -1:
                                                        revert with 0, 17
                                                    if balanceOf[stor17] < balanceOf[stor17]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = distributionPoolAddress
                                                    mem[32] = 0
                                                    balanceOf[stor17] = balanceOf[stor17]
                                                    emit Transfer(0, this.address, distributionPoolAddress);
                                                    if not balanceOf[this.address]:
                                                        _13206 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_13206] = 26
                                                        mem[_13206 + 32] = 'SafeMath: division by zero'
                                                        _13278 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_13278] = 26
                                                        mem[_13278 + 32] = 'SafeMath: division by zero'
                                                        _13314 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_13314] = 30
                                                        mem[_13314 + 32] = 'SafeMath: subtraction overflow'
                                                        _13367 = mem[64]
                                                        mem[mem[64]] = 2
                                                        mem[64] = mem[64] + 96
                                                        mem[_13367 + 32 len 64] = call.data[calldata.size len 64]
                                                        if 0 >= mem[_13367]:
                                                            revert with 0, 50
                                                        mem[_13367 + 32] = this.address
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                gas gas_remaining wei
                                                        mem[_13367 + 96] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[64] = _13367 + ceil32(return_data.size) + 96
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                        if 1 >= mem[_13367]:
                                                            revert with 0, 50
                                                        mem[_13367 + 64] = ext_call.return_data[12 len 20]
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        mem[0] = uniswapV2RouterAddress
                                                        mem[32] = sha3(address(this.address), 1)
                                                        allowance[address(this.address)][stor14].field_0 = 0
                                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                                        mem[_13367 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                        mem[_13367 + ceil32(return_data.size) + 100] = 0
                                                        mem[_13367 + ceil32(return_data.size) + 132] = 0
                                                        mem[_13367 + ceil32(return_data.size) + 164] = 160
                                                        mem[_13367 + ceil32(return_data.size) + 260] = mem[_13367]
                                                        idx = 0
                                                        s = _13367 + ceil32(return_data.size) + 292
                                                        t = _13367 + 32
                                                        while idx < mem[_13367]:
                                                            mem[s] = mem[t + 12 len 20]
                                                            idx = idx + 1
                                                            s = s + 32
                                                            t = t + 32
                                                            continue 
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args 0, 0, 160, address(this.address), block.timestamp, mem[_13367 + ceil32(return_data.size) + 260 len (32 * mem[_13367]) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[_13367 + ceil32(return_data.size) + 96] = 30
                                                        mem[_13367 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                        if eth.balance(this.address) > eth.balance(this.address):
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if eth.balance(this.address) < eth.balance(this.address):
                                                            revert with 0, 17
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        allowance[address(this.address)][stor14].field_0 = 0
                                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                                        mem[_13367 + ceil32(return_data.size) + 228] = 0
                                                        mem[_13367 + ceil32(return_data.size) + 260] = 0
                                                        mem[_13367 + ceil32(return_data.size) + 292] = stor33
                                                        mem[_13367 + ceil32(return_data.size) + 324] = block.timestamp
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                             gas gas_remaining wei
                                                            args this.address, 0, 0, 0, stor33, block.timestamp
                                                        mem[_13367 + ceil32(return_data.size) + 160 len 96] = ext_call.return_data[0 len 96]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 96
                                                        emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                            0,
                                                        mem[_13367 + (2 * ceil32(return_data.size)) + 160] = 2
                                                        mem[_13367 + (2 * ceil32(return_data.size)) + 192] = this.address
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                gas gas_remaining wei
                                                        mem[_13367 + (2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[64] = _13367 + (4 * ceil32(return_data.size)) + 256
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                        mem[_13367 + (2 * ceil32(return_data.size)) + 224] = ext_call.return_data[12 len 20]
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        mem[0] = uniswapV2RouterAddress
                                                        mem[32] = sha3(address(this.address), 1)
                                                        allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                        emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                        mem[_13367 + (4 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                        mem[_13367 + (4 * ceil32(return_data.size)) + 260] = balanceOf[this.address]
                                                        mem[_13367 + (4 * ceil32(return_data.size)) + 292] = 0
                                                        mem[_13367 + (4 * ceil32(return_data.size)) + 324] = 160
                                                        mem[_13367 + (4 * ceil32(return_data.size)) + 420] = 2
                                                        idx = 0
                                                        s = _13367 + (4 * ceil32(return_data.size)) + 452
                                                        t = _13367 + (2 * ceil32(return_data.size)) + 192
                                                        while idx < mem[_13367 + (2 * ceil32(return_data.size)) + 160]:
                                                            mem[s] = mem[t + 12 len 20]
                                                            idx = idx + 1
                                                            s = s + 32
                                                            t = t + 32
                                                            continue 
                                                        mem[_13367 + (4 * ceil32(return_data.size)) + 356] = this.address
                                                        mem[_13367 + (4 * ceil32(return_data.size)) + 388] = block.timestamp
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_13367 + (4 * ceil32(return_data.size)) + 420 len (32 * mem[_13367 + (2 * ceil32(return_data.size)) + 160]) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        uint8(stor27.field_0) = 0
                                                        if not cd[36]:
                                                            if not msg.sender:
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 292] = 37
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer from the zero ad'
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 356] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _13367 + (4 * ceil32(return_data.size)) + 256
                                                                   len (5 * ceil32(return_data.size)) + 132
                                                            if not this.address:
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 292] = 35
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer to the zero addr'
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 356] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _13367 + (4 * ceil32(return_data.size)) + 256
                                                                   len (5 * ceil32(return_data.size)) + 132
                                                            mem[_13367 + (4 * ceil32(return_data.size)) + 256] = 38
                                                            mem[_13367 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 388] = 38
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 420 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 458] = 0
                                                                revert with memory
                                                                  from _13367 + (4 * ceil32(return_data.size)) + 352
                                                                   len (5 * ceil32(return_data.size)) + 132
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 0, 17
                                                            if balanceOf[this.address] > -1:
                                                                revert with 0, 17
                                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 388] = 27
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: addition overflow'
                                                                revert with memory
                                                                  from _13367 + (4 * ceil32(return_data.size)) + 352
                                                                   len (5 * ceil32(return_data.size)) + 100
                                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                                            emit Transfer(0, msg.sender, this.address);
                                                        else:
                                                            if cd[36] and 10^18 > -1 / cd[36]:
                                                                revert with 0, 17
                                                            if not cd[36]:
                                                                revert with 0, 18
                                                            if 10^18 * cd[36] / cd[36] != 10^18:
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 292] = 33
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 324] = 'SafeMath: multiplication overflo'
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 356] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _13367 + (4 * ceil32(return_data.size)) + 256
                                                                   len (5 * ceil32(return_data.size)) + 132
                                                            if not msg.sender:
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 292] = 37
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer from the zero ad'
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 356] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _13367 + (4 * ceil32(return_data.size)) + 256
                                                                   len (5 * ceil32(return_data.size)) + 132
                                                            if not this.address:
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 292] = 35
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer to the zero addr'
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 356] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _13367 + (4 * ceil32(return_data.size)) + 256
                                                                   len (5 * ceil32(return_data.size)) + 132
                                                            mem[_13367 + (4 * ceil32(return_data.size)) + 256] = 38
                                                            mem[_13367 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 388] = 38
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 420 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 458] = 0
                                                                revert with memory
                                                                  from _13367 + (4 * ceil32(return_data.size)) + 352
                                                                   len (5 * ceil32(return_data.size)) + 132
                                                            if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                            if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                revert with 0, 17
                                                            if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 388] = 27
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: addition overflow'
                                                                revert with memory
                                                                  from _13367 + (4 * ceil32(return_data.size)) + 352
                                                                   len (5 * ceil32(return_data.size)) + 100
                                                            balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                            emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                        if not cd[36]:
                                                            mem[_13367 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                            mem[_13367 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                            mem[_13367 + (4 * ceil32(return_data.size)) + 388] = 96
                                                            mem[_13367 + (4 * ceil32(return_data.size)) + 452] = mem[128]
                                                            mem[_13367 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                            if ceil32(mem[128]) > mem[128]:
                                                                mem[mem[128] + _13367 + (4 * ceil32(return_data.size)) + 484] = 0
                                                            mem[_13367 + (4 * ceil32(return_data.size)) + 420] = 0
                                                        else:
                                                            if cd[36] and 10^18 > -1 / cd[36]:
                                                                revert with 0, 17
                                                            if not cd[36]:
                                                                revert with 0, 18
                                                            if 10^18 * cd[36] / cd[36] != 10^18:
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 388] = 33
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: multiplication overflo'
                                                                mem[_13367 + (4 * ceil32(return_data.size)) + 452] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _13367 + (4 * ceil32(return_data.size)) + 352
                                                                   len (5 * ceil32(return_data.size)) + 132
                                                            mem[_13367 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                            mem[_13367 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                            mem[_13367 + (4 * ceil32(return_data.size)) + 388] = 96
                                                            mem[_13367 + (4 * ceil32(return_data.size)) + 452] = mem[128]
                                                            mem[_13367 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                            if ceil32(mem[128]) > mem[128]:
                                                                mem[mem[128] + _13367 + (4 * ceil32(return_data.size)) + 484] = 0
                                                            mem[_13367 + (4 * ceil32(return_data.size)) + 420] = 10^18 * cd[36]
                                                        require ext_code.size(nodeRewardManagerAddress)
                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                             gas gas_remaining wei
                                                            args mem[_13367 + (4 * ceil32(return_data.size)) + 356 len ceil32(mem[128]) + (5 * ceil32(return_data.size)) + 128]
                                                    else:
                                                        if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                            revert with 0, 17
                                                        if not balanceOf[this.address]:
                                                            revert with 0, 18
                                                        if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _13260 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_13260] = 26
                                                        mem[_13260 + 32] = 'SafeMath: division by zero'
                                                        _13296 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_13296] = 26
                                                        mem[_13296 + 32] = 'SafeMath: division by zero'
                                                        _13332 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_13332] = 30
                                                        mem[_13332 + 32] = 'SafeMath: subtraction overflow'
                                                        if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                            revert with 0, 17
                                                        _13520 = mem[64]
                                                        mem[mem[64]] = 2
                                                        mem[64] = mem[64] + 96
                                                        mem[_13520 + 32 len 64] = call.data[calldata.size len 64]
                                                        if 0 >= mem[_13520]:
                                                            revert with 0, 50
                                                        mem[_13520 + 32] = this.address
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                gas gas_remaining wei
                                                        mem[_13520 + 96] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[64] = _13520 + ceil32(return_data.size) + 96
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                        if 1 >= mem[_13520]:
                                                            revert with 0, 50
                                                        mem[_13520 + 64] = ext_call.return_data[12 len 20]
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        mem[0] = uniswapV2RouterAddress
                                                        mem[32] = sha3(address(this.address), 1)
                                                        allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                        allowance[address(this.address)][stor14].field_255 = 0
                                                        emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                        mem[_13520 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                        mem[_13520 + ceil32(return_data.size) + 100] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                        mem[_13520 + ceil32(return_data.size) + 132] = 0
                                                        mem[_13520 + ceil32(return_data.size) + 164] = 160
                                                        mem[_13520 + ceil32(return_data.size) + 260] = mem[_13520]
                                                        idx = 0
                                                        s = _13520 + ceil32(return_data.size) + 292
                                                        t = _13520 + 32
                                                        while idx < mem[_13520]:
                                                            mem[s] = mem[t + 12 len 20]
                                                            idx = idx + 1
                                                            s = s + 32
                                                            t = t + 32
                                                            continue 
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_13520 + ceil32(return_data.size) + 260 len (32 * mem[_13520]) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[_13520 + ceil32(return_data.size) + 96] = 30
                                                        mem[_13520 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                        if eth.balance(this.address) > eth.balance(this.address):
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if eth.balance(this.address) < eth.balance(this.address):
                                                            revert with 0, 17
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                        emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                        mem[_13520 + ceil32(return_data.size) + 228] = 0
                                                        mem[_13520 + ceil32(return_data.size) + 260] = 0
                                                        mem[_13520 + ceil32(return_data.size) + 292] = stor33
                                                        mem[_13520 + ceil32(return_data.size) + 324] = block.timestamp
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                             gas gas_remaining wei
                                                            args this.address, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2), 0, 0, stor33, block.timestamp
                                                        mem[_13520 + ceil32(return_data.size) + 160 len 96] = ext_call.return_data[0 len 96]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 96
                                                        emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2));
                                                        mem[_13520 + (2 * ceil32(return_data.size)) + 160] = 2
                                                        mem[_13520 + (2 * ceil32(return_data.size)) + 192] = this.address
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                gas gas_remaining wei
                                                        mem[_13520 + (2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[64] = _13520 + (4 * ceil32(return_data.size)) + 256
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                        mem[_13520 + (2 * ceil32(return_data.size)) + 224] = ext_call.return_data[12 len 20]
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        mem[0] = uniswapV2RouterAddress
                                                        mem[32] = sha3(address(this.address), 1)
                                                        allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                        emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                        mem[_13520 + (4 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                        mem[_13520 + (4 * ceil32(return_data.size)) + 260] = balanceOf[this.address]
                                                        mem[_13520 + (4 * ceil32(return_data.size)) + 292] = 0
                                                        mem[_13520 + (4 * ceil32(return_data.size)) + 324] = 160
                                                        mem[_13520 + (4 * ceil32(return_data.size)) + 420] = 2
                                                        idx = 0
                                                        s = _13520 + (4 * ceil32(return_data.size)) + 452
                                                        t = _13520 + (2 * ceil32(return_data.size)) + 192
                                                        while idx < mem[_13520 + (2 * ceil32(return_data.size)) + 160]:
                                                            mem[s] = mem[t + 12 len 20]
                                                            idx = idx + 1
                                                            s = s + 32
                                                            t = t + 32
                                                            continue 
                                                        mem[_13520 + (4 * ceil32(return_data.size)) + 356] = this.address
                                                        mem[_13520 + (4 * ceil32(return_data.size)) + 388] = block.timestamp
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _13520 + (4 * ceil32(return_data.size)) + (32 * mem[_13520 + (2 * ceil32(return_data.size)) + 160]) + -mem[64] + 448]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        uint8(stor27.field_0) = 0
                                                        if not cd[36]:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _22140 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_22140] = 38
                                                            mem[_22140 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22140 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 0, 17
                                                            if balanceOf[this.address] > -1:
                                                                revert with 0, 17
                                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not cd[36]:
                                                                _23347 = mem[64]
                                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = msg.sender
                                                                mem[mem[64] + 36] = 96
                                                                mem[mem[64] + 100] = mem[128]
                                                                mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) <= mem[128]:
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                else:
                                                                    mem[mem[128] + mem[64] + 132] = 0
                                                                    mem[mem[64] + 68] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len ceil32(mem[128]) + _23347 + -mem[64] + 128]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _23617 = mem[64]
                                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = msg.sender
                                                                mem[mem[64] + 36] = 96
                                                                _23709 = mem[128]
                                                                mem[mem[64] + 100] = mem[128]
                                                                mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) <= mem[128]:
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                else:
                                                                    mem[mem[128] + mem[64] + 132] = 0
                                                                    mem[mem[64] + 68] = 10^18 * cd[36]
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len ceil32(_23709) + _23617 + -mem[64] + 128]
                                                        else:
                                                            if cd[36] and 10^18 > -1 / cd[36]:
                                                                revert with 0, 17
                                                            if not cd[36]:
                                                                revert with 0, 18
                                                            if 10^18 * cd[36] / cd[36] != 10^18:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _22532 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_22532] = 38
                                                            mem[_22532 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22532 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                            if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                revert with 0, 17
                                                            if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                            emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                            if not cd[36]:
                                                                _23616 = mem[64]
                                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = msg.sender
                                                                mem[mem[64] + 36] = 96
                                                                mem[mem[64] + 100] = mem[128]
                                                                mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) <= mem[128]:
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                else:
                                                                    mem[mem[128] + mem[64] + 132] = 0
                                                                    mem[mem[64] + 68] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len ceil32(mem[128]) + _23616 + -mem[64] + 128]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _23960 = mem[64]
                                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = msg.sender
                                                                mem[mem[64] + 36] = 96
                                                                mem[mem[64] + 100] = mem[128]
                                                                mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) <= mem[128]:
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                else:
                                                                    mem[mem[128] + mem[64] + 132] = 0
                                                                    mem[mem[64] + 68] = 10^18 * cd[36]
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len ceil32(mem[128]) + _23960 + -mem[64] + 128]
                                                else:
                                                    if balanceOf[this.address] and rewardsFee > -1 / balanceOf[this.address]:
                                                        revert with 0, 17
                                                    if not balanceOf[this.address]:
                                                        revert with 0, 18
                                                    if balanceOf[this.address] * rewardsFee / balanceOf[this.address] != rewardsFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    mem[_6788 + ceil32(return_data.size) + 160] = 26
                                                    mem[_6788 + ceil32(return_data.size) + 192] = 'SafeMath: division by zero'
                                                    if balanceOf[this.address] * rewardsFee / 100:
                                                        if balanceOf[this.address] * rewardsFee / 100 and stor25 > -1 / balanceOf[this.address] * rewardsFee / 100:
                                                            revert with 0, 17
                                                        if not balanceOf[this.address] * rewardsFee / 100:
                                                            revert with 0, 18
                                                        if balanceOf[this.address] * rewardsFee / 100 * stor25 / balanceOf[this.address] * rewardsFee / 100 != stor25:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        mem[_6788 + ceil32(return_data.size) + 224] = 26
                                                        mem[_6788 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                                        mem[_6788 + ceil32(return_data.size) + 288] = 2
                                                        mem[_6788 + ceil32(return_data.size) + 320] = this.address
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                gas gas_remaining wei
                                                        mem[_6788 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[64] = _6788 + (2 * ceil32(return_data.size)) + 384
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                        mem[_6788 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        mem[0] = uniswapV2RouterAddress
                                                        mem[32] = sha3(address(this.address), 1)
                                                        allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * rewardsFee / 100 * stor25 / 100
                                                        emit Approval((balanceOf[this.address] * rewardsFee / 100 * stor25 / 100), this.address, uniswapV2RouterAddress);
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 388] = balanceOf[this.address] * rewardsFee / 100 * stor25 / 100
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 420] = 0
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 452] = 160
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 548] = 2
                                                        idx = 0
                                                        s = _6788 + (2 * ceil32(return_data.size)) + 580
                                                        t = _6788 + ceil32(return_data.size) + 320
                                                        while idx < mem[_6788 + ceil32(return_data.size) + 288]:
                                                            mem[s] = mem[t + 12 len 20]
                                                            idx = idx + 1
                                                            s = s + 32
                                                            t = t + 32
                                                            continue 
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 484] = this.address
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args balanceOf[this.address] * rewardsFee / 100 * stor25 / 100, 0, 160, address(this.address), block.timestamp, mem[_6788 + (2 * ceil32(return_data.size)) + 548 len (32 * mem[_6788 + ceil32(return_data.size) + 288]) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 384] = 30
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 416] = 'SafeMath: subtraction overflow'
                                                        if eth.balance(this.address) > eth.balance(this.address):
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 448] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 452] = 32
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 484] = 30
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 516] = 'SafeMath: subtraction overflow'
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 546] = 0
                                                            revert with memory
                                                              from _6788 + (2 * ceil32(return_data.size)) + 448
                                                               len ceil32(return_data.size) + 100
                                                        if eth.balance(this.address) < eth.balance(this.address):
                                                            revert with 0, 17
                                                        call distributionPoolAddress with:
                                                             gas 2300 wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 448] = 30
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 480] = 'SafeMath: subtraction overflow'
                                                        if balanceOf[this.address] * rewardsFee / 100 * stor25 / 100 > balanceOf[this.address] * rewardsFee / 100:
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 516] = 32
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 548] = 30
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 580] = 'SafeMath: subtraction overflow'
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 610] = 0
                                                            revert with memory
                                                              from _6788 + (2 * ceil32(return_data.size)) + 512
                                                               len ceil32(return_data.size) + 100
                                                        if balanceOf[this.address] * rewardsFee / 100 < balanceOf[this.address] * rewardsFee / 100 * stor25 / 100:
                                                            revert with 0, 17
                                                        if not this.address:
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 516] = 32
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 548] = 37
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer from the zero ad'
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 612] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                            revert with memory
                                                              from _6788 + (2 * ceil32(return_data.size)) + 512
                                                               len ceil32(return_data.size) + 132
                                                        if not distributionPoolAddress:
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 516] = 32
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 548] = 35
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer to the zero addr'
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 612] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                            revert with memory
                                                              from _6788 + (2 * ceil32(return_data.size)) + 512
                                                               len ceil32(return_data.size) + 132
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 512] = 38
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 544 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100) > balanceOf[address(this.address)]:
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 612] = 32
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 644] = 38
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 676 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6788 + (2 * ceil32(return_data.size)) + 582 len 26]
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 714] = 0
                                                            revert with memory
                                                              from _6788 + (2 * ceil32(return_data.size)) + 608
                                                               len ceil32(return_data.size) + 132
                                                        if balanceOf[address(this.address)] < (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100):
                                                            revert with 0, 17
                                                        balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[this.address] * rewardsFee / 100) + (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)
                                                        if balanceOf[stor17] > !((balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)):
                                                            revert with 0, 17
                                                        if balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100) < balanceOf[stor17]:
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 612] = 32
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 644] = 27
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from _6788 + (2 * ceil32(return_data.size)) + 608
                                                               len ceil32(return_data.size) + 100
                                                        balanceOf[stor17] = balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)
                                                        emit Transfer(((balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)), this.address, distributionPoolAddress);
                                                        if balanceOf[this.address]:
                                                            if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                                revert with 0, 17
                                                            if not balanceOf[this.address]:
                                                                revert with 0, 18
                                                            if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                                mem[_6788 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6788 + (2 * ceil32(return_data.size)) + 612] = 32
                                                                mem[_6788 + (2 * ceil32(return_data.size)) + 644] = 33
                                                                mem[_6788 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: multiplication overflo'
                                                                mem[_6788 + (2 * ceil32(return_data.size)) + 708] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _6788 + (2 * ceil32(return_data.size)) + 608
                                                                   len ceil32(return_data.size) + 132
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 608] = 26
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 672] = 26
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 736] = 30
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                            if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                                mem[_6788 + (2 * ceil32(return_data.size)) + 800] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6788 + (2 * ceil32(return_data.size)) + 804] = 32
                                                                mem[_6788 + (2 * ceil32(return_data.size)) + 836] = 30
                                                                mem[_6788 + (2 * ceil32(return_data.size)) + 868] = 'SafeMath: subtraction overflow'
                                                                mem[_6788 + (2 * ceil32(return_data.size)) + 898] = 0
                                                                revert with memory
                                                                  from _6788 + (2 * ceil32(return_data.size)) + 800
                                                                   len ceil32(return_data.size) + 100
                                                            if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                                revert with 0, 17
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 800] = 2
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _6788 + (4 * ceil32(return_data.size)) + 896
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                            allowance[address(this.address)][stor14].field_255 = 0
                                                            emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 900] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 932] = 0
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 964] = 160
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                            idx = 0
                                                            s = _6788 + (4 * ceil32(return_data.size)) + 1092
                                                            t = _6788 + (2 * ceil32(return_data.size)) + 832
                                                            while idx < mem[_6788 + (2 * ceil32(return_data.size)) + 800]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_6788 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_6788 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 896] = 30
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                mem[_6788 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6788 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                mem[_6788 + (4 * ceil32(return_data.size)) + 996] = 30
                                                                mem[_6788 + (4 * ceil32(return_data.size)) + 1028] = 'SafeMath: subtraction overflow'
                                                                mem[_6788 + (4 * ceil32(return_data.size)) + 1058] = 0
                                                                revert with memory
                                                                  from _6788 + (4 * ceil32(return_data.size)) + 960
                                                                   len (5 * ceil32(return_data.size)) + 100
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            if not this.address:
                                                                mem[_6788 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6788 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                mem[_6788 + (4 * ceil32(return_data.size)) + 996] = 36
                                                                mem[_6788 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve from the zero add'
                                                                mem[_6788 + (4 * ceil32(return_data.size)) + 1060] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _6788 + (4 * ceil32(return_data.size)) + 960
                                                                   len (5 * ceil32(return_data.size)) + 132
                                                            if not uniswapV2RouterAddress:
                                                                mem[_6788 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6788 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                mem[_6788 + (4 * ceil32(return_data.size)) + 996] = 34
                                                                mem[_6788 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve to the zero addre'
                                                                mem[_6788 + (4 * ceil32(return_data.size)) + 1060] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _6788 + (4 * ceil32(return_data.size)) + 960
                                                                   len (5 * ceil32(return_data.size)) + 132
                                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                            emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 964] = this.address
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 996] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 1028] = 0
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 1060] = 0
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 1092] = stor33
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                 gas gas_remaining wei
                                                                args mem[_6788 + (4 * ceil32(return_data.size)) + 964 len (5 * ceil32(return_data.size)) + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 96
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 960] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 992] = 0
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 1024] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                mem[_6788 + (4 * ceil32(return_data.size)) + 960 len (7 * ceil32(return_data.size)) + 96],
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 960] = 2
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 992] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _6788 + (6 * ceil32(return_data.size)) + 1056
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                            mem[_6788 + (6 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_6788 + (6 * ceil32(return_data.size)) + 1060] = balanceOf[this.address]
                                                            mem[_6788 + (6 * ceil32(return_data.size)) + 1092] = 0
                                                            mem[_6788 + (6 * ceil32(return_data.size)) + 1124] = 160
                                                            mem[_6788 + (6 * ceil32(return_data.size)) + 1220] = 2
                                                            idx = 0
                                                            s = _6788 + (6 * ceil32(return_data.size)) + 1252
                                                            t = _6788 + (4 * ceil32(return_data.size)) + 992
                                                            while idx < mem[_6788 + (4 * ceil32(return_data.size)) + 960]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_6788 + (6 * ceil32(return_data.size)) + 1188] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_6788 + (6 * ceil32(return_data.size)) + 1220 len (32 * mem[_6788 + (4 * ceil32(return_data.size)) + 960]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            uint8(stor27.field_0) = 0
                                                            if not cd[36]:
                                                                if not msg.sender:
                                                                    revert with 0, 
                                                                                'ERC20: transfer from the zero address',
                                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                if not this.address:
                                                                    revert with 0, 
                                                                                'ERC20: transfer to the zero address',
                                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1056] = 38
                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[_6788 + (6 * ceil32(return_data.size)) + 1258] = 0
                                                                    revert with 0, 
                                                                                32,
                                                                                38,
                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1258 len (9 * ceil32(return_data.size)) + 26]
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] > -1:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow', mem[_6788 + (6 * ceil32(return_data.size)) + 1252 len 9 * ceil32(return_data.size)]
                                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                                emit Transfer(0, msg.sender, this.address);
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 
                                                                                'SafeMath: multiplication overflow',
                                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                if not msg.sender:
                                                                    revert with 0, 
                                                                                'ERC20: transfer from the zero address',
                                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                if not this.address:
                                                                    revert with 0, 
                                                                                'ERC20: transfer to the zero address',
                                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1056] = 38
                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                    mem[_6788 + (6 * ceil32(return_data.size)) + 1258] = 0
                                                                    revert with 0, 
                                                                                32,
                                                                                38,
                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1258 len (9 * ceil32(return_data.size)) + 26]
                                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                    revert with 0, 17
                                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow', mem[_6788 + (6 * ceil32(return_data.size)) + 1252 len 9 * ceil32(return_data.size)]
                                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                            if not cd[36]:
                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1156] = msg.sender
                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1188] = 96
                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1252] = mem[128]
                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1284 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _6788 + (6 * ceil32(return_data.size)) + 1284] = 0
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, 96, 0, mem[128], mem[_6788 + (6 * ceil32(return_data.size)) + 1284 len (9 * ceil32(return_data.size)) + ceil32(mem[128])]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 
                                                                                'SafeMath: multiplication overflow',
                                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1284 len 9 * ceil32(return_data.size)]
                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1156] = msg.sender
                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1188] = 96
                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1252] = mem[128]
                                                                mem[_6788 + (6 * ceil32(return_data.size)) + 1284 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _6788 + (6 * ceil32(return_data.size)) + 1284] = 0
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, Array(len=mem[128], data=mem[_6788 + (6 * ceil32(return_data.size)) + 1284 len (9 * ceil32(return_data.size)) + ceil32(mem[128])]), 10^18 * cd[36]
                                                        else:
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 608] = 26
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 672] = 26
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 736] = 30
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 800] = 2
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _6788 + (4 * ceil32(return_data.size)) + 896
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_6788 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 900] = 0
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 932] = 0
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 964] = 160
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                            idx = 0
                                                            s = _6788 + (4 * ceil32(return_data.size)) + 1092
                                                            t = _6788 + (2 * ceil32(return_data.size)) + 832
                                                            while idx < mem[_6788 + (2 * ceil32(return_data.size)) + 800]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                            mem[_6788 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _6788 + (4 * ceil32(return_data.size)) + (32 * mem[_6788 + (2 * ceil32(return_data.size)) + 800]) + -mem[64] + 1088]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _18145 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_18145] = 30
                                                            mem[_18145 + 32] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[mem[64] + 68] = 0
                                                            mem[mem[64] + 100] = 0
                                                            mem[mem[64] + 132] = stor33
                                                            mem[mem[64] + 164] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                 gas gas_remaining wei
                                                                args this.address, 0, 0, 0, stor33, block.timestamp
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            mem[mem[64] + 32] = 0
                                                            mem[mem[64] + 64] = 0
                                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                0,
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            _18986 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_18986 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_18986]:
                                                                revert with 0, 50
                                                            mem[_18986 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_18986 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _18986 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_18986]:
                                                                revert with 0, 50
                                                            mem[_18986 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                            mem[_18986 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_18986 + ceil32(return_data.size) + 100] = balanceOf[this.address]
                                                            mem[_18986 + ceil32(return_data.size) + 132] = 0
                                                            mem[_18986 + ceil32(return_data.size) + 164] = 160
                                                            mem[_18986 + ceil32(return_data.size) + 260] = mem[_18986]
                                                            idx = 0
                                                            s = _18986 + ceil32(return_data.size) + 292
                                                            t = _18986 + 32
                                                            while idx < mem[_18986]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_18986 + ceil32(return_data.size) + 260 len (32 * mem[_18986]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            uint8(stor27.field_0) = 0
                                                            if not cd[36]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                mem[_18986 + ceil32(return_data.size) + 96] = 38
                                                                mem[_18986 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] > -1:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                                emit Transfer(0, msg.sender, this.address);
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                mem[_18986 + ceil32(return_data.size) + 96] = 38
                                                                mem[_18986 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                    revert with 0, 17
                                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                            if not cd[36]:
                                                                mem[_18986 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_18986 + ceil32(return_data.size) + 196] = msg.sender
                                                                mem[_18986 + ceil32(return_data.size) + 228] = 96
                                                                mem[_18986 + ceil32(return_data.size) + 292] = mem[128]
                                                                mem[_18986 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _18986 + ceil32(return_data.size) + 324] = 0
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, 96, 0, mem[128], mem[_18986 + ceil32(return_data.size) + 324 len ceil32(mem[128])]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                mem[_18986 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_18986 + ceil32(return_data.size) + 196] = msg.sender
                                                                mem[_18986 + ceil32(return_data.size) + 228] = 96
                                                                mem[_18986 + ceil32(return_data.size) + 292] = mem[128]
                                                                mem[_18986 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _18986 + ceil32(return_data.size) + 324] = 0
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, Array(len=mem[128], data=mem[_18986 + ceil32(return_data.size) + 324 len ceil32(mem[128])]), 10^18 * cd[36]
                                                    else:
                                                        mem[_6788 + ceil32(return_data.size) + 224] = 26
                                                        mem[_6788 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                                        mem[_6788 + ceil32(return_data.size) + 288] = 2
                                                        mem[_6788 + ceil32(return_data.size) + 320] = this.address
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                gas gas_remaining wei
                                                        mem[_6788 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[64] = _6788 + (2 * ceil32(return_data.size)) + 384
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                        mem[_6788 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        mem[0] = uniswapV2RouterAddress
                                                        mem[32] = sha3(address(this.address), 1)
                                                        allowance[address(this.address)][stor14].field_0 = 0
                                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 388] = 0
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 420] = 0
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 452] = 160
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 548] = 2
                                                        idx = 0
                                                        s = _6788 + (2 * ceil32(return_data.size)) + 580
                                                        t = _6788 + ceil32(return_data.size) + 320
                                                        while idx < mem[_6788 + ceil32(return_data.size) + 288]:
                                                            mem[s] = mem[t + 12 len 20]
                                                            idx = idx + 1
                                                            s = s + 32
                                                            t = t + 32
                                                            continue 
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 484] = this.address
                                                        mem[_6788 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _6788 + (2 * ceil32(return_data.size)) + (32 * mem[_6788 + ceil32(return_data.size) + 288]) + -mem[64] + 576]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12676 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_12676] = 30
                                                        mem[_12676 + 32] = 'SafeMath: subtraction overflow'
                                                        if eth.balance(this.address) > eth.balance(this.address):
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if eth.balance(this.address) < eth.balance(this.address):
                                                            revert with 0, 17
                                                        call distributionPoolAddress with:
                                                             gas 2300 wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12767 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_12767] = 30
                                                        mem[_12767 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > balanceOf[this.address] * rewardsFee / 100:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if balanceOf[this.address] * rewardsFee / 100 < 0:
                                                            revert with 0, 17
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not distributionPoolAddress:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12889 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12889] = 38
                                                        mem[_12889 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if balanceOf[this.address] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12889 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(this.address)] < balanceOf[this.address] * rewardsFee / 100:
                                                            revert with 0, 17
                                                        balanceOf[address(this.address)] -= balanceOf[this.address] * rewardsFee / 100
                                                        if balanceOf[stor17] > !(balanceOf[this.address] * rewardsFee / 100):
                                                            revert with 0, 17
                                                        if balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) < balanceOf[stor17]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = distributionPoolAddress
                                                        mem[32] = 0
                                                        balanceOf[stor17] += balanceOf[this.address] * rewardsFee / 100
                                                        emit Transfer((balanceOf[this.address] * rewardsFee / 100), this.address, distributionPoolAddress);
                                                        if not balanceOf[this.address]:
                                                            _13205 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13205] = 26
                                                            mem[_13205 + 32] = 'SafeMath: division by zero'
                                                            _13277 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13277] = 26
                                                            mem[_13277 + 32] = 'SafeMath: division by zero'
                                                            _13313 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13313] = 30
                                                            mem[_13313 + 32] = 'SafeMath: subtraction overflow'
                                                            _13364 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_13364 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_13364]:
                                                                revert with 0, 50
                                                            mem[_13364 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_13364 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _13364 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_13364]:
                                                                revert with 0, 50
                                                            mem[_13364 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[_13364 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_13364 + ceil32(return_data.size) + 100] = 0
                                                            mem[_13364 + ceil32(return_data.size) + 132] = 0
                                                            mem[_13364 + ceil32(return_data.size) + 164] = 160
                                                            mem[_13364 + ceil32(return_data.size) + 260] = mem[_13364]
                                                            idx = 0
                                                            s = _13364 + ceil32(return_data.size) + 292
                                                            t = _13364 + 32
                                                            while idx < mem[_13364]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args 0, 0, 160, address(this.address), block.timestamp, mem[_13364 + ceil32(return_data.size) + 260 len (32 * mem[_13364]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_13364 + ceil32(return_data.size) + 96] = 30
                                                            mem[_13364 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[_13364 + ceil32(return_data.size) + 228] = 0
                                                            mem[_13364 + ceil32(return_data.size) + 260] = 0
                                                            mem[_13364 + ceil32(return_data.size) + 292] = stor33
                                                            mem[_13364 + ceil32(return_data.size) + 324] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                 gas gas_remaining wei
                                                                args this.address, 0, 0, 0, stor33, block.timestamp
                                                            mem[_13364 + ceil32(return_data.size) + 160 len 96] = ext_call.return_data[0 len 96]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 96
                                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                0,
                                                            mem[_13364 + (2 * ceil32(return_data.size)) + 160] = 2
                                                            mem[_13364 + (2 * ceil32(return_data.size)) + 192] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_13364 + (2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _13364 + (4 * ceil32(return_data.size)) + 256
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_13364 + (2 * ceil32(return_data.size)) + 224] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                            mem[_13364 + (4 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_13364 + (4 * ceil32(return_data.size)) + 260] = balanceOf[this.address]
                                                            mem[_13364 + (4 * ceil32(return_data.size)) + 292] = 0
                                                            mem[_13364 + (4 * ceil32(return_data.size)) + 324] = 160
                                                            mem[_13364 + (4 * ceil32(return_data.size)) + 420] = 2
                                                            idx = 0
                                                            s = _13364 + (4 * ceil32(return_data.size)) + 452
                                                            t = _13364 + (2 * ceil32(return_data.size)) + 192
                                                            while idx < mem[_13364 + (2 * ceil32(return_data.size)) + 160]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_13364 + (4 * ceil32(return_data.size)) + 356] = this.address
                                                            mem[_13364 + (4 * ceil32(return_data.size)) + 388] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13364 + (4 * ceil32(return_data.size)) + (32 * mem[_13364 + (2 * ceil32(return_data.size)) + 160]) + -mem[64] + 448]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            uint8(stor27.field_0) = 0
                                                            if not cd[36]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _22137 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_22137] = 38
                                                                mem[_22137 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22137 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] > -1:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not cd[36]:
                                                                    _23343 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    _23475 = mem[128]
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 0
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(_23475) + _23343 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _23614 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    _23707 = mem[128]
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 10^18 * cd[36]
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(_23707) + _23614 + -mem[64] + 128]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _22527 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_22527] = 38
                                                                mem[_22527 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22527 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                    revert with 0, 17
                                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                if not cd[36]:
                                                                    _23613 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 0
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(mem[128]) + _23613 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _23958 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    _24015 = mem[128]
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 10^18 * cd[36]
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(_24015) + _23958 + -mem[64] + 128]
                                                        else:
                                                            if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                                revert with 0, 17
                                                            if not balanceOf[this.address]:
                                                                revert with 0, 18
                                                            if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _13259 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13259] = 26
                                                            mem[_13259 + 32] = 'SafeMath: division by zero'
                                                            _13295 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13295] = 26
                                                            mem[_13295 + 32] = 'SafeMath: division by zero'
                                                            _13331 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13331] = 30
                                                            mem[_13331 + 32] = 'SafeMath: subtraction overflow'
                                                            if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                                revert with 0, 17
                                                            _13518 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_13518 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_13518]:
                                                                revert with 0, 50
                                                            mem[_13518 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_13518 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _13518 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_13518]:
                                                                revert with 0, 50
                                                            mem[_13518 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                            allowance[address(this.address)][stor14].field_255 = 0
                                                            emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                            mem[_13518 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_13518 + ceil32(return_data.size) + 100] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                            mem[_13518 + ceil32(return_data.size) + 132] = 0
                                                            mem[_13518 + ceil32(return_data.size) + 164] = 160
                                                            mem[_13518 + ceil32(return_data.size) + 260] = mem[_13518]
                                                            idx = 0
                                                            s = _13518 + ceil32(return_data.size) + 292
                                                            t = _13518 + 32
                                                            while idx < mem[_13518]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_13518 + ceil32(return_data.size) + 196] = this.address
                                                            mem[_13518 + ceil32(return_data.size) + 228] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13518 + ceil32(return_data.size) + (32 * mem[_13518]) + -mem[64] + 288]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _18146 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_18146] = 30
                                                            mem[_18146 + 32] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                            emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                            mem[mem[64] + 68] = 0
                                                            mem[mem[64] + 100] = 0
                                                            mem[mem[64] + 132] = stor33
                                                            mem[mem[64] + 164] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                 gas gas_remaining wei
                                                                args this.address, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2), 0, 0, stor33, block.timestamp
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            mem[mem[64] + 32] = 0
                                                            mem[mem[64] + 64] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2));
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            _18988 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_18988 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_18988]:
                                                                revert with 0, 50
                                                            mem[_18988 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_18988 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _18988 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_18988]:
                                                                revert with 0, 50
                                                            mem[_18988 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                            mem[_18988 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_18988 + ceil32(return_data.size) + 100] = balanceOf[this.address]
                                                            mem[_18988 + ceil32(return_data.size) + 132] = 0
                                                            mem[_18988 + ceil32(return_data.size) + 164] = 160
                                                            mem[_18988 + ceil32(return_data.size) + 260] = mem[_18988]
                                                            idx = 0
                                                            s = _18988 + ceil32(return_data.size) + 292
                                                            t = _18988 + 32
                                                            while idx < mem[_18988]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_18988 + ceil32(return_data.size) + 196] = this.address
                                                            mem[_18988 + ceil32(return_data.size) + 228] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _18988 + ceil32(return_data.size) + (32 * mem[_18988]) + -mem[64] + 288]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            uint8(stor27.field_0) = 0
                                                            if not cd[36]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _22134 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_22134] = 38
                                                                mem[_22134 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22134 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] > -1:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not cd[36]:
                                                                    _23339 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    _23474 = mem[128]
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 0
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(_23474) + _23339 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _23611 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 10^18 * cd[36]
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(mem[128]) + _23611 + -mem[64] + 128]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _22522 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_22522] = 38
                                                                mem[_22522 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22522 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                    revert with 0, 17
                                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                if not cd[36]:
                                                                    _23610 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    _23704 = mem[128]
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 0
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(_23704) + _23610 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _23956 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    _24014 = mem[128]
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 10^18 * cd[36]
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(_24014) + _23956 + -mem[64] + 128]
                                            else:
                                                if balanceOf[this.address] and treasuryFee > -1 / balanceOf[this.address]:
                                                    revert with 0, 17
                                                if not balanceOf[this.address]:
                                                    revert with 0, 18
                                                if balanceOf[this.address] * treasuryFee / balanceOf[this.address] != treasuryFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 129] = 26
                                                mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 161] = 'SafeMath: division by zero'
                                                if balanceOf[this.address] * treasuryFee / 100:
                                                    if balanceOf[this.address] * treasuryFee / 100 and stor26 > -1 / balanceOf[this.address] * treasuryFee / 100:
                                                        revert with 0, 17
                                                    if not balanceOf[this.address] * treasuryFee / 100:
                                                        revert with 0, 18
                                                    if balanceOf[this.address] * treasuryFee / 100 * stor26 / balanceOf[this.address] * treasuryFee / 100 != stor26:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 193] = 26
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 225] = 'SafeMath: division by zero'
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 257] = 30
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 289] = 'SafeMath: subtraction overflow'
                                                    if balanceOf[this.address] * treasuryFee / 100 * stor26 / 100 > balanceOf[this.address] * treasuryFee / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if balanceOf[this.address] * treasuryFee / 100 < balanceOf[this.address] * treasuryFee / 100 * stor26 / 100:
                                                        revert with 0, 17
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 321] = 2
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 353] = this.address
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                            gas gas_remaining wei
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 417] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 385] = ext_call.return_data[12 len 20]
                                                    if not this.address:
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = 32
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 36
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 'ERC20: approve from the zero add'
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                           len ceil32(return_data.size) + 132
                                                    if not uniswapV2RouterAddress:
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = 32
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 34
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 'ERC20: approve to the zero addre'
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                           len ceil32(return_data.size) + 132
                                                    mem[0] = uniswapV2RouterAddress
                                                    mem[32] = sha3(address(this.address), 1)
                                                    allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * treasuryFee / 100 * stor26 / 100
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = balanceOf[this.address] * treasuryFee / 100 * stor26 / 100
                                                    emit Approval(mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = balanceOf[this.address] * treasuryFee / 100 * stor26 / 100
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 0
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 160
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 581] = 2
                                                    idx = 0
                                                    s = ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 613
                                                    t = ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 353
                                                    while idx < mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 321]:
                                                        mem[s] = mem[t + 12 len 20]
                                                        idx = idx + 1
                                                        s = s + 32
                                                        t = t + 32
                                                        continue 
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = this.address
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 549] = block.timestamp
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + -mem[64] + 673]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _6603 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_6603] = 30
                                                    mem[_6603 + 32] = 'SafeMath: subtraction overflow'
                                                    if eth.balance(this.address) > eth.balance(this.address):
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if eth.balance(this.address) < eth.balance(this.address):
                                                        revert with 0, 17
                                                    call devPoolAddress with:
                                                         gas 2300 wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _6780 = mem[64]
                                                    mem[mem[64]] = 2
                                                    mem[64] = mem[64] + 96
                                                    mem[_6780 + 32 len 64] = call.data[calldata.size len 64]
                                                    if 0 >= mem[_6780]:
                                                        revert with 0, 50
                                                    mem[_6780 + 32] = this.address
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                            gas gas_remaining wei
                                                    mem[_6780 + 96] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _6780 + ceil32(return_data.size) + 96
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                    if 1 >= mem[_6780]:
                                                        revert with 0, 50
                                                    mem[_6780 + 64] = ext_call.return_data[12 len 20]
                                                    if not this.address:
                                                        revert with 0, 'ERC20: approve from the zero address'
                                                    if not uniswapV2RouterAddress:
                                                        revert with 0, 'ERC20: approve to the zero address'
                                                    mem[0] = uniswapV2RouterAddress
                                                    mem[32] = sha3(address(this.address), 1)
                                                    allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * treasuryFee / 100) - (balanceOf[this.address] * treasuryFee / 100 * stor26 / 100)
                                                    emit Approval(((balanceOf[this.address] * treasuryFee / 100) - (balanceOf[this.address] * treasuryFee / 100 * stor26 / 100)), this.address, uniswapV2RouterAddress);
                                                    mem[_6780 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                    mem[_6780 + ceil32(return_data.size) + 100] = (balanceOf[this.address] * treasuryFee / 100) - (balanceOf[this.address] * treasuryFee / 100 * stor26 / 100)
                                                    mem[_6780 + ceil32(return_data.size) + 132] = 0
                                                    mem[_6780 + ceil32(return_data.size) + 164] = 160
                                                    mem[_6780 + ceil32(return_data.size) + 260] = mem[_6780]
                                                    idx = 0
                                                    s = _6780 + ceil32(return_data.size) + 292
                                                    t = _6780 + 32
                                                    while idx < mem[_6780]:
                                                        mem[s] = mem[t + 12 len 20]
                                                        idx = idx + 1
                                                        s = s + 32
                                                        t = t + 32
                                                        continue 
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args (balanceOf[this.address] * treasuryFee / 100) - (balanceOf[this.address] * treasuryFee / 100 * stor26 / 100), 0, 160, address(this.address), block.timestamp, mem[_6780 + ceil32(return_data.size) + 260 len (32 * mem[_6780]) + 32]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[_6780 + ceil32(return_data.size) + 96] = 30
                                                    mem[_6780 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                    if eth.balance(this.address) > eth.balance(this.address):
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if eth.balance(this.address) < eth.balance(this.address):
                                                        revert with 0, 17
                                                    call treasuryPoolAddress with:
                                                         gas 2300 wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not balanceOf[this.address]:
                                                        mem[_6780 + ceil32(return_data.size) + 160] = 26
                                                        mem[_6780 + ceil32(return_data.size) + 192] = 'SafeMath: division by zero'
                                                        mem[_6780 + ceil32(return_data.size) + 224] = 26
                                                        mem[_6780 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                                        mem[_6780 + ceil32(return_data.size) + 288] = 2
                                                        mem[_6780 + ceil32(return_data.size) + 320] = this.address
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                gas gas_remaining wei
                                                        mem[_6780 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[64] = _6780 + (2 * ceil32(return_data.size)) + 384
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                        mem[_6780 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        mem[0] = uniswapV2RouterAddress
                                                        mem[32] = sha3(address(this.address), 1)
                                                        allowance[address(this.address)][stor14].field_0 = 0
                                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                                        mem[_6780 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                        mem[_6780 + (2 * ceil32(return_data.size)) + 388] = 0
                                                        mem[_6780 + (2 * ceil32(return_data.size)) + 420] = 0
                                                        mem[_6780 + (2 * ceil32(return_data.size)) + 452] = 160
                                                        mem[_6780 + (2 * ceil32(return_data.size)) + 548] = 2
                                                        idx = 0
                                                        s = _6780 + (2 * ceil32(return_data.size)) + 580
                                                        t = _6780 + ceil32(return_data.size) + 320
                                                        while idx < mem[_6780 + ceil32(return_data.size) + 288]:
                                                            mem[s] = mem[t + 12 len 20]
                                                            idx = idx + 1
                                                            s = s + 32
                                                            t = t + 32
                                                            continue 
                                                        mem[_6780 + (2 * ceil32(return_data.size)) + 484] = this.address
                                                        mem[_6780 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args 0, 0, 160, address(this.address), block.timestamp, mem[_6780 + (2 * ceil32(return_data.size)) + 548 len (32 * mem[_6780 + ceil32(return_data.size) + 288]) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[_6780 + (2 * ceil32(return_data.size)) + 384] = 30
                                                        mem[_6780 + (2 * ceil32(return_data.size)) + 416] = 'SafeMath: subtraction overflow'
                                                        if eth.balance(this.address) > eth.balance(this.address):
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 448] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 452] = 32
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 484] = 30
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 516] = 'SafeMath: subtraction overflow'
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 546] = 0
                                                            revert with memory
                                                              from _6780 + (2 * ceil32(return_data.size)) + 448
                                                               len ceil32(return_data.size) + 100
                                                        if eth.balance(this.address) < eth.balance(this.address):
                                                            revert with 0, 17
                                                        call distributionPoolAddress with:
                                                             gas 2300 wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[_6780 + (2 * ceil32(return_data.size)) + 448] = 30
                                                        mem[_6780 + (2 * ceil32(return_data.size)) + 480] = 'SafeMath: subtraction overflow'
                                                        if not this.address:
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 516] = 32
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 548] = 37
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer from the zero ad'
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 612] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                            revert with memory
                                                              from _6780 + (2 * ceil32(return_data.size)) + 512
                                                               len ceil32(return_data.size) + 132
                                                        if not distributionPoolAddress:
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 516] = 32
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 548] = 35
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer to the zero addr'
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 612] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                            revert with memory
                                                              from _6780 + (2 * ceil32(return_data.size)) + 512
                                                               len ceil32(return_data.size) + 132
                                                        mem[_6780 + (2 * ceil32(return_data.size)) + 512] = 38
                                                        mem[_6780 + (2 * ceil32(return_data.size)) + 544 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(this.address)]:
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 612] = 32
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 644] = 38
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 676 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6780 + (2 * ceil32(return_data.size)) + 582 len 26]
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 714] = 0
                                                            revert with memory
                                                              from _6780 + (2 * ceil32(return_data.size)) + 608
                                                               len ceil32(return_data.size) + 132
                                                        if balanceOf[address(this.address)] < 0:
                                                            revert with 0, 17
                                                        if balanceOf[stor17] > -1:
                                                            revert with 0, 17
                                                        if balanceOf[stor17] < balanceOf[stor17]:
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 612] = 32
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 644] = 27
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: addition overflow'
                                                            revert with memory
                                                              from _6780 + (2 * ceil32(return_data.size)) + 608
                                                               len ceil32(return_data.size) + 100
                                                        balanceOf[stor17] = balanceOf[stor17]
                                                        emit Transfer(0, this.address, distributionPoolAddress);
                                                        if not balanceOf[this.address]:
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 608] = 26
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 672] = 26
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 736] = 30
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 800] = 2
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _6780 + (4 * ceil32(return_data.size)) + 896
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 900] = 0
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 932] = 0
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 964] = 160
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                            idx = 0
                                                            s = _6780 + (4 * ceil32(return_data.size)) + 1092
                                                            t = _6780 + (2 * ceil32(return_data.size)) + 832
                                                            while idx < mem[_6780 + (2 * ceil32(return_data.size)) + 800]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args 0, 0, 160, address(this.address), block.timestamp, mem[_6780 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_6780 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 896] = 30
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 996] = 30
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 1028] = 'SafeMath: subtraction overflow'
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 1058] = 0
                                                                revert with memory
                                                                  from _6780 + (4 * ceil32(return_data.size)) + 960
                                                                   len (5 * ceil32(return_data.size)) + 100
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            if not this.address:
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 996] = 36
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve from the zero add'
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 1060] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _6780 + (4 * ceil32(return_data.size)) + 960
                                                                   len (5 * ceil32(return_data.size)) + 132
                                                            if not uniswapV2RouterAddress:
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 996] = 34
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve to the zero addre'
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 1060] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _6780 + (4 * ceil32(return_data.size)) + 960
                                                                   len (5 * ceil32(return_data.size)) + 132
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 964] = this.address
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 996] = 0
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 1028] = 0
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 1060] = 0
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 1092] = stor33
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                 gas gas_remaining wei
                                                                args mem[_6780 + (4 * ceil32(return_data.size)) + 964 len (5 * ceil32(return_data.size)) + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 96
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 960] = 0
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 992] = 0
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 1024] = 0
                                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 960 len (7 * ceil32(return_data.size)) + 96],
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 960] = 2
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 992] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _6780 + (6 * ceil32(return_data.size)) + 1056
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                            mem[_6780 + (6 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_6780 + (6 * ceil32(return_data.size)) + 1060] = balanceOf[this.address]
                                                            mem[_6780 + (6 * ceil32(return_data.size)) + 1092] = 0
                                                            mem[_6780 + (6 * ceil32(return_data.size)) + 1124] = 160
                                                            mem[_6780 + (6 * ceil32(return_data.size)) + 1220] = 2
                                                            idx = 0
                                                            s = _6780 + (6 * ceil32(return_data.size)) + 1252
                                                            t = _6780 + (4 * ceil32(return_data.size)) + 992
                                                            while idx < mem[_6780 + (4 * ceil32(return_data.size)) + 960]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_6780 + (6 * ceil32(return_data.size)) + 1188] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_6780 + (6 * ceil32(return_data.size)) + 1220 len (32 * mem[_6780 + (4 * ceil32(return_data.size)) + 960]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            uint8(stor27.field_0) = 0
                                                            if not cd[36]:
                                                                if not msg.sender:
                                                                    revert with 0, 
                                                                                'ERC20: transfer from the zero address',
                                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                if not this.address:
                                                                    revert with 0, 
                                                                                'ERC20: transfer to the zero address',
                                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1056] = 38
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[_6780 + (6 * ceil32(return_data.size)) + 1258] = 0
                                                                    revert with 0, 
                                                                                32,
                                                                                38,
                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1258 len (9 * ceil32(return_data.size)) + 26]
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] > -1:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow', mem[_6780 + (6 * ceil32(return_data.size)) + 1252 len 9 * ceil32(return_data.size)]
                                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                                emit Transfer(0, msg.sender, this.address);
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 
                                                                                'SafeMath: multiplication overflow',
                                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                if not msg.sender:
                                                                    revert with 0, 
                                                                                'ERC20: transfer from the zero address',
                                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                if not this.address:
                                                                    revert with 0, 
                                                                                'ERC20: transfer to the zero address',
                                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1056] = 38
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                    mem[_6780 + (6 * ceil32(return_data.size)) + 1258] = 0
                                                                    revert with 0, 
                                                                                32,
                                                                                38,
                                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1258 len (9 * ceil32(return_data.size)) + 26]
                                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                    revert with 0, 17
                                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow', mem[_6780 + (6 * ceil32(return_data.size)) + 1252 len 9 * ceil32(return_data.size)]
                                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                            if not cd[36]:
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1156] = msg.sender
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1188] = 96
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1252] = mem[128]
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1284 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _6780 + (6 * ceil32(return_data.size)) + 1284] = 0
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, 96, 0, mem[128], mem[_6780 + (6 * ceil32(return_data.size)) + 1284 len (9 * ceil32(return_data.size)) + ceil32(mem[128])]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 
                                                                                'SafeMath: multiplication overflow',
                                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1284 len 9 * ceil32(return_data.size)]
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1156] = msg.sender
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1188] = 96
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1252] = mem[128]
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1284 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _6780 + (6 * ceil32(return_data.size)) + 1284] = 0
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, Array(len=mem[128], data=mem[_6780 + (6 * ceil32(return_data.size)) + 1284 len (9 * ceil32(return_data.size)) + ceil32(mem[128])]), 10^18 * cd[36]
                                                        else:
                                                            if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                                revert with 0, 17
                                                            if not balanceOf[this.address]:
                                                                revert with 0, 18
                                                            if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 612] = 32
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 644] = 33
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: multiplication overflo'
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 708] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _6780 + (2 * ceil32(return_data.size)) + 608
                                                                   len ceil32(return_data.size) + 132
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 608] = 26
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 672] = 26
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 736] = 30
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                            if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 800] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 804] = 32
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 836] = 30
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 868] = 'SafeMath: subtraction overflow'
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 898] = 0
                                                                revert with memory
                                                                  from _6780 + (2 * ceil32(return_data.size)) + 800
                                                                   len ceil32(return_data.size) + 100
                                                            if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                                revert with 0, 17
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 800] = 2
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _6780 + (4 * ceil32(return_data.size)) + 896
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                            allowance[address(this.address)][stor14].field_255 = 0
                                                            emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 900] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 932] = 0
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 964] = 160
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                            idx = 0
                                                            s = _6780 + (4 * ceil32(return_data.size)) + 1092
                                                            t = _6780 + (2 * ceil32(return_data.size)) + 832
                                                            while idx < mem[_6780 + (2 * ceil32(return_data.size)) + 800]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                            mem[_6780 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _6780 + (4 * ceil32(return_data.size)) + (32 * mem[_6780 + (2 * ceil32(return_data.size)) + 800]) + -mem[64] + 1088]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _18136 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_18136] = 30
                                                            mem[_18136 + 32] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                            emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                            mem[mem[64] + 68] = 0
                                                            mem[mem[64] + 100] = 0
                                                            mem[mem[64] + 132] = stor33
                                                            mem[mem[64] + 164] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                 gas gas_remaining wei
                                                                args this.address, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2), 0, 0, stor33, block.timestamp
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            mem[mem[64] + 32] = 0
                                                            mem[mem[64] + 64] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2));
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            _18968 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_18968 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_18968]:
                                                                revert with 0, 50
                                                            mem[_18968 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_18968 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _18968 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_18968]:
                                                                revert with 0, 50
                                                            mem[_18968 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                            mem[_18968 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_18968 + ceil32(return_data.size) + 100] = balanceOf[this.address]
                                                            mem[_18968 + ceil32(return_data.size) + 132] = 0
                                                            mem[_18968 + ceil32(return_data.size) + 164] = 160
                                                            mem[_18968 + ceil32(return_data.size) + 260] = mem[_18968]
                                                            idx = 0
                                                            s = _18968 + ceil32(return_data.size) + 292
                                                            t = _18968 + 32
                                                            while idx < mem[_18968]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_18968 + ceil32(return_data.size) + 260 len (32 * mem[_18968]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            uint8(stor27.field_0) = 0
                                                            if not cd[36]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                mem[_18968 + ceil32(return_data.size) + 96] = 38
                                                                mem[_18968 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] > -1:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                                emit Transfer(0, msg.sender, this.address);
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                mem[_18968 + ceil32(return_data.size) + 96] = 38
                                                                mem[_18968 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                    revert with 0, 17
                                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                            if not cd[36]:
                                                                mem[_18968 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_18968 + ceil32(return_data.size) + 196] = msg.sender
                                                                mem[_18968 + ceil32(return_data.size) + 228] = 96
                                                                mem[_18968 + ceil32(return_data.size) + 292] = mem[128]
                                                                mem[_18968 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _18968 + ceil32(return_data.size) + 324] = 0
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, 96, 0, mem[128], mem[_18968 + ceil32(return_data.size) + 324 len ceil32(mem[128])]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                mem[_18968 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_18968 + ceil32(return_data.size) + 196] = msg.sender
                                                                mem[_18968 + ceil32(return_data.size) + 228] = 96
                                                                mem[_18968 + ceil32(return_data.size) + 292] = mem[128]
                                                                mem[_18968 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _18968 + ceil32(return_data.size) + 324] = 0
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, Array(len=mem[128], data=mem[_18968 + ceil32(return_data.size) + 324 len ceil32(mem[128])]), 10^18 * cd[36]
                                                    else:
                                                        if balanceOf[this.address] and rewardsFee > -1 / balanceOf[this.address]:
                                                            revert with 0, 17
                                                        if not balanceOf[this.address]:
                                                            revert with 0, 18
                                                        if balanceOf[this.address] * rewardsFee / balanceOf[this.address] != rewardsFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        mem[_6780 + ceil32(return_data.size) + 160] = 26
                                                        mem[_6780 + ceil32(return_data.size) + 192] = 'SafeMath: division by zero'
                                                        if not balanceOf[this.address] * rewardsFee / 100:
                                                            mem[_6780 + ceil32(return_data.size) + 224] = 26
                                                            mem[_6780 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                                            mem[_6780 + ceil32(return_data.size) + 288] = 2
                                                            mem[_6780 + ceil32(return_data.size) + 320] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_6780 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _6780 + (2 * ceil32(return_data.size)) + 384
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_6780 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 388] = 0
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 420] = 0
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 452] = 160
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 548] = 2
                                                            idx = 0
                                                            s = _6780 + (2 * ceil32(return_data.size)) + 580
                                                            t = _6780 + ceil32(return_data.size) + 320
                                                            while idx < mem[_6780 + ceil32(return_data.size) + 288]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 484] = this.address
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _6780 + (2 * ceil32(return_data.size)) + (32 * mem[_6780 + ceil32(return_data.size) + 288]) + -mem[64] + 576]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12670 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12670] = 30
                                                            mem[_12670 + 32] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            call distributionPoolAddress with:
                                                                 gas 2300 wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12761 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12761] = 30
                                                            mem[_12761 + 32] = 'SafeMath: subtraction overflow'
                                                            if 0 > balanceOf[this.address] * rewardsFee / 100:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if balanceOf[this.address] * rewardsFee / 100 < 0:
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not distributionPoolAddress:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12871 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12871] = 38
                                                            mem[_12871 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if balanceOf[this.address] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12871 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(this.address)] < balanceOf[this.address] * rewardsFee / 100:
                                                                revert with 0, 17
                                                            balanceOf[address(this.address)] -= balanceOf[this.address] * rewardsFee / 100
                                                            if balanceOf[stor17] > !(balanceOf[this.address] * rewardsFee / 100):
                                                                revert with 0, 17
                                                            if balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) < balanceOf[stor17]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = distributionPoolAddress
                                                            mem[32] = 0
                                                            balanceOf[stor17] += balanceOf[this.address] * rewardsFee / 100
                                                            emit Transfer((balanceOf[this.address] * rewardsFee / 100), this.address, distributionPoolAddress);
                                                            if not balanceOf[this.address]:
                                                                _13199 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_13199] = 26
                                                                mem[_13199 + 32] = 'SafeMath: division by zero'
                                                                _13271 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_13271] = 26
                                                                mem[_13271 + 32] = 'SafeMath: division by zero'
                                                                _13307 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_13307] = 30
                                                                mem[_13307 + 32] = 'SafeMath: subtraction overflow'
                                                                _13346 = mem[64]
                                                                mem[mem[64]] = 2
                                                                mem[64] = mem[64] + 96
                                                                mem[_13346 + 32 len 64] = call.data[calldata.size len 64]
                                                                if 0 >= mem[_13346]:
                                                                    revert with 0, 50
                                                                mem[_13346 + 32] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_13346 + 96] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _13346 + ceil32(return_data.size) + 96
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                if 1 >= mem[_13346]:
                                                                    revert with 0, 50
                                                                mem[_13346 + 64] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = 0
                                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                                mem[_13346 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_13346 + ceil32(return_data.size) + 100] = 0
                                                                mem[_13346 + ceil32(return_data.size) + 132] = 0
                                                                mem[_13346 + ceil32(return_data.size) + 164] = 160
                                                                mem[_13346 + ceil32(return_data.size) + 260] = mem[_13346]
                                                                idx = 0
                                                                s = _13346 + ceil32(return_data.size) + 292
                                                                t = _13346 + 32
                                                                while idx < mem[_13346]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[_13346 + ceil32(return_data.size) + 260 len (32 * mem[_13346]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[_13346 + ceil32(return_data.size) + 96] = 30
                                                                mem[_13346 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                                if eth.balance(this.address) > eth.balance(this.address):
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if eth.balance(this.address) < eth.balance(this.address):
                                                                    revert with 0, 17
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                allowance[address(this.address)][stor14].field_0 = 0
                                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                                mem[_13346 + ceil32(return_data.size) + 228] = 0
                                                                mem[_13346 + ceil32(return_data.size) + 260] = 0
                                                                mem[_13346 + ceil32(return_data.size) + 292] = stor33
                                                                mem[_13346 + ceil32(return_data.size) + 324] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                     gas gas_remaining wei
                                                                    args this.address, 0, 0, 0, stor33, block.timestamp
                                                                mem[_13346 + ceil32(return_data.size) + 160 len 96] = ext_call.return_data[0 len 96]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 96
                                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                    0,
                                                                mem[_13346 + (2 * ceil32(return_data.size)) + 160] = 2
                                                                mem[_13346 + (2 * ceil32(return_data.size)) + 192] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_13346 + (2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _13346 + (4 * ceil32(return_data.size)) + 256
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_13346 + (2 * ceil32(return_data.size)) + 224] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                                mem[_13346 + (4 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_13346 + (4 * ceil32(return_data.size)) + 260] = balanceOf[this.address]
                                                                mem[_13346 + (4 * ceil32(return_data.size)) + 292] = 0
                                                                mem[_13346 + (4 * ceil32(return_data.size)) + 324] = 160
                                                                mem[_13346 + (4 * ceil32(return_data.size)) + 420] = 2
                                                                idx = 0
                                                                s = _13346 + (4 * ceil32(return_data.size)) + 452
                                                                t = _13346 + (2 * ceil32(return_data.size)) + 192
                                                                while idx < mem[_13346 + (2 * ceil32(return_data.size)) + 160]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_13346 + (4 * ceil32(return_data.size)) + 356] = this.address
                                                                mem[_13346 + (4 * ceil32(return_data.size)) + 388] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _13346 + (4 * ceil32(return_data.size)) + (32 * mem[_13346 + (2 * ceil32(return_data.size)) + 160]) + -mem[64] + 448]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                uint8(stor27.field_0) = 0
                                                                if not cd[36]:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _22101 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_22101] = 38
                                                                    mem[_22101 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22101 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] > -1:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                    if not cd[36]:
                                                                        _23295 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _23463 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 0
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_23463) + _23295 + -mem[64] + 128]
                                                                    else:
                                                                        if cd[36] and 10^18 > -1 / cd[36]:
                                                                            revert with 0, 17
                                                                        if not cd[36]:
                                                                            revert with 0, 18
                                                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _23578 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _23683 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 10^18 * cd[36]
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_23683) + _23578 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _22467 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_22467] = 38
                                                                    mem[_22467 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22467 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                    if not cd[36]:
                                                                        _23577 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 0
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(mem[128]) + _23577 + -mem[64] + 128]
                                                                    else:
                                                                        if cd[36] and 10^18 > -1 / cd[36]:
                                                                            revert with 0, 17
                                                                        if not cd[36]:
                                                                            revert with 0, 18
                                                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _23934 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _24003 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 10^18 * cd[36]
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_24003) + _23934 + -mem[64] + 128]
                                                            else:
                                                                if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                                    revert with 0, 17
                                                                if not balanceOf[this.address]:
                                                                    revert with 0, 18
                                                                if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _13253 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_13253] = 26
                                                                mem[_13253 + 32] = 'SafeMath: division by zero'
                                                                _13289 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_13289] = 26
                                                                mem[_13289 + 32] = 'SafeMath: division by zero'
                                                                _13325 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_13325] = 30
                                                                mem[_13325 + 32] = 'SafeMath: subtraction overflow'
                                                                if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                                    revert with 0, 17
                                                                _13506 = mem[64]
                                                                mem[mem[64]] = 2
                                                                mem[64] = mem[64] + 96
                                                                mem[_13506 + 32 len 64] = call.data[calldata.size len 64]
                                                                if 0 >= mem[_13506]:
                                                                    revert with 0, 50
                                                                mem[_13506 + 32] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_13506 + 96] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _13506 + ceil32(return_data.size) + 96
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                if 1 >= mem[_13506]:
                                                                    revert with 0, 50
                                                                mem[_13506 + 64] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                allowance[address(this.address)][stor14].field_255 = 0
                                                                emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                                mem[_13506 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_13506 + ceil32(return_data.size) + 100] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                mem[_13506 + ceil32(return_data.size) + 132] = 0
                                                                mem[_13506 + ceil32(return_data.size) + 164] = 160
                                                                mem[_13506 + ceil32(return_data.size) + 260] = mem[_13506]
                                                                idx = 0
                                                                s = _13506 + ceil32(return_data.size) + 292
                                                                t = _13506 + 32
                                                                while idx < mem[_13506]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_13506 + ceil32(return_data.size) + 260 len (32 * mem[_13506]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[_13506 + ceil32(return_data.size) + 96] = 30
                                                                mem[_13506 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                                if eth.balance(this.address) > eth.balance(this.address):
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if eth.balance(this.address) < eth.balance(this.address):
                                                                    revert with 0, 17
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                                mem[_13506 + ceil32(return_data.size) + 228] = 0
                                                                mem[_13506 + ceil32(return_data.size) + 260] = 0
                                                                mem[_13506 + ceil32(return_data.size) + 292] = stor33
                                                                mem[_13506 + ceil32(return_data.size) + 324] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                     gas gas_remaining wei
                                                                    args this.address, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2), 0, 0, stor33, block.timestamp
                                                                mem[_13506 + ceil32(return_data.size) + 160 len 96] = ext_call.return_data[0 len 96]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 96
                                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2));
                                                                mem[_13506 + (2 * ceil32(return_data.size)) + 160] = 2
                                                                mem[_13506 + (2 * ceil32(return_data.size)) + 192] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_13506 + (2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _13506 + (4 * ceil32(return_data.size)) + 256
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_13506 + (2 * ceil32(return_data.size)) + 224] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                                mem[_13506 + (4 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_13506 + (4 * ceil32(return_data.size)) + 260] = balanceOf[this.address]
                                                                mem[_13506 + (4 * ceil32(return_data.size)) + 292] = 0
                                                                mem[_13506 + (4 * ceil32(return_data.size)) + 324] = 160
                                                                mem[_13506 + (4 * ceil32(return_data.size)) + 420] = 2
                                                                idx = 0
                                                                s = _13506 + (4 * ceil32(return_data.size)) + 452
                                                                t = _13506 + (2 * ceil32(return_data.size)) + 192
                                                                while idx < mem[_13506 + (2 * ceil32(return_data.size)) + 160]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_13506 + (4 * ceil32(return_data.size)) + 356] = this.address
                                                                mem[_13506 + (4 * ceil32(return_data.size)) + 388] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_13506 + (4 * ceil32(return_data.size)) + 420 len (32 * mem[_13506 + (2 * ceil32(return_data.size)) + 160]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                uint8(stor27.field_0) = 0
                                                                if not cd[36]:
                                                                    if not msg.sender:
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 292] = 37
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer from the zero ad'
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 356] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                                        revert with memory
                                                                          from _13506 + (4 * ceil32(return_data.size)) + 256
                                                                           len (5 * ceil32(return_data.size)) + 132
                                                                    if not this.address:
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 292] = 35
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer to the zero addr'
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 356] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                                        revert with memory
                                                                          from _13506 + (4 * ceil32(return_data.size)) + 256
                                                                           len (5 * ceil32(return_data.size)) + 132
                                                                    mem[_13506 + (4 * ceil32(return_data.size)) + 256] = 38
                                                                    mem[_13506 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 388] = 38
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 420 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 458] = 0
                                                                        revert with memory
                                                                          from _13506 + (4 * ceil32(return_data.size)) + 352
                                                                           len (5 * ceil32(return_data.size)) + 132
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] > -1:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 388] = 27
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: addition overflow'
                                                                        revert with memory
                                                                          from _13506 + (4 * ceil32(return_data.size)) + 352
                                                                           len (5 * ceil32(return_data.size)) + 100
                                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 292] = 33
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 324] = 'SafeMath: multiplication overflo'
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 356] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                                        revert with memory
                                                                          from _13506 + (4 * ceil32(return_data.size)) + 256
                                                                           len (5 * ceil32(return_data.size)) + 132
                                                                    if not msg.sender:
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 292] = 37
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer from the zero ad'
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 356] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                                        revert with memory
                                                                          from _13506 + (4 * ceil32(return_data.size)) + 256
                                                                           len (5 * ceil32(return_data.size)) + 132
                                                                    if not this.address:
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 292] = 35
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer to the zero addr'
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 356] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                                        revert with memory
                                                                          from _13506 + (4 * ceil32(return_data.size)) + 256
                                                                           len (5 * ceil32(return_data.size)) + 132
                                                                    mem[_13506 + (4 * ceil32(return_data.size)) + 256] = 38
                                                                    mem[_13506 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 388] = 38
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 420 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 458] = 0
                                                                        revert with memory
                                                                          from _13506 + (4 * ceil32(return_data.size)) + 352
                                                                           len (5 * ceil32(return_data.size)) + 132
                                                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 388] = 27
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: addition overflow'
                                                                        revert with memory
                                                                          from _13506 + (4 * ceil32(return_data.size)) + 352
                                                                           len (5 * ceil32(return_data.size)) + 100
                                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                if not cd[36]:
                                                                    mem[_13506 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_13506 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                                    mem[_13506 + (4 * ceil32(return_data.size)) + 388] = 96
                                                                    mem[_13506 + (4 * ceil32(return_data.size)) + 452] = mem[128]
                                                                    mem[_13506 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _13506 + (4 * ceil32(return_data.size)) + 484] = 0
                                                                    mem[_13506 + (4 * ceil32(return_data.size)) + 420] = 0
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 388] = 33
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: multiplication overflo'
                                                                        mem[_13506 + (4 * ceil32(return_data.size)) + 452] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                                        revert with memory
                                                                          from _13506 + (4 * ceil32(return_data.size)) + 352
                                                                           len (5 * ceil32(return_data.size)) + 132
                                                                    mem[_13506 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_13506 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                                    mem[_13506 + (4 * ceil32(return_data.size)) + 388] = 96
                                                                    mem[_13506 + (4 * ceil32(return_data.size)) + 452] = mem[128]
                                                                    mem[_13506 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _13506 + (4 * ceil32(return_data.size)) + 484] = 0
                                                                    mem[_13506 + (4 * ceil32(return_data.size)) + 420] = 10^18 * cd[36]
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args mem[_13506 + (4 * ceil32(return_data.size)) + 356 len ceil32(mem[128]) + (5 * ceil32(return_data.size)) + 128]
                                                        else:
                                                            if balanceOf[this.address] * rewardsFee / 100 and stor25 > -1 / balanceOf[this.address] * rewardsFee / 100:
                                                                revert with 0, 17
                                                            if not balanceOf[this.address] * rewardsFee / 100:
                                                                revert with 0, 18
                                                            if balanceOf[this.address] * rewardsFee / 100 * stor25 / balanceOf[this.address] * rewardsFee / 100 != stor25:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            mem[_6780 + ceil32(return_data.size) + 224] = 26
                                                            mem[_6780 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                                            mem[_6780 + ceil32(return_data.size) + 288] = 2
                                                            mem[_6780 + ceil32(return_data.size) + 320] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_6780 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _6780 + (2 * ceil32(return_data.size)) + 384
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_6780 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * rewardsFee / 100 * stor25 / 100
                                                            emit Approval((balanceOf[this.address] * rewardsFee / 100 * stor25 / 100), this.address, uniswapV2RouterAddress);
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 388] = balanceOf[this.address] * rewardsFee / 100 * stor25 / 100
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 420] = 0
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 452] = 160
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 548] = 2
                                                            idx = 0
                                                            s = _6780 + (2 * ceil32(return_data.size)) + 580
                                                            t = _6780 + ceil32(return_data.size) + 320
                                                            while idx < mem[_6780 + ceil32(return_data.size) + 288]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 484] = this.address
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args balanceOf[this.address] * rewardsFee / 100 * stor25 / 100, 0, 160, address(this.address), block.timestamp, mem[_6780 + (2 * ceil32(return_data.size)) + 548 len (32 * mem[_6780 + ceil32(return_data.size) + 288]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 384] = 30
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 416] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 448] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 452] = 32
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 484] = 30
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 516] = 'SafeMath: subtraction overflow'
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 546] = 0
                                                                revert with memory
                                                                  from _6780 + (2 * ceil32(return_data.size)) + 448
                                                                   len ceil32(return_data.size) + 100
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            call distributionPoolAddress with:
                                                                 gas 2300 wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 448] = 30
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 480] = 'SafeMath: subtraction overflow'
                                                            if balanceOf[this.address] * rewardsFee / 100 * stor25 / 100 > balanceOf[this.address] * rewardsFee / 100:
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 516] = 32
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 548] = 30
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 580] = 'SafeMath: subtraction overflow'
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 610] = 0
                                                                revert with memory
                                                                  from _6780 + (2 * ceil32(return_data.size)) + 512
                                                                   len ceil32(return_data.size) + 100
                                                            if balanceOf[this.address] * rewardsFee / 100 < balanceOf[this.address] * rewardsFee / 100 * stor25 / 100:
                                                                revert with 0, 17
                                                            if not this.address:
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 516] = 32
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 548] = 37
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer from the zero ad'
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 612] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _6780 + (2 * ceil32(return_data.size)) + 512
                                                                   len ceil32(return_data.size) + 132
                                                            if not distributionPoolAddress:
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 516] = 32
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 548] = 35
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer to the zero addr'
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 612] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                                revert with memory
                                                                  from _6780 + (2 * ceil32(return_data.size)) + 512
                                                                   len ceil32(return_data.size) + 132
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 512] = 38
                                                            mem[_6780 + (2 * ceil32(return_data.size)) + 544 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100) > balanceOf[address(this.address)]:
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 612] = 32
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 644] = 38
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 676 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6780 + (2 * ceil32(return_data.size)) + 582 len 26]
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 714] = 0
                                                                revert with memory
                                                                  from _6780 + (2 * ceil32(return_data.size)) + 608
                                                                   len ceil32(return_data.size) + 132
                                                            if balanceOf[address(this.address)] < (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[this.address] * rewardsFee / 100) + (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)
                                                            if balanceOf[stor17] > !((balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100) < balanceOf[stor17]:
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 612] = 32
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 644] = 27
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: addition overflow'
                                                                revert with memory
                                                                  from _6780 + (2 * ceil32(return_data.size)) + 608
                                                                   len ceil32(return_data.size) + 100
                                                            balanceOf[stor17] = balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)
                                                            emit Transfer(((balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)), this.address, distributionPoolAddress);
                                                            if not balanceOf[this.address]:
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 608] = 26
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 672] = 26
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 736] = 30
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 800] = 2
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _6780 + (4 * ceil32(return_data.size)) + 896
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = 0
                                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 900] = 0
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 932] = 0
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 964] = 160
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                                idx = 0
                                                                s = _6780 + (4 * ceil32(return_data.size)) + 1092
                                                                t = _6780 + (2 * ceil32(return_data.size)) + 832
                                                                while idx < mem[_6780 + (2 * ceil32(return_data.size)) + 800]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[_6780 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_6780 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 896] = 30
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                                                if eth.balance(this.address) > eth.balance(this.address):
                                                                    mem[_6780 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6780 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                    mem[_6780 + (4 * ceil32(return_data.size)) + 996] = 30
                                                                    mem[_6780 + (4 * ceil32(return_data.size)) + 1028] = 'SafeMath: subtraction overflow'
                                                                    mem[_6780 + (4 * ceil32(return_data.size)) + 1058] = 0
                                                                    revert with memory
                                                                      from _6780 + (4 * ceil32(return_data.size)) + 960
                                                                       len (5 * ceil32(return_data.size)) + 100
                                                                if eth.balance(this.address) < eth.balance(this.address):
                                                                    revert with 0, 17
                                                                if not this.address:
                                                                    mem[_6780 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6780 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                    mem[_6780 + (4 * ceil32(return_data.size)) + 996] = 36
                                                                    mem[_6780 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve from the zero add'
                                                                    mem[_6780 + (4 * ceil32(return_data.size)) + 1060] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _6780 + (4 * ceil32(return_data.size)) + 960
                                                                       len (5 * ceil32(return_data.size)) + 132
                                                                if not uniswapV2RouterAddress:
                                                                    mem[_6780 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6780 + (4 * ceil32(return_data.size)) + 964] = 32
                                                                    mem[_6780 + (4 * ceil32(return_data.size)) + 996] = 34
                                                                    mem[_6780 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve to the zero addre'
                                                                    mem[_6780 + (4 * ceil32(return_data.size)) + 1060] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _6780 + (4 * ceil32(return_data.size)) + 960
                                                                       len (5 * ceil32(return_data.size)) + 132
                                                                allowance[address(this.address)][stor14].field_0 = 0
                                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 964] = this.address
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 996] = 0
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 1028] = 0
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 1060] = 0
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 1092] = stor33
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                     gas gas_remaining wei
                                                                    args mem[_6780 + (4 * ceil32(return_data.size)) + 964 len (5 * ceil32(return_data.size)) + 192]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 96
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 960] = 0
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 992] = 0
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 1024] = 0
                                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                    mem[_6780 + (4 * ceil32(return_data.size)) + 960 len (7 * ceil32(return_data.size)) + 96],
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 960] = 2
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 992] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _6780 + (6 * ceil32(return_data.size)) + 1056
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1060] = balanceOf[this.address]
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1092] = 0
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1124] = 160
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1220] = 2
                                                                idx = 0
                                                                s = _6780 + (6 * ceil32(return_data.size)) + 1252
                                                                t = _6780 + (4 * ceil32(return_data.size)) + 992
                                                                while idx < mem[_6780 + (4 * ceil32(return_data.size)) + 960]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1156] = this.address
                                                                mem[_6780 + (6 * ceil32(return_data.size)) + 1188] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _6780 + (6 * ceil32(return_data.size)) + (32 * mem[_6780 + (4 * ceil32(return_data.size)) + 960]) + -mem[64] + 1248]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                uint8(stor27.field_0) = 0
                                                                if not cd[36]:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _22095 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_22095] = 38
                                                                    mem[_22095 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22095 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] > -1:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                    if not cd[36]:
                                                                        _23287 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _23461 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 0
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_23461) + _23287 + -mem[64] + 128]
                                                                    else:
                                                                        if cd[36] and 10^18 > -1 / cd[36]:
                                                                            revert with 0, 17
                                                                        if not cd[36]:
                                                                            revert with 0, 18
                                                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _23572 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 10^18 * cd[36]
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(mem[128]) + _23572 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _22457 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_22457] = 38
                                                                    mem[_22457 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22457 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                    if not cd[36]:
                                                                        _23571 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _23678 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 0
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_23678) + _23571 + -mem[64] + 128]
                                                                    else:
                                                                        if cd[36] and 10^18 > -1 / cd[36]:
                                                                            revert with 0, 17
                                                                        if not cd[36]:
                                                                            revert with 0, 18
                                                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _23930 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 10^18 * cd[36]
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(mem[128]) + _23930 + -mem[64] + 128]
                                                            else:
                                                                if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                                    revert with 0, 17
                                                                if not balanceOf[this.address]:
                                                                    revert with 0, 18
                                                                if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                                    mem[_6780 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6780 + (2 * ceil32(return_data.size)) + 612] = 32
                                                                    mem[_6780 + (2 * ceil32(return_data.size)) + 644] = 33
                                                                    mem[_6780 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: multiplication overflo'
                                                                    mem[_6780 + (2 * ceil32(return_data.size)) + 708] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _6780 + (2 * ceil32(return_data.size)) + 608
                                                                       len ceil32(return_data.size) + 132
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 608] = 26
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 672] = 26
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 736] = 30
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                                if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                                    mem[_6780 + (2 * ceil32(return_data.size)) + 800] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_6780 + (2 * ceil32(return_data.size)) + 804] = 32
                                                                    mem[_6780 + (2 * ceil32(return_data.size)) + 836] = 30
                                                                    mem[_6780 + (2 * ceil32(return_data.size)) + 868] = 'SafeMath: subtraction overflow'
                                                                    mem[_6780 + (2 * ceil32(return_data.size)) + 898] = 0
                                                                    revert with memory
                                                                      from _6780 + (2 * ceil32(return_data.size)) + 800
                                                                       len ceil32(return_data.size) + 100
                                                                if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                                    revert with 0, 17
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 800] = 2
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _6780 + (4 * ceil32(return_data.size)) + 896
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_6780 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                allowance[address(this.address)][stor14].field_255 = 0
                                                                emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 900] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 932] = 0
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 964] = 160
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                                idx = 0
                                                                s = _6780 + (4 * ceil32(return_data.size)) + 1092
                                                                t = _6780 + (2 * ceil32(return_data.size)) + 832
                                                                while idx < mem[_6780 + (2 * ceil32(return_data.size)) + 800]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                                mem[_6780 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _6780 + (4 * ceil32(return_data.size)) + (32 * mem[_6780 + (2 * ceil32(return_data.size)) + 800]) + -mem[64] + 1088]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _18132 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_18132] = 30
                                                                mem[_18132 + 32] = 'SafeMath: subtraction overflow'
                                                                if eth.balance(this.address) > eth.balance(this.address):
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if eth.balance(this.address) < eth.balance(this.address):
                                                                    revert with 0, 17
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                                mem[mem[64] + 68] = 0
                                                                mem[mem[64] + 100] = 0
                                                                mem[mem[64] + 132] = stor33
                                                                mem[mem[64] + 164] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                     gas gas_remaining wei
                                                                    args this.address, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2), 0, 0, stor33, block.timestamp
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                mem[mem[64] + 32] = 0
                                                                mem[mem[64] + 64] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2));
                                                                mem[0] = this.address
                                                                mem[32] = 0
                                                                _18960 = mem[64]
                                                                mem[mem[64]] = 2
                                                                mem[64] = mem[64] + 96
                                                                mem[_18960 + 32 len 64] = call.data[calldata.size len 64]
                                                                if 0 >= mem[_18960]:
                                                                    revert with 0, 50
                                                                mem[_18960 + 32] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_18960 + 96] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _18960 + ceil32(return_data.size) + 96
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                if 1 >= mem[_18960]:
                                                                    revert with 0, 50
                                                                mem[_18960 + 64] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                                mem[_18960 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_18960 + ceil32(return_data.size) + 100] = balanceOf[this.address]
                                                                mem[_18960 + ceil32(return_data.size) + 132] = 0
                                                                mem[_18960 + ceil32(return_data.size) + 164] = 160
                                                                mem[_18960 + ceil32(return_data.size) + 260] = mem[_18960]
                                                                idx = 0
                                                                s = _18960 + ceil32(return_data.size) + 292
                                                                t = _18960 + 32
                                                                while idx < mem[_18960]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_18960 + ceil32(return_data.size) + 196] = this.address
                                                                mem[_18960 + ceil32(return_data.size) + 228] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _18960 + ceil32(return_data.size) + (32 * mem[_18960]) + -mem[64] + 288]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                uint8(stor27.field_0) = 0
                                                                if not cd[36]:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _22092 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_22092] = 38
                                                                    mem[_22092 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22092 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] > -1:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                    if not cd[36]:
                                                                        _23283 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _23460 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 0
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_23460) + _23283 + -mem[64] + 128]
                                                                    else:
                                                                        if cd[36] and 10^18 > -1 / cd[36]:
                                                                            revert with 0, 17
                                                                        if not cd[36]:
                                                                            revert with 0, 18
                                                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _23569 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _23677 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 10^18 * cd[36]
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_23677) + _23569 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _22452 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_22452] = 38
                                                                    mem[_22452 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22452 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                    if not cd[36]:
                                                                        _23568 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _23676 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 0
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_23676) + _23568 + -mem[64] + 128]
                                                                    else:
                                                                        if cd[36] and 10^18 > -1 / cd[36]:
                                                                            revert with 0, 17
                                                                        if not cd[36]:
                                                                            revert with 0, 18
                                                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _23928 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _24000 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 10^18 * cd[36]
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_24000) + _23928 + -mem[64] + 128]
                                                else:
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 193] = 26
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 225] = 'SafeMath: division by zero'
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 257] = 30
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 289] = 'SafeMath: subtraction overflow'
                                                    if 0 > balanceOf[this.address] * treasuryFee / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if balanceOf[this.address] * treasuryFee / 100 < 0:
                                                        revert with 0, 17
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 321] = 2
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 353] = this.address
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                            gas gas_remaining wei
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 417] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                    mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 385] = ext_call.return_data[12 len 20]
                                                    if not this.address:
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = 32
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 36
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 'ERC20: approve from the zero add'
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                           len ceil32(return_data.size) + 132
                                                    if not uniswapV2RouterAddress:
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = 32
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 34
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 'ERC20: approve to the zero addre'
                                                        mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417
                                                           len ceil32(return_data.size) + 132
                                                    mem[0] = uniswapV2RouterAddress
                                                    mem[32] = sha3(address(this.address), 1)
                                                    allowance[address(this.address)][stor14].field_0 = 0
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0
                                                    emit Approval(mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 417] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 421] = 0
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 453] = 0
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 485] = 160
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 581] = 2
                                                    idx = 0
                                                    s = ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 613
                                                    t = ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 353
                                                    while idx < mem[ceil32(ceil32(('cd', 4).length)) + ceil32(return_data.size) + 321]:
                                                        mem[s] = mem[t + 12 len 20]
                                                        idx = idx + 1
                                                        s = s + 32
                                                        t = t + 32
                                                        continue 
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 517] = this.address
                                                    mem[ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + 549] = block.timestamp
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len ceil32(ceil32(('cd', 4).length)) + (2 * ceil32(return_data.size)) + -mem[64] + 673]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _6604 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_6604] = 30
                                                    mem[_6604 + 32] = 'SafeMath: subtraction overflow'
                                                    if eth.balance(this.address) > eth.balance(this.address):
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if eth.balance(this.address) < eth.balance(this.address):
                                                        revert with 0, 17
                                                    call devPoolAddress with:
                                                         gas 2300 wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _6784 = mem[64]
                                                    mem[mem[64]] = 2
                                                    mem[64] = mem[64] + 96
                                                    mem[_6784 + 32 len 64] = call.data[calldata.size len 64]
                                                    if 0 >= mem[_6784]:
                                                        revert with 0, 50
                                                    mem[_6784 + 32] = this.address
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                            gas gas_remaining wei
                                                    mem[_6784 + 96] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _6784 + ceil32(return_data.size) + 96
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                    if 1 >= mem[_6784]:
                                                        revert with 0, 50
                                                    mem[_6784 + 64] = ext_call.return_data[12 len 20]
                                                    if not this.address:
                                                        revert with 0, 'ERC20: approve from the zero address'
                                                    if not uniswapV2RouterAddress:
                                                        revert with 0, 'ERC20: approve to the zero address'
                                                    mem[0] = uniswapV2RouterAddress
                                                    mem[32] = sha3(address(this.address), 1)
                                                    allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * treasuryFee / 100
                                                    emit Approval((balanceOf[this.address] * treasuryFee / 100), this.address, uniswapV2RouterAddress);
                                                    mem[_6784 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                    mem[_6784 + ceil32(return_data.size) + 100] = balanceOf[this.address] * treasuryFee / 100
                                                    mem[_6784 + ceil32(return_data.size) + 132] = 0
                                                    mem[_6784 + ceil32(return_data.size) + 164] = 160
                                                    mem[_6784 + ceil32(return_data.size) + 260] = mem[_6784]
                                                    idx = 0
                                                    s = _6784 + ceil32(return_data.size) + 292
                                                    t = _6784 + 32
                                                    while idx < mem[_6784]:
                                                        mem[s] = mem[t + 12 len 20]
                                                        idx = idx + 1
                                                        s = s + 32
                                                        t = t + 32
                                                        continue 
                                                    mem[_6784 + ceil32(return_data.size) + 196] = this.address
                                                    mem[_6784 + ceil32(return_data.size) + 228] = block.timestamp
                                                    require ext_code.size(uniswapV2RouterAddress)
                                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len _6784 + ceil32(return_data.size) + (32 * mem[_6784]) + -mem[64] + 288]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _9315 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_9315] = 30
                                                    mem[_9315 + 32] = 'SafeMath: subtraction overflow'
                                                    if eth.balance(this.address) > eth.balance(this.address):
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if eth.balance(this.address) < eth.balance(this.address):
                                                        revert with 0, 17
                                                    call treasuryPoolAddress with:
                                                         gas 2300 wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not balanceOf[this.address]:
                                                        _9367 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_9367] = 26
                                                        mem[_9367 + 32] = 'SafeMath: division by zero'
                                                        _9391 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_9391] = 26
                                                        mem[_9391 + 32] = 'SafeMath: division by zero'
                                                        _9404 = mem[64]
                                                        mem[mem[64]] = 2
                                                        mem[64] = mem[64] + 96
                                                        mem[_9404 + 32 len 64] = call.data[calldata.size len 64]
                                                        if 0 >= mem[_9404]:
                                                            revert with 0, 50
                                                        mem[_9404 + 32] = this.address
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                gas gas_remaining wei
                                                        mem[_9404 + 96] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        mem[64] = _9404 + ceil32(return_data.size) + 96
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                        if 1 >= mem[_9404]:
                                                            revert with 0, 50
                                                        mem[_9404 + 64] = ext_call.return_data[12 len 20]
                                                        if not this.address:
                                                            revert with 0, 'ERC20: approve from the zero address'
                                                        if not uniswapV2RouterAddress:
                                                            revert with 0, 'ERC20: approve to the zero address'
                                                        mem[0] = uniswapV2RouterAddress
                                                        mem[32] = sha3(address(this.address), 1)
                                                        allowance[address(this.address)][stor14].field_0 = 0
                                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                                        mem[_9404 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                        mem[_9404 + ceil32(return_data.size) + 100] = 0
                                                        mem[_9404 + ceil32(return_data.size) + 132] = 0
                                                        mem[_9404 + ceil32(return_data.size) + 164] = 160
                                                        mem[_9404 + ceil32(return_data.size) + 260] = mem[_9404]
                                                        idx = 0
                                                        s = _9404 + ceil32(return_data.size) + 292
                                                        t = _9404 + 32
                                                        while idx < mem[_9404]:
                                                            mem[s] = mem[t + 12 len 20]
                                                            idx = idx + 1
                                                            s = s + 32
                                                            t = t + 32
                                                            continue 
                                                        mem[_9404 + ceil32(return_data.size) + 196] = this.address
                                                        mem[_9404 + ceil32(return_data.size) + 228] = block.timestamp
                                                        require ext_code.size(uniswapV2RouterAddress)
                                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _9404 + ceil32(return_data.size) + (32 * mem[_9404]) + -mem[64] + 288]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12674 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_12674] = 30
                                                        mem[_12674 + 32] = 'SafeMath: subtraction overflow'
                                                        if eth.balance(this.address) > eth.balance(this.address):
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if eth.balance(this.address) < eth.balance(this.address):
                                                            revert with 0, 17
                                                        call distributionPoolAddress with:
                                                             gas 2300 wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _12765 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_12765] = 30
                                                        mem[_12765 + 32] = 'SafeMath: subtraction overflow'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not distributionPoolAddress:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12883 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12883] = 38
                                                        mem[_12883 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(this.address)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12883 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(this.address)] < 0:
                                                            revert with 0, 17
                                                        if balanceOf[stor17] > -1:
                                                            revert with 0, 17
                                                        if balanceOf[stor17] < balanceOf[stor17]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = distributionPoolAddress
                                                        mem[32] = 0
                                                        balanceOf[stor17] = balanceOf[stor17]
                                                        emit Transfer(0, this.address, distributionPoolAddress);
                                                        if not balanceOf[this.address]:
                                                            _13203 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13203] = 26
                                                            mem[_13203 + 32] = 'SafeMath: division by zero'
                                                            _13275 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13275] = 26
                                                            mem[_13275 + 32] = 'SafeMath: division by zero'
                                                            _13311 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13311] = 30
                                                            mem[_13311 + 32] = 'SafeMath: subtraction overflow'
                                                            _13358 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_13358 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_13358]:
                                                                revert with 0, 50
                                                            mem[_13358 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_13358 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _13358 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_13358]:
                                                                revert with 0, 50
                                                            mem[_13358 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[_13358 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_13358 + ceil32(return_data.size) + 100] = 0
                                                            mem[_13358 + ceil32(return_data.size) + 132] = 0
                                                            mem[_13358 + ceil32(return_data.size) + 164] = 160
                                                            mem[_13358 + ceil32(return_data.size) + 260] = mem[_13358]
                                                            idx = 0
                                                            s = _13358 + ceil32(return_data.size) + 292
                                                            t = _13358 + 32
                                                            while idx < mem[_13358]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args 0, 0, 160, address(this.address), block.timestamp, mem[_13358 + ceil32(return_data.size) + 260 len (32 * mem[_13358]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_13358 + ceil32(return_data.size) + 96] = 30
                                                            mem[_13358 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[_13358 + ceil32(return_data.size) + 228] = 0
                                                            mem[_13358 + ceil32(return_data.size) + 260] = 0
                                                            mem[_13358 + ceil32(return_data.size) + 292] = stor33
                                                            mem[_13358 + ceil32(return_data.size) + 324] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                 gas gas_remaining wei
                                                                args this.address, 0, 0, 0, stor33, block.timestamp
                                                            mem[_13358 + ceil32(return_data.size) + 160 len 96] = ext_call.return_data[0 len 96]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 96
                                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                0,
                                                            mem[_13358 + (2 * ceil32(return_data.size)) + 160] = 2
                                                            mem[_13358 + (2 * ceil32(return_data.size)) + 192] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_13358 + (2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _13358 + (4 * ceil32(return_data.size)) + 256
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_13358 + (2 * ceil32(return_data.size)) + 224] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                            mem[_13358 + (4 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_13358 + (4 * ceil32(return_data.size)) + 260] = balanceOf[this.address]
                                                            mem[_13358 + (4 * ceil32(return_data.size)) + 292] = 0
                                                            mem[_13358 + (4 * ceil32(return_data.size)) + 324] = 160
                                                            mem[_13358 + (4 * ceil32(return_data.size)) + 420] = 2
                                                            idx = 0
                                                            s = _13358 + (4 * ceil32(return_data.size)) + 452
                                                            t = _13358 + (2 * ceil32(return_data.size)) + 192
                                                            while idx < mem[_13358 + (2 * ceil32(return_data.size)) + 160]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_13358 + (4 * ceil32(return_data.size)) + 356] = this.address
                                                            mem[_13358 + (4 * ceil32(return_data.size)) + 388] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13358 + (4 * ceil32(return_data.size)) + (32 * mem[_13358 + (2 * ceil32(return_data.size)) + 160]) + -mem[64] + 448]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            uint8(stor27.field_0) = 0
                                                            if not cd[36]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _22125 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_22125] = 38
                                                                mem[_22125 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22125 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] > -1:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not cd[36]:
                                                                    _23327 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 0
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(mem[128]) + _23327 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _23602 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    _23699 = mem[128]
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 10^18 * cd[36]
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(_23699) + _23602 + -mem[64] + 128]
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _22507 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_22507] = 38
                                                                mem[_22507 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22507 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                    revert with 0, 17
                                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                if not cd[36]:
                                                                    _23601 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 0
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(mem[128]) + _23601 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _23950 = mem[64]
                                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = msg.sender
                                                                    mem[mem[64] + 36] = 96
                                                                    _24011 = mem[128]
                                                                    mem[mem[64] + 100] = mem[128]
                                                                    mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) <= mem[128]:
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                    else:
                                                                        mem[mem[128] + mem[64] + 132] = 0
                                                                        mem[mem[64] + 68] = 10^18 * cd[36]
                                                                        require ext_code.size(nodeRewardManagerAddress)
                                                                        call nodeRewardManagerAddress.0x90219732 with:
                                                                             gas gas_remaining wei
                                                                            args mem[mem[64] + 4 len ceil32(_24011) + _23950 + -mem[64] + 128]
                                                        else:
                                                            if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                                revert with 0, 17
                                                            if not balanceOf[this.address]:
                                                                revert with 0, 18
                                                            if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _13257 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13257] = 26
                                                            mem[_13257 + 32] = 'SafeMath: division by zero'
                                                            _13293 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13293] = 26
                                                            mem[_13293 + 32] = 'SafeMath: division by zero'
                                                            _13329 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_13329] = 30
                                                            mem[_13329 + 32] = 'SafeMath: subtraction overflow'
                                                            if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                                revert with 0, 17
                                                            _13514 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_13514 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_13514]:
                                                                revert with 0, 50
                                                            mem[_13514 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_13514 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _13514 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_13514]:
                                                                revert with 0, 50
                                                            mem[_13514 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                            allowance[address(this.address)][stor14].field_255 = 0
                                                            emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                            mem[_13514 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_13514 + ceil32(return_data.size) + 100] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                            mem[_13514 + ceil32(return_data.size) + 132] = 0
                                                            mem[_13514 + ceil32(return_data.size) + 164] = 160
                                                            mem[_13514 + ceil32(return_data.size) + 260] = mem[_13514]
                                                            idx = 0
                                                            s = _13514 + ceil32(return_data.size) + 292
                                                            t = _13514 + 32
                                                            while idx < mem[_13514]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_13514 + ceil32(return_data.size) + 260 len (32 * mem[_13514]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_13514 + ceil32(return_data.size) + 96] = 30
                                                            mem[_13514 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                            emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                            mem[_13514 + ceil32(return_data.size) + 228] = 0
                                                            mem[_13514 + ceil32(return_data.size) + 260] = 0
                                                            mem[_13514 + ceil32(return_data.size) + 292] = stor33
                                                            mem[_13514 + ceil32(return_data.size) + 324] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                 gas gas_remaining wei
                                                                args this.address, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2), 0, 0, stor33, block.timestamp
                                                            mem[_13514 + ceil32(return_data.size) + 160 len 96] = ext_call.return_data[0 len 96]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 96
                                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2));
                                                            mem[_13514 + (2 * ceil32(return_data.size)) + 160] = 2
                                                            mem[_13514 + (2 * ceil32(return_data.size)) + 192] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_13514 + (2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _13514 + (4 * ceil32(return_data.size)) + 256
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            mem[_13514 + (2 * ceil32(return_data.size)) + 224] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                            mem[_13514 + (4 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_13514 + (4 * ceil32(return_data.size)) + 260] = balanceOf[this.address]
                                                            mem[_13514 + (4 * ceil32(return_data.size)) + 292] = 0
                                                            mem[_13514 + (4 * ceil32(return_data.size)) + 324] = 160
                                                            mem[_13514 + (4 * ceil32(return_data.size)) + 420] = 2
                                                            idx = 0
                                                            s = _13514 + (4 * ceil32(return_data.size)) + 452
                                                            t = _13514 + (2 * ceil32(return_data.size)) + 192
                                                            while idx < mem[_13514 + (2 * ceil32(return_data.size)) + 160]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_13514 + (4 * ceil32(return_data.size)) + 356] = this.address
                                                            mem[_13514 + (4 * ceil32(return_data.size)) + 388] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_13514 + (4 * ceil32(return_data.size)) + 420 len (32 * mem[_13514 + (2 * ceil32(return_data.size)) + 160]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            uint8(stor27.field_0) = 0
                                                            if not cd[36]:
                                                                if not msg.sender:
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 292] = 37
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer from the zero ad'
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 356] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _13514 + (4 * ceil32(return_data.size)) + 256
                                                                       len (5 * ceil32(return_data.size)) + 132
                                                                if not this.address:
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 292] = 35
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer to the zero addr'
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 356] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _13514 + (4 * ceil32(return_data.size)) + 256
                                                                       len (5 * ceil32(return_data.size)) + 132
                                                                mem[_13514 + (4 * ceil32(return_data.size)) + 256] = 38
                                                                mem[_13514 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 388] = 38
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 420 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 458] = 0
                                                                    revert with memory
                                                                      from _13514 + (4 * ceil32(return_data.size)) + 352
                                                                       len (5 * ceil32(return_data.size)) + 132
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] > -1:
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 388] = 27
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: addition overflow'
                                                                    revert with memory
                                                                      from _13514 + (4 * ceil32(return_data.size)) + 352
                                                                       len (5 * ceil32(return_data.size)) + 100
                                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                                emit Transfer(0, msg.sender, this.address);
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 292] = 33
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 324] = 'SafeMath: multiplication overflo'
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 356] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _13514 + (4 * ceil32(return_data.size)) + 256
                                                                       len (5 * ceil32(return_data.size)) + 132
                                                                if not msg.sender:
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 292] = 37
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer from the zero ad'
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 356] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _13514 + (4 * ceil32(return_data.size)) + 256
                                                                       len (5 * ceil32(return_data.size)) + 132
                                                                if not this.address:
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 292] = 35
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer to the zero addr'
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 356] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _13514 + (4 * ceil32(return_data.size)) + 256
                                                                       len (5 * ceil32(return_data.size)) + 132
                                                                mem[_13514 + (4 * ceil32(return_data.size)) + 256] = 38
                                                                mem[_13514 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 388] = 38
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 420 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 458] = 0
                                                                    revert with memory
                                                                      from _13514 + (4 * ceil32(return_data.size)) + 352
                                                                       len (5 * ceil32(return_data.size)) + 132
                                                                if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                    revert with 0, 17
                                                                balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                    revert with 0, 17
                                                                if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 388] = 27
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: addition overflow'
                                                                    revert with memory
                                                                      from _13514 + (4 * ceil32(return_data.size)) + 352
                                                                       len (5 * ceil32(return_data.size)) + 100
                                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                            if not cd[36]:
                                                                mem[_13514 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_13514 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                                mem[_13514 + (4 * ceil32(return_data.size)) + 388] = 96
                                                                mem[_13514 + (4 * ceil32(return_data.size)) + 452] = mem[128]
                                                                mem[_13514 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _13514 + (4 * ceil32(return_data.size)) + 484] = 0
                                                                mem[_13514 + (4 * ceil32(return_data.size)) + 420] = 0
                                                            else:
                                                                if cd[36] and 10^18 > -1 / cd[36]:
                                                                    revert with 0, 17
                                                                if not cd[36]:
                                                                    revert with 0, 18
                                                                if 10^18 * cd[36] / cd[36] != 10^18:
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 388] = 33
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: multiplication overflo'
                                                                    mem[_13514 + (4 * ceil32(return_data.size)) + 452] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                                    revert with memory
                                                                      from _13514 + (4 * ceil32(return_data.size)) + 352
                                                                       len (5 * ceil32(return_data.size)) + 132
                                                                mem[_13514 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                mem[_13514 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                                mem[_13514 + (4 * ceil32(return_data.size)) + 388] = 96
                                                                mem[_13514 + (4 * ceil32(return_data.size)) + 452] = mem[128]
                                                                mem[_13514 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                if ceil32(mem[128]) > mem[128]:
                                                                    mem[mem[128] + _13514 + (4 * ceil32(return_data.size)) + 484] = 0
                                                                mem[_13514 + (4 * ceil32(return_data.size)) + 420] = 10^18 * cd[36]
                                                            require ext_code.size(nodeRewardManagerAddress)
                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                 gas gas_remaining wei
                                                                args mem[_13514 + (4 * ceil32(return_data.size)) + 356 len ceil32(mem[128]) + (5 * ceil32(return_data.size)) + 128]
                                                    else:
                                                        if balanceOf[this.address] and rewardsFee > -1 / balanceOf[this.address]:
                                                            revert with 0, 17
                                                        if not balanceOf[this.address]:
                                                            revert with 0, 18
                                                        if balanceOf[this.address] * rewardsFee / balanceOf[this.address] != rewardsFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _9385 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_9385] = 26
                                                        mem[_9385 + 32] = 'SafeMath: division by zero'
                                                        if not balanceOf[this.address] * rewardsFee / 100:
                                                            _9397 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_9397] = 26
                                                            mem[_9397 + 32] = 'SafeMath: division by zero'
                                                            _9458 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_9458 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_9458]:
                                                                revert with 0, 50
                                                            mem[_9458 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_9458 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _9458 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_9458]:
                                                                revert with 0, 50
                                                            mem[_9458 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = 0
                                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                                            mem[_9458 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_9458 + ceil32(return_data.size) + 100] = 0
                                                            mem[_9458 + ceil32(return_data.size) + 132] = 0
                                                            mem[_9458 + ceil32(return_data.size) + 164] = 160
                                                            mem[_9458 + ceil32(return_data.size) + 260] = mem[_9458]
                                                            idx = 0
                                                            s = _9458 + ceil32(return_data.size) + 292
                                                            t = _9458 + 32
                                                            while idx < mem[_9458]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                 gas gas_remaining wei
                                                                args 0, 0, 160, address(this.address), block.timestamp, mem[_9458 + ceil32(return_data.size) + 260 len (32 * mem[_9458]) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_9458 + ceil32(return_data.size) + 96] = 30
                                                            mem[_9458 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            call distributionPoolAddress with:
                                                                 gas 2300 wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[_9458 + ceil32(return_data.size) + 160] = 30
                                                            mem[_9458 + ceil32(return_data.size) + 192] = 'SafeMath: subtraction overflow'
                                                            if 0 > balanceOf[this.address] * rewardsFee / 100:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if balanceOf[this.address] * rewardsFee / 100 < 0:
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not distributionPoolAddress:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            mem[_9458 + ceil32(return_data.size) + 224] = 38
                                                            mem[_9458 + ceil32(return_data.size) + 256 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if balanceOf[this.address] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                                revert with 0, 
                                                                            32,
                                                                            38,
                                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_9458 + ceil32(return_data.size) + 294 len 26] >> 48,
                                                                            0
                                                            if balanceOf[address(this.address)] < balanceOf[this.address] * rewardsFee / 100:
                                                                revert with 0, 17
                                                            balanceOf[address(this.address)] -= balanceOf[this.address] * rewardsFee / 100
                                                            if balanceOf[stor17] > !(balanceOf[this.address] * rewardsFee / 100):
                                                                revert with 0, 17
                                                            if balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) < balanceOf[stor17]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[stor17] += balanceOf[this.address] * rewardsFee / 100
                                                            emit Transfer((balanceOf[this.address] * rewardsFee / 100), this.address, distributionPoolAddress);
                                                            if not balanceOf[this.address]:
                                                                mem[_9458 + ceil32(return_data.size) + 320] = 26
                                                                mem[_9458 + ceil32(return_data.size) + 352] = 'SafeMath: division by zero'
                                                                mem[_9458 + ceil32(return_data.size) + 384] = 26
                                                                mem[_9458 + ceil32(return_data.size) + 416] = 'SafeMath: division by zero'
                                                                mem[_9458 + ceil32(return_data.size) + 448] = 30
                                                                mem[_9458 + ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                                mem[_9458 + ceil32(return_data.size) + 512] = 2
                                                                mem[_9458 + ceil32(return_data.size) + 544] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_9458 + ceil32(return_data.size) + 608] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _9458 + (2 * ceil32(return_data.size)) + 608
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_9458 + ceil32(return_data.size) + 576] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = 0
                                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                                mem[_9458 + (2 * ceil32(return_data.size)) + 608] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_9458 + (2 * ceil32(return_data.size)) + 612] = 0
                                                                mem[_9458 + (2 * ceil32(return_data.size)) + 644] = 0
                                                                mem[_9458 + (2 * ceil32(return_data.size)) + 676] = 160
                                                                mem[_9458 + (2 * ceil32(return_data.size)) + 772] = 2
                                                                idx = 0
                                                                s = _9458 + (2 * ceil32(return_data.size)) + 804
                                                                t = _9458 + ceil32(return_data.size) + 544
                                                                while idx < mem[_9458 + ceil32(return_data.size) + 512]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_9458 + (2 * ceil32(return_data.size)) + 708] = this.address
                                                                mem[_9458 + (2 * ceil32(return_data.size)) + 740] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _9458 + (2 * ceil32(return_data.size)) + (32 * mem[_9458 + ceil32(return_data.size) + 512]) + -mem[64] + 800]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _18141 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_18141] = 30
                                                                mem[_18141 + 32] = 'SafeMath: subtraction overflow'
                                                                if eth.balance(this.address) > eth.balance(this.address):
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if eth.balance(this.address) < eth.balance(this.address):
                                                                    revert with 0, 17
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = 0
                                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                                mem[mem[64] + 68] = 0
                                                                mem[mem[64] + 100] = 0
                                                                mem[mem[64] + 132] = stor33
                                                                mem[mem[64] + 164] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                     gas gas_remaining wei
                                                                    args this.address, 0, 0, 0, stor33, block.timestamp
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                mem[mem[64] + 32] = 0
                                                                mem[mem[64] + 64] = 0
                                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                    0,
                                                                mem[0] = this.address
                                                                mem[32] = 0
                                                                _18978 = mem[64]
                                                                mem[mem[64]] = 2
                                                                mem[64] = mem[64] + 96
                                                                mem[_18978 + 32 len 64] = call.data[calldata.size len 64]
                                                                if 0 >= mem[_18978]:
                                                                    revert with 0, 50
                                                                mem[_18978 + 32] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_18978 + 96] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _18978 + ceil32(return_data.size) + 96
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                if 1 >= mem[_18978]:
                                                                    revert with 0, 50
                                                                mem[_18978 + 64] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                                mem[_18978 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_18978 + ceil32(return_data.size) + 100] = balanceOf[this.address]
                                                                mem[_18978 + ceil32(return_data.size) + 132] = 0
                                                                mem[_18978 + ceil32(return_data.size) + 164] = 160
                                                                mem[_18978 + ceil32(return_data.size) + 260] = mem[_18978]
                                                                idx = 0
                                                                s = _18978 + ceil32(return_data.size) + 292
                                                                t = _18978 + 32
                                                                while idx < mem[_18978]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_18978 + ceil32(return_data.size) + 260 len (32 * mem[_18978]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                uint8(stor27.field_0) = 0
                                                                if not cd[36]:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    mem[_18978 + ceil32(return_data.size) + 96] = 38
                                                                    mem[_18978 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] > -1:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    mem[_18978 + ceil32(return_data.size) + 96] = 38
                                                                    mem[_18978 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                if not cd[36]:
                                                                    mem[_18978 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_18978 + ceil32(return_data.size) + 196] = msg.sender
                                                                    mem[_18978 + ceil32(return_data.size) + 228] = 96
                                                                    mem[_18978 + ceil32(return_data.size) + 292] = mem[128]
                                                                    mem[_18978 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _18978 + ceil32(return_data.size) + 324] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, 96, 0, mem[128], mem[_18978 + ceil32(return_data.size) + 324 len ceil32(mem[128])]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    mem[_18978 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_18978 + ceil32(return_data.size) + 196] = msg.sender
                                                                    mem[_18978 + ceil32(return_data.size) + 228] = 96
                                                                    mem[_18978 + ceil32(return_data.size) + 292] = mem[128]
                                                                    mem[_18978 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _18978 + ceil32(return_data.size) + 324] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, Array(len=mem[128], data=mem[_18978 + ceil32(return_data.size) + 324 len ceil32(mem[128])]), 10^18 * cd[36]
                                                            else:
                                                                if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                                    revert with 0, 17
                                                                if not balanceOf[this.address]:
                                                                    revert with 0, 18
                                                                if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                mem[_9458 + ceil32(return_data.size) + 320] = 26
                                                                mem[_9458 + ceil32(return_data.size) + 352] = 'SafeMath: division by zero'
                                                                mem[_9458 + ceil32(return_data.size) + 384] = 26
                                                                mem[_9458 + ceil32(return_data.size) + 416] = 'SafeMath: division by zero'
                                                                mem[_9458 + ceil32(return_data.size) + 448] = 30
                                                                mem[_9458 + ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                                if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                                    revert with 0, 17
                                                                mem[_9458 + ceil32(return_data.size) + 512] = 2
                                                                mem[_9458 + ceil32(return_data.size) + 544] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_9458 + ceil32(return_data.size) + 608] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _9458 + (2 * ceil32(return_data.size)) + 608
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_9458 + ceil32(return_data.size) + 576] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                allowance[address(this.address)][stor14].field_255 = 0
                                                                emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                                mem[_9458 + (2 * ceil32(return_data.size)) + 608] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_9458 + (2 * ceil32(return_data.size)) + 612] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                mem[_9458 + (2 * ceil32(return_data.size)) + 644] = 0
                                                                mem[_9458 + (2 * ceil32(return_data.size)) + 676] = 160
                                                                mem[_9458 + (2 * ceil32(return_data.size)) + 772] = 2
                                                                idx = 0
                                                                s = _9458 + (2 * ceil32(return_data.size)) + 804
                                                                t = _9458 + ceil32(return_data.size) + 544
                                                                while idx < mem[_9458 + ceil32(return_data.size) + 512]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_9458 + (2 * ceil32(return_data.size)) + 708] = this.address
                                                                mem[_9458 + (2 * ceil32(return_data.size)) + 740] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _9458 + (2 * ceil32(return_data.size)) + (32 * mem[_9458 + ceil32(return_data.size) + 512]) + -mem[64] + 800]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _18140 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_18140] = 30
                                                                mem[_18140 + 32] = 'SafeMath: subtraction overflow'
                                                                if eth.balance(this.address) > eth.balance(this.address):
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if eth.balance(this.address) < eth.balance(this.address):
                                                                    revert with 0, 17
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                                mem[mem[64] + 68] = 0
                                                                mem[mem[64] + 100] = 0
                                                                mem[mem[64] + 132] = stor33
                                                                mem[mem[64] + 164] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                     gas gas_remaining wei
                                                                    args this.address, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2), 0, 0, stor33, block.timestamp
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                mem[mem[64] + 32] = 0
                                                                mem[mem[64] + 64] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2));
                                                                mem[0] = this.address
                                                                mem[32] = 0
                                                                _18976 = mem[64]
                                                                mem[mem[64]] = 2
                                                                mem[64] = mem[64] + 96
                                                                mem[_18976 + 32 len 64] = call.data[calldata.size len 64]
                                                                if 0 >= mem[_18976]:
                                                                    revert with 0, 50
                                                                mem[_18976 + 32] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_18976 + 96] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _18976 + ceil32(return_data.size) + 96
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                if 1 >= mem[_18976]:
                                                                    revert with 0, 50
                                                                mem[_18976 + 64] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                                mem[_18976 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_18976 + ceil32(return_data.size) + 100] = balanceOf[this.address]
                                                                mem[_18976 + ceil32(return_data.size) + 132] = 0
                                                                mem[_18976 + ceil32(return_data.size) + 164] = 160
                                                                mem[_18976 + ceil32(return_data.size) + 260] = mem[_18976]
                                                                idx = 0
                                                                s = _18976 + ceil32(return_data.size) + 292
                                                                t = _18976 + 32
                                                                while idx < mem[_18976]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_18976 + ceil32(return_data.size) + 260 len (32 * mem[_18976]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                uint8(stor27.field_0) = 0
                                                                if not cd[36]:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    mem[_18976 + ceil32(return_data.size) + 96] = 38
                                                                    mem[_18976 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] > -1:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    mem[_18976 + ceil32(return_data.size) + 96] = 38
                                                                    mem[_18976 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                if not cd[36]:
                                                                    mem[_18976 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_18976 + ceil32(return_data.size) + 196] = msg.sender
                                                                    mem[_18976 + ceil32(return_data.size) + 228] = 96
                                                                    mem[_18976 + ceil32(return_data.size) + 292] = mem[128]
                                                                    mem[_18976 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _18976 + ceil32(return_data.size) + 324] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, 96, 0, mem[128], mem[_18976 + ceil32(return_data.size) + 324 len ceil32(mem[128])]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    mem[_18976 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_18976 + ceil32(return_data.size) + 196] = msg.sender
                                                                    mem[_18976 + ceil32(return_data.size) + 228] = 96
                                                                    mem[_18976 + ceil32(return_data.size) + 292] = mem[128]
                                                                    mem[_18976 + ceil32(return_data.size) + 324 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _18976 + ceil32(return_data.size) + 324] = 0
                                                                    require ext_code.size(nodeRewardManagerAddress)
                                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, Array(len=mem[128], data=mem[_18976 + ceil32(return_data.size) + 324 len ceil32(mem[128])]), 10^18 * cd[36]
                                                        else:
                                                            if balanceOf[this.address] * rewardsFee / 100 and stor25 > -1 / balanceOf[this.address] * rewardsFee / 100:
                                                                revert with 0, 17
                                                            if not balanceOf[this.address] * rewardsFee / 100:
                                                                revert with 0, 18
                                                            if balanceOf[this.address] * rewardsFee / 100 * stor25 / balanceOf[this.address] * rewardsFee / 100 != stor25:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _9440 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_9440] = 26
                                                            mem[_9440 + 32] = 'SafeMath: division by zero'
                                                            _9501 = mem[64]
                                                            mem[mem[64]] = 2
                                                            mem[64] = mem[64] + 96
                                                            mem[_9501 + 32 len 64] = call.data[calldata.size len 64]
                                                            if 0 >= mem[_9501]:
                                                                revert with 0, 50
                                                            mem[_9501 + 32] = this.address
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                    gas gas_remaining wei
                                                            mem[_9501 + 96] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[64] = _9501 + ceil32(return_data.size) + 96
                                                            require return_data.size >= 32
                                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                            if 1 >= mem[_9501]:
                                                                revert with 0, 50
                                                            mem[_9501 + 64] = ext_call.return_data[12 len 20]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: approve from the zero address'
                                                            if not uniswapV2RouterAddress:
                                                                revert with 0, 'ERC20: approve to the zero address'
                                                            mem[0] = uniswapV2RouterAddress
                                                            mem[32] = sha3(address(this.address), 1)
                                                            allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * rewardsFee / 100 * stor25 / 100
                                                            emit Approval((balanceOf[this.address] * rewardsFee / 100 * stor25 / 100), this.address, uniswapV2RouterAddress);
                                                            mem[_9501 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                            mem[_9501 + ceil32(return_data.size) + 100] = balanceOf[this.address] * rewardsFee / 100 * stor25 / 100
                                                            mem[_9501 + ceil32(return_data.size) + 132] = 0
                                                            mem[_9501 + ceil32(return_data.size) + 164] = 160
                                                            mem[_9501 + ceil32(return_data.size) + 260] = mem[_9501]
                                                            idx = 0
                                                            s = _9501 + ceil32(return_data.size) + 292
                                                            t = _9501 + 32
                                                            while idx < mem[_9501]:
                                                                mem[s] = mem[t + 12 len 20]
                                                                idx = idx + 1
                                                                s = s + 32
                                                                t = t + 32
                                                                continue 
                                                            mem[_9501 + ceil32(return_data.size) + 196] = this.address
                                                            mem[_9501 + ceil32(return_data.size) + 228] = block.timestamp
                                                            require ext_code.size(uniswapV2RouterAddress)
                                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _9501 + ceil32(return_data.size) + (32 * mem[_9501]) + -mem[64] + 288]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12672 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12672] = 30
                                                            mem[_12672 + 32] = 'SafeMath: subtraction overflow'
                                                            if eth.balance(this.address) > eth.balance(this.address):
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if eth.balance(this.address) < eth.balance(this.address):
                                                                revert with 0, 17
                                                            call distributionPoolAddress with:
                                                                 gas 2300 wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _12763 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12763] = 30
                                                            mem[_12763 + 32] = 'SafeMath: subtraction overflow'
                                                            if balanceOf[this.address] * rewardsFee / 100 * stor25 / 100 > balanceOf[this.address] * rewardsFee / 100:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if balanceOf[this.address] * rewardsFee / 100 < balanceOf[this.address] * rewardsFee / 100 * stor25 / 100:
                                                                revert with 0, 17
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not distributionPoolAddress:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12877 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12877] = 38
                                                            mem[_12877 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100) > balanceOf[address(this.address)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12877 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(this.address)] < (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[this.address] * rewardsFee / 100) + (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)
                                                            if balanceOf[stor17] > !((balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100) < balanceOf[stor17]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = distributionPoolAddress
                                                            mem[32] = 0
                                                            balanceOf[stor17] = balanceOf[stor17] + (balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)
                                                            emit Transfer(((balanceOf[this.address] * rewardsFee / 100) - (balanceOf[this.address] * rewardsFee / 100 * stor25 / 100)), this.address, distributionPoolAddress);
                                                            if not balanceOf[this.address]:
                                                                _13201 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_13201] = 26
                                                                mem[_13201 + 32] = 'SafeMath: division by zero'
                                                                _13273 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_13273] = 26
                                                                mem[_13273 + 32] = 'SafeMath: division by zero'
                                                                _13309 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_13309] = 30
                                                                mem[_13309 + 32] = 'SafeMath: subtraction overflow'
                                                                _13352 = mem[64]
                                                                mem[mem[64]] = 2
                                                                mem[64] = mem[64] + 96
                                                                mem[_13352 + 32 len 64] = call.data[calldata.size len 64]
                                                                if 0 >= mem[_13352]:
                                                                    revert with 0, 50
                                                                mem[_13352 + 32] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_13352 + 96] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _13352 + ceil32(return_data.size) + 96
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                if 1 >= mem[_13352]:
                                                                    revert with 0, 50
                                                                mem[_13352 + 64] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = 0
                                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                                mem[_13352 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_13352 + ceil32(return_data.size) + 100] = 0
                                                                mem[_13352 + ceil32(return_data.size) + 132] = 0
                                                                mem[_13352 + ceil32(return_data.size) + 164] = 160
                                                                mem[_13352 + ceil32(return_data.size) + 260] = mem[_13352]
                                                                idx = 0
                                                                s = _13352 + ceil32(return_data.size) + 292
                                                                t = _13352 + 32
                                                                while idx < mem[_13352]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[_13352 + ceil32(return_data.size) + 260 len (32 * mem[_13352]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[_13352 + ceil32(return_data.size) + 96] = 30
                                                                mem[_13352 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                                if eth.balance(this.address) > eth.balance(this.address):
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if eth.balance(this.address) < eth.balance(this.address):
                                                                    revert with 0, 17
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                allowance[address(this.address)][stor14].field_0 = 0
                                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                                mem[_13352 + ceil32(return_data.size) + 228] = 0
                                                                mem[_13352 + ceil32(return_data.size) + 260] = 0
                                                                mem[_13352 + ceil32(return_data.size) + 292] = stor33
                                                                mem[_13352 + ceil32(return_data.size) + 324] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                     gas gas_remaining wei
                                                                    args this.address, 0, 0, 0, stor33, block.timestamp
                                                                mem[_13352 + ceil32(return_data.size) + 160 len 96] = ext_call.return_data[0 len 96]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 96
                                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                                    0,
                                                                mem[_13352 + (2 * ceil32(return_data.size)) + 160] = 2
                                                                mem[_13352 + (2 * ceil32(return_data.size)) + 192] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_13352 + (2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _13352 + (4 * ceil32(return_data.size)) + 256
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                mem[_13352 + (2 * ceil32(return_data.size)) + 224] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                                mem[_13352 + (4 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_13352 + (4 * ceil32(return_data.size)) + 260] = balanceOf[this.address]
                                                                mem[_13352 + (4 * ceil32(return_data.size)) + 292] = 0
                                                                mem[_13352 + (4 * ceil32(return_data.size)) + 324] = 160
                                                                mem[_13352 + (4 * ceil32(return_data.size)) + 420] = 2
                                                                idx = 0
                                                                s = _13352 + (4 * ceil32(return_data.size)) + 452
                                                                t = _13352 + (2 * ceil32(return_data.size)) + 192
                                                                while idx < mem[_13352 + (2 * ceil32(return_data.size)) + 160]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_13352 + (4 * ceil32(return_data.size)) + 356] = this.address
                                                                mem[_13352 + (4 * ceil32(return_data.size)) + 388] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                                     gas gas_remaining wei
                                                                    args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[_13352 + (4 * ceil32(return_data.size)) + 420 len (32 * mem[_13352 + (2 * ceil32(return_data.size)) + 160]) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                uint8(stor27.field_0) = 0
                                                                if not cd[36]:
                                                                    if not msg.sender:
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 292] = 37
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer from the zero ad'
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 356] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                                        revert with memory
                                                                          from _13352 + (4 * ceil32(return_data.size)) + 256
                                                                           len (5 * ceil32(return_data.size)) + 132
                                                                    if not this.address:
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 292] = 35
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer to the zero addr'
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 356] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                                        revert with memory
                                                                          from _13352 + (4 * ceil32(return_data.size)) + 256
                                                                           len (5 * ceil32(return_data.size)) + 132
                                                                    mem[_13352 + (4 * ceil32(return_data.size)) + 256] = 38
                                                                    mem[_13352 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 388] = 38
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 420 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 458] = 0
                                                                        revert with memory
                                                                          from _13352 + (4 * ceil32(return_data.size)) + 352
                                                                           len (5 * ceil32(return_data.size)) + 132
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] > -1:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 388] = 27
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: addition overflow'
                                                                        revert with memory
                                                                          from _13352 + (4 * ceil32(return_data.size)) + 352
                                                                           len (5 * ceil32(return_data.size)) + 100
                                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 292] = 33
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 324] = 'SafeMath: multiplication overflo'
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 356] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                                        revert with memory
                                                                          from _13352 + (4 * ceil32(return_data.size)) + 256
                                                                           len (5 * ceil32(return_data.size)) + 132
                                                                    if not msg.sender:
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 292] = 37
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer from the zero ad'
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 356] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                                        revert with memory
                                                                          from _13352 + (4 * ceil32(return_data.size)) + 256
                                                                           len (5 * ceil32(return_data.size)) + 132
                                                                    if not this.address:
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 260] = 32
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 292] = 35
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer to the zero addr'
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 356] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                                        revert with memory
                                                                          from _13352 + (4 * ceil32(return_data.size)) + 256
                                                                           len (5 * ceil32(return_data.size)) + 132
                                                                    mem[_13352 + (4 * ceil32(return_data.size)) + 256] = 38
                                                                    mem[_13352 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 388] = 38
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 420 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 458] = 0
                                                                        revert with memory
                                                                          from _13352 + (4 * ceil32(return_data.size)) + 352
                                                                           len (5 * ceil32(return_data.size)) + 132
                                                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 388] = 27
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: addition overflow'
                                                                        revert with memory
                                                                          from _13352 + (4 * ceil32(return_data.size)) + 352
                                                                           len (5 * ceil32(return_data.size)) + 100
                                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                if not cd[36]:
                                                                    mem[_13352 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_13352 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                                    mem[_13352 + (4 * ceil32(return_data.size)) + 388] = 96
                                                                    mem[_13352 + (4 * ceil32(return_data.size)) + 452] = mem[128]
                                                                    mem[_13352 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _13352 + (4 * ceil32(return_data.size)) + 484] = 0
                                                                    mem[_13352 + (4 * ceil32(return_data.size)) + 420] = 0
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 356] = 32
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 388] = 33
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: multiplication overflo'
                                                                        mem[_13352 + (4 * ceil32(return_data.size)) + 452] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                                        revert with memory
                                                                          from _13352 + (4 * ceil32(return_data.size)) + 352
                                                                           len (5 * ceil32(return_data.size)) + 132
                                                                    mem[_13352 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                    mem[_13352 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                                    mem[_13352 + (4 * ceil32(return_data.size)) + 388] = 96
                                                                    mem[_13352 + (4 * ceil32(return_data.size)) + 452] = mem[128]
                                                                    mem[_13352 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                    if ceil32(mem[128]) > mem[128]:
                                                                        mem[mem[128] + _13352 + (4 * ceil32(return_data.size)) + 484] = 0
                                                                    mem[_13352 + (4 * ceil32(return_data.size)) + 420] = 10^18 * cd[36]
                                                                require ext_code.size(nodeRewardManagerAddress)
                                                                call nodeRewardManagerAddress.0x90219732 with:
                                                                     gas gas_remaining wei
                                                                    args mem[_13352 + (4 * ceil32(return_data.size)) + 356 len ceil32(mem[128]) + (5 * ceil32(return_data.size)) + 128]
                                                            else:
                                                                if balanceOf[this.address] and liquidityPoolFee > -1 / balanceOf[this.address]:
                                                                    revert with 0, 17
                                                                if not balanceOf[this.address]:
                                                                    revert with 0, 18
                                                                if balanceOf[this.address] * liquidityPoolFee / balanceOf[this.address] != liquidityPoolFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _13255 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_13255] = 26
                                                                mem[_13255 + 32] = 'SafeMath: division by zero'
                                                                _13291 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_13291] = 26
                                                                mem[_13291 + 32] = 'SafeMath: division by zero'
                                                                _13327 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_13327] = 30
                                                                mem[_13327 + 32] = 'SafeMath: subtraction overflow'
                                                                if balanceOf[this.address] * liquidityPoolFee / 100 / 2 > balanceOf[this.address] * liquidityPoolFee / 100:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if balanceOf[this.address] * liquidityPoolFee / 100 < balanceOf[this.address] * liquidityPoolFee / 100 / 2:
                                                                    revert with 0, 17
                                                                _13510 = mem[64]
                                                                mem[mem[64]] = 2
                                                                mem[64] = mem[64] + 96
                                                                mem[_13510 + 32 len 64] = call.data[calldata.size len 64]
                                                                if 0 >= mem[_13510]:
                                                                    revert with 0, 50
                                                                mem[_13510 + 32] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_13510 + 96] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _13510 + ceil32(return_data.size) + 96
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                if 1 >= mem[_13510]:
                                                                    revert with 0, 50
                                                                mem[_13510 + 64] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                allowance[address(this.address)][stor14].field_255 = 0
                                                                emit Approval((balanceOf[this.address] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                                mem[_13510 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_13510 + ceil32(return_data.size) + 100] = balanceOf[this.address] * liquidityPoolFee / 100 / 2
                                                                mem[_13510 + ceil32(return_data.size) + 132] = 0
                                                                mem[_13510 + ceil32(return_data.size) + 164] = 160
                                                                mem[_13510 + ceil32(return_data.size) + 260] = mem[_13510]
                                                                idx = 0
                                                                s = _13510 + ceil32(return_data.size) + 292
                                                                t = _13510 + 32
                                                                while idx < mem[_13510]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_13510 + ceil32(return_data.size) + 196] = this.address
                                                                mem[_13510 + ceil32(return_data.size) + 228] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _13510 + ceil32(return_data.size) + (32 * mem[_13510]) + -mem[64] + 288]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _18138 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_18138] = 30
                                                                mem[_18138 + 32] = 'SafeMath: subtraction overflow'
                                                                if eth.balance(this.address) > eth.balance(this.address):
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if eth.balance(this.address) < eth.balance(this.address):
                                                                    revert with 0, 17
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                emit Approval(((balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                                mem[mem[64] + 68] = 0
                                                                mem[mem[64] + 100] = 0
                                                                mem[mem[64] + 132] = stor33
                                                                mem[mem[64] + 164] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                                     gas gas_remaining wei
                                                                    args this.address, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2), 0, 0, stor33, block.timestamp
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                mem[mem[64] + 32] = 0
                                                                mem[mem[64] + 64] = (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2)
                                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityPoolFee / 100), 0, (balanceOf[this.address] * liquidityPoolFee / 100) - (balanceOf[this.address] * liquidityPoolFee / 100 / 2));
                                                                mem[0] = this.address
                                                                mem[32] = 0
                                                                _18972 = mem[64]
                                                                mem[mem[64]] = 2
                                                                mem[64] = mem[64] + 96
                                                                mem[_18972 + 32 len 64] = call.data[calldata.size len 64]
                                                                if 0 >= mem[_18972]:
                                                                    revert with 0, 50
                                                                mem[_18972 + 32] = this.address
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                                        gas gas_remaining wei
                                                                mem[_18972 + 96] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[64] = _18972 + ceil32(return_data.size) + 96
                                                                require return_data.size >= 32
                                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                                if 1 >= mem[_18972]:
                                                                    revert with 0, 50
                                                                mem[_18972 + 64] = ext_call.return_data[12 len 20]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: approve from the zero address'
                                                                if not uniswapV2RouterAddress:
                                                                    revert with 0, 'ERC20: approve to the zero address'
                                                                mem[0] = uniswapV2RouterAddress
                                                                mem[32] = sha3(address(this.address), 1)
                                                                allowance[address(this.address)][stor14].field_0 = balanceOf[this.address]
                                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                                mem[_18972 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                                mem[_18972 + ceil32(return_data.size) + 100] = balanceOf[this.address]
                                                                mem[_18972 + ceil32(return_data.size) + 132] = 0
                                                                mem[_18972 + ceil32(return_data.size) + 164] = 160
                                                                mem[_18972 + ceil32(return_data.size) + 260] = mem[_18972]
                                                                idx = 0
                                                                s = _18972 + ceil32(return_data.size) + 292
                                                                t = _18972 + 32
                                                                while idx < mem[_18972]:
                                                                    mem[s] = mem[t + 12 len 20]
                                                                    idx = idx + 1
                                                                    s = s + 32
                                                                    t = t + 32
                                                                    continue 
                                                                mem[_18972 + ceil32(return_data.size) + 196] = this.address
                                                                mem[_18972 + ceil32(return_data.size) + 228] = block.timestamp
                                                                require ext_code.size(uniswapV2RouterAddress)
                                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _18972 + ceil32(return_data.size) + (32 * mem[_18972]) + -mem[64] + 288]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                uint8(stor27.field_0) = 0
                                                                if not cd[36]:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _22110 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_22110] = 38
                                                                    mem[_22110 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 0 > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22110 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 0:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] > -1:
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                                    emit Transfer(0, msg.sender, this.address);
                                                                    if not cd[36]:
                                                                        _23307 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _23466 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 0
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_23466) + _23307 + -mem[64] + 128]
                                                                    else:
                                                                        if cd[36] and 10^18 > -1 / cd[36]:
                                                                            revert with 0, 17
                                                                        if not cd[36]:
                                                                            revert with 0, 18
                                                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _23587 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _23689 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 10^18 * cd[36]
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_23689) + _23587 + -mem[64] + 128]
                                                                else:
                                                                    if cd[36] and 10^18 > -1 / cd[36]:
                                                                        revert with 0, 17
                                                                    if not cd[36]:
                                                                        revert with 0, 18
                                                                    if 10^18 * cd[36] / cd[36] != 10^18:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    _22482 = mem[64]
                                                                    mem[64] = mem[64] + 96
                                                                    mem[_22482] = 38
                                                                    mem[_22482 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                    if 10^18 * cd[36] > balanceOf[address(msg.sender)]:
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 38
                                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_22482 + 70 len 26]
                                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                    if balanceOf[address(msg.sender)] < 10^18 * cd[36]:
                                                                        revert with 0, 17
                                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * cd[36]
                                                                    if balanceOf[this.address] > !(10^18 * cd[36]):
                                                                        revert with 0, 17
                                                                    if balanceOf[this.address] + (10^18 * cd[36]) < balanceOf[this.address]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * cd[36])
                                                                    emit Transfer((10^18 * cd[36]), msg.sender, this.address);
                                                                    if not cd[36]:
                                                                        _23586 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _23688 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, 96, 0, mem[128], mem[mem[64] + 132 len ceil32(mem[128])]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 0
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_23688) + _23586 + -mem[64] + 128]
                                                                    else:
                                                                        if cd[36] and 10^18 > -1 / cd[36]:
                                                                            revert with 0, 17
                                                                        if not cd[36]:
                                                                            revert with 0, 18
                                                                        if 10^18 * cd[36] / cd[36] != 10^18:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _23940 = mem[64]
                                                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = msg.sender
                                                                        mem[mem[64] + 36] = 96
                                                                        _24006 = mem[128]
                                                                        mem[mem[64] + 100] = mem[128]
                                                                        mem[mem[64] + 132 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                                                                        if ceil32(mem[128]) <= mem[128]:
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args msg.sender, Array(len=mem[128], data=mem[mem[64] + 132 len ceil32(mem[128])]), 10^18 * cd[36]
                                                                        else:
                                                                            mem[mem[128] + mem[64] + 132] = 0
                                                                            mem[mem[64] + 68] = 10^18 * cd[36]
                                                                            require ext_code.size(nodeRewardManagerAddress)
                                                                            call nodeRewardManagerAddress.0x90219732 with:
                                                                                 gas gas_remaining wei
                                                                                args mem[mem[64] + 4 len ceil32(_24006) + _23940 + -mem[64] + 128]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
}



}
