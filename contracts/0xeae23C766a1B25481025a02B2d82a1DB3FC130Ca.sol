contract main {




// =====================  Runtime code  =====================


#
#  - withdraw(uint256 arg1, uint256 arg2)
#  - updatePool(uint256 arg1)
#  - deposit(uint256 arg1, uint256 arg2)
#
const farmTemplate = 1

const SMART_CONTRACT_ROLE = 0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b

const DEFAULT_ADMIN_ROLE = 0

const MINTER_ROLE = 0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956

const OPERATOR_ROLE = 0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9


uint8 stor1;
address rewardsAddress; offset 8
uint32 stor2;
address devaddr;
uint256 stor2;
uint256 devPercentage;
uint256 stor4; offset 32
uint256 tips;
big480 stor4;
uint256 bonusEndBlock;
uint256 rewardsPerBlock;
uint256 bonusMultiplier;
uint256 totalRewardDebt;
uint8 stor9;
array of struct poolInfo;
mapping of struct userInfo;
uint256 totalAllocPoint;
uint256 startBlock;
array of uint256 stor89717814153306320011181716697424560163256864414616650038987186496166826726057;
array of uint256 stor89717814153306320011181716697424560163256864414616650038987186496166826726058;
array of uint256 stor89717814153306320011181716697424560163256864414616650038987186496166826726059;

function poolLength() payable {
    return poolInfo.length
}

function hasMinterRole(address arg1) payable {
    require calldata.size - 4 >= 32
    return bool(roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956][1][address(arg1)].field_0)
}

function hasSmartContractRole(address arg1) payable {
    require calldata.size - 4 >= 32
    return bool(roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b][1][address(arg1)].field_0)
}

function poolInfo(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < poolInfo.length
    return poolInfo[arg1].field_0, poolInfo[arg1].field_256, poolInfo[arg1].field_512, poolInfo[arg1].field_768
}

function totalAllocPoint() payable {
    return totalAllocPoint
}

function tips() payable {
    return tips
}

function bonusEndBlock() payable {
    return bonusEndBlock
}

function getRoleAdmin(bytes32 arg1) payable {
    require calldata.size - 4 >= 32
    return roleAdmin[arg1].field_512
}

function startBlock() payable {
    return startBlock
}

function rewardsPerBlock() payable {
    return rewardsPerBlock
}

function totalRewardDebt() payable {
    return totalRewardDebt
}

function getRoleMember(bytes32 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if arg2 >= roleAdmin[arg1].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    34,
                    0xfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64,
                    mem[198 len 30]
    return roleAdmin[arg1][arg2].field_0
}

function hasRole(bytes32 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    return bool(roleAdmin[arg1][1][address(arg2)].field_0)
}

function userInfo(uint256 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    return userInfo[arg1][arg2].field_0, userInfo[arg1][arg2].field_256
}

function rewards() payable {
    return rewardsAddress
}

function bonusMultiplier() payable {
    return bonusMultiplier
}

function hasAdminRole(address arg1) payable {
    require calldata.size - 4 >= 32
    return bool(roleAdmin[1][address(arg1)].field_0)
}

function devPercentage() payable {
    return devPercentage
}

function getRoleMemberCount(bytes32 arg1) payable {
    require calldata.size - 4 >= 32
    return roleAdmin[arg1].field_0
}

function devaddr() payable {
    return address(devaddr)
}

function hasOperatorRole(address arg1) payable {
    require calldata.size - 4 >= 32
    return bool(roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9][1][address(arg1)].field_0)
}

function _fallback() payable {
    revert
}

function tokenDebt() payable {
    if tips + totalRewardDebt < totalRewardDebt:
        revert with 0, 'SafeMath: addition overflow'
    return (tips + totalRewardDebt)
}

function dev(address arg1) payable {
    require calldata.size - 4 >= 32
    if address(devaddr) != msg.sender:
        revert with 0, 'dev: wut?'
    address(devaddr) = arg1
}

function setDevPercentage(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if address(devaddr) != msg.sender:
        revert with 0, 'dev: wut?'
    devPercentage = arg1
}

function getInitData(address arg1, uint256 arg2, uint256 arg3, address arg4, address arg5) payable {
    require calldata.size - 4 >= 160
    return 32, 160, address(arg1), arg2, arg3, address(arg4), arg5
}

function tokensRemaining() payable {
    require ext_code.size(rewardsAddress)
    staticcall rewardsAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function setBonus(uint256 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if not roleAdmin[1][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    41,
                    0x6e4d6173746572436865662e736574426f6e75733a2053656e646572206d7573742062652061646d69,
                    mem[205 len 23]
    bonusEndBlock = arg1
    bonusMultiplier = arg2
}

function initAccessControls(address arg1) payable {
    require calldata.size - 4 >= 32
    if stor1:
        revert with 0, 'Already initialised'
    if not arg1:
        revert with 0, 'Incorrect input'
    if not roleAdmin[1][address(arg1)].field_0:
        uint256(roleAdmin.field_0)++
        stor[uint256(roleAdmin.field_0) + sha3(('name', 'roleAdmin', 0))].field_0 = arg1
        stor[uint256(roleAdmin.field_0) + sha3(('name', 'roleAdmin', 0))].field_160 = 0
        roleAdmin[1][address(arg1)].field_0 = uint256(roleAdmin.field_0)
        emit RoleGranted(0, arg1, msg.sender);
    stor1 = 1
}

function grantRole(bytes32 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    if not roleAdmin[roleAdmin[arg1].field_512][1][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    47,
                    0x73416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e,
                    mem[211 len 17]
    if not roleAdmin[arg1][1][address(arg2)].field_0:
        roleAdmin[arg1].field_0++
        roleAdmin[arg1][roleAdmin[arg1].field_0].field_0 = arg2
        roleAdmin[arg1][roleAdmin[arg1].field_0].field_160 = 0
        roleAdmin[arg1][1][address(arg2)].field_0 = roleAdmin[arg1].field_0
        emit RoleGranted(arg1, arg2, msg.sender);
}

function initFarm(address arg1, uint256 arg2, uint256 arg3, address arg4, address arg5) payable {
    require calldata.size - 4 >= 160
    require not stor9
    rewardsAddress = arg1
    totalAllocPoint = 0
    rewardsPerBlock = arg2
    startBlock = arg3
    address(devaddr) = arg4
    if stor1:
        revert with 0, 'Already initialised'
    if not arg5:
        revert with 0, 'Incorrect input'
    if not roleAdmin[1][address(arg5)].field_0:
        uint256(roleAdmin.field_0)++
        stor[uint256(roleAdmin.field_0) + sha3(('name', 'roleAdmin', 0))].field_0 = arg5
        stor[uint256(roleAdmin.field_0) + sha3(('name', 'roleAdmin', 0))].field_160 = 0
        roleAdmin[1][address(arg5)].field_0 = uint256(roleAdmin.field_0)
        emit RoleGranted(0, arg5, msg.sender);
    stor1 = 1
    stor9 = 1
}

function addAdminRole(address arg1) payable {
    require calldata.size - 4 >= 32
    if not roleAdmin[uint256(roleAdmin.field_512)][1][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    47,
                    0x73416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e,
                    mem[211 len 17]
    if not roleAdmin[1][address(arg1)].field_0:
        uint256(roleAdmin.field_0)++
        stor[uint256(roleAdmin.field_0) + sha3(('name', 'roleAdmin', 0))].field_0 = arg1
        stor[uint256(roleAdmin.field_0) + sha3(('name', 'roleAdmin', 0))].field_160 = 0
        roleAdmin[1][address(arg1)].field_0 = uint256(roleAdmin.field_0)
        emit RoleGranted(0, arg1, msg.sender);
}

function initFarm(bytes arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 <= 4294967296
    require arg1 + 36 <= calldata.size
    require arg1.length <= 4294967296 and arg1 + arg1.length + 36 <= calldata.size
    require arg1.length >= 160
    require not stor9
    rewardsAddress = address(cd[(arg1 + 36)])
    totalAllocPoint = 0
    rewardsPerBlock = cd[(arg1 + 68)]
    startBlock = cd[(arg1 + 100)]
    address(devaddr) = address(cd[(arg1 + 132)])
    if stor1:
        revert with 0, 'Already initialised'
    if not address(cd[(arg1 + 164)]):
        revert with 0, 'Incorrect input'
    if not roleAdmin[1][address(cd[(arg1 + 164)])].field_0:
        uint256(roleAdmin.field_0)++
        stor[uint256(roleAdmin.field_0) + sha3(('name', 'roleAdmin', 0))].field_0 = address(cd[(arg1 + 164)])
        stor[uint256(roleAdmin.field_0) + sha3(('name', 'roleAdmin', 0))].field_160 = 0
        roleAdmin[1][address(cd[(arg1 + 164)])].field_0 = uint256(roleAdmin.field_0)
        emit RoleGranted(0, address(cd[(arg1 + 164)]), msg.sender);
    stor1 = 1
    stor9 = 1
}

function renounceRole(bytes32 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    if arg2 != msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    47,
                    0x64416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c,
                    mem[211 len 17]
    if roleAdmin[arg1][1][address(arg2)].field_0:
        require roleAdmin[arg1].field_0 - 1 < roleAdmin[arg1].field_0
        require roleAdmin[arg1][1][address(arg2)].field_0 - 1 < roleAdmin[arg1].field_0
        roleAdmin[arg1][roleAdmin[arg1][1][address(arg2)].field_0].field_0 = roleAdmin[arg1][roleAdmin[arg1].field_0].field_0
        roleAdmin[arg1][1][roleAdmin[arg1][roleAdmin[arg1].field_0].field_0].field_0 = roleAdmin[arg1][1][address(arg2)].field_0
        require roleAdmin[arg1].field_0
        roleAdmin[arg1][roleAdmin[arg1].field_0].field_0 = 0
        roleAdmin[arg1].field_0--
        roleAdmin[arg1][1][address(arg2)].field_0 = 0
        emit RoleRevoked(arg1, arg2, msg.sender);
}

function revokeRole(bytes32 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    if not roleAdmin[roleAdmin[arg1].field_512][1][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    48,
                    0x6e416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b,
                    mem[212 len 16]
    if roleAdmin[arg1][1][address(arg2)].field_0:
        require roleAdmin[arg1].field_0 - 1 < roleAdmin[arg1].field_0
        require roleAdmin[arg1][1][address(arg2)].field_0 - 1 < roleAdmin[arg1].field_0
        roleAdmin[arg1][roleAdmin[arg1][1][address(arg2)].field_0].field_0 = roleAdmin[arg1][roleAdmin[arg1].field_0].field_0
        roleAdmin[arg1][1][roleAdmin[arg1][roleAdmin[arg1].field_0].field_0].field_0 = roleAdmin[arg1][1][address(arg2)].field_0
        require roleAdmin[arg1].field_0
        roleAdmin[arg1][roleAdmin[arg1].field_0].field_0 = 0
        roleAdmin[arg1].field_0--
        roleAdmin[arg1][1][address(arg2)].field_0 = 0
        emit RoleRevoked(arg1, arg2, msg.sender);
}

function removeAdminRole(address arg1) payable {
    require calldata.size - 4 >= 32
    if not roleAdmin[uint256(roleAdmin.field_512)][1][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    48,
                    0x6e416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b,
                    mem[212 len 16]
    if roleAdmin[1][address(arg1)].field_0:
        require uint256(roleAdmin.field_0) - 1 < uint256(roleAdmin.field_0)
        require roleAdmin[1][address(arg1)].field_0 - 1 < uint256(roleAdmin.field_0)
        stor[roleAdmin[1][address(arg1)].field_0 + sha3(('name', 'roleAdmin', 0))].field_0 = stor[sha3(('name', 'roleAdmin', 0)) + uint256(roleAdmin.field_0)].field_0
        roleAdmin[1][stor[sha3(('name', 'roleAdmin', 0)) + uint256(roleAdmin.field_0)].field_0].field_0 = roleAdmin[1][address(arg1)].field_0
        require uint256(roleAdmin.field_0)
        stor[sha3(('name', 'roleAdmin', 0)) + uint256(roleAdmin.field_0)].field_0 = 0
        uint256(roleAdmin.field_0)--
        roleAdmin[1][address(arg1)].field_0 = 0
        emit RoleRevoked(0, arg1, msg.sender);
}

function addMinterRole(address arg1) payable {
    require calldata.size - 4 >= 32
    if not roleAdmin[roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956].field_512][1][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    47,
                    0x73416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e,
                    mem[211 len 17]
    if not roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956][1][address(arg1)].field_0:
        roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956].field_0++
        roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956][roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956].field_0].field_0 = arg1
        roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956][roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956].field_0].field_160 = 0
        roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956][1][address(arg1)].field_0 = roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956].field_0
        emit RoleGranted(0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956, arg1, msg.sender);
}

function addOperatorRole(address arg1) payable {
    require calldata.size - 4 >= 32
    if not roleAdmin[roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9].field_512][1][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    47,
                    0x73416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e,
                    mem[211 len 17]
    if not roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9][1][address(arg1)].field_0:
        roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9].field_0++
        roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9][roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9].field_0].field_0 = arg1
        roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9][roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9].field_0].field_160 = 0
        roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9][1][address(arg1)].field_0 = roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9].field_0
        emit RoleGranted(0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9, arg1, msg.sender);
}

function addSmartContractRole(address arg1) payable {
    require calldata.size - 4 >= 32
    if not roleAdmin[roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b].field_512][1][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    47,
                    0x73416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e,
                    mem[211 len 17]
    if not roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b][1][address(arg1)].field_0:
        roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b].field_0++
        roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b][roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b].field_0].field_0 = arg1
        roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b][roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b].field_0].field_160 = 0
        roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b][1][address(arg1)].field_0 = roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b].field_0
        emit RoleGranted(0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b, arg1, msg.sender);
}

function claimTips() payable {
    if address(devaddr) != msg.sender:
        revert with 0, 'dev: wut?'
    if tips <= 0:
        revert with 0, 'dev: broke'
    tips = 0
    require ext_code.size(rewardsAddress)
    staticcall rewardsAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if tips <= ext_call.return_data[0]:
        mem[196 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor2), uint32(stor2), Mask(224, 0, stor4.field_32)
        call rewardsAddress with:
           funct uint32(stor2)
             gas gas_remaining wei
            args Mask(480, 0, stor4.field_0), mem[260 len 4]
    else:
        mem[196 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor2), uint32(stor2), ext_call.return_data[0 len 28]
        call rewardsAddress with:
           funct uint32(stor2)
             gas gas_remaining wei
            args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[260 len 4]
    if not return_data.size:
        require ext_call.success
        require unknown_0xa9059cbb(?????), Mask(224, 0, stor2)
    else:
        mem[228 len return_data.size] = ext_call.return_data[0 len return_data.size]
        require ext_call.success
        if return_data.size:
            require return_data.size >= 32
            require mem[228]
}

function emergencyWithdraw(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < poolInfo.length
    userInfo[arg1][msg.sender].field_0 = 0
    userInfo[arg1][msg.sender].field_256 = 0
    if not ext_code.size(poolInfo[arg1].field_0):
        revert with 0, 'Address: call to non-contract'
    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, userInfo[arg1][msg.sender].field_32
    call poolInfo[arg1].field_0 with:
       funct uint32(msg.sender)
         gas gas_remaining wei
        args userInfo[arg1][msg.sender].field_0, mem[324 len 4]
    if not return_data.size:
        if not ext_call.success:
            revert with unknown_0xa9059cbb(?????), msg.sender, userInfo[arg1][msg.sender].field_0
        if not unknown_0xa9059cbb(?????), Mask(224, 32, msg.sender) >> 32:
            revert with 0, 32, 42, 0x6e5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[370 len 22]
    else:
        mem[292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            if not mem[292]:
                revert with 0, 
                            32,
                            42,
                            0x6e5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                            mem[ceil32(return_data.size) + 371 len 22]
    emit EmergencyWithdraw(userInfo[arg1][msg.sender].field_0, msg.sender, arg1);
}

function removeMinterRole(address arg1) payable {
    require calldata.size - 4 >= 32
    if not roleAdmin[roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956].field_512][1][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    48,
                    0x6e416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b,
                    mem[212 len 16]
    if roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956][1][address(arg1)].field_0:
        require roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956].field_0 - 1 < roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956].field_0
        require roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956][1][address(arg1)].field_0 - 1 < roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956].field_0
        roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956][roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956][1][address(arg1)].field_0].field_0 = roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956][roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956].field_0].field_0
        roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956][1][roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956][roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956].field_0].field_0].field_0 = roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956][1][address(arg1)].field_0
        require roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956].field_0
        roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956][roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956].field_0].field_0 = 0
        roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956].field_0--
        roleAdmin[0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956][1][address(arg1)].field_0 = 0
        emit RoleRevoked(0x299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956, arg1, msg.sender);
}

function removeOperatorRole(address arg1) payable {
    require calldata.size - 4 >= 32
    if not roleAdmin[roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9].field_512][1][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    48,
                    0x6e416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b,
                    mem[212 len 16]
    if roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9][1][address(arg1)].field_0:
        require roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9].field_0 - 1 < roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9].field_0
        require roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9][1][address(arg1)].field_0 - 1 < roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9].field_0
        roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9][roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9][1][address(arg1)].field_0].field_0 = roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9][roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9].field_0].field_0
        roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9][1][roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9][roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9].field_0].field_0].field_0 = roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9][1][address(arg1)].field_0
        require roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9].field_0
        roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9][roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9].field_0].field_0 = 0
        roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9].field_0--
        roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9][1][address(arg1)].field_0 = 0
        emit RoleRevoked(0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9, arg1, msg.sender);
}

function blocksRemaining() payable {
    if tips + totalRewardDebt < totalRewardDebt:
        revert with 0, 'SafeMath: addition overflow'
    require ext_code.size(rewardsAddress)
    staticcall rewardsAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= tips + totalRewardDebt:
        return 0
    if tips + totalRewardDebt < totalRewardDebt:
        revert with 0, 'SafeMath: addition overflow'
    require ext_code.size(rewardsAddress)
    staticcall rewardsAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if tips + totalRewardDebt > ext_call.return_data[0]:
        revert with 0, 'SafeMath: subtraction overflow'
    if not rewardsPerBlock:
        return 0
    if not devPercentage:
        if rewardsPerBlock:
            return (ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock)
    else:
        if devPercentage + 1000 < devPercentage:
            revert with 0, 'SafeMath: addition overflow'
        if not ext_call.return_data[0] - tips - totalRewardDebt:
            if devPercentage + 1000 <= 0:
                revert with 0, 'SafeMath: division by zero'
            if devPercentage + 1000:
                if rewardsPerBlock:
                    return (0 / devPercentage + 1000 / rewardsPerBlock)
        else:
            if (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / ext_call.return_data[0] - tips - totalRewardDebt != 1000:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if devPercentage + 1000 <= 0:
                revert with 0, 'SafeMath: division by zero'
            if devPercentage + 1000:
                if rewardsPerBlock:
                    return ((1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock)
    revert
}

function removeSmartContractRole(address arg1) payable {
    require calldata.size - 4 >= 32
    if not roleAdmin[roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b].field_512][1][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    48,
                    0x6e416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b,
                    mem[212 len 16]
    if roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b][1][address(arg1)].field_0:
        require roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b].field_0 - 1 < roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b].field_0
        require roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b][1][address(arg1)].field_0 - 1 < roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b].field_0
        roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b][roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b][1][address(arg1)].field_0].field_0 = roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b][roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b].field_0].field_0
        roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b][1][roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b][roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b].field_0].field_0].field_0 = roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b][1][address(arg1)].field_0
        require roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b].field_0
        roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b][roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b].field_0].field_0 = 0
        roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b].field_0--
        roleAdmin[0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b][1][address(arg1)].field_0 = 0
        emit RoleRevoked(0x749d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873b, arg1, msg.sender);
}

function getMultiplier(uint256 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if tips + totalRewardDebt < totalRewardDebt:
        revert with 0, 'SafeMath: addition overflow'
    require ext_code.size(rewardsAddress)
    staticcall rewardsAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= tips + totalRewardDebt:
        return 0
    if tips + totalRewardDebt < totalRewardDebt:
        revert with 0, 'SafeMath: addition overflow'
    require ext_code.size(rewardsAddress)
    staticcall rewardsAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if tips + totalRewardDebt > ext_call.return_data[0]:
        revert with 0, 'SafeMath: subtraction overflow'
    if not rewardsPerBlock:
        return 0
    if not devPercentage:
        require rewardsPerBlock
        if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
            return 0
        if arg2 <= bonusEndBlock:
            if arg1 > arg2:
                revert with 0, 'SafeMath: subtraction overflow'
            if not arg2 - arg1:
                if 0 <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                    return 0
            else:
                if (arg2 * bonusMultiplier) - (arg1 * bonusMultiplier) / arg2 - arg1 != bonusMultiplier:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (arg2 * bonusMultiplier) - (arg1 * bonusMultiplier) <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                    return ((arg2 * bonusMultiplier) - (arg1 * bonusMultiplier))
        else:
            if arg1 >= bonusEndBlock:
                if arg1 > arg2:
                    revert with 0, 'SafeMath: subtraction overflow'
                if arg2 - arg1 <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                    return (arg2 - arg1)
            else:
                if bonusEndBlock > arg2:
                    revert with 0, 'SafeMath: subtraction overflow'
                if arg1 > bonusEndBlock:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not bonusEndBlock - arg1:
                    if arg2 - bonusEndBlock < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if arg2 - bonusEndBlock <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                        return (arg2 - bonusEndBlock)
                else:
                    if (bonusEndBlock * bonusMultiplier) - (arg1 * bonusMultiplier) / bonusEndBlock - arg1 != bonusMultiplier:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if arg2 - bonusEndBlock < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if arg2 - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (arg1 * bonusMultiplier) <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                        return (arg2 - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (arg1 * bonusMultiplier))
        return (ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock)
    if devPercentage + 1000 < devPercentage:
        revert with 0, 'SafeMath: addition overflow'
    if not ext_call.return_data[0] - tips - totalRewardDebt:
        if devPercentage + 1000 <= 0:
            revert with 0, 'SafeMath: division by zero'
        require devPercentage + 1000
        require rewardsPerBlock
        if not 0 / devPercentage + 1000 / rewardsPerBlock:
            return 0
        if arg2 <= bonusEndBlock:
            if arg1 > arg2:
                revert with 0, 'SafeMath: subtraction overflow'
            if not arg2 - arg1:
                if 0 <= 0 / devPercentage + 1000 / rewardsPerBlock:
                    return 0
            else:
                if (arg2 * bonusMultiplier) - (arg1 * bonusMultiplier) / arg2 - arg1 != bonusMultiplier:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (arg2 * bonusMultiplier) - (arg1 * bonusMultiplier) <= 0 / devPercentage + 1000 / rewardsPerBlock:
                    return ((arg2 * bonusMultiplier) - (arg1 * bonusMultiplier))
        else:
            if arg1 >= bonusEndBlock:
                if arg1 > arg2:
                    revert with 0, 'SafeMath: subtraction overflow'
                if arg2 - arg1 <= 0 / devPercentage + 1000 / rewardsPerBlock:
                    return (arg2 - arg1)
            else:
                if bonusEndBlock > arg2:
                    revert with 0, 'SafeMath: subtraction overflow'
                if arg1 > bonusEndBlock:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not bonusEndBlock - arg1:
                    if arg2 - bonusEndBlock < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if arg2 - bonusEndBlock <= 0 / devPercentage + 1000 / rewardsPerBlock:
                        return (arg2 - bonusEndBlock)
                else:
                    if (bonusEndBlock * bonusMultiplier) - (arg1 * bonusMultiplier) / bonusEndBlock - arg1 != bonusMultiplier:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if arg2 - bonusEndBlock < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if arg2 - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (arg1 * bonusMultiplier) <= 0 / devPercentage + 1000 / rewardsPerBlock:
                        return (arg2 - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (arg1 * bonusMultiplier))
        return (0 / devPercentage + 1000 / rewardsPerBlock)
    if (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / ext_call.return_data[0] - tips - totalRewardDebt != 1000:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if devPercentage + 1000 <= 0:
        revert with 0, 'SafeMath: division by zero'
    require devPercentage + 1000
    require rewardsPerBlock
    if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
        return 0
    if arg2 <= bonusEndBlock:
        if arg1 > arg2:
            revert with 0, 'SafeMath: subtraction overflow'
        if not arg2 - arg1:
            if 0 <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                return 0
        else:
            if (arg2 * bonusMultiplier) - (arg1 * bonusMultiplier) / arg2 - arg1 != bonusMultiplier:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if (arg2 * bonusMultiplier) - (arg1 * bonusMultiplier) <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                return ((arg2 * bonusMultiplier) - (arg1 * bonusMultiplier))
    else:
        if arg1 >= bonusEndBlock:
            if arg1 > arg2:
                revert with 0, 'SafeMath: subtraction overflow'
            if arg2 - arg1 <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                return (arg2 - arg1)
        else:
            if bonusEndBlock > arg2:
                revert with 0, 'SafeMath: subtraction overflow'
            if arg1 > bonusEndBlock:
                revert with 0, 'SafeMath: subtraction overflow'
            if not bonusEndBlock - arg1:
                if arg2 - bonusEndBlock < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if arg2 - bonusEndBlock <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                    return (arg2 - bonusEndBlock)
            else:
                if (bonusEndBlock * bonusMultiplier) - (arg1 * bonusMultiplier) / bonusEndBlock - arg1 != bonusMultiplier:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if arg2 - bonusEndBlock < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if arg2 - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (arg1 * bonusMultiplier) <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                    return (arg2 - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (arg1 * bonusMultiplier))
    return ((1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock)
}

function pendingRewards(uint256 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 < poolInfo.length
    require ext_code.size(poolInfo[arg1].field_0)
    staticcall poolInfo[arg1].field_0.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if block.number <= poolInfo[arg1].field_512:
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return ((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if not ext_call.return_data[0]:
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return ((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if tips + totalRewardDebt < totalRewardDebt:
        revert with 0, 'SafeMath: addition overflow'
    require ext_code.size(rewardsAddress)
    staticcall rewardsAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= tips + totalRewardDebt:
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not 0 / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if tips + totalRewardDebt < totalRewardDebt:
        revert with 0, 'SafeMath: addition overflow'
    require ext_code.size(rewardsAddress)
    staticcall rewardsAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if tips + totalRewardDebt > ext_call.return_data[0]:
        revert with 0, 'SafeMath: subtraction overflow'
    if not rewardsPerBlock:
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not 0 / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if not devPercentage:
        require rewardsPerBlock
        if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if block.number <= bonusEndBlock:
            if poolInfo[arg1].field_512 > block.number:
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.number - poolInfo[arg1].field_512:
                if 0 <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not 0 / totalAllocPoint:
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[arg1][address(arg2)].field_0:
                        if userInfo[arg1][address(arg2)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -userInfo[arg1][address(arg2)].field_256
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            else:
                if (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / block.number - poolInfo[arg1].field_512 != bonusMultiplier:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                    if not (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock) / (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != rewardsPerBlock:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if not (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock):
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[arg1].field_256:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[arg1][address(arg2)].field_0:
                        if userInfo[arg1][address(arg2)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -userInfo[arg1][address(arg2)].field_256
                    if (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][address(arg2)].field_256 > (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (((10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        else:
            if poolInfo[arg1].field_512 >= bonusEndBlock:
                if poolInfo[arg1].field_512 > block.number:
                    revert with 0, 'SafeMath: subtraction overflow'
                if block.number - poolInfo[arg1].field_512 <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                    if not block.number - poolInfo[arg1].field_512:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if (block.number * rewardsPerBlock) - (poolInfo[arg1].field_512 * rewardsPerBlock) / block.number - poolInfo[arg1].field_512 != rewardsPerBlock:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if not (block.number * rewardsPerBlock) - (poolInfo[arg1].field_512 * rewardsPerBlock):
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / (block.number * rewardsPerBlock) - (poolInfo[arg1].field_512 * rewardsPerBlock) != poolInfo[arg1].field_256:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if 10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[arg1][address(arg2)].field_0:
                        if userInfo[arg1][address(arg2)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -userInfo[arg1][address(arg2)].field_256
                    if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][address(arg2)].field_256 > (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (((10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            else:
                if bonusEndBlock > block.number:
                    revert with 0, 'SafeMath: subtraction overflow'
                if poolInfo[arg1].field_512 > bonusEndBlock:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not bonusEndBlock - poolInfo[arg1].field_512:
                    if block.number - bonusEndBlock < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if block.number - bonusEndBlock <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                        if not block.number - bonusEndBlock:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not userInfo[arg1][address(arg2)].field_0:
                                    if userInfo[arg1][address(arg2)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    return -userInfo[arg1][address(arg2)].field_256
                                if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) / block.number - bonusEndBlock != rewardsPerBlock:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock):
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not userInfo[arg1][address(arg2)].field_0:
                                    if userInfo[arg1][address(arg2)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    return -userInfo[arg1][address(arg2)].field_256
                                if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) != poolInfo[arg1].field_256:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if 10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                else:
                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if block.number - bonusEndBlock < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                        if not block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not userInfo[arg1][address(arg2)].field_0:
                                    if userInfo[arg1][address(arg2)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    return -userInfo[arg1][address(arg2)].field_256
                                if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock) / block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != rewardsPerBlock:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock):
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not userInfo[arg1][address(arg2)].field_0:
                                    if userInfo[arg1][address(arg2)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    return -userInfo[arg1][address(arg2)].field_256
                                if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[arg1].field_256:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if 10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != rewardsPerBlock:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if poolInfo[arg1].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != poolInfo[arg1].field_256:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not poolInfo[arg1].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if 10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[arg1].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != 10^12:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if (10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if devPercentage + 1000 < devPercentage:
        revert with 0, 'SafeMath: addition overflow'
    if not ext_call.return_data[0] - tips - totalRewardDebt:
        if devPercentage + 1000 <= 0:
            revert with 0, 'SafeMath: division by zero'
        require devPercentage + 1000
        require rewardsPerBlock
        if not 0 / devPercentage + 1000 / rewardsPerBlock:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if block.number <= bonusEndBlock:
            if poolInfo[arg1].field_512 > block.number:
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.number - poolInfo[arg1].field_512:
                if 0 <= 0 / devPercentage + 1000 / rewardsPerBlock:
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not 0 / totalAllocPoint:
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[arg1][address(arg2)].field_0:
                        if userInfo[arg1][address(arg2)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -userInfo[arg1][address(arg2)].field_256
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            else:
                if (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / block.number - poolInfo[arg1].field_512 != bonusMultiplier:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) <= 0 / devPercentage + 1000 / rewardsPerBlock:
                    if not (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock) / (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != rewardsPerBlock:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if not (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock):
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[arg1].field_256:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[arg1][address(arg2)].field_0:
                        if userInfo[arg1][address(arg2)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -userInfo[arg1][address(arg2)].field_256
                    if (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][address(arg2)].field_256 > (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (((10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        else:
            if poolInfo[arg1].field_512 >= bonusEndBlock:
                if poolInfo[arg1].field_512 > block.number:
                    revert with 0, 'SafeMath: subtraction overflow'
                if block.number - poolInfo[arg1].field_512 <= 0 / devPercentage + 1000 / rewardsPerBlock:
                    if not block.number - poolInfo[arg1].field_512:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if (block.number * rewardsPerBlock) - (poolInfo[arg1].field_512 * rewardsPerBlock) / block.number - poolInfo[arg1].field_512 != rewardsPerBlock:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if not (block.number * rewardsPerBlock) - (poolInfo[arg1].field_512 * rewardsPerBlock):
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / (block.number * rewardsPerBlock) - (poolInfo[arg1].field_512 * rewardsPerBlock) != poolInfo[arg1].field_256:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if 10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[arg1][address(arg2)].field_0:
                        if userInfo[arg1][address(arg2)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -userInfo[arg1][address(arg2)].field_256
                    if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][address(arg2)].field_256 > (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (((10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            else:
                if bonusEndBlock > block.number:
                    revert with 0, 'SafeMath: subtraction overflow'
                if poolInfo[arg1].field_512 > bonusEndBlock:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not bonusEndBlock - poolInfo[arg1].field_512:
                    if block.number - bonusEndBlock < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if block.number - bonusEndBlock <= 0 / devPercentage + 1000 / rewardsPerBlock:
                        if not block.number - bonusEndBlock:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not userInfo[arg1][address(arg2)].field_0:
                                    if userInfo[arg1][address(arg2)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    return -userInfo[arg1][address(arg2)].field_256
                                if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) / block.number - bonusEndBlock != rewardsPerBlock:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock):
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not userInfo[arg1][address(arg2)].field_0:
                                    if userInfo[arg1][address(arg2)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    return -userInfo[arg1][address(arg2)].field_256
                                if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) != poolInfo[arg1].field_256:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if 10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                else:
                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if block.number - bonusEndBlock < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) <= 0 / devPercentage + 1000 / rewardsPerBlock:
                        if not block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not userInfo[arg1][address(arg2)].field_0:
                                    if userInfo[arg1][address(arg2)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    return -userInfo[arg1][address(arg2)].field_256
                                if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock) / block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != rewardsPerBlock:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock):
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not userInfo[arg1][address(arg2)].field_0:
                                    if userInfo[arg1][address(arg2)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    return -userInfo[arg1][address(arg2)].field_256
                                if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[arg1].field_256:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if 10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if not 0 / devPercentage + 1000 / rewardsPerBlock:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / 0 / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if poolInfo[arg1].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock != poolInfo[arg1].field_256:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not poolInfo[arg1].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if 10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[arg1].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if (10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / ext_call.return_data[0] - tips - totalRewardDebt != 1000:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if devPercentage + 1000 <= 0:
        revert with 0, 'SafeMath: division by zero'
    require devPercentage + 1000
    require rewardsPerBlock
    if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not 0 / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if block.number <= bonusEndBlock:
        if poolInfo[arg1].field_512 > block.number:
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.number - poolInfo[arg1].field_512:
            if 0 <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                if totalAllocPoint <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require totalAllocPoint
                if not 0 / totalAllocPoint:
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[arg1][address(arg2)].field_0:
                        if userInfo[arg1][address(arg2)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -userInfo[arg1][address(arg2)].field_256
                    if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        else:
            if (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / block.number - poolInfo[arg1].field_512 != bonusMultiplier:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                if not (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not 0 / totalAllocPoint:
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[arg1][address(arg2)].field_0:
                        if userInfo[arg1][address(arg2)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -userInfo[arg1][address(arg2)].field_256
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                if (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock) / (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != rewardsPerBlock:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock):
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not 0 / totalAllocPoint:
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[arg1][address(arg2)].field_0:
                        if userInfo[arg1][address(arg2)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -userInfo[arg1][address(arg2)].field_256
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                if (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[arg1].field_256:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if totalAllocPoint <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require totalAllocPoint
                if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[arg1][address(arg2)].field_0:
                        if userInfo[arg1][address(arg2)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -userInfo[arg1][address(arg2)].field_256
                    if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                if 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                if (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    else:
        if poolInfo[arg1].field_512 >= bonusEndBlock:
            if poolInfo[arg1].field_512 > block.number:
                revert with 0, 'SafeMath: subtraction overflow'
            if block.number - poolInfo[arg1].field_512 <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                if not block.number - poolInfo[arg1].field_512:
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not 0 / totalAllocPoint:
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[arg1][address(arg2)].field_0:
                        if userInfo[arg1][address(arg2)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -userInfo[arg1][address(arg2)].field_256
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                if (block.number * rewardsPerBlock) - (poolInfo[arg1].field_512 * rewardsPerBlock) / block.number - poolInfo[arg1].field_512 != rewardsPerBlock:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not (block.number * rewardsPerBlock) - (poolInfo[arg1].field_512 * rewardsPerBlock):
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not 0 / totalAllocPoint:
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[arg1][address(arg2)].field_0:
                        if userInfo[arg1][address(arg2)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -userInfo[arg1][address(arg2)].field_256
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                if (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / (block.number * rewardsPerBlock) - (poolInfo[arg1].field_512 * rewardsPerBlock) != poolInfo[arg1].field_256:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if totalAllocPoint <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require totalAllocPoint
                if not (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[arg1][address(arg2)].field_0:
                        if userInfo[arg1][address(arg2)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -userInfo[arg1][address(arg2)].field_256
                    if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                if 10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        else:
            if bonusEndBlock > block.number:
                revert with 0, 'SafeMath: subtraction overflow'
            if poolInfo[arg1].field_512 > bonusEndBlock:
                revert with 0, 'SafeMath: subtraction overflow'
            if not bonusEndBlock - poolInfo[arg1].field_512:
                if block.number - bonusEndBlock < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if block.number - bonusEndBlock <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                    if not block.number - bonusEndBlock:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) / block.number - bonusEndBlock != rewardsPerBlock:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock):
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) != poolInfo[arg1].field_256:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if 10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[arg1][address(arg2)].field_0:
                        if userInfo[arg1][address(arg2)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -userInfo[arg1][address(arg2)].field_256
                    if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][address(arg2)].field_256 > (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (((10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            else:
                if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if block.number - bonusEndBlock < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                    if not block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock) / block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != rewardsPerBlock:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock):
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[arg1][address(arg2)].field_0:
                                if userInfo[arg1][address(arg2)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                return -userInfo[arg1][address(arg2)].field_256
                            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[arg1].field_256:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[arg1][address(arg2)].field_0:
                            if userInfo[arg1][address(arg2)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return -userInfo[arg1][address(arg2)].field_256
                        if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
                    if 10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[arg1][address(arg2)].field_0:
                        if userInfo[arg1][address(arg2)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -userInfo[arg1][address(arg2)].field_256
                    if (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][address(arg2)].field_256 > (10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (((10^12 * (block.number * rewardsPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[arg1].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not 0 / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not 0 / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if poolInfo[arg1].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != poolInfo[arg1].field_256:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if totalAllocPoint <= 0:
        revert with 0, 'SafeMath: division by zero'
    require totalAllocPoint
    if not poolInfo[arg1].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if 10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[arg1].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if ext_call.return_data[0] <= 0:
        revert with 0, 'SafeMath: division by zero'
    require ext_call.return_data[0]
    if (10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
        revert with 0, 'SafeMath: addition overflow'
    if not userInfo[arg1][address(arg2)].field_0:
        if userInfo[arg1][address(arg2)].field_256 > 0:
            revert with 0, 'SafeMath: subtraction overflow'
        return -userInfo[arg1][address(arg2)].field_256
    if (10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if userInfo[arg1][address(arg2)].field_256 > (10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
        revert with 0, 'SafeMath: subtraction overflow'
    return (((10^12 * poolInfo[arg1].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
}

function massUpdatePools() payable {
    idx = 0
    while idx < poolInfo.length:
        mem[0] = 10
        if block.number > poolInfo[idx].field_512:
            mem[100] = this.address
            require ext_code.size(poolInfo[idx].field_0)
            staticcall poolInfo[idx].field_0.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0]:
                if tips + totalRewardDebt < totalRewardDebt:
                    revert with 0, 'SafeMath: addition overflow'
                mem[100] = this.address
                require ext_code.size(rewardsAddress)
                staticcall rewardsAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] <= tips + totalRewardDebt:
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if devPercentage:
                        if not 0 / totalAllocPoint:
                            if tips < tips:
                                revert with 0, 'SafeMath: addition overflow'
                        else:
                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                revert with 0, 'SafeMath: addition overflow'
                            tips += devPercentage * 0 / totalAllocPoint / 1000
                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                        revert with 0, 'SafeMath: addition overflow'
                    totalRewardDebt += 0 / totalAllocPoint
                    if not 0 / totalAllocPoint:
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                    else:
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                else:
                    if tips + totalRewardDebt < totalRewardDebt:
                        revert with 0, 'SafeMath: addition overflow'
                    mem[100] = this.address
                    require ext_code.size(rewardsAddress)
                    staticcall rewardsAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if tips + totalRewardDebt > ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not rewardsPerBlock:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if devPercentage:
                            if not 0 / totalAllocPoint:
                                if tips < tips:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                    revert with 0, 'SafeMath: addition overflow'
                                tips += devPercentage * 0 / totalAllocPoint / 1000
                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                            revert with 0, 'SafeMath: addition overflow'
                        totalRewardDebt += 0 / totalAllocPoint
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    else:
                        if not devPercentage:
                            require rewardsPerBlock
                            if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if devPercentage:
                                    if not 0 / totalAllocPoint:
                                        if tips < tips:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                            revert with 0, 'SafeMath: addition overflow'
                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalRewardDebt += 0 / totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if block.number <= bonusEndBlock:
                                    if poolInfo[idx].field_512 > block.number:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.number - poolInfo[idx].field_512:
                                        if 0 <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if devPercentage:
                                                if not 0 / totalAllocPoint:
                                                    if tips < tips:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalRewardDebt += 0 / totalAllocPoint
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                            else:
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if devPercentage:
                                                    if not 0 / totalAllocPoint:
                                                        if tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalRewardDebt += 0 / totalAllocPoint
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                else:
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != rewardsPerBlock:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000
                                                    if (poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint
                                                    if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / block.number - poolInfo[idx].field_512 != bonusMultiplier:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                            if not (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if devPercentage:
                                                    if not 0 / totalAllocPoint:
                                                        if tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalRewardDebt += 0 / totalAllocPoint
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                else:
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                    if ((block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                    if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if devPercentage:
                                                    if not 0 / totalAllocPoint:
                                                        if tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalRewardDebt += 0 / totalAllocPoint
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                else:
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != rewardsPerBlock:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000
                                                    if (poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint
                                                    if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if poolInfo[idx].field_512 >= bonusEndBlock:
                                        if poolInfo[idx].field_512 > block.number:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if block.number - poolInfo[idx].field_512 <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                            if not block.number - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if devPercentage:
                                                    if not 0 / totalAllocPoint:
                                                        if tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalRewardDebt += 0 / totalAllocPoint
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                else:
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) / block.number - poolInfo[idx].field_512 != rewardsPerBlock:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                    if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                    if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if devPercentage:
                                                    if not 0 / totalAllocPoint:
                                                        if tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalRewardDebt += 0 / totalAllocPoint
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                else:
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != rewardsPerBlock:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000
                                                    if (poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint
                                                    if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if bonusEndBlock > block.number:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if poolInfo[idx].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[idx].field_512:
                                            if block.number - bonusEndBlock < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if block.number - bonusEndBlock <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                if not block.number - bonusEndBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) / block.number - bonusEndBlock != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                        if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000
                                                        if (poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint
                                                        if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if block.number - bonusEndBlock < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                if not block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                        if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000
                                                        if (poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint
                                                        if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                        else:
                            if devPercentage + 1000 < devPercentage:
                                revert with 0, 'SafeMath: addition overflow'
                            if not ext_call.return_data[0] - tips - totalRewardDebt:
                                if devPercentage + 1000 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require devPercentage + 1000
                                require rewardsPerBlock
                                if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if devPercentage:
                                        if not 0 / totalAllocPoint:
                                            if tips < tips:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                revert with 0, 'SafeMath: addition overflow'
                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalRewardDebt += 0 / totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if block.number <= bonusEndBlock:
                                        if poolInfo[idx].field_512 > block.number:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not block.number - poolInfo[idx].field_512:
                                            if 0 <= 0 / devPercentage + 1000 / rewardsPerBlock:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if devPercentage:
                                                    if not 0 / totalAllocPoint:
                                                        if tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalRewardDebt += 0 / totalAllocPoint
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                else:
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / 0 / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                        if (poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                        if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / block.number - poolInfo[idx].field_512 != bonusMultiplier:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= 0 / devPercentage + 1000 / rewardsPerBlock:
                                                if not (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                        if ((block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / 0 / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                        if (poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                        if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if poolInfo[idx].field_512 >= bonusEndBlock:
                                            if poolInfo[idx].field_512 > block.number:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if block.number - poolInfo[idx].field_512 <= 0 / devPercentage + 1000 / rewardsPerBlock:
                                                if not block.number - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) / block.number - poolInfo[idx].field_512 != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                        if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / 0 / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                        if (poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                        if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if bonusEndBlock > block.number:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if block.number - bonusEndBlock < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if block.number - bonusEndBlock <= 0 / devPercentage + 1000 / rewardsPerBlock:
                                                    if not block.number - bonusEndBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) / block.number - bonusEndBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                            if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / 0 / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if block.number - bonusEndBlock < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= 0 / devPercentage + 1000 / rewardsPerBlock:
                                                    if not block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                            if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / 0 / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / ext_call.return_data[0] - tips - totalRewardDebt != 1000:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if devPercentage + 1000 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require devPercentage + 1000
                                require rewardsPerBlock
                                if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if devPercentage:
                                        if not 0 / totalAllocPoint:
                                            if tips < tips:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                revert with 0, 'SafeMath: addition overflow'
                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalRewardDebt += 0 / totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if block.number <= bonusEndBlock:
                                        if poolInfo[idx].field_512 > block.number:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not block.number - poolInfo[idx].field_512:
                                            if 0 <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if devPercentage:
                                                    if not 0 / totalAllocPoint:
                                                        if tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalRewardDebt += 0 / totalAllocPoint
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                else:
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                        if (poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                        if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / block.number - poolInfo[idx].field_512 != bonusMultiplier:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                if not (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                        if ((block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                        if (poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                        if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if poolInfo[idx].field_512 >= bonusEndBlock:
                                            if poolInfo[idx].field_512 > block.number:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if block.number - poolInfo[idx].field_512 <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                if not block.number - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) / block.number - poolInfo[idx].field_512 != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                        if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                        if (poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                        if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if bonusEndBlock > block.number:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if block.number - bonusEndBlock < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if block.number - bonusEndBlock <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                    if not block.number - bonusEndBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) / block.number - bonusEndBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                            if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if block.number - bonusEndBlock < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                    if not block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                            if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
            poolInfo[idx].field_512 = block.number
        idx = idx + 1
        continue 
}

function addToken(uint256 arg1, address arg2, bool arg3) payable {
    require calldata.size - 4 >= 96
    if not roleAdmin[1][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    41,
                    0xfd4d6173746572436865662e616464546f6b656e3a2053656e646572206d7573742062652061646d69,
                    mem[205 len 23]
    if arg3:
        idx = 0
        while idx < poolInfo.length:
            mem[0] = 10
            if block.number > poolInfo[idx].field_512:
                mem[100] = this.address
                require ext_code.size(poolInfo[idx].field_0)
                staticcall poolInfo[idx].field_0.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0]:
                    if tips + totalRewardDebt < totalRewardDebt:
                        revert with 0, 'SafeMath: addition overflow'
                    mem[100] = this.address
                    require ext_code.size(rewardsAddress)
                    staticcall rewardsAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] <= tips + totalRewardDebt:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if devPercentage:
                            if not 0 / totalAllocPoint:
                                if tips < tips:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                    revert with 0, 'SafeMath: addition overflow'
                                tips += devPercentage * 0 / totalAllocPoint / 1000
                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                            revert with 0, 'SafeMath: addition overflow'
                        totalRewardDebt += 0 / totalAllocPoint
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    else:
                        if tips + totalRewardDebt < totalRewardDebt:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[100] = this.address
                        require ext_code.size(rewardsAddress)
                        staticcall rewardsAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if tips + totalRewardDebt > ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not rewardsPerBlock:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if devPercentage:
                                if not 0 / totalAllocPoint:
                                    if tips < tips:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                        revert with 0, 'SafeMath: addition overflow'
                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                revert with 0, 'SafeMath: addition overflow'
                            totalRewardDebt += 0 / totalAllocPoint
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        else:
                            if not devPercentage:
                                require rewardsPerBlock
                                if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if devPercentage:
                                        if not 0 / totalAllocPoint:
                                            if tips < tips:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                revert with 0, 'SafeMath: addition overflow'
                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalRewardDebt += 0 / totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if block.number <= bonusEndBlock:
                                        if poolInfo[idx].field_512 > block.number:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not block.number - poolInfo[idx].field_512:
                                            if 0 <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if devPercentage:
                                                    if not 0 / totalAllocPoint:
                                                        if tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalRewardDebt += 0 / totalAllocPoint
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                else:
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000
                                                        if (poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint
                                                        if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / block.number - poolInfo[idx].field_512 != bonusMultiplier:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                if not (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                        if ((block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000
                                                        if (poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint
                                                        if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if poolInfo[idx].field_512 >= bonusEndBlock:
                                            if poolInfo[idx].field_512 > block.number:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if block.number - poolInfo[idx].field_512 <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                if not block.number - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) / block.number - poolInfo[idx].field_512 != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                        if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000
                                                        if (poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint
                                                        if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if bonusEndBlock > block.number:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if block.number - bonusEndBlock < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if block.number - bonusEndBlock <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                    if not block.number - bonusEndBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) / block.number - bonusEndBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                            if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if block.number - bonusEndBlock < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                    if not block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                            if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if devPercentage + 1000 < devPercentage:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not ext_call.return_data[0] - tips - totalRewardDebt:
                                    if devPercentage + 1000 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require devPercentage + 1000
                                    require rewardsPerBlock
                                    if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if devPercentage:
                                            if not 0 / totalAllocPoint:
                                                if tips < tips:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalRewardDebt += 0 / totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if block.number <= bonusEndBlock:
                                            if poolInfo[idx].field_512 > block.number:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not block.number - poolInfo[idx].field_512:
                                                if 0 <= 0 / devPercentage + 1000 / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / 0 / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / block.number - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= 0 / devPercentage + 1000 / rewardsPerBlock:
                                                    if not (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                            if ((block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / 0 / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if poolInfo[idx].field_512 >= bonusEndBlock:
                                                if poolInfo[idx].field_512 > block.number:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if block.number - poolInfo[idx].field_512 <= 0 / devPercentage + 1000 / rewardsPerBlock:
                                                    if not block.number - poolInfo[idx].field_512:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) / block.number - poolInfo[idx].field_512 != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                            if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / 0 / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if bonusEndBlock > block.number:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if block.number - bonusEndBlock < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if block.number - bonusEndBlock <= 0 / devPercentage + 1000 / rewardsPerBlock:
                                                        if not block.number - bonusEndBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) / block.number - bonusEndBlock != rewardsPerBlock:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not 0 / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += 0 / totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                                if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / 0 / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not 0 / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += 0 / totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                if poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                                if (poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if block.number - bonusEndBlock < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= 0 / devPercentage + 1000 / rewardsPerBlock:
                                                        if not block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not 0 / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += 0 / totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                                if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / 0 / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not 0 / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += 0 / totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                if poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                                if (poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / ext_call.return_data[0] - tips - totalRewardDebt != 1000:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if devPercentage + 1000 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require devPercentage + 1000
                                    require rewardsPerBlock
                                    if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if devPercentage:
                                            if not 0 / totalAllocPoint:
                                                if tips < tips:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalRewardDebt += 0 / totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if block.number <= bonusEndBlock:
                                            if poolInfo[idx].field_512 > block.number:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not block.number - poolInfo[idx].field_512:
                                                if 0 <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / block.number - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                    if not (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                            if ((block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if poolInfo[idx].field_512 >= bonusEndBlock:
                                                if poolInfo[idx].field_512 > block.number:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if block.number - poolInfo[idx].field_512 <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                    if not block.number - poolInfo[idx].field_512:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) / block.number - poolInfo[idx].field_512 != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                            if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if bonusEndBlock > block.number:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if block.number - bonusEndBlock < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if block.number - bonusEndBlock <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                        if not block.number - bonusEndBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) / block.number - bonusEndBlock != rewardsPerBlock:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not 0 / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += 0 / totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                                if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not 0 / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += 0 / totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                if poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                                if (poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if block.number - bonusEndBlock < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                        if not block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not 0 / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += 0 / totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                                if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not 0 / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += 0 / totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                if poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                                if (poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
            idx = idx + 1
            continue 
    if arg1 + totalAllocPoint < totalAllocPoint:
        revert with 0, 'SafeMath: addition overflow'
    totalAllocPoint += arg1
    poolInfo.length++
    poolInfo[poolInfo.length].field_0 = arg2
    storC65A[stor10.length] = arg1
    if block.number > startBlock:
        storC65A[stor10.length] = block.number
    else:
        storC65A[stor10.length] = startBlock
    storC65A[stor10.length] = 0
}

function set(uint256 arg1, uint256 arg2, bool arg3) payable {
    require calldata.size - 4 >= 96
    if not roleAdmin[0x7797667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9][1][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    36,
                    0xa64d6173746572436865662e7365743a2053656e646572206d7573742062652061646d69,
                    mem[200 len 28]
    if arg3:
        idx = 0
        while idx < poolInfo.length:
            mem[0] = 10
            if block.number > poolInfo[idx].field_512:
                mem[100] = this.address
                require ext_code.size(poolInfo[idx].field_0)
                staticcall poolInfo[idx].field_0.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0]:
                    if tips + totalRewardDebt < totalRewardDebt:
                        revert with 0, 'SafeMath: addition overflow'
                    mem[100] = this.address
                    require ext_code.size(rewardsAddress)
                    staticcall rewardsAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] <= tips + totalRewardDebt:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if devPercentage:
                            if not 0 / totalAllocPoint:
                                if tips < tips:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                    revert with 0, 'SafeMath: addition overflow'
                                tips += devPercentage * 0 / totalAllocPoint / 1000
                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                            revert with 0, 'SafeMath: addition overflow'
                        totalRewardDebt += 0 / totalAllocPoint
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    else:
                        if tips + totalRewardDebt < totalRewardDebt:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[100] = this.address
                        require ext_code.size(rewardsAddress)
                        staticcall rewardsAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if tips + totalRewardDebt > ext_call.return_data[0]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not rewardsPerBlock:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if devPercentage:
                                if not 0 / totalAllocPoint:
                                    if tips < tips:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                        revert with 0, 'SafeMath: addition overflow'
                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                revert with 0, 'SafeMath: addition overflow'
                            totalRewardDebt += 0 / totalAllocPoint
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        else:
                            if not devPercentage:
                                require rewardsPerBlock
                                if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if devPercentage:
                                        if not 0 / totalAllocPoint:
                                            if tips < tips:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                revert with 0, 'SafeMath: addition overflow'
                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalRewardDebt += 0 / totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if block.number <= bonusEndBlock:
                                        if poolInfo[idx].field_512 > block.number:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not block.number - poolInfo[idx].field_512:
                                            if 0 <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if devPercentage:
                                                    if not 0 / totalAllocPoint:
                                                        if tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalRewardDebt += 0 / totalAllocPoint
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                else:
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000
                                                        if (poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint
                                                        if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / block.number - poolInfo[idx].field_512 != bonusMultiplier:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                if not (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                        if ((block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000
                                                        if (poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint
                                                        if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if poolInfo[idx].field_512 >= bonusEndBlock:
                                            if poolInfo[idx].field_512 > block.number:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if block.number - poolInfo[idx].field_512 <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                if not block.number - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) / block.number - poolInfo[idx].field_512 != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                        if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != rewardsPerBlock:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000
                                                        if (poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint
                                                        if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if bonusEndBlock > block.number:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if block.number - bonusEndBlock < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if block.number - bonusEndBlock <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                    if not block.number - bonusEndBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) / block.number - bonusEndBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                            if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if block.number - bonusEndBlock < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                    if not block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                            if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * ext_call.return_data[0] - tips - totalRewardDebt / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if devPercentage + 1000 < devPercentage:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not ext_call.return_data[0] - tips - totalRewardDebt:
                                    if devPercentage + 1000 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require devPercentage + 1000
                                    require rewardsPerBlock
                                    if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if devPercentage:
                                            if not 0 / totalAllocPoint:
                                                if tips < tips:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalRewardDebt += 0 / totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if block.number <= bonusEndBlock:
                                            if poolInfo[idx].field_512 > block.number:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not block.number - poolInfo[idx].field_512:
                                                if 0 <= 0 / devPercentage + 1000 / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / 0 / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / block.number - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= 0 / devPercentage + 1000 / rewardsPerBlock:
                                                    if not (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                            if ((block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / 0 / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if poolInfo[idx].field_512 >= bonusEndBlock:
                                                if poolInfo[idx].field_512 > block.number:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if block.number - poolInfo[idx].field_512 <= 0 / devPercentage + 1000 / rewardsPerBlock:
                                                    if not block.number - poolInfo[idx].field_512:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) / block.number - poolInfo[idx].field_512 != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                            if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / 0 / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if bonusEndBlock > block.number:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if block.number - bonusEndBlock < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if block.number - bonusEndBlock <= 0 / devPercentage + 1000 / rewardsPerBlock:
                                                        if not block.number - bonusEndBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) / block.number - bonusEndBlock != rewardsPerBlock:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not 0 / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += 0 / totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                                if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / 0 / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not 0 / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += 0 / totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                if poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                                if (poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if block.number - bonusEndBlock < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= 0 / devPercentage + 1000 / rewardsPerBlock:
                                                        if not block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not 0 / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += 0 / totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                                if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if not 0 / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / 0 / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not 0 / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += 0 / totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                if poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                                if (poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * 0 / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / ext_call.return_data[0] - tips - totalRewardDebt != 1000:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if devPercentage + 1000 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require devPercentage + 1000
                                    require rewardsPerBlock
                                    if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if devPercentage:
                                            if not 0 / totalAllocPoint:
                                                if tips < tips:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalRewardDebt += 0 / totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if block.number <= bonusEndBlock:
                                            if poolInfo[idx].field_512 > block.number:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not block.number - poolInfo[idx].field_512:
                                                if 0 <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if devPercentage:
                                                        if not 0 / totalAllocPoint:
                                                            if tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            tips += devPercentage * 0 / totalAllocPoint / 1000
                                                    if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalRewardDebt += 0 / totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / block.number - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                    if not (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                            if ((block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if not (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.number * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if poolInfo[idx].field_512 >= bonusEndBlock:
                                                if poolInfo[idx].field_512 > block.number:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if block.number - poolInfo[idx].field_512 <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                    if not block.number - poolInfo[idx].field_512:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) / block.number - poolInfo[idx].field_512 != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (poolInfo[idx].field_512 * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                            if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if devPercentage:
                                                            if not 0 / totalAllocPoint:
                                                                if tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                            else:
                                                                if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                tips += devPercentage * 0 / totalAllocPoint / 1000
                                                        if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalRewardDebt += 0 / totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                            if (poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                            if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                if bonusEndBlock > block.number:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if block.number - bonusEndBlock < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if block.number - bonusEndBlock <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                        if not block.number - bonusEndBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) / block.number - bonusEndBlock != rewardsPerBlock:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not 0 / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += 0 / totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                                if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not 0 / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += 0 / totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                if poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                                if (poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if block.number - bonusEndBlock < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) <= (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                        if not block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) / block.number - bonusEndBlock + (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != rewardsPerBlock:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not 0 / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += 0 / totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                if (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / (block.number * rewardsPerBlock) - (bonusEndBlock * rewardsPerBlock) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 1000
                                                                if ((block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if not (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardsPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardsPerBlock * poolInfo[idx].field_256) + (bonusEndBlock * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * rewardsPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        if not (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if devPercentage:
                                                                if not 0 / totalAllocPoint:
                                                                    if tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                else:
                                                                    if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    tips += devPercentage * 0 / totalAllocPoint / 1000
                                                            if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalRewardDebt += 0 / totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            if rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != rewardsPerBlock:
                                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not 0 / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * 0 / totalAllocPoint / 0 / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * 0 / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * 0 / totalAllocPoint / 1000
                                                                if (0 / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += 0 / totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                if poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if devPercentage:
                                                                    if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                        if tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                    else:
                                                                        if devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != devPercentage:
                                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                        if (devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000) + tips < tips:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        tips += devPercentage * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / 1000
                                                                if (poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint) + totalRewardDebt < totalRewardDebt:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                totalRewardDebt += poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint
                                                                if not poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    if 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * poolInfo[idx].field_256 * rewardsPerBlock * (1000 * ext_call.return_data[0]) - (1000 * tips) - (1000 * totalRewardDebt) / devPercentage + 1000 / rewardsPerBlock / totalAllocPoint / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
            idx = idx + 1
            continue 
    require arg1 < poolInfo.length
    if poolInfo[arg1].field_256 > totalAllocPoint:
        revert with 0, 'SafeMath: subtraction overflow'
    if arg2 < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalAllocPoint = arg2 + totalAllocPoint - poolInfo[arg1].field_256
    require arg1 < poolInfo.length
    poolInfo[arg1].field_256 = arg2
}



}
