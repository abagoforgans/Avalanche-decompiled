contract main {




// =====================  Runtime code  =====================


const decimals = 18


mapping of uint256 balanceOf;
mapping of struct allowance;
uint256 totalSupply;
array of struct stor3;
array of struct stor4;
address owner;
uint256 totalShares;
uint256 totalReleased;
mapping of uint256 shares;
mapping of uint256 released;
array of address payee;
mapping of uint256 totalReleased;
mapping of uint256 released;
address nodeRewardManagerAddress;
address uniswapV2RouterAddress;
address uniswapV2PairAddress;
address futurUsePoolAddress;
address distributionPoolAddress;
address devPoolAddress;
address deadWalletAddress;
uint256 rewardsFee;
uint256 liquidityPoolFee;
uint256 futurFee;
uint256 totalFees;
uint256 cashoutFee;
uint256 stor25;
uint256 stor26;
uint8 stor27;
uint8 stor27; offset 8
uint256 stor27; offset 8
uint256 swapTokensAmount;
uint8 stor29;
uint256 stor31;
uint256 stor32;
mapping of uint8 stor33;
mapping of uint8 stor34;

function totalFees() {
    return totalFees
}

function uniswapV2Router() {
    return uniswapV2RouterAddress
}

function totalSupply() {
    return totalSupply
}

function _isBlacklisted(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor33[arg1])
}

function rewardsFee() {
    return rewardsFee
}

function totalShares() {
    return totalShares
}

function released(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return released[address(arg1)][address(arg2)]
}

function uniswapV2Pair() {
    return uniswapV2PairAddress
}

function liquidityPoolFee() {
    return liquidityPoolFee
}

function swapTokensAmount() {
    return swapTokensAmount
}

function cashoutFee() {
    return cashoutFee
}

function balanceOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return balanceOf[address(arg1)]
}

function nodeRewardManager() {
    return nodeRewardManagerAddress
}

function deadWallet() {
    return deadWalletAddress
}

function payee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if arg1 >= payee.length:
        revert with 0, 50
    return payee[arg1]
}

function owner() {
    return owner
}

function released(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return released[address(arg1)]
}

function futurUsePool() {
    return futurUsePoolAddress
}

function futurFee() {
    return futurFee
}

function devPool() {
    return devPoolAddress
}

function automatedMarketMakerPairs(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor34[arg1])
}

function distributionPool() {
    return distributionPoolAddress
}

function shares(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return shares[address(arg1)]
}

function totalReleased(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return totalReleased[address(arg1)]
}

function allowance(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return allowance[address(arg1)][address(arg2)].field_0
}

function totalReleased() {
    return totalReleased
}

function _fallback() payable {
    revert
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function updateDevShare(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor26 = arg1
}

function updateRwSwapFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor25 = arg1
}

function updateMaxTxAmount(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor32 = arg1
}

function updateCashoutFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    cashoutFee = arg1
}

function updateSwapTokensAmount(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    swapTokensAmount = arg1
}

function openTrading() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if stor29:
        revert with 0, 'trading is already open'
    stor29 = 1
    stor31 = block.number
}

function sub_af153182(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    devPoolAddress = address(arg1)
}

function updateFuturWall(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    futurUsePoolAddress = arg1
}

function updateRewardsWall(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    distributionPoolAddress = arg1
}

function setNodeManagement(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    nodeRewardManagerAddress = arg1
}

function changeSwapLiquify(bool arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    Mask(248, 0, stor27.field_8) = Mask(248, 0, arg1)
}

function blacklistMalicious(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor33[address(arg1)] = uint8(arg2)
}

function publiDistriRewards() {
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._distributeRewards() with:
         gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
}

function getClaimTime() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.claimTime() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getNodeMinPrice() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.0x943ab261 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getRewardPerValue() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.0x728f0b4b with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getGasDistri() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.gasForDistribution() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getDistriCount() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.lastDistributionCount() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getTotalStakedReward() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.totalRewardStaked() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getTotalCreatedNodes() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.totalNodesCreated() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getAllNodeValue() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodeValueOf(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function getAutoDistri() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.autoDistri() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    return bool(ext_call.return_data[0])
}

function changeGasDistri(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._changeGasDistri(uint256 arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function changeClaimTime(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._changeClaimTime(uint256 arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function manualSwap(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if eth.balance(this.address) < arg1:
        revert with 0, 'insufficient AVAX balance'
    call msg.sender with:
       value arg1 wei
         gas 2300 * is_zero(value) wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function changeNodeMinPrice(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._changeNodeMinPrice(uint256 arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function changeRewardPerValue(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._changeRewardPerValue(uint256 arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function getNodeValue(uint256 arg1) {
    require calldata.size - 4 >= 32
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodeValueOf(address arg1, uint256 arg2) with:
            gas gas_remaining wei
           args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function changeAutoDistri(bool arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._changeAutoDistri(bool arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function getNodeNumberOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodeNumberOf(address arg1) with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getAllNodeValueOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodeValueOf(address arg1) with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getNodeMultiplier(uint256 arg1) {
    require calldata.size - 4 >= 32
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getRewardMultOf(address arg1, uint256 arg2) with:
            gas gas_remaining wei
           args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function distributeRewards() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._distributeRewards() with:
         gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    return ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64]
}

function getNodeValueOf(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodeValueOf(address arg1, uint256 arg2) with:
            gas gas_remaining wei
           args address(arg1), arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getNodeMultiplierOf(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getRewardMultOf(address arg1, uint256 arg2) with:
            gas gas_remaining wei
           args address(arg1), arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function boostReward(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg1 <= eth.balance(this.address):
        call owner with:
           value arg1 wei
             gas 2300 * is_zero(value) wei
    else:
        call owner with:
           value eth.balance(this.address) wei
             gas 2300 * is_zero(value) wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function approve(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function updateLiquiditFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    liquidityPoolFee = arg1
    if rewardsFee > !arg1:
        revert with 0, 17
    if rewardsFee + arg1 < rewardsFee:
        revert with 0, 'SafeMath: addition overflow'
    if rewardsFee + arg1 > !futurFee:
        revert with 0, 17
    if futurFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = rewardsFee + arg1 + futurFee
}

function updateRewardsFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    rewardsFee = arg1
    if arg1 > !liquidityPoolFee:
        revert with 0, 17
    if arg1 + liquidityPoolFee < arg1:
        revert with 0, 'SafeMath: addition overflow'
    if arg1 + liquidityPoolFee > !futurFee:
        revert with 0, 17
    if futurFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = arg1 + liquidityPoolFee + futurFee
}

function getRewardAmountOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1) with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function updateFuturFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    futurFee = arg1
    if rewardsFee > !liquidityPoolFee:
        revert with 0, 17
    if rewardsFee + liquidityPoolFee < rewardsFee:
        revert with 0, 'SafeMath: addition overflow'
    if rewardsFee + liquidityPoolFee > !arg1:
        revert with 0, 17
    if arg1 < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = rewardsFee + liquidityPoolFee + arg1
}

function setAutomatedMarketMakerPair(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if uniswapV2PairAddress == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'TKN: The TJ pair cannot be removed from automatedMarketMakerPairs'
    if arg2 == bool(stor34[address(arg1)]):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'TKN: Automated market maker pair is already set to that value'
    stor34[address(arg1)] = uint8(arg2)
    emit SetAutomatedMarketMakerPair(arg1, arg2);
}

function decreaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if arg2 > allowance[address(msg.sender)][address(arg1)].field_0:
        revert with 0, 32, 37, 0x6545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a6572, mem[165 len 27] >> 40, 0
    if allowance[address(msg.sender)][address(arg1)].field_0 < arg2:
        revert with 0, 17
    if not msg.sender:
        revert with 0, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 -= arg2
    emit Approval((allowance[address(msg.sender)][address(arg1)].field_0 - arg2), msg.sender, arg1);
    return 1
}

function sub_9b769187(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(address(arg1))
    staticcall address(arg1).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(arg1))
    call address(arg1).0xa9059cbb with:
         gas gas_remaining wei
        args msg.sender, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
}

function increaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if allowance[address(msg.sender)][address(arg1)].field_0 > !arg2:
        revert with 0, 17
    if allowance[address(msg.sender)][address(arg1)].field_0 + arg2 < allowance[address(msg.sender)][address(arg1)].field_0:
        revert with 0, 'SafeMath: addition overflow'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 += arg2
    emit Approval((allowance[address(msg.sender)][address(arg1)].field_0 + arg2), msg.sender, arg1);
    return 1
}

function getRewardAmount() {
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function updateUniswapV2Router(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if uniswapV2RouterAddress == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'TKN: The router already has that address'
    emit UpdateUniswapV2Router(arg1, uniswapV2RouterAddress);
    uniswapV2RouterAddress = arg1
    require ext_code.size(arg1)
    staticcall arg1.factory() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(uniswapV2RouterAddress)
    staticcall uniswapV2RouterAddress.0x73b295c2 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    call address(ext_call.return_data[0]).createPair(address arg1, address arg2) with:
         gas gas_remaining wei
        args address(this.address), address(ext_call.return_data[0])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    uniswapV2PairAddress = ext_call.return_data[12 len 20]
}

function sub_846b8d63(?) {
    require calldata.size - 4 >= 64
    require cd[4] <= test266151307()
    require cd[4] + 35 < calldata.size
    if ('cd', 4).length > test266151307():
        revert with 0, 65
    if (32 * ('cd', 4).length) + 128 < 96 or (32 * ('cd', 4).length) + 128 > test266151307():
        revert with 0, 65
    require calldata.size >= cd[4] + (32 * ('cd', 4).length) + 36
    s = cd[4] + 36
    t = 128
    idx = 0
    while idx < ('cd', 4).length:
        mem[t] = cd[s]
        s = s + 32
        t = t + 32
        idx = idx + 1
        continue 
    require cd[36] <= test266151307()
    require cd[36] + 35 < calldata.size
    if ('cd', 36).length > test266151307():
        revert with 0, 65
    if (32 * ('cd', 36).length) + 160 < 128 or (32 * ('cd', 4).length) + (32 * ('cd', 36).length) + 160 > test266151307():
        revert with 0, 65
    require calldata.size >= cd[36] + (32 * ('cd', 36).length) + 36
    s = cd[36] + 36
    t = (32 * ('cd', 4).length) + 160
    idx = 0
    while idx < ('cd', 36).length:
        mem[t] = cd[s]
        s = s + 32
        t = t + 32
        idx = idx + 1
        continue 
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if ('cd', 4).length != 6:
        revert with 0, 'newTierLevels length has to be 6'
    if ('cd', 36).length != 6:
        revert with 0, 'newTierSlopes length has to be 6'
    mem[(64 * ('cd', 4).length) + (32 * ('cd', 36).length) + 260] = ('cd', 36).length
    mem[(64 * ('cd', 4).length) + (32 * ('cd', 36).length) + 292 len 32 * ('cd', 36).length] = mem[(32 * ('cd', 4).length) + 160 len 32 * ('cd', 36).length]
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress.0x57829c61 with:
         gas gas_remaining wei
        args Array(len=('cd', 4).length, data=mem[128 len 32 * ('cd', 4).length], ('cd', 36).length, mem[(32 * ('cd', 4).length) + 160 len 32 * ('cd', 36).length]), (32 * ('cd', 4).length) + 96
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function release(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not shares[address(arg1)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'PaymentSplitter: account has no shares'
    if eth.balance(this.address) > !totalReleased:
        revert with 0, 17
    if eth.balance(this.address) + totalReleased and shares[address(arg1)] > -1 / eth.balance(this.address) + totalReleased:
        revert with 0, 17
    if not totalShares:
        revert with 0, 18
    if (eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares < released[address(arg1)]:
        revert with 0, 17
    if not ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'PaymentSplitter: account is not due payment'
    if released[address(arg1)] > !(((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]):
        revert with 0, 17
    released[address(arg1)] = (eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares
    if totalReleased > !(((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]):
        revert with 0, 17
    totalReleased = totalReleased + ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]
    if eth.balance(this.address) < ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]:
        revert with 0, 'Address: insufficient balance'
    call arg1 with:
       value ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)] wei
         gas gas_remaining wei
    if not return_data.size:
        if not ext_call.success:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        'Address: unable to send value, recipient may have reverted'
    else:
        if not ext_call.success:
            revert with 0, 'Address: unable to send value, recipient may have reverted'
    ('bool', 'ext_call.success')
    emit PaymentReleased(address(arg1), ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]);
}

function getNodesNames() {
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    mem[100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodesNames(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    _12 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
    _13 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 32 < 0 or (2 * ceil32(return_data.size)) + ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 128 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 128
    mem[(2 * ceil32(return_data.size)) + 96] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    require _12 + _13 + 32 <= return_data.size
    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)] = mem[ceil32(return_data.size) + _12 + 128 len ceil32(_13)]
    if ceil32(_13) > _13:
        mem[_13 + (2 * ceil32(return_data.size)) + 128] = 0
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _13
    mem[mem[64] + 64 len ceil32(_13)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)]
    if ceil32(_13) > _13:
        mem[_13 + mem[64] + 64] = 0
    return Array(len=_13, data=mem[mem[64] + 64 len ceil32(_13)])
}

function getNodesCreatime() {
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    mem[100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodesCreationTime(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    _12 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
    _13 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 32 < 0 or (2 * ceil32(return_data.size)) + ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 128 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 128
    mem[(2 * ceil32(return_data.size)) + 96] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    require _12 + _13 + 32 <= return_data.size
    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)] = mem[ceil32(return_data.size) + _12 + 128 len ceil32(_13)]
    if ceil32(_13) > _13:
        mem[_13 + (2 * ceil32(return_data.size)) + 128] = 0
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _13
    mem[mem[64] + 64 len ceil32(_13)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)]
    if ceil32(_13) > _13:
        mem[_13 + mem[64] + 64] = 0
    return Array(len=_13, data=mem[mem[64] + 64 len ceil32(_13)])
}

function getNodesRewards() {
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    mem[100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodesRewardAvailable(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    _12 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
    _13 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 32 < 0 or (2 * ceil32(return_data.size)) + ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 128 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 128
    mem[(2 * ceil32(return_data.size)) + 96] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    require _12 + _13 + 32 <= return_data.size
    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)] = mem[ceil32(return_data.size) + _12 + 128 len ceil32(_13)]
    if ceil32(_13) > _13:
        mem[_13 + (2 * ceil32(return_data.size)) + 128] = 0
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _13
    mem[mem[64] + 64 len ceil32(_13)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)]
    if ceil32(_13) > _13:
        mem[_13 + mem[64] + 64] = 0
    return Array(len=_13, data=mem[mem[64] + 64 len ceil32(_13)])
}

function getNodesLastClaims() {
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    mem[100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodesLastClaimTime(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    _12 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
    _13 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 32 < 0 or (2 * ceil32(return_data.size)) + ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 128 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 128
    mem[(2 * ceil32(return_data.size)) + 96] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    require _12 + _13 + 32 <= return_data.size
    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)] = mem[ceil32(return_data.size) + _12 + 128 len ceil32(_13)]
    if ceil32(_13) > _13:
        mem[_13 + (2 * ceil32(return_data.size)) + 128] = 0
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _13
    mem[mem[64] + 64 len ceil32(_13)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)]
    if ceil32(_13) > _13:
        mem[_13 + mem[64] + 64] = 0
    return Array(len=_13, data=mem[mem[64] + 64 len ceil32(_13)])
}

function name() {
    if bool(stor3.length):
        if bool(stor3.length) == stor3.length.field_1 < 32:
            revert with 0, 34
        if bool(stor3.length):
            if bool(stor3.length) == stor3.length.field_1 < 32:
                revert with 0, 34
            if stor3.length.field_1:
                if 31 < stor3.length.field_1:
                    mem[128] = uint256(stor3.field_0)
                    idx = 128
                    s = 0
                    while stor3.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor3[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)])
                mem[128] = 256 * stor3.length.field_8
        else:
            if bool(stor3.length) == stor3.length.field_1 < 32:
                revert with 0, 34
            if stor3.length.field_1:
                if 31 < stor3.length.field_1:
                    mem[128] = uint256(stor3.field_0)
                    idx = 128
                    s = 0
                    while stor3.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor3[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)])
                mem[128] = 256 * stor3.length.field_8
        mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]
        if ceil32(stor3.length.field_1) > stor3.length.field_1:
            mem[stor3.length.field_1 + ceil32(stor3.length.field_1) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), 
    if bool(stor3.length) == stor3.length.field_1 < 32:
        revert with 0, 34
    if bool(stor3.length):
        if bool(stor3.length) == stor3.length.field_1 < 32:
            revert with 0, 34
        if stor3.length.field_1:
            if 31 < stor3.length.field_1:
                mem[128] = uint256(stor3.field_0)
                idx = 128
                s = 0
                while stor3.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor3[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
            mem[128] = 256 * stor3.length.field_8
    else:
        if bool(stor3.length) == stor3.length.field_1 < 32:
            revert with 0, 34
        if stor3.length.field_1:
            if 31 < stor3.length.field_1:
                mem[128] = uint256(stor3.field_0)
                idx = 128
                s = 0
                while stor3.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor3[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
            mem[128] = 256 * stor3.length.field_8
    mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]
    if ceil32(stor3.length.field_1) > stor3.length.field_1:
        mem[stor3.length.field_1 + ceil32(stor3.length.field_1) + 192] = 0
    return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), 
}

function symbol() {
    if bool(stor4.length):
        if bool(stor4.length) == stor4.length.field_1 < 32:
            revert with 0, 34
        if bool(stor4.length):
            if bool(stor4.length) == stor4.length.field_1 < 32:
                revert with 0, 34
            if stor4.length.field_1:
                if 31 < stor4.length.field_1:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while stor4.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)])
                mem[128] = 256 * stor4.length.field_8
        else:
            if bool(stor4.length) == stor4.length.field_1 < 32:
                revert with 0, 34
            if stor4.length.field_1:
                if 31 < stor4.length.field_1:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while stor4.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)])
                mem[128] = 256 * stor4.length.field_8
        mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]
        if ceil32(stor4.length.field_1) > stor4.length.field_1:
            mem[stor4.length.field_1 + ceil32(stor4.length.field_1) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), 
    if bool(stor4.length) == stor4.length.field_1 < 32:
        revert with 0, 34
    if bool(stor4.length):
        if bool(stor4.length) == stor4.length.field_1 < 32:
            revert with 0, 34
        if stor4.length.field_1:
            if 31 < stor4.length.field_1:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while stor4.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    else:
        if bool(stor4.length) == stor4.length.field_1 < 32:
            revert with 0, 34
        if stor4.length.field_1:
            if 31 < stor4.length.field_1:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while stor4.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]
    if ceil32(stor4.length.field_1) > stor4.length.field_1:
        mem[stor4.length.field_1 + ceil32(stor4.length.field_1) + 192] = 0
    return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), 
}

function release(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if not shares[address(arg2)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'PaymentSplitter: account has no shares'
    mem[100] = this.address
    require ext_code.size(arg1)
    staticcall arg1.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] > !totalReleased[address(arg1)]:
        revert with 0, 17
    if ext_call.return_data[0] + totalReleased[address(arg1)] and shares[address(arg2)] > -1 / ext_call.return_data[0] + totalReleased[address(arg1)]:
        revert with 0, 17
    if not totalShares:
        revert with 0, 18
    if (ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares < released[address(arg1)][address(arg2)]:
        revert with 0, 17
    if not ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]:
        revert with 0, 'PaymentSplitter: account is not due payment'
    if released[address(arg1)][address(arg2)] > !(((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]):
        revert with 0, 17
    released[address(arg1)][address(arg2)] = (ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares
    if totalReleased[address(arg1)] > !(((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]):
        revert with 0, 17
    totalReleased[address(arg1)] = totalReleased[address(arg1)] + ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]
    mem[ceil32(return_data.size) + 132] = arg2
    mem[ceil32(return_data.size) + 164] = ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]
    mem[ceil32(return_data.size) + 96] = 68
    mem[ceil32(return_data.size) + 132 len 28] = address(arg2) << 64
    mem[ceil32(return_data.size) + 128 len 4] = unknown_0xa9059cbb(?????)
    mem[ceil32(return_data.size) + 196] = 32
    mem[ceil32(return_data.size) + 228] = 'SafeERC20: low-level call failed'
    if not ext_code.size(arg1):
        revert with 0, 'Address: call to non-contract'
    mem[ceil32(return_data.size) + 260 len 96] = unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], 0
    mem[ceil32(return_data.size) + 328] = 0
    call arg1 with:
       funct Mask(32, 224, unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], 0) >> 224
         gas gas_remaining wei
        args (Mask(512, -288, unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], 0) << 288)
    if not return_data.size:
        if not ext_call.success:
            if ext_call.return_data[0]:
                revert with memory
                  from 128
                   len ext_call.return_data[0]
            revert with 0, 'SafeERC20: low-level call failed'
        if ext_call.return_data[0]:
            require ext_call.return_data[0] >= 32
            require 0, mem[132 len 28] == bool(0, mem[132 len 28])
            if not 0, mem[132 len 28]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[ceil32(return_data.size) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            require mem[ceil32(return_data.size) + 292] == bool(mem[ceil32(return_data.size) + 292])
            if not mem[ceil32(return_data.size) + 292]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    emit ERC20PaymentReleased(address(arg2), ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], arg1);
}

function transfer(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if stor33[address(msg.sender)]:
        revert with 0, 'Blacklisted address'
    if stor33[address(arg1)]:
        revert with 0, 'Blacklisted address'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if msg.sender == owner:
        if not msg.sender:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
        if not arg1:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
        if arg2 > balanceOf[address(msg.sender)]:
            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
    else:
        if uniswapV2PairAddress == arg1:
            if not msg.sender:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
            if not arg1:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
            if arg2 > balanceOf[address(msg.sender)]:
                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
        else:
            if uniswapV2RouterAddress == arg1:
                if not msg.sender:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                if not arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                if arg2 > balanceOf[address(msg.sender)]:
                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
            else:
                if this.address == arg1:
                    if not msg.sender:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                    if arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                else:
                    if this.address == msg.sender:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                    else:
                        if not stor29:
                            revert with 0, 'Trading not yet enabled.'
                        if futurUsePoolAddress == arg1:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        else:
                            if distributionPoolAddress == arg1:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            else:
                                if devPoolAddress == arg1:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                else:
                                    if futurUsePoolAddress == msg.sender:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    else:
                                        if distributionPoolAddress == msg.sender:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        else:
                                            if devPoolAddress == msg.sender:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            else:
                                                if not totalSupply:
                                                    if arg2 > !balanceOf[address(arg1)]:
                                                        revert with 0, 17
                                                    if arg2 + balanceOf[address(arg1)] < arg2:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 + balanceOf[address(arg1)] > 0:
                                                        revert with 0, 'ANTI WHALE. TRY HARDER.'
                                                else:
                                                    if totalSupply and stor32 > -1 / totalSupply:
                                                        revert with 0, 17
                                                    if not totalSupply:
                                                        revert with 0, 18
                                                    if totalSupply * stor32 / totalSupply != stor32:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                    if arg2 > !balanceOf[address(arg1)]:
                                                        revert with 0, 17
                                                    if arg2 + balanceOf[address(arg1)] < arg2:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 + balanceOf[address(arg1)] > totalSupply * stor32 / 10000:
                                                        revert with 0, 'ANTI WHALE. TRY HARDER.'
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[230 len 26] >> 48, 0
    ('le', ('param', 'arg2'), ('stor', ('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('name', 'balanceOf', 0))))
    if balanceOf[address(msg.sender)] < arg2:
        revert with 0, 17
    balanceOf[address(msg.sender)] -= arg2
    if balanceOf[arg1] > !arg2:
        revert with 0, 17
    if balanceOf[arg1] + arg2 < balanceOf[arg1]:
        revert with 0, 'SafeMath: addition overflow'
    balanceOf[address(arg1)] = balanceOf[arg1] + arg2
    emit Transfer(arg2, msg.sender, arg1);
    return 1
}

function cashoutAll() {
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'MANIA CSHT:  creation from the zero address'
    if stor33[address(msg.sender)]:
        revert with 0, 'MANIA CSHT: Blacklisted address'
    if futurUsePoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
    if distributionPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 0:
        revert with 0, 'MANIA CSHT: You don't have enough reward to cash out'
    if not uint8(stor27.field_8):
        if not distributionPoolAddress:
            revert with 0, 'ERC20: transfer from the zero address'
        if not msg.sender:
            revert with 0, 'ERC20: transfer to the zero address'
        if ext_call.return_data[0] > balanceOf[stor17]:
            revert with 0, 
                        32,
                        38,
                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                        0
        if balanceOf[stor17] < ext_call.return_data[0]:
            revert with 0, 17
        balanceOf[stor17] -= ext_call.return_data[0]
        if balanceOf[msg.sender] > !ext_call.return_data[0]:
            revert with 0, 17
        if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
            revert with 0, 'SafeMath: addition overflow'
        balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
        emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
    else:
        if not cashoutFee:
            if ext_call.return_data[0] < 0:
                revert with 0, 17
            if not distributionPoolAddress:
                revert with 0, 'ERC20: transfer from the zero address'
            if not msg.sender:
                revert with 0, 'ERC20: transfer to the zero address'
            if ext_call.return_data[0] > balanceOf[stor17]:
                revert with 0, 
                            32,
                            38,
                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                            0
            if balanceOf[stor17] < ext_call.return_data[0]:
                revert with 0, 17
            balanceOf[stor17] -= ext_call.return_data[0]
            if balanceOf[msg.sender] > !ext_call.return_data[0]:
                revert with 0, 17
            if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                revert with 0, 'SafeMath: addition overflow'
            balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
            emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
        else:
            if not ext_call.return_data[0]:
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                allowance[address(this.address)][stor14].field_0 = 0
                mem[(2 * ceil32(return_data.size)) + 256] = 0
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = 0
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args 0, 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 420 len (32 * mem[ceil32(return_data.size) + 160]) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call futurUsePoolAddress with:
                     gas 2300 wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if ext_call.return_data[0] < 0:
                    revert with 0, 17
                if not distributionPoolAddress:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not msg.sender:
                    revert with 0, 'ERC20: transfer to the zero address'
                if ext_call.return_data[0] > balanceOf[stor17]:
                    revert with 0, 
                                32,
                                38,
                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, Mask(208, 32, block.timestamp) >> 32 >> 48,
                                0
                if balanceOf[stor17] < ext_call.return_data[0]:
                    revert with 0, 17
                balanceOf[stor17] -= ext_call.return_data[0]
                if balanceOf[msg.sender] > !ext_call.return_data[0]:
                    revert with 0, 17
                if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
                emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
            else:
                if ext_call.return_data[0] and cashoutFee > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0]:
                    revert with 0, 18
                if ext_call.return_data[0] * cashoutFee / ext_call.return_data[0] != cashoutFee:
                    revert with 0, 'SafeMath: multiplication overflow'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                allowance[address(this.address)][stor14].field_0 = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0] * cashoutFee / 100
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args ext_call.return_data[0] * cashoutFee / 100, 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 420 len (32 * mem[ceil32(return_data.size) + 160]) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call futurUsePoolAddress with:
                     gas 2300 wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if ext_call.return_data[0] < ext_call.return_data[0] * cashoutFee / 100:
                    revert with 0, 17
                if not distributionPoolAddress:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not msg.sender:
                    revert with 0, 'ERC20: transfer to the zero address'
                if ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) > balanceOf[stor17]:
                    revert with 0, 
                                32,
                                38,
                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, Mask(208, 32, block.timestamp) >> 32 >> 48,
                                0
                if balanceOf[stor17] < ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100):
                    revert with 0, 17
                balanceOf[stor17] = balanceOf[stor17] - ext_call.return_data[0] + (ext_call.return_data[0] * cashoutFee / 100)
                if balanceOf[msg.sender] > !(ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)):
                    revert with 0, 17
                if balanceOf[msg.sender] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) < balanceOf[msg.sender]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)
                emit Transfer((ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)), distributionPoolAddress, msg.sender);
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._cashoutAllNodesReward(address arg1) with:
         gas gas_remaining wei
        args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function cashoutReward(uint256 arg1) {
    require calldata.size - 4 >= 32
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'CSHT:  creation from the zero address'
    if stor33[address(msg.sender)]:
        revert with 0, 'MANIA CSHT: Blacklisted address'
    if futurUsePoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'CSHT: futur and rewardsPool cannot cashout rewards'
    if distributionPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'CSHT: futur and rewardsPool cannot cashout rewards'
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1, uint256 arg2) with:
            gas gas_remaining wei
           args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 0:
        revert with 0, 'CSHT: You don't have enough reward to cash out'
    if not uint8(stor27.field_8):
        if not distributionPoolAddress:
            revert with 0, 'ERC20: transfer from the zero address'
        if not msg.sender:
            revert with 0, 'ERC20: transfer to the zero address'
        if ext_call.return_data[0] > balanceOf[stor17]:
            revert with 0, 
                        32,
                        38,
                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                        0
        if balanceOf[stor17] < ext_call.return_data[0]:
            revert with 0, 17
        balanceOf[stor17] -= ext_call.return_data[0]
        if balanceOf[msg.sender] > !ext_call.return_data[0]:
            revert with 0, 17
        if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
            revert with 0, 'SafeMath: addition overflow'
        balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
        emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
    else:
        if not cashoutFee:
            if ext_call.return_data[0] < 0:
                revert with 0, 17
            if not distributionPoolAddress:
                revert with 0, 'ERC20: transfer from the zero address'
            if not msg.sender:
                revert with 0, 'ERC20: transfer to the zero address'
            if ext_call.return_data[0] > balanceOf[stor17]:
                revert with 0, 
                            32,
                            38,
                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                            0
            if balanceOf[stor17] < ext_call.return_data[0]:
                revert with 0, 17
            balanceOf[stor17] -= ext_call.return_data[0]
            if balanceOf[msg.sender] > !ext_call.return_data[0]:
                revert with 0, 17
            if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                revert with 0, 'SafeMath: addition overflow'
            balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
            emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
        else:
            if not ext_call.return_data[0]:
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                allowance[address(this.address)][stor14].field_0 = 0
                mem[(2 * ceil32(return_data.size)) + 256] = 0
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = 0
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args 0, 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 420 len (32 * mem[ceil32(return_data.size) + 160]) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call futurUsePoolAddress with:
                     gas 2300 wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if ext_call.return_data[0] < 0:
                    revert with 0, 17
                if not distributionPoolAddress:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not msg.sender:
                    revert with 0, 'ERC20: transfer to the zero address'
                if ext_call.return_data[0] > balanceOf[stor17]:
                    revert with 0, 
                                32,
                                38,
                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, Mask(208, 32, block.timestamp) >> 32 >> 48,
                                0
                if balanceOf[stor17] < ext_call.return_data[0]:
                    revert with 0, 17
                balanceOf[stor17] -= ext_call.return_data[0]
                if balanceOf[msg.sender] > !ext_call.return_data[0]:
                    revert with 0, 17
                if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
                emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
            else:
                if ext_call.return_data[0] and cashoutFee > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0]:
                    revert with 0, 18
                if ext_call.return_data[0] * cashoutFee / ext_call.return_data[0] != cashoutFee:
                    revert with 0, 'SafeMath: multiplication overflow'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                allowance[address(this.address)][stor14].field_0 = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0] * cashoutFee / 100
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args ext_call.return_data[0] * cashoutFee / 100, 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 420 len (32 * mem[ceil32(return_data.size) + 160]) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call futurUsePoolAddress with:
                     gas 2300 wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if ext_call.return_data[0] < ext_call.return_data[0] * cashoutFee / 100:
                    revert with 0, 17
                if not distributionPoolAddress:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not msg.sender:
                    revert with 0, 'ERC20: transfer to the zero address'
                if ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) > balanceOf[stor17]:
                    revert with 0, 
                                32,
                                38,
                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, Mask(208, 32, block.timestamp) >> 32 >> 48,
                                0
                if balanceOf[stor17] < ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100):
                    revert with 0, 17
                balanceOf[stor17] = balanceOf[stor17] - ext_call.return_data[0] + (ext_call.return_data[0] * cashoutFee / 100)
                if balanceOf[msg.sender] > !(ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)):
                    revert with 0, 17
                if balanceOf[msg.sender] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) < balanceOf[msg.sender]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)
                emit Transfer((ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)), distributionPoolAddress, msg.sender);
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._cashoutNodeReward(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function addAllNodeValue() {
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'MANIA CSHT:  creation from the zero address'
    if stor33[address(msg.sender)]:
        revert with 0, 'MANIA CSHT: Blacklisted address'
    if futurUsePoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur, dev and rewardsPool cannot cashout rewards'
    if distributionPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur, dev and rewardsPool cannot cashout rewards'
    if devPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur, dev and rewardsPool cannot cashout rewards'
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 0:
        revert with 0, 'MANIA CSHT: You don't have enough reward to compound'
    if not uint8(stor27.field_8):
        if not distributionPoolAddress:
            revert with 0, 'ERC20: transfer from the zero address'
        if not this.address:
            revert with 0, 'ERC20: transfer to the zero address'
        if ext_call.return_data[0] > balanceOf[stor17]:
            revert with 0, 
                        32,
                        38,
                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                        0
        if balanceOf[stor17] < ext_call.return_data[0]:
            revert with 0, 17
        balanceOf[stor17] -= ext_call.return_data[0]
        if balanceOf[this.address] > !ext_call.return_data[0]:
            revert with 0, 17
        if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
            revert with 0, 'SafeMath: addition overflow'
        balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
        emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
    else:
        if not cashoutFee:
            if ext_call.return_data[0] < 0:
                revert with 0, 17
            if not distributionPoolAddress:
                revert with 0, 'ERC20: transfer from the zero address'
            if not this.address:
                revert with 0, 'ERC20: transfer to the zero address'
            if ext_call.return_data[0] > balanceOf[stor17]:
                revert with 0, 
                            32,
                            38,
                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                            0
            if balanceOf[stor17] < ext_call.return_data[0]:
                revert with 0, 17
            balanceOf[stor17] -= ext_call.return_data[0]
            if balanceOf[this.address] > !ext_call.return_data[0]:
                revert with 0, 17
            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                revert with 0, 'SafeMath: addition overflow'
            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
            emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
        else:
            if not ext_call.return_data[0]:
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                allowance[address(this.address)][stor14].field_0 = 0
                mem[(2 * ceil32(return_data.size)) + 256] = 0
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = 0
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args 0, 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 420 len (32 * mem[ceil32(return_data.size) + 160]) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call devPoolAddress with:
                     gas 2300 wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if ext_call.return_data[0] < 0:
                    revert with 0, 17
                if not distributionPoolAddress:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not this.address:
                    revert with 0, 'ERC20: transfer to the zero address'
                if ext_call.return_data[0] > balanceOf[stor17]:
                    revert with 0, 
                                32,
                                38,
                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, Mask(208, 32, block.timestamp) >> 32 >> 48,
                                0
                if balanceOf[stor17] < ext_call.return_data[0]:
                    revert with 0, 17
                balanceOf[stor17] -= ext_call.return_data[0]
                if balanceOf[this.address] > !ext_call.return_data[0]:
                    revert with 0, 17
                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
            else:
                if ext_call.return_data[0] and cashoutFee > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0]:
                    revert with 0, 18
                if ext_call.return_data[0] * cashoutFee / ext_call.return_data[0] != cashoutFee:
                    revert with 0, 'SafeMath: multiplication overflow'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                allowance[address(this.address)][stor14].field_0 = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0] * cashoutFee / 100
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args ext_call.return_data[0] * cashoutFee / 100, 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 420 len (32 * mem[ceil32(return_data.size) + 160]) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call devPoolAddress with:
                     gas 2300 wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if ext_call.return_data[0] < ext_call.return_data[0] * cashoutFee / 100:
                    revert with 0, 17
                if not distributionPoolAddress:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not this.address:
                    revert with 0, 'ERC20: transfer to the zero address'
                if ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) > balanceOf[stor17]:
                    revert with 0, 
                                32,
                                38,
                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, Mask(208, 32, block.timestamp) >> 32 >> 48,
                                0
                if balanceOf[stor17] < ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100):
                    revert with 0, 17
                balanceOf[stor17] = balanceOf[stor17] - ext_call.return_data[0] + (ext_call.return_data[0] * cashoutFee / 100)
                if balanceOf[this.address] > !(ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)):
                    revert with 0, 17
                if balanceOf[this.address] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) < balanceOf[this.address]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)
                emit Transfer((ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)), distributionPoolAddress, this.address);
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._addAllNodeValue(address arg1) with:
         gas gas_remaining wei
        args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function addNodeValue(uint256 arg1) {
    require calldata.size - 4 >= 32
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'CSHT:  creation from the zero address'
    if stor33[address(msg.sender)]:
        revert with 0, 'MANIA CSHT: Blacklisted address'
    if futurUsePoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'CSHT: futur, dev and rewardsPool cannot compound nodes'
    if distributionPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'CSHT: futur, dev and rewardsPool cannot compound nodes'
    if devPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'CSHT: futur, dev and rewardsPool cannot compound nodes'
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1, uint256 arg2) with:
            gas gas_remaining wei
           args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 0:
        revert with 0, 'CSHT: You don't have enough reward to compound your node'
    if not uint8(stor27.field_8):
        if not distributionPoolAddress:
            revert with 0, 'ERC20: transfer from the zero address'
        if not this.address:
            revert with 0, 'ERC20: transfer to the zero address'
        if ext_call.return_data[0] > balanceOf[stor17]:
            revert with 0, 
                        32,
                        38,
                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                        0
        if balanceOf[stor17] < ext_call.return_data[0]:
            revert with 0, 17
        balanceOf[stor17] -= ext_call.return_data[0]
        if balanceOf[this.address] > !ext_call.return_data[0]:
            revert with 0, 17
        if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
            revert with 0, 'SafeMath: addition overflow'
        balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
        emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
    else:
        if not cashoutFee:
            if ext_call.return_data[0] < 0:
                revert with 0, 17
            if not distributionPoolAddress:
                revert with 0, 'ERC20: transfer from the zero address'
            if not this.address:
                revert with 0, 'ERC20: transfer to the zero address'
            if ext_call.return_data[0] > balanceOf[stor17]:
                revert with 0, 
                            32,
                            38,
                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                            0
            if balanceOf[stor17] < ext_call.return_data[0]:
                revert with 0, 17
            balanceOf[stor17] -= ext_call.return_data[0]
            if balanceOf[this.address] > !ext_call.return_data[0]:
                revert with 0, 17
            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                revert with 0, 'SafeMath: addition overflow'
            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
            emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
        else:
            if not ext_call.return_data[0]:
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                allowance[address(this.address)][stor14].field_0 = 0
                mem[(2 * ceil32(return_data.size)) + 256] = 0
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = 0
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args 0, 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 420 len (32 * mem[ceil32(return_data.size) + 160]) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call devPoolAddress with:
                     gas 2300 wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if ext_call.return_data[0] < 0:
                    revert with 0, 17
                if not distributionPoolAddress:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not this.address:
                    revert with 0, 'ERC20: transfer to the zero address'
                if ext_call.return_data[0] > balanceOf[stor17]:
                    revert with 0, 
                                32,
                                38,
                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, Mask(208, 32, block.timestamp) >> 32 >> 48,
                                0
                if balanceOf[stor17] < ext_call.return_data[0]:
                    revert with 0, 17
                balanceOf[stor17] -= ext_call.return_data[0]
                if balanceOf[this.address] > !ext_call.return_data[0]:
                    revert with 0, 17
                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                emit Transfer(ext_call.return_data[0], distributionPoolAddress, this.address);
            else:
                if ext_call.return_data[0] and cashoutFee > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0]:
                    revert with 0, 18
                if ext_call.return_data[0] * cashoutFee / ext_call.return_data[0] != cashoutFee:
                    revert with 0, 'SafeMath: multiplication overflow'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                allowance[address(this.address)][stor14].field_0 = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0] * cashoutFee / 100
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args ext_call.return_data[0] * cashoutFee / 100, 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 420 len (32 * mem[ceil32(return_data.size) + 160]) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call devPoolAddress with:
                     gas 2300 wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if ext_call.return_data[0] < ext_call.return_data[0] * cashoutFee / 100:
                    revert with 0, 17
                if not distributionPoolAddress:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not this.address:
                    revert with 0, 'ERC20: transfer to the zero address'
                if ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) > balanceOf[stor17]:
                    revert with 0, 
                                32,
                                38,
                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, Mask(208, 32, block.timestamp) >> 32 >> 48,
                                0
                if balanceOf[stor17] < ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100):
                    revert with 0, 17
                balanceOf[stor17] = balanceOf[stor17] - ext_call.return_data[0] + (ext_call.return_data[0] * cashoutFee / 100)
                if balanceOf[this.address] > !(ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)):
                    revert with 0, 17
                if balanceOf[this.address] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) < balanceOf[this.address]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)
                emit Transfer((ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)), distributionPoolAddress, this.address);
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._addNodeValue(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function transferFrom(address arg1, address arg2, uint256 arg3) {
    require calldata.size - 4 >= 96
    require arg1 == arg1
    require arg2 == arg2
    if stor33[address(arg1)]:
        revert with 0, 'Blacklisted address'
    if stor33[address(arg2)]:
        revert with 0, 'Blacklisted address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if arg1 == owner:
        if not arg1:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
        if not arg2:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
        if arg3 > balanceOf[address(arg1)]:
            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
        if balanceOf[address(arg1)] < arg3:
            revert with 0, 17
        balanceOf[address(arg1)] -= arg3
        if balanceOf[arg2] > !arg3:
            revert with 0, 17
        if balanceOf[arg2] + arg3 < balanceOf[arg2]:
            revert with 0, 'SafeMath: addition overflow'
        balanceOf[address(arg2)] = balanceOf[arg2] + arg3
        emit Transfer(arg3, arg1, arg2);
        if arg3 > allowance[address(arg1)][address(msg.sender)].field_0:
            revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
    else:
        if uniswapV2PairAddress == arg2:
            if not arg1:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
            if not arg2:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
            if arg3 > balanceOf[address(arg1)]:
                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
            if balanceOf[address(arg1)] < arg3:
                revert with 0, 17
            balanceOf[address(arg1)] -= arg3
            if balanceOf[arg2] > !arg3:
                revert with 0, 17
            if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                revert with 0, 'SafeMath: addition overflow'
            balanceOf[address(arg2)] = balanceOf[arg2] + arg3
            emit Transfer(arg3, arg1, arg2);
            if arg3 > allowance[address(arg1)][address(msg.sender)].field_0:
                revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
        else:
            if uniswapV2RouterAddress == arg2:
                if not arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                if not arg2:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                if arg3 > balanceOf[address(arg1)]:
                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                if balanceOf[address(arg1)] < arg3:
                    revert with 0, 17
                balanceOf[address(arg1)] -= arg3
                if balanceOf[arg2] > !arg3:
                    revert with 0, 17
                if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                emit Transfer(arg3, arg1, arg2);
                if arg3 > allowance[address(arg1)][address(msg.sender)].field_0:
                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
            else:
                if this.address == arg2:
                    if not arg1:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                    if not arg2:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                    if arg3 > balanceOf[address(arg1)]:
                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                    if balanceOf[address(arg1)] < arg3:
                        revert with 0, 17
                    balanceOf[address(arg1)] -= arg3
                    if balanceOf[arg2] > !arg3:
                        revert with 0, 17
                    if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                    emit Transfer(arg3, arg1, arg2);
                    if arg3 > allowance[address(arg1)][address(msg.sender)].field_0:
                        revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                else:
                    if this.address == arg1:
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg2:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg3 > balanceOf[address(arg1)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(arg1)] < arg3:
                            revert with 0, 17
                        balanceOf[address(arg1)] -= arg3
                        if balanceOf[arg2] > !arg3:
                            revert with 0, 17
                        if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                        emit Transfer(arg3, arg1, arg2);
                        if arg3 > allowance[address(arg1)][address(msg.sender)].field_0:
                            revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                    else:
                        if not stor29:
                            revert with 0, 'Trading not yet enabled.'
                        if futurUsePoolAddress == arg2:
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg2:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg3 > balanceOf[address(arg1)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(arg1)] < arg3:
                                revert with 0, 17
                            balanceOf[address(arg1)] -= arg3
                            if balanceOf[arg2] > !arg3:
                                revert with 0, 17
                            if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                            emit Transfer(arg3, arg1, arg2);
                            if arg3 > allowance[address(arg1)][address(msg.sender)].field_0:
                                revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                        else:
                            if distributionPoolAddress == arg2:
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg2:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg3 > balanceOf[address(arg1)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(arg1)] < arg3:
                                    revert with 0, 17
                                balanceOf[address(arg1)] -= arg3
                                if balanceOf[arg2] > !arg3:
                                    revert with 0, 17
                                if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                emit Transfer(arg3, arg1, arg2);
                                if arg3 > allowance[address(arg1)][address(msg.sender)].field_0:
                                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                            else:
                                if devPoolAddress == arg2:
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg3 > balanceOf[address(arg1)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(arg1)] < arg3:
                                        revert with 0, 17
                                    balanceOf[address(arg1)] -= arg3
                                    if balanceOf[arg2] > !arg3:
                                        revert with 0, 17
                                    if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                    emit Transfer(arg3, arg1, arg2);
                                    if arg3 > allowance[address(arg1)][address(msg.sender)].field_0:
                                        revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                                else:
                                    if futurUsePoolAddress == arg1:
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg3 > balanceOf[address(arg1)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(arg1)] < arg3:
                                            revert with 0, 17
                                        balanceOf[address(arg1)] -= arg3
                                        if balanceOf[arg2] > !arg3:
                                            revert with 0, 17
                                        if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                        emit Transfer(arg3, arg1, arg2);
                                        if arg3 > allowance[address(arg1)][address(msg.sender)].field_0:
                                            revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                                    else:
                                        if distributionPoolAddress == arg1:
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg3 > balanceOf[address(arg1)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(arg1)] < arg3:
                                                revert with 0, 17
                                            balanceOf[address(arg1)] -= arg3
                                            if balanceOf[arg2] > !arg3:
                                                revert with 0, 17
                                            if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                            emit Transfer(arg3, arg1, arg2);
                                            if arg3 > allowance[address(arg1)][address(msg.sender)].field_0:
                                                revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                                        else:
                                            if devPoolAddress == arg1:
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg3 > balanceOf[address(arg1)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(arg1)] < arg3:
                                                    revert with 0, 17
                                                balanceOf[address(arg1)] -= arg3
                                                if balanceOf[arg2] > !arg3:
                                                    revert with 0, 17
                                                if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                                emit Transfer(arg3, arg1, arg2);
                                                if arg3 > allowance[address(arg1)][address(msg.sender)].field_0:
                                                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[264 len 24] >> 64, 0
                                            else:
                                                if not totalSupply:
                                                    if arg3 > !balanceOf[address(arg2)]:
                                                        revert with 0, 17
                                                    if arg3 + balanceOf[address(arg2)] < arg3:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg3 + balanceOf[address(arg2)] > 0:
                                                        revert with 0, 'ANTI WHALE. TRY HARDER.'
                                                else:
                                                    if totalSupply and stor32 > -1 / totalSupply:
                                                        revert with 0, 17
                                                    if not totalSupply:
                                                        revert with 0, 18
                                                    if totalSupply * stor32 / totalSupply != stor32:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                    if arg3 > !balanceOf[address(arg2)]:
                                                        revert with 0, 17
                                                    if arg3 + balanceOf[address(arg2)] < arg3:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg3 + balanceOf[address(arg2)] > totalSupply * stor32 / 10000:
                                                        revert with 0, 'ANTI WHALE. TRY HARDER.'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg2:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg3 > balanceOf[address(arg1)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[230 len 26] >> 48, 0
                                                if balanceOf[address(arg1)] < arg3:
                                                    revert with 0, 17
                                                balanceOf[address(arg1)] -= arg3
                                                if balanceOf[arg2] > !arg3:
                                                    revert with 0, 17
                                                if balanceOf[arg2] + arg3 < balanceOf[arg2]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg2)] = balanceOf[arg2] + arg3
                                                emit Transfer(arg3, arg1, arg2);
                                                if arg3 > allowance[address(arg1)][address(msg.sender)].field_0:
                                                    revert with 0, 32, 40, 0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63, mem[328 len 24] >> 64, 0
    ('le', ('param', 'arg3'), ('field', 0, ('stor', ('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('map', ('mask_shl', 160, 0, 0, ('param', 'arg1')), ('name', 'allowance', 1))))))
    if allowance[address(arg1)][address(msg.sender)].field_0 < arg3:
        revert with 0, 17
    if not arg1:
        revert with 0, 'ERC20: approve from the zero address'
    if not msg.sender:
        revert with 0, 'ERC20: approve to the zero address'
    allowance[address(arg1)][address(msg.sender)].field_0 -= arg3
    emit Approval((allowance[address(arg1)][address(msg.sender)].field_0 - arg3), arg1, msg.sender);
    return 1
}

function createNodeWithTokens(string arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 <= test266151307()
    require calldata.size > arg1 + 35
    if arg1.length > test266151307():
        revert with 0, 65
    if ceil32(arg1.length) + 128 < 96 or ceil32(arg1.length) + 128 > test266151307():
        revert with 0, 65
    mem[96] = arg1.length
    require arg1 + arg1.length + 36 <= calldata.size
    mem[128 len arg1.length] = arg1[all]
    mem[arg1.length + 128] = 0
    if arg1.length <= 3:
        revert with 0, 'NODE CREATION: NAME SIZE INVALID'
    if arg1.length >= 32:
        revert with 0, 'NODE CREATION: NAME SIZE INVALID'
    if not msg.sender:
        revert with 0, 'NODE CREATION:  creation from the zero address'
    if stor33[address(msg.sender)]:
        revert with 0, 'NODE CREATION: Blacklisted address'
    if futurUsePoolAddress == msg.sender:
        revert with 0, 'NODE CREATION: futur, dev and rewardsPool cannot create node'
    if distributionPoolAddress == msg.sender:
        revert with 0, 'NODE CREATION: futur, dev and rewardsPool cannot create node'
    if devPoolAddress == msg.sender:
        revert with 0, 'NODE CREATION: futur, dev and rewardsPool cannot create node'
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.0x943ab261 with:
            gas gas_remaining wei
    mem[ceil32(arg1.length) + 128] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if arg2 < Mask(8 * -ceil32(arg1.length) + arg1.length + 32, 0, 0), mem[arg1.length + 160 len -arg1.length + ceil32(arg1.length)]:
        revert with 0, 'NODE CREATION: Node Value set below nodeMinPrice'
    if arg2:
        if arg2 and 10^18 > -1 / arg2:
            revert with 0, 17
        if not arg2:
            revert with 0, 18
        if 10^18 * arg2 / arg2 != 10^18:
            revert with 0, 'SafeMath: multiplication overflow'
        if balanceOf[address(msg.sender)] < 10^18 * arg2:
            revert with 0, 'NODE CREATION: Balance too low for creation. Use lower initValue'
        if balanceOf[address(this.address)] < swapTokensAmount:
            if not arg2:
                if not msg.sender:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not this.address:
                    revert with 0, 'ERC20: transfer to the zero address'
                mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                if 0 > balanceOf[address(msg.sender)]:
                    revert with 0, 
                                32,
                                38,
                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                0
                if balanceOf[address(msg.sender)] < 0:
                    revert with 0, 17
                if balanceOf[this.address] > -1:
                    revert with 0, 17
                if balanceOf[this.address] < balanceOf[this.address]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(this.address)] = balanceOf[this.address]
                emit Transfer(0, msg.sender, this.address);
            else:
                if arg2 and 10^18 > -1 / arg2:
                    revert with 0, 17
                if not arg2:
                    revert with 0, 18
                if 10^18 * arg2 / arg2 != 10^18:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not msg.sender:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not this.address:
                    revert with 0, 'ERC20: transfer to the zero address'
                mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                    revert with 0, 
                                32,
                                38,
                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                0
                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                    revert with 0, 17
                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                if balanceOf[this.address] > !(10^18 * arg2):
                    revert with 0, 17
                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                emit Transfer((10^18 * arg2), msg.sender, this.address);
            if not arg2:
                require ext_code.size(nodeRewardManagerAddress)
                call nodeRewardManagerAddress.0x90219732 with:
                     gas gas_remaining wei
                    args msg.sender, 96, 0, arg1.length, arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
            else:
                if arg2 and 10^18 > -1 / arg2:
                    revert with 0, 17
                if not arg2:
                    revert with 0, 18
                if 10^18 * arg2 / arg2 != 10^18:
                    revert with 0, 'SafeMath: multiplication overflow'
                require ext_code.size(nodeRewardManagerAddress)
                call nodeRewardManagerAddress.0x90219732 with:
                     gas gas_remaining wei
                    args msg.sender, Array(len=arg1.length, data=arg1[all]), 10^18 * arg2
        else:
            if not uint8(stor27.field_8):
                if not arg2:
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not this.address:
                        revert with 0, 'ERC20: transfer to the zero address'
                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                    if 0 > balanceOf[address(msg.sender)]:
                        revert with 0, 
                                    32,
                                    38,
                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                    0
                    if balanceOf[address(msg.sender)] < 0:
                        revert with 0, 17
                    if balanceOf[this.address] > -1:
                        revert with 0, 17
                    if balanceOf[this.address] < balanceOf[this.address]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(this.address)] = balanceOf[this.address]
                    emit Transfer(0, msg.sender, this.address);
                else:
                    if arg2 and 10^18 > -1 / arg2:
                        revert with 0, 17
                    if not arg2:
                        revert with 0, 18
                    if 10^18 * arg2 / arg2 != 10^18:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not this.address:
                        revert with 0, 'ERC20: transfer to the zero address'
                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                    if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 
                                    32,
                                    38,
                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                    0
                    if balanceOf[address(msg.sender)] < 10^18 * arg2:
                        revert with 0, 17
                    balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                    if balanceOf[this.address] > !(10^18 * arg2):
                        revert with 0, 17
                    if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                    emit Transfer((10^18 * arg2), msg.sender, this.address);
                if not arg2:
                    require ext_code.size(nodeRewardManagerAddress)
                    call nodeRewardManagerAddress.0x90219732 with:
                         gas gas_remaining wei
                        args msg.sender, 96, 0, arg1.length, arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                else:
                    if arg2 and 10^18 > -1 / arg2:
                        revert with 0, 17
                    if not arg2:
                        revert with 0, 18
                    if 10^18 * arg2 / arg2 != 10^18:
                        revert with 0, 'SafeMath: multiplication overflow'
                    require ext_code.size(nodeRewardManagerAddress)
                    call nodeRewardManagerAddress.0x90219732 with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 10^18 * arg2
            else:
                if uint8(stor27.field_0):
                    if not arg2:
                        if not msg.sender:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not this.address:
                            revert with 0, 'ERC20: transfer to the zero address'
                        mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                        if 0 > balanceOf[address(msg.sender)]:
                            revert with 0, 
                                        32,
                                        38,
                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                        0
                        if balanceOf[address(msg.sender)] < 0:
                            revert with 0, 17
                        if balanceOf[this.address] > -1:
                            revert with 0, 17
                        if balanceOf[this.address] < balanceOf[this.address]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(this.address)] = balanceOf[this.address]
                        emit Transfer(0, msg.sender, this.address);
                    else:
                        if arg2 and 10^18 > -1 / arg2:
                            revert with 0, 17
                        if not arg2:
                            revert with 0, 18
                        if 10^18 * arg2 / arg2 != 10^18:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not msg.sender:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not this.address:
                            revert with 0, 'ERC20: transfer to the zero address'
                        mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                        if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 
                                        32,
                                        38,
                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                        0
                        if balanceOf[address(msg.sender)] < 10^18 * arg2:
                            revert with 0, 17
                        balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                        if balanceOf[this.address] > !(10^18 * arg2):
                            revert with 0, 17
                        if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                        emit Transfer((10^18 * arg2), msg.sender, this.address);
                    if not arg2:
                        require ext_code.size(nodeRewardManagerAddress)
                        call nodeRewardManagerAddress.0x90219732 with:
                             gas gas_remaining wei
                            args msg.sender, 96, 0, arg1.length, arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                    else:
                        if arg2 and 10^18 > -1 / arg2:
                            revert with 0, 17
                        if not arg2:
                            revert with 0, 18
                        if 10^18 * arg2 / arg2 != 10^18:
                            revert with 0, 'SafeMath: multiplication overflow'
                        require ext_code.size(nodeRewardManagerAddress)
                        call nodeRewardManagerAddress.0x90219732 with:
                             gas gas_remaining wei
                            args msg.sender, Array(len=arg1.length, data=arg1[all]), 10^18 * arg2
                else:
                    if msg.sender == owner:
                        if not arg2:
                            if not msg.sender:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not this.address:
                                revert with 0, 'ERC20: transfer to the zero address'
                            mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                            if 0 > balanceOf[address(msg.sender)]:
                                revert with 0, 
                                            32,
                                            38,
                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                            0
                            if balanceOf[address(msg.sender)] < 0:
                                revert with 0, 17
                            if balanceOf[this.address] > -1:
                                revert with 0, 17
                            if balanceOf[this.address] < balanceOf[this.address]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(this.address)] = balanceOf[this.address]
                            emit Transfer(0, msg.sender, this.address);
                        else:
                            if arg2 and 10^18 > -1 / arg2:
                                revert with 0, 17
                            if not arg2:
                                revert with 0, 18
                            if 10^18 * arg2 / arg2 != 10^18:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if not msg.sender:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not this.address:
                                revert with 0, 'ERC20: transfer to the zero address'
                            mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                            if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 
                                            32,
                                            38,
                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                            0
                            if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                revert with 0, 17
                            balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                            if balanceOf[this.address] > !(10^18 * arg2):
                                revert with 0, 17
                            if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                            emit Transfer((10^18 * arg2), msg.sender, this.address);
                        if not arg2:
                            require ext_code.size(nodeRewardManagerAddress)
                            call nodeRewardManagerAddress.0x90219732 with:
                                 gas gas_remaining wei
                                args msg.sender, 96, 0, arg1.length, arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                        else:
                            if arg2 and 10^18 > -1 / arg2:
                                revert with 0, 17
                            if not arg2:
                                revert with 0, 18
                            if 10^18 * arg2 / arg2 != 10^18:
                                revert with 0, 'SafeMath: multiplication overflow'
                            require ext_code.size(nodeRewardManagerAddress)
                            call nodeRewardManagerAddress.0x90219732 with:
                                 gas gas_remaining wei
                                args msg.sender, Array(len=arg1.length, data=arg1[all]), 10^18 * arg2
                    else:
                        if stor34[address(msg.sender)]:
                            if not arg2:
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 
                                                32,
                                                38,
                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                                0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 0, 17
                                if balanceOf[this.address] > -1:
                                    revert with 0, 17
                                if balanceOf[this.address] < balanceOf[this.address]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] = balanceOf[this.address]
                                emit Transfer(0, msg.sender, this.address);
                            else:
                                if arg2 and 10^18 > -1 / arg2:
                                    revert with 0, 17
                                if not arg2:
                                    revert with 0, 18
                                if 10^18 * arg2 / arg2 != 10^18:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 
                                                32,
                                                38,
                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                                0
                                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                if balanceOf[this.address] > !(10^18 * arg2):
                                    revert with 0, 17
                                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                emit Transfer((10^18 * arg2), msg.sender, this.address);
                            if not arg2:
                                require ext_code.size(nodeRewardManagerAddress)
                                call nodeRewardManagerAddress.0x90219732 with:
                                     gas gas_remaining wei
                                    args msg.sender, 96, 0, arg1.length, arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                            else:
                                if arg2 and 10^18 > -1 / arg2:
                                    revert with 0, 17
                                if not arg2:
                                    revert with 0, 18
                                if 10^18 * arg2 / arg2 != 10^18:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                require ext_code.size(nodeRewardManagerAddress)
                                call nodeRewardManagerAddress.0x90219732 with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=arg1.length, data=arg1[all]), 10^18 * arg2
                        else:
                            uint8(stor27.field_0) = 1
                            if not balanceOf[address(this.address)]:
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 26
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 160] = 'SafeMath: division by zero'
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 192] = 26
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 224] = 'SafeMath: division by zero'
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 256] = 30
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 288] = 'SafeMath: subtraction overflow'
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 320] = 2
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 352] = this.address
                                require ext_code.size(uniswapV2RouterAddress)
                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                        gas gas_remaining wei
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 416] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 384] = ext_call.return_data[12 len 20]
                                if not this.address:
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = 32
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 36
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 'ERC20: approve from the zero add'
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                    revert with memory
                                      from ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                       len ceil32(return_data.size) + 132
                                if not uniswapV2RouterAddress:
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = 32
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 34
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 'ERC20: approve to the zero addre'
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                    revert with memory
                                      from ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                       len ceil32(return_data.size) + 132
                                mem[0] = uniswapV2RouterAddress
                                mem[32] = sha3(address(this.address), 1)
                                allowance[address(this.address)][stor14].field_0 = 0
                                mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0
                                emit Approval(mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = 0
                                mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 0
                                mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 160
                                mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 580] = 2
                                idx = 0
                                s = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 612
                                t = ceil32(arg1.length) + ceil32(return_data.size) + 352
                                while idx < mem[ceil32(arg1.length) + ceil32(return_data.size) + 320]:
                                    mem[s] = mem[t + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = this.address
                                mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 548] = block.timestamp
                                require ext_code.size(uniswapV2RouterAddress)
                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                     gas gas_remaining wei
                                    args mem[mem[64] + 4 len ceil32(arg1.length) + (2 * ceil32(return_data.size)) + (32 * mem[ceil32(arg1.length) + ceil32(return_data.size) + 320]) + -mem[64] + 608]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1375 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_1375] = 30
                                mem[_1375 + 32] = 'SafeMath: subtraction overflow'
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if eth.balance(this.address) < eth.balance(this.address):
                                    revert with 0, 17
                                call devPoolAddress with:
                                     gas 2300 wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1411 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                mem[_1411 + 32 len 64] = call.data[calldata.size len 64]
                                if 0 >= mem[_1411]:
                                    revert with 0, 50
                                mem[_1411 + 32] = this.address
                                require ext_code.size(uniswapV2RouterAddress)
                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                        gas gas_remaining wei
                                mem[_1411 + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _1411 + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_1411]:
                                    revert with 0, 50
                                mem[_1411 + 64] = ext_call.return_data[12 len 20]
                                if not this.address:
                                    revert with 0, 'ERC20: approve from the zero address'
                                if not uniswapV2RouterAddress:
                                    revert with 0, 'ERC20: approve to the zero address'
                                mem[0] = uniswapV2RouterAddress
                                mem[32] = sha3(address(this.address), 1)
                                allowance[address(this.address)][stor14].field_0 = 0
                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                mem[_1411 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                mem[_1411 + ceil32(return_data.size) + 100] = 0
                                mem[_1411 + ceil32(return_data.size) + 132] = 0
                                mem[_1411 + ceil32(return_data.size) + 164] = 160
                                mem[_1411 + ceil32(return_data.size) + 260] = mem[_1411]
                                idx = 0
                                s = _1411 + ceil32(return_data.size) + 292
                                t = _1411 + 32
                                while idx < mem[_1411]:
                                    mem[s] = mem[t + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(uniswapV2RouterAddress)
                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args 0, 0, 160, address(this.address), block.timestamp, mem[_1411 + ceil32(return_data.size) + 260 len (32 * mem[_1411]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_1411 + ceil32(return_data.size) + 96] = 30
                                mem[_1411 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if eth.balance(this.address) < eth.balance(this.address):
                                    revert with 0, 17
                                call futurUsePoolAddress with:
                                     gas 2300 wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not balanceOf[address(this.address)]:
                                    mem[_1411 + ceil32(return_data.size) + 160] = 26
                                    mem[_1411 + ceil32(return_data.size) + 192] = 'SafeMath: division by zero'
                                    mem[_1411 + ceil32(return_data.size) + 224] = 26
                                    mem[_1411 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                    mem[_1411 + ceil32(return_data.size) + 288] = 2
                                    mem[_1411 + ceil32(return_data.size) + 320] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[_1411 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[_1411 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor14].field_0 = 0
                                    emit Approval(0, this.address, uniswapV2RouterAddress);
                                    mem[_1411 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[_1411 + (2 * ceil32(return_data.size)) + 388] = 0
                                    mem[_1411 + (2 * ceil32(return_data.size)) + 420] = 0
                                    mem[_1411 + (2 * ceil32(return_data.size)) + 452] = 160
                                    mem[_1411 + (2 * ceil32(return_data.size)) + 548] = 2
                                    idx = 0
                                    s = _1411 + (2 * ceil32(return_data.size)) + 580
                                    t = _1411 + ceil32(return_data.size) + 320
                                    while idx < mem[_1411 + ceil32(return_data.size) + 288]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[_1411 + (2 * ceil32(return_data.size)) + 484] = this.address
                                    mem[_1411 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0, 0, 160, address(this.address), block.timestamp, mem[_1411 + (2 * ceil32(return_data.size)) + 548 len (32 * mem[_1411 + ceil32(return_data.size) + 288]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[_1411 + (2 * ceil32(return_data.size)) + 384] = 30
                                    mem[_1411 + (2 * ceil32(return_data.size)) + 416] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call distributionPoolAddress with:
                                         gas 2300 wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[_1411 + (2 * ceil32(return_data.size)) + 448] = 30
                                    mem[_1411 + (2 * ceil32(return_data.size)) + 480] = 'SafeMath: subtraction overflow'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not distributionPoolAddress:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    mem[_1411 + (2 * ceil32(return_data.size)) + 512] = 38
                                    mem[_1411 + (2 * ceil32(return_data.size)) + 544 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                    if 0 > balanceOf[address(this.address)]:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_1411 + (2 * ceil32(return_data.size)) + 582 len 26] >> 48,
                                                    0
                                    if balanceOf[address(this.address)] < 0:
                                        revert with 0, 17
                                    if balanceOf[stor17] > -1:
                                        revert with 0, 17
                                    if balanceOf[stor17] < balanceOf[stor17]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[stor17] = balanceOf[stor17]
                                    emit Transfer(0, this.address, distributionPoolAddress);
                                    if not balanceOf[address(this.address)]:
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 608] = 26
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 672] = 26
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 736] = 30
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 800] = 2
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 832] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = 0
                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 900] = 0
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 932] = 0
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 964] = 160
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 1060] = 2
                                        idx = 0
                                        s = _1411 + (4 * ceil32(return_data.size)) + 1092
                                        t = _1411 + (2 * ceil32(return_data.size)) + 832
                                        while idx < mem[_1411 + (2 * ceil32(return_data.size)) + 800]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0, 0, 160, address(this.address), block.timestamp, mem[_1411 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_1411 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 896] = 30
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = 0
                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 1060] = 0
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 1092] = 0
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args address(this.address), 0, 0, 0, 0, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                            0,
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 960] = 2
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 992] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _1411 + (8 * ceil32(return_data.size)) + 1056
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 1)
                                        allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                        emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                        mem[_1411 + (8 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_1411 + (8 * ceil32(return_data.size)) + 1060] = balanceOf[address(this.address)]
                                        mem[_1411 + (8 * ceil32(return_data.size)) + 1092] = 0
                                        mem[_1411 + (8 * ceil32(return_data.size)) + 1124] = 160
                                        mem[_1411 + (8 * ceil32(return_data.size)) + 1220] = 2
                                        idx = 0
                                        s = _1411 + (8 * ceil32(return_data.size)) + 1252
                                        t = _1411 + (4 * ceil32(return_data.size)) + 992
                                        while idx < mem[_1411 + (4 * ceil32(return_data.size)) + 960]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[_1411 + (8 * ceil32(return_data.size)) + 1156] = this.address
                                        mem[_1411 + (8 * ceil32(return_data.size)) + 1188] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len _1411 + (8 * ceil32(return_data.size)) + (32 * mem[_1411 + (4 * ceil32(return_data.size)) + 960]) + -mem[64] + 1248]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        uint8(stor27.field_0) = 0
                                        if not arg2:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _15956 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_15956] = 38
                                            mem[_15956 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if 0 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15956 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 0, 17
                                            if balanceOf[this.address] > -1:
                                                revert with 0, 17
                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                            emit Transfer(0, msg.sender, this.address);
                                        else:
                                            if arg2 and 10^18 > -1 / arg2:
                                                revert with 0, 17
                                            if not arg2:
                                                revert with 0, 18
                                            if 10^18 * arg2 / arg2 != 10^18:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _16332 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_16332] = 38
                                            mem[_16332 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16332 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                            if balanceOf[this.address] > !(10^18 * arg2):
                                                revert with 0, 17
                                            if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                            emit Transfer((10^18 * arg2), msg.sender, this.address);
                                        if not arg2:
                                            mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = 96
                                            mem[mem[64] + 100] = mem[96]
                                            mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                            if ceil32(mem[96]) > mem[96]:
                                                mem[mem[96] + mem[64] + 132] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0x90219732 with:
                                                 gas gas_remaining wei
                                                args msg.sender, 96, 0, mem[96], mem[mem[64] + 132 len ceil32(mem[96])]
                                        else:
                                            if arg2 and 10^18 > -1 / arg2:
                                                revert with 0, 17
                                            if not arg2:
                                                revert with 0, 18
                                            if 10^18 * arg2 / arg2 != 10^18:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = 96
                                            mem[mem[64] + 100] = mem[96]
                                            mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                            if ceil32(mem[96]) > mem[96]:
                                                mem[mem[96] + mem[64] + 132] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0x90219732 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=mem[96], data=mem[mem[64] + 132 len ceil32(mem[96])]), 10^18 * arg2
                                    else:
                                        if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                            revert with 0, 17
                                        if not balanceOf[address(this.address)]:
                                            revert with 0, 18
                                        if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 608] = 26
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 672] = 26
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 736] = 30
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                        if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                            revert with 0, 17
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 800] = 2
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 832] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                        allowance[address(this.address)][stor14].field_255 = 0
                                        emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 900] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 932] = 0
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 964] = 160
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 1060] = 2
                                        idx = 0
                                        s = _1411 + (4 * ceil32(return_data.size)) + 1092
                                        t = _1411 + (2 * ceil32(return_data.size)) + 832
                                        while idx < mem[_1411 + (2 * ceil32(return_data.size)) + 800]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_1411 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_1411 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 896] = 30
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                        emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 1060] = 0
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 1092] = 0
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args address(this.address), (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 960] = 2
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 992] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _1411 + (8 * ceil32(return_data.size)) + 1056
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[_1411 + (4 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 1)
                                        allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                        emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                        mem[_1411 + (8 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_1411 + (8 * ceil32(return_data.size)) + 1060] = balanceOf[address(this.address)]
                                        mem[_1411 + (8 * ceil32(return_data.size)) + 1092] = 0
                                        mem[_1411 + (8 * ceil32(return_data.size)) + 1124] = 160
                                        mem[_1411 + (8 * ceil32(return_data.size)) + 1220] = 2
                                        idx = 0
                                        s = _1411 + (8 * ceil32(return_data.size)) + 1252
                                        t = _1411 + (4 * ceil32(return_data.size)) + 992
                                        while idx < mem[_1411 + (4 * ceil32(return_data.size)) + 960]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[_1411 + (8 * ceil32(return_data.size)) + 1156] = this.address
                                        mem[_1411 + (8 * ceil32(return_data.size)) + 1188] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[_1411 + (8 * ceil32(return_data.size)) + 1220 len (32 * mem[_1411 + (4 * ceil32(return_data.size)) + 960]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        uint8(stor27.field_0) = 0
                                        if not arg2:
                                            if not msg.sender:
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1056] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1060] = 32
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1092] = 37
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1124] = 'ERC20: transfer from the zero ad'
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1156] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1411 + (8 * ceil32(return_data.size)) + 1056
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not this.address:
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1056] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1060] = 32
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1092] = 35
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1124] = 'ERC20: transfer to the zero addr'
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1156] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1411 + (8 * ceil32(return_data.size)) + 1056
                                                   len (5 * ceil32(return_data.size)) + 132
                                            mem[_1411 + (8 * ceil32(return_data.size)) + 1056] = 38
                                            mem[_1411 + (8 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if 0 > balanceOf[address(msg.sender)]:
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1152] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1156] = 32
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1188] = 38
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1220 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1258] = 0
                                                revert with memory
                                                  from _1411 + (8 * ceil32(return_data.size)) + 1152
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 0, 17
                                            if balanceOf[this.address] > -1:
                                                revert with 0, 17
                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1152] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1156] = 32
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1188] = 27
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1220] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from _1411 + (8 * ceil32(return_data.size)) + 1152
                                                   len (5 * ceil32(return_data.size)) + 100
                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                            emit Transfer(0, msg.sender, this.address);
                                        else:
                                            if arg2 and 10^18 > -1 / arg2:
                                                revert with 0, 17
                                            if not arg2:
                                                revert with 0, 18
                                            if 10^18 * arg2 / arg2 != 10^18:
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1056] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1060] = 32
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1092] = 33
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1124] = 'SafeMath: multiplication overflo'
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1156] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1411 + (8 * ceil32(return_data.size)) + 1056
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not msg.sender:
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1056] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1060] = 32
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1092] = 37
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1124] = 'ERC20: transfer from the zero ad'
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1156] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1411 + (8 * ceil32(return_data.size)) + 1056
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not this.address:
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1056] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1060] = 32
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1092] = 35
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1124] = 'ERC20: transfer to the zero addr'
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1156] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1411 + (8 * ceil32(return_data.size)) + 1056
                                                   len (5 * ceil32(return_data.size)) + 132
                                            mem[_1411 + (8 * ceil32(return_data.size)) + 1056] = 38
                                            mem[_1411 + (8 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1152] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1156] = 32
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1188] = 38
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1220 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1258] = 0
                                                revert with memory
                                                  from _1411 + (8 * ceil32(return_data.size)) + 1152
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                            if balanceOf[this.address] > !(10^18 * arg2):
                                                revert with 0, 17
                                            if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1152] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1156] = 32
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1188] = 27
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1220] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from _1411 + (8 * ceil32(return_data.size)) + 1152
                                                   len (5 * ceil32(return_data.size)) + 100
                                            balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                            emit Transfer((10^18 * arg2), msg.sender, this.address);
                                        if not arg2:
                                            mem[_1411 + (8 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (8 * ceil32(return_data.size)) + 1156] = msg.sender
                                            mem[_1411 + (8 * ceil32(return_data.size)) + 1188] = 96
                                            mem[_1411 + (8 * ceil32(return_data.size)) + 1252] = mem[96]
                                            mem[_1411 + (8 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                            if ceil32(mem[96]) > mem[96]:
                                                mem[mem[96] + _1411 + (8 * ceil32(return_data.size)) + 1284] = 0
                                            mem[_1411 + (8 * ceil32(return_data.size)) + 1220] = 0
                                        else:
                                            if arg2 and 10^18 > -1 / arg2:
                                                revert with 0, 17
                                            if not arg2:
                                                revert with 0, 18
                                            if 10^18 * arg2 / arg2 != 10^18:
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1152] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1156] = 32
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1188] = 33
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1220] = 'SafeMath: multiplication overflo'
                                                mem[_1411 + (8 * ceil32(return_data.size)) + 1252] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1411 + (8 * ceil32(return_data.size)) + 1152
                                                   len (5 * ceil32(return_data.size)) + 132
                                            mem[_1411 + (8 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (8 * ceil32(return_data.size)) + 1156] = msg.sender
                                            mem[_1411 + (8 * ceil32(return_data.size)) + 1188] = 96
                                            mem[_1411 + (8 * ceil32(return_data.size)) + 1252] = mem[96]
                                            mem[_1411 + (8 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                            if ceil32(mem[96]) > mem[96]:
                                                mem[mem[96] + _1411 + (8 * ceil32(return_data.size)) + 1284] = 0
                                            mem[_1411 + (8 * ceil32(return_data.size)) + 1220] = 10^18 * arg2
                                        require ext_code.size(nodeRewardManagerAddress)
                                        call nodeRewardManagerAddress.0x90219732 with:
                                             gas gas_remaining wei
                                            args mem[_1411 + (8 * ceil32(return_data.size)) + 1156 len ceil32(mem[96]) + (5 * ceil32(return_data.size)) + 128]
                                else:
                                    if balanceOf[address(this.address)] and rewardsFee > -1 / balanceOf[address(this.address)]:
                                        revert with 0, 17
                                    if not balanceOf[address(this.address)]:
                                        revert with 0, 18
                                    if balanceOf[address(this.address)] * rewardsFee / balanceOf[address(this.address)] != rewardsFee:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    mem[_1411 + ceil32(return_data.size) + 160] = 26
                                    mem[_1411 + ceil32(return_data.size) + 192] = 'SafeMath: division by zero'
                                    if not balanceOf[address(this.address)] * rewardsFee / 100:
                                        mem[_1411 + ceil32(return_data.size) + 224] = 26
                                        mem[_1411 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                        mem[_1411 + ceil32(return_data.size) + 288] = 2
                                        mem[_1411 + ceil32(return_data.size) + 320] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_1411 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[_1411 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = 0
                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 388] = 0
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 420] = 0
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 452] = 160
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 548] = 2
                                        idx = 0
                                        s = _1411 + (2 * ceil32(return_data.size)) + 580
                                        t = _1411 + ceil32(return_data.size) + 320
                                        while idx < mem[_1411 + ceil32(return_data.size) + 288]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 484] = this.address
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0, 0, 160, address(this.address), block.timestamp, mem[_1411 + (2 * ceil32(return_data.size)) + 548 len (32 * mem[_1411 + ceil32(return_data.size) + 288]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 384] = 30
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 416] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 448] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 452] = 32
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 484] = 30
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 516] = 'SafeMath: subtraction overflow'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 546] = 0
                                            revert with memory
                                              from _1411 + (2 * ceil32(return_data.size)) + 448
                                               len ceil32(return_data.size) + 100
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        call distributionPoolAddress with:
                                             gas 2300 wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 448] = 30
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 480] = 'SafeMath: subtraction overflow'
                                        if 0 > balanceOf[address(this.address)] * rewardsFee / 100:
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 516] = 32
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 548] = 30
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 580] = 'SafeMath: subtraction overflow'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 610] = 0
                                            revert with memory
                                              from _1411 + (2 * ceil32(return_data.size)) + 512
                                               len ceil32(return_data.size) + 100
                                        if balanceOf[address(this.address)] * rewardsFee / 100 < 0:
                                            revert with 0, 17
                                        if not this.address:
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 516] = 32
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 548] = 37
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer from the zero ad'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 612] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                            revert with memory
                                              from _1411 + (2 * ceil32(return_data.size)) + 512
                                               len ceil32(return_data.size) + 132
                                        if not distributionPoolAddress:
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 516] = 32
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 548] = 35
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer to the zero addr'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 612] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                            revert with memory
                                              from _1411 + (2 * ceil32(return_data.size)) + 512
                                               len ceil32(return_data.size) + 132
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 512] = 38
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 544 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if balanceOf[address(this.address)] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 612] = 32
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 644] = 38
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 676 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_1411 + (2 * ceil32(return_data.size)) + 582 len 26]
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 714] = 0
                                            revert with memory
                                              from _1411 + (2 * ceil32(return_data.size)) + 608
                                               len ceil32(return_data.size) + 132
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)] * rewardsFee / 100:
                                            revert with 0, 17
                                        balanceOf[address(this.address)] -= balanceOf[address(this.address)] * rewardsFee / 100
                                        if balanceOf[stor17] > !(balanceOf[address(this.address)] * rewardsFee / 100):
                                            revert with 0, 17
                                        if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) < balanceOf[stor17]:
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 612] = 32
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 644] = 27
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from _1411 + (2 * ceil32(return_data.size)) + 608
                                               len ceil32(return_data.size) + 100
                                        balanceOf[stor17] += balanceOf[address(this.address)] * rewardsFee / 100
                                        emit Transfer((balanceOf[address(this.address)] * rewardsFee / 100), this.address, distributionPoolAddress);
                                        if not balanceOf[address(this.address)]:
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 608] = 26
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 672] = 26
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 736] = 30
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 800] = 2
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 832] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 900] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 932] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 964] = 160
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1060] = 2
                                            idx = 0
                                            s = _1411 + (4 * ceil32(return_data.size)) + 1092
                                            t = _1411 + (2 * ceil32(return_data.size)) + 832
                                            while idx < mem[_1411 + (2 * ceil32(return_data.size)) + 800]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 996] = this.address
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0, 0, 160, address(this.address), block.timestamp, mem[_1411 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_1411 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 896] = 30
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 964] = this.address
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 996] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1028] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1060] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1092] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0, 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                0,
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 960] = 2
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 992] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _1411 + (7 * ceil32(return_data.size)) + 1056
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1060] = balanceOf[address(this.address)]
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1092] = 0
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1124] = 160
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1220] = 2
                                            idx = 0
                                            s = _1411 + (7 * ceil32(return_data.size)) + 1252
                                            t = _1411 + (6 * ceil32(return_data.size)) + 992
                                            while idx < mem[_1411 + (6 * ceil32(return_data.size)) + 960]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1156] = this.address
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1188] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _1411 + (7 * ceil32(return_data.size)) + (32 * mem[_1411 + (6 * ceil32(return_data.size)) + 960]) + -mem[64] + 1248]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor27.field_0) = 0
                                            if not arg2:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _15948 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_15948] = 38
                                                mem[_15948 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15948 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _16322 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_16322] = 38
                                                mem[_16322 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16322 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                if balanceOf[this.address] > !(10^18 * arg2):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                emit Transfer((10^18 * arg2), msg.sender, this.address);
                                            if not arg2:
                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = 96
                                                mem[mem[64] + 100] = mem[96]
                                                mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + mem[64] + 132] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, 96, 0, mem[96], mem[mem[64] + 132 len ceil32(mem[96])]
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = 96
                                                mem[mem[64] + 100] = mem[96]
                                                mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + mem[64] + 132] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=mem[96], data=mem[mem[64] + 132 len ceil32(mem[96])]), 10^18 * arg2
                                        else:
                                            if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 612] = 32
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 644] = 33
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: multiplication overflo'
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 708] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1411 + (2 * ceil32(return_data.size)) + 608
                                                   len ceil32(return_data.size) + 132
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 608] = 26
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 672] = 26
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 736] = 30
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 800] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 804] = 32
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 836] = 30
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 868] = 'SafeMath: subtraction overflow'
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 898] = 0
                                                revert with memory
                                                  from _1411 + (2 * ceil32(return_data.size)) + 800
                                                   len ceil32(return_data.size) + 100
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                revert with 0, 17
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 800] = 2
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 832] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            allowance[address(this.address)][stor14].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 900] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 932] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 964] = 160
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1060] = 2
                                            idx = 0
                                            s = _1411 + (4 * ceil32(return_data.size)) + 1092
                                            t = _1411 + (2 * ceil32(return_data.size)) + 832
                                            while idx < mem[_1411 + (2 * ceil32(return_data.size)) + 800]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 996] = this.address
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_1411 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_1411 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 896] = 30
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                mem[_1411 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (4 * ceil32(return_data.size)) + 964] = 32
                                                mem[_1411 + (4 * ceil32(return_data.size)) + 996] = 30
                                                mem[_1411 + (4 * ceil32(return_data.size)) + 1028] = 'SafeMath: subtraction overflow'
                                                mem[_1411 + (4 * ceil32(return_data.size)) + 1058] = 0
                                                revert with memory
                                                  from _1411 + (4 * ceil32(return_data.size)) + 960
                                                   len (5 * ceil32(return_data.size)) + 100
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                mem[_1411 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (4 * ceil32(return_data.size)) + 964] = 32
                                                mem[_1411 + (4 * ceil32(return_data.size)) + 996] = 36
                                                mem[_1411 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve from the zero add'
                                                mem[_1411 + (4 * ceil32(return_data.size)) + 1060] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1411 + (4 * ceil32(return_data.size)) + 960
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not uniswapV2RouterAddress:
                                                mem[_1411 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (4 * ceil32(return_data.size)) + 964] = 32
                                                mem[_1411 + (4 * ceil32(return_data.size)) + 996] = 34
                                                mem[_1411 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve to the zero addre'
                                                mem[_1411 + (4 * ceil32(return_data.size)) + 1060] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1411 + (4 * ceil32(return_data.size)) + 960
                                                   len (5 * ceil32(return_data.size)) + 132
                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 964] = this.address
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 996] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1028] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1060] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1092] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args mem[_1411 + (4 * ceil32(return_data.size)) + 964 len (5 * ceil32(return_data.size)) + 192]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 960] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 992] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1024] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                mem[_1411 + (4 * ceil32(return_data.size)) + 960 len (7 * ceil32(return_data.size)) + 96],
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 960] = 2
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 992] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _1411 + (6 * ceil32(return_data.size)) + 1056
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 1060] = balanceOf[address(this.address)]
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 1092] = 0
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 1124] = 160
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 1220] = 2
                                            idx = 0
                                            s = _1411 + (6 * ceil32(return_data.size)) + 1252
                                            t = _1411 + (4 * ceil32(return_data.size)) + 992
                                            while idx < mem[_1411 + (4 * ceil32(return_data.size)) + 960]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 1188] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[_1411 + (6 * ceil32(return_data.size)) + 1220 len (32 * mem[_1411 + (4 * ceil32(return_data.size)) + 960]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor27.field_0) = 0
                                            if not arg2:
                                                if not msg.sender:
                                                    revert with 0, 
                                                                'ERC20: transfer from the zero address',
                                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                if not this.address:
                                                    revert with 0, 
                                                                'ERC20: transfer to the zero address',
                                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1056] = 38
                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[_1411 + (6 * ceil32(return_data.size)) + 1258] = 0
                                                    revert with 0, 
                                                                32,
                                                                38,
                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1258 len (9 * ceil32(return_data.size)) + 26]
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow', mem[_1411 + (6 * ceil32(return_data.size)) + 1252 len 9 * ceil32(return_data.size)]
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 
                                                                'SafeMath: multiplication overflow',
                                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                if not msg.sender:
                                                    revert with 0, 
                                                                'ERC20: transfer from the zero address',
                                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                if not this.address:
                                                    revert with 0, 
                                                                'ERC20: transfer to the zero address',
                                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1188 len 9 * ceil32(return_data.size)]
                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1056] = 38
                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                    mem[_1411 + (6 * ceil32(return_data.size)) + 1258] = 0
                                                    revert with 0, 
                                                                32,
                                                                38,
                                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1258 len (9 * ceil32(return_data.size)) + 26]
                                                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                if balanceOf[this.address] > !(10^18 * arg2):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow', mem[_1411 + (6 * ceil32(return_data.size)) + 1252 len 9 * ceil32(return_data.size)]
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                emit Transfer((10^18 * arg2), msg.sender, this.address);
                                            if not arg2:
                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1156] = msg.sender
                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1188] = 96
                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1252] = mem[96]
                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + _1411 + (6 * ceil32(return_data.size)) + 1284] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, 96, 0, mem[96], mem[_1411 + (6 * ceil32(return_data.size)) + 1284 len (9 * ceil32(return_data.size)) + ceil32(mem[96])]
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 
                                                                'SafeMath: multiplication overflow',
                                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1284 len 9 * ceil32(return_data.size)]
                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1156] = msg.sender
                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1188] = 96
                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1252] = mem[96]
                                                mem[_1411 + (6 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + _1411 + (6 * ceil32(return_data.size)) + 1284] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=mem[96], data=mem[_1411 + (6 * ceil32(return_data.size)) + 1284 len (9 * ceil32(return_data.size)) + ceil32(mem[96])]), 10^18 * arg2
                                    else:
                                        if balanceOf[address(this.address)] * rewardsFee / 100 and stor25 > -1 / balanceOf[address(this.address)] * rewardsFee / 100:
                                            revert with 0, 17
                                        if not balanceOf[address(this.address)] * rewardsFee / 100:
                                            revert with 0, 18
                                        if balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / balanceOf[address(this.address)] * rewardsFee / 100 != stor25:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        mem[_1411 + ceil32(return_data.size) + 224] = 26
                                        mem[_1411 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                        mem[_1411 + ceil32(return_data.size) + 288] = 2
                                        mem[_1411 + ceil32(return_data.size) + 320] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_1411 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[_1411 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100
                                        emit Approval((balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100), this.address, uniswapV2RouterAddress);
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 388] = balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 420] = 0
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 452] = 160
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 548] = 2
                                        idx = 0
                                        s = _1411 + (2 * ceil32(return_data.size)) + 580
                                        t = _1411 + ceil32(return_data.size) + 320
                                        while idx < mem[_1411 + ceil32(return_data.size) + 288]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 484] = this.address
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100, 0, 160, address(this.address), block.timestamp, mem[_1411 + (2 * ceil32(return_data.size)) + 548 len (32 * mem[_1411 + ceil32(return_data.size) + 288]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 384] = 30
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 416] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 448] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 452] = 32
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 484] = 30
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 516] = 'SafeMath: subtraction overflow'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 546] = 0
                                            revert with memory
                                              from _1411 + (2 * ceil32(return_data.size)) + 448
                                               len ceil32(return_data.size) + 100
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        call distributionPoolAddress with:
                                             gas 2300 wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 448] = 30
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 480] = 'SafeMath: subtraction overflow'
                                        if balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100 > balanceOf[address(this.address)] * rewardsFee / 100:
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 516] = 32
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 548] = 30
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 580] = 'SafeMath: subtraction overflow'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 610] = 0
                                            revert with memory
                                              from _1411 + (2 * ceil32(return_data.size)) + 512
                                               len ceil32(return_data.size) + 100
                                        if balanceOf[address(this.address)] * rewardsFee / 100 < balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100:
                                            revert with 0, 17
                                        if not this.address:
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 516] = 32
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 548] = 37
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer from the zero ad'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 612] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                            revert with memory
                                              from _1411 + (2 * ceil32(return_data.size)) + 512
                                               len ceil32(return_data.size) + 132
                                        if not distributionPoolAddress:
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 516] = 32
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 548] = 35
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer to the zero addr'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 612] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                            revert with memory
                                              from _1411 + (2 * ceil32(return_data.size)) + 512
                                               len ceil32(return_data.size) + 132
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 512] = 38
                                        mem[_1411 + (2 * ceil32(return_data.size)) + 544 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100) > balanceOf[address(this.address)]:
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 612] = 32
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 644] = 38
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 676 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_1411 + (2 * ceil32(return_data.size)) + 582 len 26]
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 714] = 0
                                            revert with memory
                                              from _1411 + (2 * ceil32(return_data.size)) + 608
                                               len ceil32(return_data.size) + 132
                                        if balanceOf[address(this.address)] < (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100):
                                            revert with 0, 17
                                        balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[address(this.address)] * rewardsFee / 100) + (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)
                                        if balanceOf[stor17] > !((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)):
                                            revert with 0, 17
                                        if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100) < balanceOf[stor17]:
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 612] = 32
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 644] = 27
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from _1411 + (2 * ceil32(return_data.size)) + 608
                                               len ceil32(return_data.size) + 100
                                        balanceOf[stor17] = balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)
                                        emit Transfer(((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)), this.address, distributionPoolAddress);
                                        if not balanceOf[address(this.address)]:
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 608] = 26
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 672] = 26
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 736] = 30
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 800] = 2
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 832] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 900] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 932] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 964] = 160
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1060] = 2
                                            idx = 0
                                            s = _1411 + (4 * ceil32(return_data.size)) + 1092
                                            t = _1411 + (2 * ceil32(return_data.size)) + 832
                                            while idx < mem[_1411 + (2 * ceil32(return_data.size)) + 800]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 996] = this.address
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0, 0, 160, address(this.address), block.timestamp, mem[_1411 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_1411 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 896] = 30
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 964] = this.address
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 996] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1028] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1060] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1092] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0, 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                0,
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 960] = 2
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 992] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _1411 + (7 * ceil32(return_data.size)) + 1056
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1060] = balanceOf[address(this.address)]
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1092] = 0
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1124] = 160
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1220] = 2
                                            idx = 0
                                            s = _1411 + (7 * ceil32(return_data.size)) + 1252
                                            t = _1411 + (6 * ceil32(return_data.size)) + 992
                                            while idx < mem[_1411 + (6 * ceil32(return_data.size)) + 960]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1156] = this.address
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1188] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _1411 + (7 * ceil32(return_data.size)) + (32 * mem[_1411 + (6 * ceil32(return_data.size)) + 960]) + -mem[64] + 1248]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor27.field_0) = 0
                                            if not arg2:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _15940 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_15940] = 38
                                                mem[_15940 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15940 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _16312 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_16312] = 38
                                                mem[_16312 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16312 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                if balanceOf[this.address] > !(10^18 * arg2):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                emit Transfer((10^18 * arg2), msg.sender, this.address);
                                        else:
                                            if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 612] = 32
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 644] = 33
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: multiplication overflo'
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 708] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1411 + (2 * ceil32(return_data.size)) + 608
                                                   len ceil32(return_data.size) + 132
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 608] = 26
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 672] = 26
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 736] = 30
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 800] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 804] = 32
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 836] = 30
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 868] = 'SafeMath: subtraction overflow'
                                                mem[_1411 + (2 * ceil32(return_data.size)) + 898] = 0
                                                revert with memory
                                                  from _1411 + (2 * ceil32(return_data.size)) + 800
                                                   len ceil32(return_data.size) + 100
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                revert with 0, 17
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 800] = 2
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 832] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1411 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            allowance[address(this.address)][stor14].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 900] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 932] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 964] = 160
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1060] = 2
                                            idx = 0
                                            s = _1411 + (4 * ceil32(return_data.size)) + 1092
                                            t = _1411 + (2 * ceil32(return_data.size)) + 832
                                            while idx < mem[_1411 + (2 * ceil32(return_data.size)) + 800]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 996] = this.address
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_1411 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_1411 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 896] = 30
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 964] = this.address
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 996] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1028] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1060] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1092] = 0
                                            mem[_1411 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 960] = 2
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 992] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _1411 + (7 * ceil32(return_data.size)) + 1056
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1411 + (6 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1060] = balanceOf[address(this.address)]
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1092] = 0
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1124] = 160
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1220] = 2
                                            idx = 0
                                            s = _1411 + (7 * ceil32(return_data.size)) + 1252
                                            t = _1411 + (6 * ceil32(return_data.size)) + 992
                                            while idx < mem[_1411 + (6 * ceil32(return_data.size)) + 960]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1156] = this.address
                                            mem[_1411 + (7 * ceil32(return_data.size)) + 1188] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _1411 + (7 * ceil32(return_data.size)) + (32 * mem[_1411 + (6 * ceil32(return_data.size)) + 960]) + -mem[64] + 1248]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor27.field_0) = 0
                                            if not arg2:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _15936 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_15936] = 38
                                                mem[_15936 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15936 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _16307 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_16307] = 38
                                                mem[_16307 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16307 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                if balanceOf[this.address] > !(10^18 * arg2):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                emit Transfer((10^18 * arg2), msg.sender, this.address);
                                        if not arg2:
                                            mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = 96
                                            mem[mem[64] + 100] = mem[96]
                                            mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                            if ceil32(mem[96]) > mem[96]:
                                                mem[mem[96] + mem[64] + 132] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0x90219732 with:
                                                 gas gas_remaining wei
                                                args msg.sender, 96, 0, mem[96], mem[mem[64] + 132 len ceil32(mem[96])]
                                        else:
                                            if arg2 and 10^18 > -1 / arg2:
                                                revert with 0, 17
                                            if not arg2:
                                                revert with 0, 18
                                            if 10^18 * arg2 / arg2 != 10^18:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = 96
                                            mem[mem[64] + 100] = mem[96]
                                            mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                            if ceil32(mem[96]) > mem[96]:
                                                mem[mem[96] + mem[64] + 132] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0x90219732 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=mem[96], data=mem[mem[64] + 132 len ceil32(mem[96])]), 10^18 * arg2
                            else:
                                if balanceOf[address(this.address)] and futurFee > -1 / balanceOf[address(this.address)]:
                                    revert with 0, 17
                                if not balanceOf[address(this.address)]:
                                    revert with 0, 18
                                if balanceOf[address(this.address)] * futurFee / balanceOf[address(this.address)] != futurFee:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 26
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 160] = 'SafeMath: division by zero'
                                if not balanceOf[address(this.address)] * futurFee / 100:
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 192] = 26
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 224] = 'SafeMath: division by zero'
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 256] = 30
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 288] = 'SafeMath: subtraction overflow'
                                    if 0 > balanceOf[address(this.address)] * futurFee / 100:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if balanceOf[address(this.address)] * futurFee / 100 < 0:
                                        revert with 0, 17
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 320] = 2
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 352] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 416] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 384] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = 32
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 36
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 'ERC20: approve from the zero add'
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                        revert with memory
                                          from ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                           len ceil32(return_data.size) + 132
                                    if not uniswapV2RouterAddress:
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = 32
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 34
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 'ERC20: approve to the zero addre'
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                        revert with memory
                                          from ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                           len ceil32(return_data.size) + 132
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 1)
                                    allowance[address(this.address)][stor14].field_0 = 0
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0
                                    emit Approval(mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = 0
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 0
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 160
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 580] = 2
                                    idx = 0
                                    s = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 612
                                    t = ceil32(arg1.length) + ceil32(return_data.size) + 352
                                    while idx < mem[ceil32(arg1.length) + ceil32(return_data.size) + 320]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = this.address
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 548] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len ceil32(arg1.length) + (2 * ceil32(return_data.size)) + (32 * mem[ceil32(arg1.length) + ceil32(return_data.size) + 320]) + -mem[64] + 608]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1374 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_1374] = 30
                                    mem[_1374 + 32] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call devPoolAddress with:
                                         gas 2300 wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1407 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    mem[_1407 + 32 len 64] = call.data[calldata.size len 64]
                                    if 0 >= mem[_1407]:
                                        revert with 0, 50
                                    mem[_1407 + 32] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[_1407 + 96] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _1407 + ceil32(return_data.size) + 96
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    if 1 >= mem[_1407]:
                                        revert with 0, 50
                                    mem[_1407 + 64] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 1)
                                    allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * futurFee / 100
                                    emit Approval((balanceOf[address(this.address)] * futurFee / 100), this.address, uniswapV2RouterAddress);
                                    mem[_1407 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[_1407 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)] * futurFee / 100
                                    mem[_1407 + ceil32(return_data.size) + 132] = 0
                                    mem[_1407 + ceil32(return_data.size) + 164] = 160
                                    mem[_1407 + ceil32(return_data.size) + 260] = mem[_1407]
                                    idx = 0
                                    s = _1407 + ceil32(return_data.size) + 292
                                    t = _1407 + 32
                                    while idx < mem[_1407]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args balanceOf[address(this.address)] * futurFee / 100, 0, 160, address(this.address), block.timestamp, mem[_1407 + ceil32(return_data.size) + 260 len (32 * mem[_1407]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[_1407 + ceil32(return_data.size) + 96] = 30
                                    mem[_1407 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call futurUsePoolAddress with:
                                         gas 2300 wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not balanceOf[address(this.address)]:
                                        mem[_1407 + ceil32(return_data.size) + 160] = 26
                                        mem[_1407 + ceil32(return_data.size) + 192] = 'SafeMath: division by zero'
                                        mem[_1407 + ceil32(return_data.size) + 224] = 26
                                        mem[_1407 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                        mem[_1407 + ceil32(return_data.size) + 288] = 2
                                        mem[_1407 + ceil32(return_data.size) + 320] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_1407 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[_1407 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = 0
                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                        mem[_1407 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_1407 + (2 * ceil32(return_data.size)) + 388] = 0
                                        mem[_1407 + (2 * ceil32(return_data.size)) + 420] = 0
                                        mem[_1407 + (2 * ceil32(return_data.size)) + 452] = 160
                                        mem[_1407 + (2 * ceil32(return_data.size)) + 548] = 2
                                        idx = 0
                                        s = _1407 + (2 * ceil32(return_data.size)) + 580
                                        t = _1407 + ceil32(return_data.size) + 320
                                        while idx < mem[_1407 + ceil32(return_data.size) + 288]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[_1407 + (2 * ceil32(return_data.size)) + 484] = this.address
                                        mem[_1407 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0, 0, 160, address(this.address), block.timestamp, mem[_1407 + (2 * ceil32(return_data.size)) + 548 len (32 * mem[_1407 + ceil32(return_data.size) + 288]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[_1407 + (2 * ceil32(return_data.size)) + 384] = 30
                                        mem[_1407 + (2 * ceil32(return_data.size)) + 416] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 448] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 452] = 32
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 484] = 30
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 516] = 'SafeMath: subtraction overflow'
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 546] = 0
                                            revert with memory
                                              from _1407 + (2 * ceil32(return_data.size)) + 448
                                               len ceil32(return_data.size) + 100
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        call distributionPoolAddress with:
                                             gas 2300 wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[_1407 + (2 * ceil32(return_data.size)) + 448] = 30
                                        mem[_1407 + (2 * ceil32(return_data.size)) + 480] = 'SafeMath: subtraction overflow'
                                        if not this.address:
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 516] = 32
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 548] = 37
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer from the zero ad'
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 612] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                            revert with memory
                                              from _1407 + (2 * ceil32(return_data.size)) + 512
                                               len ceil32(return_data.size) + 132
                                        if not distributionPoolAddress:
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 516] = 32
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 548] = 35
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer to the zero addr'
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 612] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                            revert with memory
                                              from _1407 + (2 * ceil32(return_data.size)) + 512
                                               len ceil32(return_data.size) + 132
                                        mem[_1407 + (2 * ceil32(return_data.size)) + 512] = 38
                                        mem[_1407 + (2 * ceil32(return_data.size)) + 544 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if 0 > balanceOf[address(this.address)]:
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 612] = 32
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 644] = 38
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 676 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_1407 + (2 * ceil32(return_data.size)) + 582 len 26]
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 714] = 0
                                            revert with memory
                                              from _1407 + (2 * ceil32(return_data.size)) + 608
                                               len ceil32(return_data.size) + 132
                                        if balanceOf[address(this.address)] < 0:
                                            revert with 0, 17
                                        if balanceOf[stor17] > -1:
                                            revert with 0, 17
                                        if balanceOf[stor17] < balanceOf[stor17]:
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 612] = 32
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 644] = 27
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from _1407 + (2 * ceil32(return_data.size)) + 608
                                               len ceil32(return_data.size) + 100
                                        balanceOf[stor17] = balanceOf[stor17]
                                        emit Transfer(0, this.address, distributionPoolAddress);
                                        if not balanceOf[address(this.address)]:
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 608] = 26
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 672] = 26
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 736] = 30
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 800] = 2
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 832] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 900] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 932] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 964] = 160
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1060] = 2
                                            idx = 0
                                            s = _1407 + (4 * ceil32(return_data.size)) + 1092
                                            t = _1407 + (2 * ceil32(return_data.size)) + 832
                                            while idx < mem[_1407 + (2 * ceil32(return_data.size)) + 800]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 996] = this.address
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0, 0, 160, address(this.address), block.timestamp, mem[_1407 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_1407 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 896] = 30
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 964] = this.address
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 996] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1028] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1060] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1092] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0, 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                0,
                                            mem[_1407 + (6 * ceil32(return_data.size)) + 960] = 2
                                            mem[_1407 + (6 * ceil32(return_data.size)) + 992] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1407 + (6 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _1407 + (7 * ceil32(return_data.size)) + 1056
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1407 + (6 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1060] = balanceOf[address(this.address)]
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1092] = 0
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1124] = 160
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1220] = 2
                                            idx = 0
                                            s = _1407 + (7 * ceil32(return_data.size)) + 1252
                                            t = _1407 + (6 * ceil32(return_data.size)) + 992
                                            while idx < mem[_1407 + (6 * ceil32(return_data.size)) + 960]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1156] = this.address
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1188] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _1407 + (7 * ceil32(return_data.size)) + (32 * mem[_1407 + (6 * ceil32(return_data.size)) + 960]) + -mem[64] + 1248]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor27.field_0) = 0
                                            if not arg2:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _15932 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_15932] = 38
                                                mem[_15932 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15932 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _16302 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_16302] = 38
                                                mem[_16302 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16302 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                if balanceOf[this.address] > !(10^18 * arg2):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                emit Transfer((10^18 * arg2), msg.sender, this.address);
                                            if not arg2:
                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = 96
                                                mem[mem[64] + 100] = mem[96]
                                                mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + mem[64] + 132] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, 96, 0, mem[96], mem[mem[64] + 132 len ceil32(mem[96])]
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = 96
                                                mem[mem[64] + 100] = mem[96]
                                                mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + mem[64] + 132] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=mem[96], data=mem[mem[64] + 132 len ceil32(mem[96])]), 10^18 * arg2
                                        else:
                                            if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 612] = 32
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 644] = 33
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: multiplication overflo'
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 708] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1407 + (2 * ceil32(return_data.size)) + 608
                                                   len ceil32(return_data.size) + 132
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 608] = 26
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 672] = 26
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 736] = 30
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 800] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 804] = 32
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 836] = 30
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 868] = 'SafeMath: subtraction overflow'
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 898] = 0
                                                revert with memory
                                                  from _1407 + (2 * ceil32(return_data.size)) + 800
                                                   len ceil32(return_data.size) + 100
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                revert with 0, 17
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 800] = 2
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 832] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            allowance[address(this.address)][stor14].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 900] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 932] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 964] = 160
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1060] = 2
                                            idx = 0
                                            s = _1407 + (4 * ceil32(return_data.size)) + 1092
                                            t = _1407 + (2 * ceil32(return_data.size)) + 832
                                            while idx < mem[_1407 + (2 * ceil32(return_data.size)) + 800]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 996] = this.address
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_1407 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_1407 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 896] = 30
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                mem[_1407 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (4 * ceil32(return_data.size)) + 964] = 32
                                                mem[_1407 + (4 * ceil32(return_data.size)) + 996] = 30
                                                mem[_1407 + (4 * ceil32(return_data.size)) + 1028] = 'SafeMath: subtraction overflow'
                                                mem[_1407 + (4 * ceil32(return_data.size)) + 1058] = 0
                                                revert with memory
                                                  from _1407 + (4 * ceil32(return_data.size)) + 960
                                                   len (5 * ceil32(return_data.size)) + 100
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                mem[_1407 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (4 * ceil32(return_data.size)) + 964] = 32
                                                mem[_1407 + (4 * ceil32(return_data.size)) + 996] = 36
                                                mem[_1407 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve from the zero add'
                                                mem[_1407 + (4 * ceil32(return_data.size)) + 1060] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1407 + (4 * ceil32(return_data.size)) + 960
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not uniswapV2RouterAddress:
                                                mem[_1407 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (4 * ceil32(return_data.size)) + 964] = 32
                                                mem[_1407 + (4 * ceil32(return_data.size)) + 996] = 34
                                                mem[_1407 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve to the zero addre'
                                                mem[_1407 + (4 * ceil32(return_data.size)) + 1060] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1407 + (4 * ceil32(return_data.size)) + 960
                                                   len (5 * ceil32(return_data.size)) + 132
                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 964] = this.address
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 996] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1028] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1060] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1092] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args mem[_1407 + (4 * ceil32(return_data.size)) + 964 len (5 * ceil32(return_data.size)) + 192]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 960] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 992] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1024] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                mem[_1407 + (4 * ceil32(return_data.size)) + 960 len (7 * ceil32(return_data.size)) + 96],
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 960] = 2
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 992] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[_1407 + (6 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1407 + (6 * ceil32(return_data.size)) + 1060] = balanceOf[address(this.address)]
                                            mem[_1407 + (6 * ceil32(return_data.size)) + 1092] = 0
                                            mem[_1407 + (6 * ceil32(return_data.size)) + 1124] = 160
                                            mem[_1407 + (6 * ceil32(return_data.size)) + 1220] = 2
                                            idx = 0
                                            s = _1407 + (6 * ceil32(return_data.size)) + 1252
                                            t = _1407 + (4 * ceil32(return_data.size)) + 992
                                            while idx < mem[_1407 + (4 * ceil32(return_data.size)) + 960]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[_1407 + (6 * ceil32(return_data.size)) + 1220 len (32 * mem[_1407 + (4 * ceil32(return_data.size)) + 960]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor27.field_0) = 0
                                            if not arg2:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                mem[_1407 + (6 * ceil32(return_data.size)) + 1056] = 38
                                                mem[_1407 + (6 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                mem[_1407 + (6 * ceil32(return_data.size)) + 1056] = 38
                                                mem[_1407 + (6 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                if balanceOf[this.address] > !(10^18 * arg2):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                emit Transfer((10^18 * arg2), msg.sender, this.address);
                                            if not arg2:
                                                mem[_1407 + (6 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (6 * ceil32(return_data.size)) + 1156] = msg.sender
                                                mem[_1407 + (6 * ceil32(return_data.size)) + 1188] = 96
                                                mem[_1407 + (6 * ceil32(return_data.size)) + 1252] = mem[96]
                                                mem[_1407 + (6 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + _1407 + (6 * ceil32(return_data.size)) + 1284] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, 96, 0, mem[96], mem[_1407 + (6 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])]
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[_1407 + (6 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (6 * ceil32(return_data.size)) + 1156] = msg.sender
                                                mem[_1407 + (6 * ceil32(return_data.size)) + 1188] = 96
                                                mem[_1407 + (6 * ceil32(return_data.size)) + 1252] = mem[96]
                                                mem[_1407 + (6 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + _1407 + (6 * ceil32(return_data.size)) + 1284] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=mem[96], data=mem[_1407 + (6 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])]), 10^18 * arg2
                                    else:
                                        if balanceOf[address(this.address)] and rewardsFee > -1 / balanceOf[address(this.address)]:
                                            revert with 0, 17
                                        if not balanceOf[address(this.address)]:
                                            revert with 0, 18
                                        if balanceOf[address(this.address)] * rewardsFee / balanceOf[address(this.address)] != rewardsFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        mem[_1407 + ceil32(return_data.size) + 160] = 26
                                        mem[_1407 + ceil32(return_data.size) + 192] = 'SafeMath: division by zero'
                                        if not balanceOf[address(this.address)] * rewardsFee / 100:
                                            mem[_1407 + ceil32(return_data.size) + 224] = 26
                                            mem[_1407 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                            mem[_1407 + ceil32(return_data.size) + 288] = 2
                                            mem[_1407 + ceil32(return_data.size) + 320] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1407 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1407 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 388] = 0
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 420] = 0
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 452] = 160
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 548] = 2
                                            idx = 0
                                            s = _1407 + (2 * ceil32(return_data.size)) + 580
                                            t = _1407 + ceil32(return_data.size) + 320
                                            while idx < mem[_1407 + ceil32(return_data.size) + 288]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 484] = this.address
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0, 0, 160, address(this.address), block.timestamp, mem[_1407 + (2 * ceil32(return_data.size)) + 548 len (32 * mem[_1407 + ceil32(return_data.size) + 288]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 384] = 30
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 416] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 448] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 452] = 32
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 484] = 30
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 516] = 'SafeMath: subtraction overflow'
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 546] = 0
                                                revert with memory
                                                  from _1407 + (2 * ceil32(return_data.size)) + 448
                                                   len ceil32(return_data.size) + 100
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            call distributionPoolAddress with:
                                                 gas 2300 wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 448] = 30
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 480] = 'SafeMath: subtraction overflow'
                                            if 0 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 516] = 32
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 548] = 30
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 580] = 'SafeMath: subtraction overflow'
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 610] = 0
                                                revert with memory
                                                  from _1407 + (2 * ceil32(return_data.size)) + 512
                                                   len ceil32(return_data.size) + 100
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < 0:
                                                revert with 0, 17
                                            if not this.address:
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 516] = 32
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 548] = 37
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer from the zero ad'
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 612] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1407 + (2 * ceil32(return_data.size)) + 512
                                                   len ceil32(return_data.size) + 132
                                            if not distributionPoolAddress:
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 516] = 32
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 548] = 35
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer to the zero addr'
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 612] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1407 + (2 * ceil32(return_data.size)) + 512
                                                   len ceil32(return_data.size) + 132
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 512] = 38
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 544 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if balanceOf[address(this.address)] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 612] = 32
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 644] = 38
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 676 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_1407 + (2 * ceil32(return_data.size)) + 582 len 26]
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 714] = 0
                                                revert with memory
                                                  from _1407 + (2 * ceil32(return_data.size)) + 608
                                                   len ceil32(return_data.size) + 132
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 17
                                            balanceOf[address(this.address)] -= balanceOf[address(this.address)] * rewardsFee / 100
                                            if balanceOf[stor17] > !(balanceOf[address(this.address)] * rewardsFee / 100):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) < balanceOf[stor17]:
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 612] = 32
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 644] = 27
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from _1407 + (2 * ceil32(return_data.size)) + 608
                                                   len ceil32(return_data.size) + 100
                                            balanceOf[stor17] += balanceOf[address(this.address)] * rewardsFee / 100
                                            emit Transfer((balanceOf[address(this.address)] * rewardsFee / 100), this.address, distributionPoolAddress);
                                        else:
                                            if balanceOf[address(this.address)] * rewardsFee / 100 and stor25 > -1 / balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / balanceOf[address(this.address)] * rewardsFee / 100 != stor25:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[_1407 + ceil32(return_data.size) + 224] = 26
                                            mem[_1407 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                            mem[_1407 + ceil32(return_data.size) + 288] = 2
                                            mem[_1407 + ceil32(return_data.size) + 320] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1407 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1407 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100
                                            emit Approval((balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100), this.address, uniswapV2RouterAddress);
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 388] = balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 420] = 0
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 452] = 160
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 548] = 2
                                            idx = 0
                                            s = _1407 + (2 * ceil32(return_data.size)) + 580
                                            t = _1407 + ceil32(return_data.size) + 320
                                            while idx < mem[_1407 + ceil32(return_data.size) + 288]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 484] = this.address
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100, 0, 160, address(this.address), block.timestamp, mem[_1407 + (2 * ceil32(return_data.size)) + 548 len (32 * mem[_1407 + ceil32(return_data.size) + 288]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 384] = 30
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 416] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 448] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 452] = 32
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 484] = 30
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 516] = 'SafeMath: subtraction overflow'
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 546] = 0
                                                revert with memory
                                                  from _1407 + (2 * ceil32(return_data.size)) + 448
                                                   len ceil32(return_data.size) + 100
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            call distributionPoolAddress with:
                                                 gas 2300 wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 448] = 30
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 480] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 516] = 32
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 548] = 30
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 580] = 'SafeMath: subtraction overflow'
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 610] = 0
                                                revert with memory
                                                  from _1407 + (2 * ceil32(return_data.size)) + 512
                                                   len ceil32(return_data.size) + 100
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100:
                                                revert with 0, 17
                                            if not this.address:
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 516] = 32
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 548] = 37
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer from the zero ad'
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 612] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1407 + (2 * ceil32(return_data.size)) + 512
                                                   len ceil32(return_data.size) + 132
                                            if not distributionPoolAddress:
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 516] = 32
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 548] = 35
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer to the zero addr'
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 612] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1407 + (2 * ceil32(return_data.size)) + 512
                                                   len ceil32(return_data.size) + 132
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 512] = 38
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 544 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100) > balanceOf[address(this.address)]:
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 612] = 32
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 644] = 38
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 676 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_1407 + (2 * ceil32(return_data.size)) + 582 len 26]
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 714] = 0
                                                revert with memory
                                                  from _1407 + (2 * ceil32(return_data.size)) + 608
                                                   len ceil32(return_data.size) + 132
                                            if balanceOf[address(this.address)] < (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100):
                                                revert with 0, 17
                                            balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[address(this.address)] * rewardsFee / 100) + (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)
                                            if balanceOf[stor17] > !((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100) < balanceOf[stor17]:
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 612] = 32
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 644] = 27
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from _1407 + (2 * ceil32(return_data.size)) + 608
                                                   len ceil32(return_data.size) + 100
                                            balanceOf[stor17] = balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)
                                            emit Transfer(((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)), this.address, distributionPoolAddress);
                                        if not balanceOf[address(this.address)]:
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 608] = 26
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 672] = 26
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 736] = 30
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 800] = 2
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 832] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 900] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 932] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 964] = 160
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1060] = 2
                                            idx = 0
                                            s = _1407 + (4 * ceil32(return_data.size)) + 1092
                                            t = _1407 + (2 * ceil32(return_data.size)) + 832
                                            while idx < mem[_1407 + (2 * ceil32(return_data.size)) + 800]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 996] = this.address
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0, 0, 160, address(this.address), block.timestamp, mem[_1407 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_1407 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 896] = 30
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 964] = this.address
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 996] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1028] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1060] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1092] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0, 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                0,
                                        else:
                                            if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 612] = 32
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 644] = 33
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: multiplication overflo'
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 708] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1407 + (2 * ceil32(return_data.size)) + 608
                                                   len ceil32(return_data.size) + 132
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 608] = 26
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 672] = 26
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 736] = 30
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 800] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 804] = 32
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 836] = 30
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 868] = 'SafeMath: subtraction overflow'
                                                mem[_1407 + (2 * ceil32(return_data.size)) + 898] = 0
                                                revert with memory
                                                  from _1407 + (2 * ceil32(return_data.size)) + 800
                                                   len ceil32(return_data.size) + 100
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                revert with 0, 17
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 800] = 2
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 832] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1407 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            allowance[address(this.address)][stor14].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 900] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 932] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 964] = 160
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1060] = 2
                                            idx = 0
                                            s = _1407 + (4 * ceil32(return_data.size)) + 1092
                                            t = _1407 + (2 * ceil32(return_data.size)) + 832
                                            while idx < mem[_1407 + (2 * ceil32(return_data.size)) + 800]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 996] = this.address
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_1407 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_1407 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 896] = 30
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 964] = this.address
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 996] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1028] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1060] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1092] = 0
                                            mem[_1407 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                        mem[_1407 + (6 * ceil32(return_data.size)) + 960] = 2
                                        mem[_1407 + (6 * ceil32(return_data.size)) + 992] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_1407 + (6 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _1407 + (7 * ceil32(return_data.size)) + 1056
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[_1407 + (6 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 1)
                                        allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                        emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                        mem[_1407 + (7 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_1407 + (7 * ceil32(return_data.size)) + 1060] = balanceOf[address(this.address)]
                                        mem[_1407 + (7 * ceil32(return_data.size)) + 1092] = 0
                                        mem[_1407 + (7 * ceil32(return_data.size)) + 1124] = 160
                                        mem[_1407 + (7 * ceil32(return_data.size)) + 1220] = 2
                                        idx = 0
                                        s = _1407 + (7 * ceil32(return_data.size)) + 1252
                                        t = _1407 + (6 * ceil32(return_data.size)) + 992
                                        while idx < mem[_1407 + (6 * ceil32(return_data.size)) + 960]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[_1407 + (7 * ceil32(return_data.size)) + 1220 len (32 * mem[_1407 + (6 * ceil32(return_data.size)) + 960]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        uint8(stor27.field_0) = 0
                                        if not arg2:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1056] = 38
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 0, 17
                                            if balanceOf[this.address] > -1:
                                                revert with 0, 17
                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                            emit Transfer(0, msg.sender, this.address);
                                        else:
                                            if arg2 and 10^18 > -1 / arg2:
                                                revert with 0, 17
                                            if not arg2:
                                                revert with 0, 18
                                            if 10^18 * arg2 / arg2 != 10^18:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1056] = 38
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                            if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                            if balanceOf[this.address] > !(10^18 * arg2):
                                                revert with 0, 17
                                            if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                            emit Transfer((10^18 * arg2), msg.sender, this.address);
                                        if not arg2:
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1156] = msg.sender
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1188] = 96
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1252] = mem[96]
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                            if ceil32(mem[96]) > mem[96]:
                                                mem[mem[96] + _1407 + (7 * ceil32(return_data.size)) + 1284] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0x90219732 with:
                                                 gas gas_remaining wei
                                                args msg.sender, 96, 0, mem[96], mem[_1407 + (7 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])]
                                        else:
                                            if arg2 and 10^18 > -1 / arg2:
                                                revert with 0, 17
                                            if not arg2:
                                                revert with 0, 18
                                            if 10^18 * arg2 / arg2 != 10^18:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1156] = msg.sender
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1188] = 96
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1252] = mem[96]
                                            mem[_1407 + (7 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                            if ceil32(mem[96]) > mem[96]:
                                                mem[mem[96] + _1407 + (7 * ceil32(return_data.size)) + 1284] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0x90219732 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=mem[96], data=mem[_1407 + (7 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])]), 10^18 * arg2
                                else:
                                    if balanceOf[address(this.address)] * futurFee / 100 and stor26 > -1 / balanceOf[address(this.address)] * futurFee / 100:
                                        revert with 0, 17
                                    if not balanceOf[address(this.address)] * futurFee / 100:
                                        revert with 0, 18
                                    if balanceOf[address(this.address)] * futurFee / 100 * stor26 / balanceOf[address(this.address)] * futurFee / 100 != stor26:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 192] = 26
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 224] = 'SafeMath: division by zero'
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 256] = 30
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 288] = 'SafeMath: subtraction overflow'
                                    if balanceOf[address(this.address)] * futurFee / 100 * stor26 / 100 > balanceOf[address(this.address)] * futurFee / 100:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if balanceOf[address(this.address)] * futurFee / 100 < balanceOf[address(this.address)] * futurFee / 100 * stor26 / 100:
                                        revert with 0, 17
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 320] = 2
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 352] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 416] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 384] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = 32
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 36
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 'ERC20: approve from the zero add'
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                        revert with memory
                                          from ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                           len ceil32(return_data.size) + 132
                                    if not uniswapV2RouterAddress:
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = 32
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 34
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 'ERC20: approve to the zero addre'
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                        revert with memory
                                          from ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                           len ceil32(return_data.size) + 132
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 1)
                                    allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * futurFee / 100 * stor26 / 100
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = balanceOf[address(this.address)] * futurFee / 100 * stor26 / 100
                                    emit Approval(mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = balanceOf[address(this.address)] * futurFee / 100 * stor26 / 100
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 0
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 160
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 580] = 2
                                    idx = 0
                                    s = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 612
                                    t = ceil32(arg1.length) + ceil32(return_data.size) + 352
                                    while idx < mem[ceil32(arg1.length) + ceil32(return_data.size) + 320]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = this.address
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 548] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len ceil32(arg1.length) + (2 * ceil32(return_data.size)) + (32 * mem[ceil32(arg1.length) + ceil32(return_data.size) + 320]) + -mem[64] + 608]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1373 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_1373] = 30
                                    mem[_1373 + 32] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call devPoolAddress with:
                                         gas 2300 wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1403 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    mem[_1403 + 32 len 64] = call.data[calldata.size len 64]
                                    if 0 >= mem[_1403]:
                                        revert with 0, 50
                                    mem[_1403 + 32] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[_1403 + 96] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _1403 + ceil32(return_data.size) + 96
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    if 1 >= mem[_1403]:
                                        revert with 0, 50
                                    mem[_1403 + 64] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 1)
                                    allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * futurFee / 100) - (balanceOf[address(this.address)] * futurFee / 100 * stor26 / 100)
                                    emit Approval(((balanceOf[address(this.address)] * futurFee / 100) - (balanceOf[address(this.address)] * futurFee / 100 * stor26 / 100)), this.address, uniswapV2RouterAddress);
                                    mem[_1403 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[_1403 + ceil32(return_data.size) + 100] = (balanceOf[address(this.address)] * futurFee / 100) - (balanceOf[address(this.address)] * futurFee / 100 * stor26 / 100)
                                    mem[_1403 + ceil32(return_data.size) + 132] = 0
                                    mem[_1403 + ceil32(return_data.size) + 164] = 160
                                    mem[_1403 + ceil32(return_data.size) + 260] = mem[_1403]
                                    idx = 0
                                    s = _1403 + ceil32(return_data.size) + 292
                                    t = _1403 + 32
                                    while idx < mem[_1403]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (balanceOf[address(this.address)] * futurFee / 100) - (balanceOf[address(this.address)] * futurFee / 100 * stor26 / 100), 0, 160, address(this.address), block.timestamp, mem[_1403 + ceil32(return_data.size) + 260 len (32 * mem[_1403]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[_1403 + ceil32(return_data.size) + 96] = 30
                                    mem[_1403 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call futurUsePoolAddress with:
                                         gas 2300 wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not balanceOf[address(this.address)]:
                                        mem[_1403 + ceil32(return_data.size) + 160] = 26
                                        mem[_1403 + ceil32(return_data.size) + 192] = 'SafeMath: division by zero'
                                        mem[_1403 + ceil32(return_data.size) + 224] = 26
                                        mem[_1403 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                        mem[_1403 + ceil32(return_data.size) + 288] = 2
                                        mem[_1403 + ceil32(return_data.size) + 320] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_1403 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[_1403 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = 0
                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                        mem[_1403 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_1403 + (2 * ceil32(return_data.size)) + 388] = 0
                                        mem[_1403 + (2 * ceil32(return_data.size)) + 420] = 0
                                        mem[_1403 + (2 * ceil32(return_data.size)) + 452] = 160
                                        mem[_1403 + (2 * ceil32(return_data.size)) + 548] = 2
                                        idx = 0
                                        s = _1403 + (2 * ceil32(return_data.size)) + 580
                                        t = _1403 + ceil32(return_data.size) + 320
                                        while idx < mem[_1403 + ceil32(return_data.size) + 288]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[_1403 + (2 * ceil32(return_data.size)) + 484] = this.address
                                        mem[_1403 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0, 0, 160, address(this.address), block.timestamp, mem[_1403 + (2 * ceil32(return_data.size)) + 548 len (32 * mem[_1403 + ceil32(return_data.size) + 288]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[_1403 + (2 * ceil32(return_data.size)) + 384] = 30
                                        mem[_1403 + (2 * ceil32(return_data.size)) + 416] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        call distributionPoolAddress with:
                                             gas 2300 wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[_1403 + (2 * ceil32(return_data.size)) + 448] = 30
                                        mem[_1403 + (2 * ceil32(return_data.size)) + 480] = 'SafeMath: subtraction overflow'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not distributionPoolAddress:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        mem[_1403 + (2 * ceil32(return_data.size)) + 512] = 38
                                        mem[_1403 + (2 * ceil32(return_data.size)) + 544 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if 0 > balanceOf[address(this.address)]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_1403 + (2 * ceil32(return_data.size)) + 582 len 26] >> 48,
                                                        0
                                        if balanceOf[address(this.address)] < 0:
                                            revert with 0, 17
                                        if balanceOf[stor17] > -1:
                                            revert with 0, 17
                                        if balanceOf[stor17] < balanceOf[stor17]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[stor17] = balanceOf[stor17]
                                        emit Transfer(0, this.address, distributionPoolAddress);
                                        if not balanceOf[address(this.address)]:
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 608] = 26
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 672] = 26
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 736] = 30
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 800] = 2
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 832] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _1403 + (4 * ceil32(return_data.size)) + 896
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 900] = 0
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 932] = 0
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 964] = 160
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 1060] = 2
                                            idx = 0
                                            s = _1403 + (4 * ceil32(return_data.size)) + 1092
                                            t = _1403 + (2 * ceil32(return_data.size)) + 832
                                            while idx < mem[_1403 + (2 * ceil32(return_data.size)) + 800]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0, 0, 160, address(this.address), block.timestamp, mem[_1403 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_1403 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 896] = 30
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 1060] = 0
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 1092] = 0
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0, 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                0,
                                        else:
                                            if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 608] = 26
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 672] = 26
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 736] = 30
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                revert with 0, 17
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 800] = 2
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 832] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _1403 + (4 * ceil32(return_data.size)) + 896
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            allowance[address(this.address)][stor14].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 900] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 932] = 0
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 964] = 160
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 1060] = 2
                                            idx = 0
                                            s = _1403 + (4 * ceil32(return_data.size)) + 1092
                                            t = _1403 + (2 * ceil32(return_data.size)) + 832
                                            while idx < mem[_1403 + (2 * ceil32(return_data.size)) + 800]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_1403 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_1403 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 896] = 30
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 1060] = 0
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 1092] = 0
                                            mem[_1403 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                        mem[_1403 + (4 * ceil32(return_data.size)) + 960] = 2
                                        mem[_1403 + (4 * ceil32(return_data.size)) + 992] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_1403 + (4 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[_1403 + (4 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                        emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                        mem[_1403 + (8 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_1403 + (8 * ceil32(return_data.size)) + 1060] = balanceOf[address(this.address)]
                                        mem[_1403 + (8 * ceil32(return_data.size)) + 1092] = 0
                                        mem[_1403 + (8 * ceil32(return_data.size)) + 1124] = 160
                                        mem[_1403 + (8 * ceil32(return_data.size)) + 1220] = 2
                                        idx = 0
                                        s = _1403 + (8 * ceil32(return_data.size)) + 1252
                                        t = _1403 + (4 * ceil32(return_data.size)) + 992
                                        while idx < mem[_1403 + (4 * ceil32(return_data.size)) + 960]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[_1403 + (8 * ceil32(return_data.size)) + 1156] = this.address
                                        mem[_1403 + (8 * ceil32(return_data.size)) + 1188] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[_1403 + (8 * ceil32(return_data.size)) + 1220 len (32 * mem[_1403 + (4 * ceil32(return_data.size)) + 960]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        uint8(stor27.field_0) = 0
                                        if not arg2:
                                            if not msg.sender:
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1056] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1060] = 32
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1092] = 37
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1124] = 'ERC20: transfer from the zero ad'
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1156] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1403 + (8 * ceil32(return_data.size)) + 1056
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not this.address:
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1056] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1060] = 32
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1092] = 35
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1124] = 'ERC20: transfer to the zero addr'
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1156] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1403 + (8 * ceil32(return_data.size)) + 1056
                                                   len (5 * ceil32(return_data.size)) + 132
                                            mem[_1403 + (8 * ceil32(return_data.size)) + 1056] = 38
                                            mem[_1403 + (8 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if 0 > balanceOf[address(msg.sender)]:
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1152] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1156] = 32
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1188] = 38
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1220 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1258] = 0
                                                revert with memory
                                                  from _1403 + (8 * ceil32(return_data.size)) + 1152
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 0, 17
                                            if balanceOf[this.address] > -1:
                                                revert with 0, 17
                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1152] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1156] = 32
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1188] = 27
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1220] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from _1403 + (8 * ceil32(return_data.size)) + 1152
                                                   len (5 * ceil32(return_data.size)) + 100
                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                            emit Transfer(0, msg.sender, this.address);
                                        else:
                                            if arg2 and 10^18 > -1 / arg2:
                                                revert with 0, 17
                                            if not arg2:
                                                revert with 0, 18
                                            if 10^18 * arg2 / arg2 != 10^18:
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1056] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1060] = 32
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1092] = 33
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1124] = 'SafeMath: multiplication overflo'
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1156] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1403 + (8 * ceil32(return_data.size)) + 1056
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not msg.sender:
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1056] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1060] = 32
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1092] = 37
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1124] = 'ERC20: transfer from the zero ad'
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1156] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1403 + (8 * ceil32(return_data.size)) + 1056
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not this.address:
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1056] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1060] = 32
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1092] = 35
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1124] = 'ERC20: transfer to the zero addr'
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1156] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1403 + (8 * ceil32(return_data.size)) + 1056
                                                   len (5 * ceil32(return_data.size)) + 132
                                            mem[_1403 + (8 * ceil32(return_data.size)) + 1056] = 38
                                            mem[_1403 + (8 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1152] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1156] = 32
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1188] = 38
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1220 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1258] = 0
                                                revert with memory
                                                  from _1403 + (8 * ceil32(return_data.size)) + 1152
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                            if balanceOf[this.address] > !(10^18 * arg2):
                                                revert with 0, 17
                                            if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1152] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1156] = 32
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1188] = 27
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1220] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from _1403 + (8 * ceil32(return_data.size)) + 1152
                                                   len (5 * ceil32(return_data.size)) + 100
                                            balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                            emit Transfer((10^18 * arg2), msg.sender, this.address);
                                        if not arg2:
                                            mem[_1403 + (8 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                            mem[_1403 + (8 * ceil32(return_data.size)) + 1156] = msg.sender
                                            mem[_1403 + (8 * ceil32(return_data.size)) + 1188] = 96
                                            mem[_1403 + (8 * ceil32(return_data.size)) + 1252] = mem[96]
                                            mem[_1403 + (8 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                            if ceil32(mem[96]) > mem[96]:
                                                mem[mem[96] + _1403 + (8 * ceil32(return_data.size)) + 1284] = 0
                                            mem[_1403 + (8 * ceil32(return_data.size)) + 1220] = 0
                                        else:
                                            if arg2 and 10^18 > -1 / arg2:
                                                revert with 0, 17
                                            if not arg2:
                                                revert with 0, 18
                                            if 10^18 * arg2 / arg2 != 10^18:
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1152] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1156] = 32
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1188] = 33
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1220] = 'SafeMath: multiplication overflo'
                                                mem[_1403 + (8 * ceil32(return_data.size)) + 1252] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1403 + (8 * ceil32(return_data.size)) + 1152
                                                   len (5 * ceil32(return_data.size)) + 132
                                            mem[_1403 + (8 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                            mem[_1403 + (8 * ceil32(return_data.size)) + 1156] = msg.sender
                                            mem[_1403 + (8 * ceil32(return_data.size)) + 1188] = 96
                                            mem[_1403 + (8 * ceil32(return_data.size)) + 1252] = mem[96]
                                            mem[_1403 + (8 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                            if ceil32(mem[96]) > mem[96]:
                                                mem[mem[96] + _1403 + (8 * ceil32(return_data.size)) + 1284] = 0
                                            mem[_1403 + (8 * ceil32(return_data.size)) + 1220] = 10^18 * arg2
                                        require ext_code.size(nodeRewardManagerAddress)
                                        call nodeRewardManagerAddress.0x90219732 with:
                                             gas gas_remaining wei
                                            args mem[_1403 + (8 * ceil32(return_data.size)) + 1156 len ceil32(mem[96]) + (5 * ceil32(return_data.size)) + 128]
                                    else:
                                        if balanceOf[address(this.address)] and rewardsFee > -1 / balanceOf[address(this.address)]:
                                            revert with 0, 17
                                        if not balanceOf[address(this.address)]:
                                            revert with 0, 18
                                        if balanceOf[address(this.address)] * rewardsFee / balanceOf[address(this.address)] != rewardsFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        mem[_1403 + ceil32(return_data.size) + 160] = 26
                                        mem[_1403 + ceil32(return_data.size) + 192] = 'SafeMath: division by zero'
                                        if not balanceOf[address(this.address)] * rewardsFee / 100:
                                            mem[_1403 + ceil32(return_data.size) + 224] = 26
                                            mem[_1403 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                            mem[_1403 + ceil32(return_data.size) + 288] = 2
                                            mem[_1403 + ceil32(return_data.size) + 320] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1403 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1403 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 388] = 0
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 420] = 0
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 452] = 160
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 548] = 2
                                            idx = 0
                                            s = _1403 + (2 * ceil32(return_data.size)) + 580
                                            t = _1403 + ceil32(return_data.size) + 320
                                            while idx < mem[_1403 + ceil32(return_data.size) + 288]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 484] = this.address
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0, 0, 160, address(this.address), block.timestamp, mem[_1403 + (2 * ceil32(return_data.size)) + 548 len (32 * mem[_1403 + ceil32(return_data.size) + 288]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 384] = 30
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 416] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            call distributionPoolAddress with:
                                                 gas 2300 wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 448] = 30
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 480] = 'SafeMath: subtraction overflow'
                                            if 0 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < 0:
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not distributionPoolAddress:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 512] = 38
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 544 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if balanceOf[address(this.address)] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_1403 + (2 * ceil32(return_data.size)) + 582 len 26] >> 48,
                                                            0
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 17
                                            balanceOf[address(this.address)] -= balanceOf[address(this.address)] * rewardsFee / 100
                                            if balanceOf[stor17] > !(balanceOf[address(this.address)] * rewardsFee / 100):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) < balanceOf[stor17]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[stor17] += balanceOf[address(this.address)] * rewardsFee / 100
                                            emit Transfer((balanceOf[address(this.address)] * rewardsFee / 100), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 608] = 26
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 672] = 26
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 736] = 30
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 800] = 2
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 900] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 932] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 964] = 160
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                idx = 0
                                                s = _1403 + (4 * ceil32(return_data.size)) + 1092
                                                t = _1403 + (2 * ceil32(return_data.size)) + 832
                                                while idx < mem[_1403 + (2 * ceil32(return_data.size)) + 800]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[_1403 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_1403 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 896] = 30
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1028] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1060] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1092] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0, 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    0,
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 960] = 2
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 992] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _1403 + (7 * ceil32(return_data.size)) + 1056
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_1403 + (7 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (7 * ceil32(return_data.size)) + 1060] = balanceOf[address(this.address)]
                                                mem[_1403 + (7 * ceil32(return_data.size)) + 1092] = 0
                                                mem[_1403 + (7 * ceil32(return_data.size)) + 1124] = 160
                                                mem[_1403 + (7 * ceil32(return_data.size)) + 1220] = 2
                                                idx = 0
                                                s = _1403 + (7 * ceil32(return_data.size)) + 1252
                                                t = _1403 + (6 * ceil32(return_data.size)) + 992
                                                while idx < mem[_1403 + (6 * ceil32(return_data.size)) + 960]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[_1403 + (7 * ceil32(return_data.size)) + 1220 len (32 * mem[_1403 + (6 * ceil32(return_data.size)) + 960]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor27.field_0) = 0
                                                if not arg2:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1056] = 38
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] > -1:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                    emit Transfer(0, msg.sender, this.address);
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1056] = 38
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                    if balanceOf[this.address] > !(10^18 * arg2):
                                                        revert with 0, 17
                                                    if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                    emit Transfer((10^18 * arg2), msg.sender, this.address);
                                                if not arg2:
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1156] = msg.sender
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1188] = 96
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1252] = mem[96]
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + _1403 + (7 * ceil32(return_data.size)) + 1284] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, 96, 0, mem[96], mem[_1403 + (7 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])]
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1156] = msg.sender
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1188] = 96
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1252] = mem[96]
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + _1403 + (7 * ceil32(return_data.size)) + 1284] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, Array(len=mem[96], data=mem[_1403 + (7 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])]), 10^18 * arg2
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 608] = 26
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 672] = 26
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 736] = 30
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 800] = 2
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 900] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 932] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 964] = 160
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                idx = 0
                                                s = _1403 + (4 * ceil32(return_data.size)) + 1092
                                                t = _1403 + (2 * ceil32(return_data.size)) + 832
                                                while idx < mem[_1403 + (2 * ceil32(return_data.size)) + 800]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_1403 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_1403 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 896] = 30
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1028] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1060] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1092] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 960] = 2
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 992] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _1403 + (7 * ceil32(return_data.size)) + 1056
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_1403 + (7 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (7 * ceil32(return_data.size)) + 1060] = balanceOf[address(this.address)]
                                                mem[_1403 + (7 * ceil32(return_data.size)) + 1092] = 0
                                                mem[_1403 + (7 * ceil32(return_data.size)) + 1124] = 160
                                                mem[_1403 + (7 * ceil32(return_data.size)) + 1220] = 2
                                                idx = 0
                                                s = _1403 + (7 * ceil32(return_data.size)) + 1252
                                                t = _1403 + (6 * ceil32(return_data.size)) + 992
                                                while idx < mem[_1403 + (6 * ceil32(return_data.size)) + 960]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_1403 + (7 * ceil32(return_data.size)) + 1156] = this.address
                                                mem[_1403 + (7 * ceil32(return_data.size)) + 1188] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len _1403 + (7 * ceil32(return_data.size)) + (32 * mem[_1403 + (6 * ceil32(return_data.size)) + 960]) + -mem[64] + 1248]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor27.field_0) = 0
                                                if not arg2:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _15896 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_15896] = 38
                                                    mem[_15896 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15896 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] > -1:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                    emit Transfer(0, msg.sender, this.address);
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _16257 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_16257] = 38
                                                    mem[_16257 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16257 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                    if balanceOf[this.address] > !(10^18 * arg2):
                                                        revert with 0, 17
                                                    if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                    emit Transfer((10^18 * arg2), msg.sender, this.address);
                                                if not arg2:
                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = 96
                                                    mem[mem[64] + 100] = mem[96]
                                                    mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + mem[64] + 132] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, 96, 0, mem[96], mem[mem[64] + 132 len ceil32(mem[96])]
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = 96
                                                    mem[mem[64] + 100] = mem[96]
                                                    mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + mem[64] + 132] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, Array(len=mem[96], data=mem[mem[64] + 132 len ceil32(mem[96])]), 10^18 * arg2
                                        else:
                                            if balanceOf[address(this.address)] * rewardsFee / 100 and stor25 > -1 / balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / balanceOf[address(this.address)] * rewardsFee / 100 != stor25:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[_1403 + ceil32(return_data.size) + 224] = 26
                                            mem[_1403 + ceil32(return_data.size) + 256] = 'SafeMath: division by zero'
                                            mem[_1403 + ceil32(return_data.size) + 288] = 2
                                            mem[_1403 + ceil32(return_data.size) + 320] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_1403 + ceil32(return_data.size) + 384] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_1403 + ceil32(return_data.size) + 352] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100
                                            emit Approval((balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100), this.address, uniswapV2RouterAddress);
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 384] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 388] = balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 420] = 0
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 452] = 160
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 548] = 2
                                            idx = 0
                                            s = _1403 + (2 * ceil32(return_data.size)) + 580
                                            t = _1403 + ceil32(return_data.size) + 320
                                            while idx < mem[_1403 + ceil32(return_data.size) + 288]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 484] = this.address
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 516] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100, 0, 160, address(this.address), block.timestamp, mem[_1403 + (2 * ceil32(return_data.size)) + 548 len (32 * mem[_1403 + ceil32(return_data.size) + 288]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 384] = 30
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 416] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 448] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 452] = 32
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 484] = 30
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 516] = 'SafeMath: subtraction overflow'
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 546] = 0
                                                revert with memory
                                                  from _1403 + (2 * ceil32(return_data.size)) + 448
                                                   len ceil32(return_data.size) + 100
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            call distributionPoolAddress with:
                                                 gas 2300 wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 448] = 30
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 480] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 516] = 32
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 548] = 30
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 580] = 'SafeMath: subtraction overflow'
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 610] = 0
                                                revert with memory
                                                  from _1403 + (2 * ceil32(return_data.size)) + 512
                                                   len ceil32(return_data.size) + 100
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100:
                                                revert with 0, 17
                                            if not this.address:
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 516] = 32
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 548] = 37
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer from the zero ad'
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 612] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1403 + (2 * ceil32(return_data.size)) + 512
                                                   len ceil32(return_data.size) + 132
                                            if not distributionPoolAddress:
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 512] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 516] = 32
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 548] = 35
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 580] = 'ERC20: transfer to the zero addr'
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 612] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from _1403 + (2 * ceil32(return_data.size)) + 512
                                                   len ceil32(return_data.size) + 132
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 512] = 38
                                            mem[_1403 + (2 * ceil32(return_data.size)) + 544 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100) > balanceOf[address(this.address)]:
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 612] = 32
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 644] = 38
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 676 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_1403 + (2 * ceil32(return_data.size)) + 582 len 26]
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 714] = 0
                                                revert with memory
                                                  from _1403 + (2 * ceil32(return_data.size)) + 608
                                                   len ceil32(return_data.size) + 132
                                            if balanceOf[address(this.address)] < (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100):
                                                revert with 0, 17
                                            balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[address(this.address)] * rewardsFee / 100) + (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)
                                            if balanceOf[stor17] > !((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100) < balanceOf[stor17]:
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 612] = 32
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 644] = 27
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from _1403 + (2 * ceil32(return_data.size)) + 608
                                                   len ceil32(return_data.size) + 100
                                            balanceOf[stor17] = balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)
                                            emit Transfer(((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 608] = 26
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 672] = 26
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 736] = 30
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 800] = 2
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 900] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 932] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 964] = 160
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                idx = 0
                                                s = _1403 + (4 * ceil32(return_data.size)) + 1092
                                                t = _1403 + (2 * ceil32(return_data.size)) + 832
                                                while idx < mem[_1403 + (2 * ceil32(return_data.size)) + 800]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[_1403 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_1403 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 896] = 30
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 964] = this.address
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 996] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1028] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1060] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1092] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0, 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    0,
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 960] = 2
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 992] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _1403 + (7 * ceil32(return_data.size)) + 1056
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_1403 + (7 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (7 * ceil32(return_data.size)) + 1060] = balanceOf[address(this.address)]
                                                mem[_1403 + (7 * ceil32(return_data.size)) + 1092] = 0
                                                mem[_1403 + (7 * ceil32(return_data.size)) + 1124] = 160
                                                mem[_1403 + (7 * ceil32(return_data.size)) + 1220] = 2
                                                idx = 0
                                                s = _1403 + (7 * ceil32(return_data.size)) + 1252
                                                t = _1403 + (6 * ceil32(return_data.size)) + 992
                                                while idx < mem[_1403 + (6 * ceil32(return_data.size)) + 960]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[_1403 + (7 * ceil32(return_data.size)) + 1220 len (32 * mem[_1403 + (6 * ceil32(return_data.size)) + 960]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor27.field_0) = 0
                                                if not arg2:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1056] = 38
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] > -1:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                    emit Transfer(0, msg.sender, this.address);
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1056] = 38
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1088 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                    if balanceOf[this.address] > !(10^18 * arg2):
                                                        revert with 0, 17
                                                    if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                    emit Transfer((10^18 * arg2), msg.sender, this.address);
                                                if not arg2:
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1156] = msg.sender
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1188] = 96
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1252] = mem[96]
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + _1403 + (7 * ceil32(return_data.size)) + 1284] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, 96, 0, mem[96], mem[_1403 + (7 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])]
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1152] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1156] = msg.sender
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1188] = 96
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1252] = mem[96]
                                                    mem[_1403 + (7 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + _1403 + (7 * ceil32(return_data.size)) + 1284] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, Array(len=mem[96], data=mem[_1403 + (7 * ceil32(return_data.size)) + 1284 len ceil32(mem[96])]), 10^18 * arg2
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    mem[_1403 + (2 * ceil32(return_data.size)) + 608] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_1403 + (2 * ceil32(return_data.size)) + 612] = 32
                                                    mem[_1403 + (2 * ceil32(return_data.size)) + 644] = 33
                                                    mem[_1403 + (2 * ceil32(return_data.size)) + 676] = 'SafeMath: multiplication overflo'
                                                    mem[_1403 + (2 * ceil32(return_data.size)) + 708] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from _1403 + (2 * ceil32(return_data.size)) + 608
                                                       len ceil32(return_data.size) + 132
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 608] = 26
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 672] = 26
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 736] = 30
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 768] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    mem[_1403 + (2 * ceil32(return_data.size)) + 800] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_1403 + (2 * ceil32(return_data.size)) + 804] = 32
                                                    mem[_1403 + (2 * ceil32(return_data.size)) + 836] = 30
                                                    mem[_1403 + (2 * ceil32(return_data.size)) + 868] = 'SafeMath: subtraction overflow'
                                                    mem[_1403 + (2 * ceil32(return_data.size)) + 898] = 0
                                                    revert with memory
                                                      from _1403 + (2 * ceil32(return_data.size)) + 800
                                                       len ceil32(return_data.size) + 100
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 800] = 2
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 832] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 896] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_1403 + (2 * ceil32(return_data.size)) + 864] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 896] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 900] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 932] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 964] = 160
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1060] = 2
                                                idx = 0
                                                s = _1403 + (4 * ceil32(return_data.size)) + 1092
                                                t = _1403 + (2 * ceil32(return_data.size)) + 832
                                                while idx < mem[_1403 + (2 * ceil32(return_data.size)) + 800]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 996] = this.address
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1028] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_1403 + (4 * ceil32(return_data.size)) + 1060 len (32 * mem[_1403 + (2 * ceil32(return_data.size)) + 800]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 896] = 30
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 928] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    mem[_1403 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_1403 + (4 * ceil32(return_data.size)) + 964] = 32
                                                    mem[_1403 + (4 * ceil32(return_data.size)) + 996] = 30
                                                    mem[_1403 + (4 * ceil32(return_data.size)) + 1028] = 'SafeMath: subtraction overflow'
                                                    mem[_1403 + (4 * ceil32(return_data.size)) + 1058] = 0
                                                    revert with memory
                                                      from _1403 + (4 * ceil32(return_data.size)) + 960
                                                       len (5 * ceil32(return_data.size)) + 100
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    mem[_1403 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_1403 + (4 * ceil32(return_data.size)) + 964] = 32
                                                    mem[_1403 + (4 * ceil32(return_data.size)) + 996] = 36
                                                    mem[_1403 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve from the zero add'
                                                    mem[_1403 + (4 * ceil32(return_data.size)) + 1060] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from _1403 + (4 * ceil32(return_data.size)) + 960
                                                       len (5 * ceil32(return_data.size)) + 132
                                                if not uniswapV2RouterAddress:
                                                    mem[_1403 + (4 * ceil32(return_data.size)) + 960] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_1403 + (4 * ceil32(return_data.size)) + 964] = 32
                                                    mem[_1403 + (4 * ceil32(return_data.size)) + 996] = 34
                                                    mem[_1403 + (4 * ceil32(return_data.size)) + 1028] = 'ERC20: approve to the zero addre'
                                                    mem[_1403 + (4 * ceil32(return_data.size)) + 1060] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from _1403 + (4 * ceil32(return_data.size)) + 960
                                                       len (5 * ceil32(return_data.size)) + 132
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 964] = this.address
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 996] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1028] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1060] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1092] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1124] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args mem[_1403 + (4 * ceil32(return_data.size)) + 964 len (5 * ceil32(return_data.size)) + 192]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 960] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 992] = 0
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1024] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    mem[_1403 + (4 * ceil32(return_data.size)) + 960 len (7 * ceil32(return_data.size)) + 96],
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 960] = 2
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 992] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _1403 + (6 * ceil32(return_data.size)) + 1056
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_1403 + (4 * ceil32(return_data.size)) + 1024] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 1056] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 1060] = balanceOf[address(this.address)]
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 1092] = 0
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 1124] = 160
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 1220] = 2
                                                idx = 0
                                                s = _1403 + (6 * ceil32(return_data.size)) + 1252
                                                t = _1403 + (4 * ceil32(return_data.size)) + 992
                                                while idx < mem[_1403 + (4 * ceil32(return_data.size)) + 960]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 1156] = this.address
                                                mem[_1403 + (6 * ceil32(return_data.size)) + 1188] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len _1403 + (6 * ceil32(return_data.size)) + (32 * mem[_1403 + (4 * ceil32(return_data.size)) + 960]) + -mem[64] + 1248]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor27.field_0) = 0
                                                if not arg2:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _15888 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_15888] = 38
                                                    mem[_15888 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15888 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] > -1:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                    emit Transfer(0, msg.sender, this.address);
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _16247 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_16247] = 38
                                                    mem[_16247 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16247 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                    if balanceOf[this.address] > !(10^18 * arg2):
                                                        revert with 0, 17
                                                    if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                    emit Transfer((10^18 * arg2), msg.sender, this.address);
                                                if not arg2:
                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = 96
                                                    mem[mem[64] + 100] = mem[96]
                                                    mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + mem[64] + 132] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, 96, 0, mem[96], mem[mem[64] + 132 len ceil32(mem[96])]
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = 96
                                                    mem[mem[64] + 100] = mem[96]
                                                    mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + mem[64] + 132] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, Array(len=mem[96], data=mem[mem[64] + 132 len ceil32(mem[96])]), 10^18 * arg2
    else:
        if balanceOf[address(msg.sender)] < 0:
            revert with 0, 'NODE CREATION: Balance too low for creation. Use lower initValue'
        if balanceOf[address(this.address)] < swapTokensAmount:
            if not arg2:
                if not msg.sender:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not this.address:
                    revert with 0, 'ERC20: transfer to the zero address'
                mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                if 0 > balanceOf[address(msg.sender)]:
                    revert with 0, 
                                32,
                                38,
                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                0
                if balanceOf[address(msg.sender)] < 0:
                    revert with 0, 17
                if balanceOf[this.address] > -1:
                    revert with 0, 17
                if balanceOf[this.address] < balanceOf[this.address]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(this.address)] = balanceOf[this.address]
                emit Transfer(0, msg.sender, this.address);
            else:
                if arg2 and 10^18 > -1 / arg2:
                    revert with 0, 17
                if not arg2:
                    revert with 0, 18
                if 10^18 * arg2 / arg2 != 10^18:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not msg.sender:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not this.address:
                    revert with 0, 'ERC20: transfer to the zero address'
                mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                    revert with 0, 
                                32,
                                38,
                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                0
                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                    revert with 0, 17
                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                if balanceOf[this.address] > !(10^18 * arg2):
                    revert with 0, 17
                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                emit Transfer((10^18 * arg2), msg.sender, this.address);
            if not arg2:
                require ext_code.size(nodeRewardManagerAddress)
                call nodeRewardManagerAddress.0x90219732 with:
                     gas gas_remaining wei
                    args msg.sender, 96, 0, arg1.length, arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
            else:
                if arg2 and 10^18 > -1 / arg2:
                    revert with 0, 17
                if not arg2:
                    revert with 0, 18
                if 10^18 * arg2 / arg2 != 10^18:
                    revert with 0, 'SafeMath: multiplication overflow'
                require ext_code.size(nodeRewardManagerAddress)
                call nodeRewardManagerAddress.0x90219732 with:
                     gas gas_remaining wei
                    args msg.sender, Array(len=arg1.length, data=arg1[all]), 10^18 * arg2
        else:
            if not uint8(stor27.field_8):
                if not arg2:
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not this.address:
                        revert with 0, 'ERC20: transfer to the zero address'
                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                    if 0 > balanceOf[address(msg.sender)]:
                        revert with 0, 
                                    32,
                                    38,
                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                    0
                    if balanceOf[address(msg.sender)] < 0:
                        revert with 0, 17
                    if balanceOf[this.address] > -1:
                        revert with 0, 17
                    if balanceOf[this.address] < balanceOf[this.address]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(this.address)] = balanceOf[this.address]
                    emit Transfer(0, msg.sender, this.address);
                else:
                    if arg2 and 10^18 > -1 / arg2:
                        revert with 0, 17
                    if not arg2:
                        revert with 0, 18
                    if 10^18 * arg2 / arg2 != 10^18:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not this.address:
                        revert with 0, 'ERC20: transfer to the zero address'
                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                    if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 
                                    32,
                                    38,
                                    0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                    0
                    if balanceOf[address(msg.sender)] < 10^18 * arg2:
                        revert with 0, 17
                    balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                    if balanceOf[this.address] > !(10^18 * arg2):
                        revert with 0, 17
                    if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                    emit Transfer((10^18 * arg2), msg.sender, this.address);
                if not arg2:
                    require ext_code.size(nodeRewardManagerAddress)
                    call nodeRewardManagerAddress.0x90219732 with:
                         gas gas_remaining wei
                        args msg.sender, 96, 0, arg1.length, arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                else:
                    if arg2 and 10^18 > -1 / arg2:
                        revert with 0, 17
                    if not arg2:
                        revert with 0, 18
                    if 10^18 * arg2 / arg2 != 10^18:
                        revert with 0, 'SafeMath: multiplication overflow'
                    require ext_code.size(nodeRewardManagerAddress)
                    call nodeRewardManagerAddress.0x90219732 with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 10^18 * arg2
            else:
                if uint8(stor27.field_0):
                    if not arg2:
                        if not msg.sender:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not this.address:
                            revert with 0, 'ERC20: transfer to the zero address'
                        mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                        if 0 > balanceOf[address(msg.sender)]:
                            revert with 0, 
                                        32,
                                        38,
                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                        0
                        if balanceOf[address(msg.sender)] < 0:
                            revert with 0, 17
                        if balanceOf[this.address] > -1:
                            revert with 0, 17
                        if balanceOf[this.address] < balanceOf[this.address]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(this.address)] = balanceOf[this.address]
                        emit Transfer(0, msg.sender, this.address);
                    else:
                        if arg2 and 10^18 > -1 / arg2:
                            revert with 0, 17
                        if not arg2:
                            revert with 0, 18
                        if 10^18 * arg2 / arg2 != 10^18:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if not msg.sender:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not this.address:
                            revert with 0, 'ERC20: transfer to the zero address'
                        mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                        if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 
                                        32,
                                        38,
                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                        0
                        if balanceOf[address(msg.sender)] < 10^18 * arg2:
                            revert with 0, 17
                        balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                        if balanceOf[this.address] > !(10^18 * arg2):
                            revert with 0, 17
                        if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                        emit Transfer((10^18 * arg2), msg.sender, this.address);
                    if not arg2:
                        require ext_code.size(nodeRewardManagerAddress)
                        call nodeRewardManagerAddress.0x90219732 with:
                             gas gas_remaining wei
                            args msg.sender, 96, 0, arg1.length, arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                    else:
                        if arg2 and 10^18 > -1 / arg2:
                            revert with 0, 17
                        if not arg2:
                            revert with 0, 18
                        if 10^18 * arg2 / arg2 != 10^18:
                            revert with 0, 'SafeMath: multiplication overflow'
                        require ext_code.size(nodeRewardManagerAddress)
                        call nodeRewardManagerAddress.0x90219732 with:
                             gas gas_remaining wei
                            args msg.sender, Array(len=arg1.length, data=arg1[all]), 10^18 * arg2
                else:
                    if msg.sender == owner:
                        if not arg2:
                            if not msg.sender:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not this.address:
                                revert with 0, 'ERC20: transfer to the zero address'
                            mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                            if 0 > balanceOf[address(msg.sender)]:
                                revert with 0, 
                                            32,
                                            38,
                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                            0
                            if balanceOf[address(msg.sender)] < 0:
                                revert with 0, 17
                            if balanceOf[this.address] > -1:
                                revert with 0, 17
                            if balanceOf[this.address] < balanceOf[this.address]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(this.address)] = balanceOf[this.address]
                            emit Transfer(0, msg.sender, this.address);
                        else:
                            if arg2 and 10^18 > -1 / arg2:
                                revert with 0, 17
                            if not arg2:
                                revert with 0, 18
                            if 10^18 * arg2 / arg2 != 10^18:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if not msg.sender:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not this.address:
                                revert with 0, 'ERC20: transfer to the zero address'
                            mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                            if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 
                                            32,
                                            38,
                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                            0
                            if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                revert with 0, 17
                            balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                            if balanceOf[this.address] > !(10^18 * arg2):
                                revert with 0, 17
                            if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                            emit Transfer((10^18 * arg2), msg.sender, this.address);
                        if not arg2:
                            require ext_code.size(nodeRewardManagerAddress)
                            call nodeRewardManagerAddress.0x90219732 with:
                                 gas gas_remaining wei
                                args msg.sender, 96, 0, arg1.length, arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                        else:
                            if arg2 and 10^18 > -1 / arg2:
                                revert with 0, 17
                            if not arg2:
                                revert with 0, 18
                            if 10^18 * arg2 / arg2 != 10^18:
                                revert with 0, 'SafeMath: multiplication overflow'
                            require ext_code.size(nodeRewardManagerAddress)
                            call nodeRewardManagerAddress.0x90219732 with:
                                 gas gas_remaining wei
                                args msg.sender, Array(len=arg1.length, data=arg1[all]), 10^18 * arg2
                    else:
                        if stor34[address(msg.sender)]:
                            if not arg2:
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 
                                                32,
                                                38,
                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                                0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 0, 17
                                if balanceOf[this.address] > -1:
                                    revert with 0, 17
                                if balanceOf[this.address] < balanceOf[this.address]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] = balanceOf[this.address]
                                emit Transfer(0, msg.sender, this.address);
                            else:
                                if arg2 and 10^18 > -1 / arg2:
                                    revert with 0, 17
                                if not arg2:
                                    revert with 0, 18
                                if 10^18 * arg2 / arg2 != 10^18:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 38
                                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 
                                                32,
                                                38,
                                                0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(arg1.length) + ceil32(return_data.size) + 198 len 26] >> 48,
                                                0
                                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                if balanceOf[this.address] > !(10^18 * arg2):
                                    revert with 0, 17
                                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                emit Transfer((10^18 * arg2), msg.sender, this.address);
                            if not arg2:
                                require ext_code.size(nodeRewardManagerAddress)
                                call nodeRewardManagerAddress.0x90219732 with:
                                     gas gas_remaining wei
                                    args msg.sender, 96, 0, arg1.length, arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                            else:
                                if arg2 and 10^18 > -1 / arg2:
                                    revert with 0, 17
                                if not arg2:
                                    revert with 0, 18
                                if 10^18 * arg2 / arg2 != 10^18:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                require ext_code.size(nodeRewardManagerAddress)
                                call nodeRewardManagerAddress.0x90219732 with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=arg1.length, data=arg1[all]), 10^18 * arg2
                        else:
                            uint8(stor27.field_0) = 1
                            if not balanceOf[address(this.address)]:
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 26
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 160] = 'SafeMath: division by zero'
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 192] = 26
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 224] = 'SafeMath: division by zero'
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 256] = 30
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 288] = 'SafeMath: subtraction overflow'
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 320] = 2
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 352] = this.address
                                require ext_code.size(uniswapV2RouterAddress)
                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                        gas gas_remaining wei
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 416] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 384] = ext_call.return_data[12 len 20]
                                if not this.address:
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = 32
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 36
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 'ERC20: approve from the zero add'
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                    revert with memory
                                      from ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                       len ceil32(return_data.size) + 132
                                if not uniswapV2RouterAddress:
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = 32
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 34
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 'ERC20: approve to the zero addre'
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                    revert with memory
                                      from ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                       len ceil32(return_data.size) + 132
                                mem[0] = uniswapV2RouterAddress
                                mem[32] = sha3(address(this.address), 1)
                                allowance[address(this.address)][stor14].field_0 = 0
                                mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0
                                emit Approval(mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = 0
                                mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 0
                                mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 160
                                mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 580] = 2
                                idx = 0
                                s = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 612
                                t = ceil32(arg1.length) + ceil32(return_data.size) + 352
                                while idx < mem[ceil32(arg1.length) + ceil32(return_data.size) + 320]:
                                    mem[s] = mem[t + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = this.address
                                mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 548] = block.timestamp
                                require ext_code.size(uniswapV2RouterAddress)
                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                     gas gas_remaining wei
                                    args mem[mem[64] + 4 len ceil32(arg1.length) + (2 * ceil32(return_data.size)) + (32 * mem[ceil32(arg1.length) + ceil32(return_data.size) + 320]) + -mem[64] + 608]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1378 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_1378] = 30
                                mem[_1378 + 32] = 'SafeMath: subtraction overflow'
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if eth.balance(this.address) < eth.balance(this.address):
                                    revert with 0, 17
                                call devPoolAddress with:
                                     gas 2300 wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1423 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                mem[_1423 + 32 len 64] = call.data[calldata.size len 64]
                                if 0 >= mem[_1423]:
                                    revert with 0, 50
                                mem[_1423 + 32] = this.address
                                require ext_code.size(uniswapV2RouterAddress)
                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                        gas gas_remaining wei
                                mem[_1423 + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _1423 + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_1423]:
                                    revert with 0, 50
                                mem[_1423 + 64] = ext_call.return_data[12 len 20]
                                if not this.address:
                                    revert with 0, 'ERC20: approve from the zero address'
                                if not uniswapV2RouterAddress:
                                    revert with 0, 'ERC20: approve to the zero address'
                                mem[0] = uniswapV2RouterAddress
                                mem[32] = sha3(address(this.address), 1)
                                allowance[address(this.address)][stor14].field_0 = 0
                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                mem[_1423 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                mem[_1423 + ceil32(return_data.size) + 100] = 0
                                mem[_1423 + ceil32(return_data.size) + 132] = 0
                                mem[_1423 + ceil32(return_data.size) + 164] = 160
                                mem[_1423 + ceil32(return_data.size) + 260] = mem[_1423]
                                idx = 0
                                s = _1423 + ceil32(return_data.size) + 292
                                t = _1423 + 32
                                while idx < mem[_1423]:
                                    mem[s] = mem[t + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[_1423 + ceil32(return_data.size) + 196] = this.address
                                mem[_1423 + ceil32(return_data.size) + 228] = block.timestamp
                                require ext_code.size(uniswapV2RouterAddress)
                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                     gas gas_remaining wei
                                    args mem[mem[64] + 4 len _1423 + ceil32(return_data.size) + (32 * mem[_1423]) + -mem[64] + 288]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _3460 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3460] = 30
                                mem[_3460 + 32] = 'SafeMath: subtraction overflow'
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if eth.balance(this.address) < eth.balance(this.address):
                                    revert with 0, 17
                                call futurUsePoolAddress with:
                                     gas 2300 wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not balanceOf[address(this.address)]:
                                    _3502 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3502] = 26
                                    mem[_3502 + 32] = 'SafeMath: division by zero'
                                    _3526 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3526] = 26
                                    mem[_3526 + 32] = 'SafeMath: division by zero'
                                    _3543 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    mem[_3543 + 32 len 64] = call.data[calldata.size len 64]
                                    if 0 >= mem[_3543]:
                                        revert with 0, 50
                                    mem[_3543 + 32] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[_3543 + 96] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3543 + ceil32(return_data.size) + 96
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    if 1 >= mem[_3543]:
                                        revert with 0, 50
                                    mem[_3543 + 64] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 1)
                                    allowance[address(this.address)][stor14].field_0 = 0
                                    emit Approval(0, this.address, uniswapV2RouterAddress);
                                    mem[_3543 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[_3543 + ceil32(return_data.size) + 100] = 0
                                    mem[_3543 + ceil32(return_data.size) + 132] = 0
                                    mem[_3543 + ceil32(return_data.size) + 164] = 160
                                    mem[_3543 + ceil32(return_data.size) + 260] = mem[_3543]
                                    idx = 0
                                    s = _3543 + ceil32(return_data.size) + 292
                                    t = _3543 + 32
                                    while idx < mem[_3543]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[_3543 + ceil32(return_data.size) + 196] = this.address
                                    mem[_3543 + ceil32(return_data.size) + 228] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len _3543 + ceil32(return_data.size) + (32 * mem[_3543]) + -mem[64] + 288]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6466 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6466] = 30
                                    mem[_6466 + 32] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call distributionPoolAddress with:
                                         gas 2300 wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6556 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6556] = 30
                                    mem[_6556 + 32] = 'SafeMath: subtraction overflow'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not distributionPoolAddress:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    _6758 = mem[64]
                                    mem[64] = mem[64] + 96
                                    mem[_6758] = 38
                                    mem[_6758 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                    if 0 > balanceOf[address(this.address)]:
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 38
                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6758 + 70 len 26]
                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                    if balanceOf[address(this.address)] < 0:
                                        revert with 0, 17
                                    if balanceOf[stor17] > -1:
                                        revert with 0, 17
                                    if balanceOf[stor17] < balanceOf[stor17]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = distributionPoolAddress
                                    mem[32] = 0
                                    balanceOf[stor17] = balanceOf[stor17]
                                    emit Transfer(0, this.address, distributionPoolAddress);
                                    if not balanceOf[address(this.address)]:
                                        _6994 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_6994] = 26
                                        mem[_6994 + 32] = 'SafeMath: division by zero'
                                        _7066 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_7066] = 26
                                        mem[_7066 + 32] = 'SafeMath: division by zero'
                                        _7102 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_7102] = 30
                                        mem[_7102 + 32] = 'SafeMath: subtraction overflow'
                                        _7173 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        mem[_7173 + 32 len 64] = call.data[calldata.size len 64]
                                        if 0 >= mem[_7173]:
                                            revert with 0, 50
                                        mem[_7173 + 32] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_7173 + 96] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _7173 + ceil32(return_data.size) + 96
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        if 1 >= mem[_7173]:
                                            revert with 0, 50
                                        mem[_7173 + 64] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 1)
                                        allowance[address(this.address)][stor14].field_0 = 0
                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                        mem[_7173 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_7173 + ceil32(return_data.size) + 100] = 0
                                        mem[_7173 + ceil32(return_data.size) + 132] = 0
                                        mem[_7173 + ceil32(return_data.size) + 164] = 160
                                        mem[_7173 + ceil32(return_data.size) + 260] = mem[_7173]
                                        idx = 0
                                        s = _7173 + ceil32(return_data.size) + 292
                                        t = _7173 + 32
                                        while idx < mem[_7173]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[_7173 + ceil32(return_data.size) + 196] = this.address
                                        mem[_7173 + ceil32(return_data.size) + 228] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len _7173 + ceil32(return_data.size) + (32 * mem[_7173]) + -mem[64] + 288]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11890 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11890] = 30
                                        mem[_11890 + 32] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 1)
                                        allowance[address(this.address)][stor14].field_0 = 0
                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                        mem[mem[64] + 68] = 0
                                        mem[mem[64] + 100] = 0
                                        mem[mem[64] + 132] = 0
                                        mem[mem[64] + 164] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args address(this.address), 0, 0, 0, 0, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 96
                                        mem[mem[64] + 32] = 0
                                        mem[mem[64] + 64] = 0
                                        emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                            0,
                                        mem[0] = this.address
                                        mem[32] = 0
                                        _12753 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        mem[_12753 + 32 len 64] = call.data[calldata.size len 64]
                                        if 0 >= mem[_12753]:
                                            revert with 0, 50
                                        mem[_12753 + 32] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_12753 + 96] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _12753 + ceil32(return_data.size) + 96
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        if 1 >= mem[_12753]:
                                            revert with 0, 50
                                        mem[_12753 + 64] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 1)
                                        allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                        emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                        mem[_12753 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_12753 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)]
                                        mem[_12753 + ceil32(return_data.size) + 132] = 0
                                        mem[_12753 + ceil32(return_data.size) + 164] = 160
                                        mem[_12753 + ceil32(return_data.size) + 260] = mem[_12753]
                                        idx = 0
                                        s = _12753 + ceil32(return_data.size) + 292
                                        t = _12753 + 32
                                        while idx < mem[_12753]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[_12753 + ceil32(return_data.size) + 196] = this.address
                                        mem[_12753 + ceil32(return_data.size) + 228] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len _12753 + ceil32(return_data.size) + (32 * mem[_12753]) + -mem[64] + 288]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        uint8(stor27.field_0) = 0
                                        if not arg2:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _16028 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_16028] = 38
                                            mem[_16028 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if 0 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16028 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 0, 17
                                            if balanceOf[this.address] > -1:
                                                revert with 0, 17
                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                            emit Transfer(0, msg.sender, this.address);
                                        else:
                                            if arg2 and 10^18 > -1 / arg2:
                                                revert with 0, 17
                                            if not arg2:
                                                revert with 0, 18
                                            if 10^18 * arg2 / arg2 != 10^18:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _16422 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_16422] = 38
                                            mem[_16422 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16422 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                            if balanceOf[this.address] > !(10^18 * arg2):
                                                revert with 0, 17
                                            if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                            emit Transfer((10^18 * arg2), msg.sender, this.address);
                                    else:
                                        if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                            revert with 0, 17
                                        if not balanceOf[address(this.address)]:
                                            revert with 0, 18
                                        if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _7047 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_7047] = 26
                                        mem[_7047 + 32] = 'SafeMath: division by zero'
                                        _7084 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_7084] = 26
                                        mem[_7084 + 32] = 'SafeMath: division by zero'
                                        _7120 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_7120] = 30
                                        mem[_7120 + 32] = 'SafeMath: subtraction overflow'
                                        if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                            revert with 0, 17
                                        _7317 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        mem[_7317 + 32 len 64] = call.data[calldata.size len 64]
                                        if 0 >= mem[_7317]:
                                            revert with 0, 50
                                        mem[_7317 + 32] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_7317 + 96] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _7317 + ceil32(return_data.size) + 96
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        if 1 >= mem[_7317]:
                                            revert with 0, 50
                                        mem[_7317 + 64] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 1)
                                        allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                        allowance[address(this.address)][stor14].field_255 = 0
                                        emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                        mem[_7317 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_7317 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                        mem[_7317 + ceil32(return_data.size) + 132] = 0
                                        mem[_7317 + ceil32(return_data.size) + 164] = 160
                                        mem[_7317 + ceil32(return_data.size) + 260] = mem[_7317]
                                        idx = 0
                                        s = _7317 + ceil32(return_data.size) + 292
                                        t = _7317 + 32
                                        while idx < mem[_7317]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[_7317 + ceil32(return_data.size) + 196] = this.address
                                        mem[_7317 + ceil32(return_data.size) + 228] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len _7317 + ceil32(return_data.size) + (32 * mem[_7317]) + -mem[64] + 288]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11889 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11889] = 30
                                        mem[_11889 + 32] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 1)
                                        allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                        emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                        mem[mem[64] + 68] = 0
                                        mem[mem[64] + 100] = 0
                                        mem[mem[64] + 132] = 0
                                        mem[mem[64] + 164] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args address(this.address), (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 96
                                        mem[mem[64] + 32] = 0
                                        mem[mem[64] + 64] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                        emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                        mem[0] = this.address
                                        mem[32] = 0
                                        _12751 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        mem[_12751 + 32 len 64] = call.data[calldata.size len 64]
                                        if 0 >= mem[_12751]:
                                            revert with 0, 50
                                        mem[_12751 + 32] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_12751 + 96] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _12751 + ceil32(return_data.size) + 96
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        if 1 >= mem[_12751]:
                                            revert with 0, 50
                                        mem[_12751 + 64] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 1)
                                        allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                        emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                        mem[_12751 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_12751 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)]
                                        mem[_12751 + ceil32(return_data.size) + 132] = 0
                                        mem[_12751 + ceil32(return_data.size) + 164] = 160
                                        mem[_12751 + ceil32(return_data.size) + 260] = mem[_12751]
                                        idx = 0
                                        s = _12751 + ceil32(return_data.size) + 292
                                        t = _12751 + 32
                                        while idx < mem[_12751]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[_12751 + ceil32(return_data.size) + 196] = this.address
                                        mem[_12751 + ceil32(return_data.size) + 228] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len _12751 + ceil32(return_data.size) + (32 * mem[_12751]) + -mem[64] + 288]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        uint8(stor27.field_0) = 0
                                        if not arg2:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _16024 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_16024] = 38
                                            mem[_16024 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if 0 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16024 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 0, 17
                                            if balanceOf[this.address] > -1:
                                                revert with 0, 17
                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                            emit Transfer(0, msg.sender, this.address);
                                        else:
                                            if arg2 and 10^18 > -1 / arg2:
                                                revert with 0, 17
                                            if not arg2:
                                                revert with 0, 18
                                            if 10^18 * arg2 / arg2 != 10^18:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _16417 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_16417] = 38
                                            mem[_16417 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16417 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                            if balanceOf[this.address] > !(10^18 * arg2):
                                                revert with 0, 17
                                            if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                            emit Transfer((10^18 * arg2), msg.sender, this.address);
                                    if not arg2:
                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = 96
                                        mem[mem[64] + 100] = mem[96]
                                        mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                        if ceil32(mem[96]) > mem[96]:
                                            mem[mem[96] + mem[64] + 132] = 0
                                        require ext_code.size(nodeRewardManagerAddress)
                                        call nodeRewardManagerAddress.0x90219732 with:
                                             gas gas_remaining wei
                                            args msg.sender, 96, 0, mem[96], mem[mem[64] + 132 len ceil32(mem[96])]
                                    else:
                                        if arg2 and 10^18 > -1 / arg2:
                                            revert with 0, 17
                                        if not arg2:
                                            revert with 0, 18
                                        if 10^18 * arg2 / arg2 != 10^18:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = msg.sender
                                        mem[mem[64] + 36] = 96
                                        mem[mem[64] + 100] = mem[96]
                                        mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                        if ceil32(mem[96]) > mem[96]:
                                            mem[mem[96] + mem[64] + 132] = 0
                                        require ext_code.size(nodeRewardManagerAddress)
                                        call nodeRewardManagerAddress.0x90219732 with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=mem[96], data=mem[mem[64] + 132 len ceil32(mem[96])]), 10^18 * arg2
                                else:
                                    if balanceOf[address(this.address)] and rewardsFee > -1 / balanceOf[address(this.address)]:
                                        revert with 0, 17
                                    if not balanceOf[address(this.address)]:
                                        revert with 0, 18
                                    if balanceOf[address(this.address)] * rewardsFee / balanceOf[address(this.address)] != rewardsFee:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _3519 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3519] = 26
                                    mem[_3519 + 32] = 'SafeMath: division by zero'
                                    if balanceOf[address(this.address)] * rewardsFee / 100:
                                        if balanceOf[address(this.address)] * rewardsFee / 100 and stor25 > -1 / balanceOf[address(this.address)] * rewardsFee / 100:
                                            revert with 0, 17
                                        if not balanceOf[address(this.address)] * rewardsFee / 100:
                                            revert with 0, 18
                                        if balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / balanceOf[address(this.address)] * rewardsFee / 100 != stor25:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _3578 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3578] = 26
                                        mem[_3578 + 32] = 'SafeMath: division by zero'
                                        _3644 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        mem[_3644 + 32 len 64] = call.data[calldata.size len 64]
                                        if 0 >= mem[_3644]:
                                            revert with 0, 50
                                        mem[_3644 + 32] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_3644 + 96] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3644 + ceil32(return_data.size) + 96
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        if 1 >= mem[_3644]:
                                            revert with 0, 50
                                        mem[_3644 + 64] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 1)
                                        allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100
                                        emit Approval((balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100), this.address, uniswapV2RouterAddress);
                                        mem[_3644 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_3644 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100
                                        mem[_3644 + ceil32(return_data.size) + 132] = 0
                                        mem[_3644 + ceil32(return_data.size) + 164] = 160
                                        mem[_3644 + ceil32(return_data.size) + 260] = mem[_3644]
                                        idx = 0
                                        s = _3644 + ceil32(return_data.size) + 292
                                        t = _3644 + 32
                                        while idx < mem[_3644]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100, 0, 160, address(this.address), block.timestamp, mem[_3644 + ceil32(return_data.size) + 260 len (32 * mem[_3644]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[_3644 + ceil32(return_data.size) + 96] = 30
                                        mem[_3644 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        call distributionPoolAddress with:
                                             gas 2300 wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[_3644 + ceil32(return_data.size) + 160] = 30
                                        mem[_3644 + ceil32(return_data.size) + 192] = 'SafeMath: subtraction overflow'
                                        if balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100 > balanceOf[address(this.address)] * rewardsFee / 100:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if balanceOf[address(this.address)] * rewardsFee / 100 < balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100:
                                            revert with 0, 17
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not distributionPoolAddress:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        mem[_3644 + ceil32(return_data.size) + 224] = 38
                                        mem[_3644 + ceil32(return_data.size) + 256 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100) > balanceOf[address(this.address)]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_3644 + ceil32(return_data.size) + 294 len 26] >> 48,
                                                        0
                                        if balanceOf[address(this.address)] < (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100):
                                            revert with 0, 17
                                        balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[address(this.address)] * rewardsFee / 100) + (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)
                                        if balanceOf[stor17] > !((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)):
                                            revert with 0, 17
                                        if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100) < balanceOf[stor17]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[stor17] = balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)
                                        emit Transfer(((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)), this.address, distributionPoolAddress);
                                        if not balanceOf[address(this.address)]:
                                            mem[_3644 + ceil32(return_data.size) + 320] = 26
                                            mem[_3644 + ceil32(return_data.size) + 352] = 'SafeMath: division by zero'
                                            mem[_3644 + ceil32(return_data.size) + 384] = 26
                                            mem[_3644 + ceil32(return_data.size) + 416] = 'SafeMath: division by zero'
                                            mem[_3644 + ceil32(return_data.size) + 448] = 30
                                            mem[_3644 + ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            mem[_3644 + ceil32(return_data.size) + 512] = 2
                                            mem[_3644 + ceil32(return_data.size) + 544] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_3644 + ceil32(return_data.size) + 608] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3644 + (2 * ceil32(return_data.size)) + 608
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_3644 + ceil32(return_data.size) + 576] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_3644 + (2 * ceil32(return_data.size)) + 608] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_3644 + (2 * ceil32(return_data.size)) + 612] = 0
                                            mem[_3644 + (2 * ceil32(return_data.size)) + 644] = 0
                                            mem[_3644 + (2 * ceil32(return_data.size)) + 676] = 160
                                            mem[_3644 + (2 * ceil32(return_data.size)) + 772] = 2
                                            idx = 0
                                            s = _3644 + (2 * ceil32(return_data.size)) + 804
                                            t = _3644 + ceil32(return_data.size) + 544
                                            while idx < mem[_3644 + ceil32(return_data.size) + 512]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_3644 + (2 * ceil32(return_data.size)) + 708] = this.address
                                            mem[_3644 + (2 * ceil32(return_data.size)) + 740] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _3644 + (2 * ceil32(return_data.size)) + (32 * mem[_3644 + ceil32(return_data.size) + 512]) + -mem[64] + 800]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11886 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11886] = 30
                                            mem[_11886 + 32] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[mem[64] + 68] = 0
                                            mem[mem[64] + 100] = 0
                                            mem[mem[64] + 132] = 0
                                            mem[mem[64] + 164] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0, 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 96
                                            mem[mem[64] + 32] = 0
                                            mem[mem[64] + 64] = 0
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                0,
                                            mem[0] = this.address
                                            mem[32] = 0
                                            _12745 = mem[64]
                                            mem[mem[64]] = 2
                                            mem[64] = mem[64] + 96
                                            mem[_12745 + 32 len 64] = call.data[calldata.size len 64]
                                            if 0 >= mem[_12745]:
                                                revert with 0, 50
                                            mem[_12745 + 32] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_12745 + 96] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _12745 + ceil32(return_data.size) + 96
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            if 1 >= mem[_12745]:
                                                revert with 0, 50
                                            mem[_12745 + 64] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[_12745 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_12745 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)]
                                            mem[_12745 + ceil32(return_data.size) + 132] = 0
                                            mem[_12745 + ceil32(return_data.size) + 164] = 160
                                            mem[_12745 + ceil32(return_data.size) + 260] = mem[_12745]
                                            idx = 0
                                            s = _12745 + ceil32(return_data.size) + 292
                                            t = _12745 + 32
                                            while idx < mem[_12745]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_12745 + ceil32(return_data.size) + 196] = this.address
                                            mem[_12745 + ceil32(return_data.size) + 228] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _12745 + ceil32(return_data.size) + (32 * mem[_12745]) + -mem[64] + 288]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor27.field_0) = 0
                                            if not arg2:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _16012 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_16012] = 38
                                                mem[_16012 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16012 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _16402 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_16402] = 38
                                                mem[_16402 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16402 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                if balanceOf[this.address] > !(10^18 * arg2):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                emit Transfer((10^18 * arg2), msg.sender, this.address);
                                            if not arg2:
                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = 96
                                                mem[mem[64] + 100] = mem[96]
                                                mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + mem[64] + 132] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, 96, 0, mem[96], mem[mem[64] + 132 len ceil32(mem[96])]
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = 96
                                                mem[mem[64] + 100] = mem[96]
                                                mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + mem[64] + 132] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=mem[96], data=mem[mem[64] + 132 len ceil32(mem[96])]), 10^18 * arg2
                                        else:
                                            if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[_3644 + ceil32(return_data.size) + 320] = 26
                                            mem[_3644 + ceil32(return_data.size) + 352] = 'SafeMath: division by zero'
                                            mem[_3644 + ceil32(return_data.size) + 384] = 26
                                            mem[_3644 + ceil32(return_data.size) + 416] = 'SafeMath: division by zero'
                                            mem[_3644 + ceil32(return_data.size) + 448] = 30
                                            mem[_3644 + ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                revert with 0, 17
                                            mem[_3644 + ceil32(return_data.size) + 512] = 2
                                            mem[_3644 + ceil32(return_data.size) + 544] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_3644 + ceil32(return_data.size) + 608] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3644 + (2 * ceil32(return_data.size)) + 608
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_3644 + ceil32(return_data.size) + 576] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            allowance[address(this.address)][stor14].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                            mem[_3644 + (2 * ceil32(return_data.size)) + 608] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_3644 + (2 * ceil32(return_data.size)) + 612] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[_3644 + (2 * ceil32(return_data.size)) + 644] = 0
                                            mem[_3644 + (2 * ceil32(return_data.size)) + 676] = 160
                                            mem[_3644 + (2 * ceil32(return_data.size)) + 772] = 2
                                            idx = 0
                                            s = _3644 + (2 * ceil32(return_data.size)) + 804
                                            t = _3644 + ceil32(return_data.size) + 544
                                            while idx < mem[_3644 + ceil32(return_data.size) + 512]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_3644 + (2 * ceil32(return_data.size)) + 708] = this.address
                                            mem[_3644 + (2 * ceil32(return_data.size)) + 740] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _3644 + (2 * ceil32(return_data.size)) + (32 * mem[_3644 + ceil32(return_data.size) + 512]) + -mem[64] + 800]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11885 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11885] = 30
                                            mem[_11885 + 32] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[mem[64] + 68] = 0
                                            mem[mem[64] + 100] = 0
                                            mem[mem[64] + 132] = 0
                                            mem[mem[64] + 164] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 96
                                            mem[mem[64] + 32] = 0
                                            mem[mem[64] + 64] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                            mem[0] = this.address
                                            mem[32] = 0
                                            _12743 = mem[64]
                                            mem[mem[64]] = 2
                                            mem[64] = mem[64] + 96
                                            mem[_12743 + 32 len 64] = call.data[calldata.size len 64]
                                            if 0 >= mem[_12743]:
                                                revert with 0, 50
                                            mem[_12743 + 32] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_12743 + 96] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _12743 + ceil32(return_data.size) + 96
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            if 1 >= mem[_12743]:
                                                revert with 0, 50
                                            mem[_12743 + 64] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[_12743 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_12743 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)]
                                            mem[_12743 + ceil32(return_data.size) + 132] = 0
                                            mem[_12743 + ceil32(return_data.size) + 164] = 160
                                            mem[_12743 + ceil32(return_data.size) + 260] = mem[_12743]
                                            idx = 0
                                            s = _12743 + ceil32(return_data.size) + 292
                                            t = _12743 + 32
                                            while idx < mem[_12743]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[_12743 + ceil32(return_data.size) + 260 len (32 * mem[_12743]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor27.field_0) = 0
                                            if not arg2:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                mem[_12743 + ceil32(return_data.size) + 96] = 38
                                                mem[_12743 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                mem[_12743 + ceil32(return_data.size) + 96] = 38
                                                mem[_12743 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                if balanceOf[this.address] > !(10^18 * arg2):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                emit Transfer((10^18 * arg2), msg.sender, this.address);
                                            if not arg2:
                                                mem[_12743 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[_12743 + ceil32(return_data.size) + 196] = msg.sender
                                                mem[_12743 + ceil32(return_data.size) + 228] = 96
                                                mem[_12743 + ceil32(return_data.size) + 292] = mem[96]
                                                mem[_12743 + ceil32(return_data.size) + 324 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + _12743 + ceil32(return_data.size) + 324] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, 96, 0, mem[96], mem[_12743 + ceil32(return_data.size) + 324 len ceil32(mem[96])]
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[_12743 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[_12743 + ceil32(return_data.size) + 196] = msg.sender
                                                mem[_12743 + ceil32(return_data.size) + 228] = 96
                                                mem[_12743 + ceil32(return_data.size) + 292] = mem[96]
                                                mem[_12743 + ceil32(return_data.size) + 324 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + _12743 + ceil32(return_data.size) + 324] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=mem[96], data=mem[_12743 + ceil32(return_data.size) + 324 len ceil32(mem[96])]), 10^18 * arg2
                                    else:
                                        _3532 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3532] = 26
                                        mem[_3532 + 32] = 'SafeMath: division by zero'
                                        _3597 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        mem[_3597 + 32 len 64] = call.data[calldata.size len 64]
                                        if 0 >= mem[_3597]:
                                            revert with 0, 50
                                        mem[_3597 + 32] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_3597 + 96] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3597 + ceil32(return_data.size) + 96
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        if 1 >= mem[_3597]:
                                            revert with 0, 50
                                        mem[_3597 + 64] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 1)
                                        allowance[address(this.address)][stor14].field_0 = 0
                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                        mem[_3597 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_3597 + ceil32(return_data.size) + 100] = 0
                                        mem[_3597 + ceil32(return_data.size) + 132] = 0
                                        mem[_3597 + ceil32(return_data.size) + 164] = 160
                                        mem[_3597 + ceil32(return_data.size) + 260] = mem[_3597]
                                        idx = 0
                                        s = _3597 + ceil32(return_data.size) + 292
                                        t = _3597 + 32
                                        while idx < mem[_3597]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[_3597 + ceil32(return_data.size) + 196] = this.address
                                        mem[_3597 + ceil32(return_data.size) + 228] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len _3597 + ceil32(return_data.size) + (32 * mem[_3597]) + -mem[64] + 288]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _6465 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_6465] = 30
                                        mem[_6465 + 32] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        call distributionPoolAddress with:
                                             gas 2300 wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _6555 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_6555] = 30
                                        mem[_6555 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > balanceOf[address(this.address)] * rewardsFee / 100:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if balanceOf[address(this.address)] * rewardsFee / 100 < 0:
                                            revert with 0, 17
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not distributionPoolAddress:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        _6755 = mem[64]
                                        mem[64] = mem[64] + 96
                                        mem[_6755] = 38
                                        mem[_6755 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if balanceOf[address(this.address)] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 38
                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6755 + 70 len 26]
                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)] * rewardsFee / 100:
                                            revert with 0, 17
                                        balanceOf[address(this.address)] -= balanceOf[address(this.address)] * rewardsFee / 100
                                        if balanceOf[stor17] > !(balanceOf[address(this.address)] * rewardsFee / 100):
                                            revert with 0, 17
                                        if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) < balanceOf[stor17]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = distributionPoolAddress
                                        mem[32] = 0
                                        balanceOf[stor17] += balanceOf[address(this.address)] * rewardsFee / 100
                                        emit Transfer((balanceOf[address(this.address)] * rewardsFee / 100), this.address, distributionPoolAddress);
                                        if balanceOf[address(this.address)]:
                                            if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _7045 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_7045] = 26
                                            mem[_7045 + 32] = 'SafeMath: division by zero'
                                            _7083 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_7083] = 26
                                            mem[_7083 + 32] = 'SafeMath: division by zero'
                                            _7119 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_7119] = 30
                                            mem[_7119 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                revert with 0, 17
                                            _7315 = mem[64]
                                            mem[mem[64]] = 2
                                            mem[64] = mem[64] + 96
                                            mem[_7315 + 32 len 64] = call.data[calldata.size len 64]
                                            if 0 >= mem[_7315]:
                                                revert with 0, 50
                                            mem[_7315 + 32] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_7315 + 96] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _7315 + ceil32(return_data.size) + 96
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            if 1 >= mem[_7315]:
                                                revert with 0, 50
                                            mem[_7315 + 64] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            allowance[address(this.address)][stor14].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                            mem[_7315 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_7315 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[_7315 + ceil32(return_data.size) + 132] = 0
                                            mem[_7315 + ceil32(return_data.size) + 164] = 160
                                            mem[_7315 + ceil32(return_data.size) + 260] = mem[_7315]
                                            idx = 0
                                            s = _7315 + ceil32(return_data.size) + 292
                                            t = _7315 + 32
                                            while idx < mem[_7315]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_7315 + ceil32(return_data.size) + 260 len (32 * mem[_7315]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_7315 + ceil32(return_data.size) + 96] = 30
                                            mem[_7315 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[_7315 + ceil32(return_data.size) + 228] = 0
                                            mem[_7315 + ceil32(return_data.size) + 260] = 0
                                            mem[_7315 + ceil32(return_data.size) + 292] = 0
                                            mem[_7315 + ceil32(return_data.size) + 324] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                            mem[_7315 + ceil32(return_data.size) + 160 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                            mem[_7315 + (2 * ceil32(return_data.size)) + 160] = 2
                                            mem[_7315 + (2 * ceil32(return_data.size)) + 192] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_7315 + (2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_7315 + (2 * ceil32(return_data.size)) + 224] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[_7315 + (4 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_7315 + (4 * ceil32(return_data.size)) + 260] = balanceOf[address(this.address)]
                                            mem[_7315 + (4 * ceil32(return_data.size)) + 292] = 0
                                            mem[_7315 + (4 * ceil32(return_data.size)) + 324] = 160
                                            mem[_7315 + (4 * ceil32(return_data.size)) + 420] = 2
                                            idx = 0
                                            s = _7315 + (4 * ceil32(return_data.size)) + 452
                                            t = _7315 + (2 * ceil32(return_data.size)) + 192
                                            while idx < mem[_7315 + (2 * ceil32(return_data.size)) + 160]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_7315 + (4 * ceil32(return_data.size)) + 356] = this.address
                                            mem[_7315 + (4 * ceil32(return_data.size)) + 388] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[_7315 + (4 * ceil32(return_data.size)) + 420 len (32 * mem[_7315 + (2 * ceil32(return_data.size)) + 160]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor27.field_0) = 0
                                            if not arg2:
                                                if not msg.sender:
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 260] = 32
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 292] = 37
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer from the zero ad'
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 356] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from _7315 + (4 * ceil32(return_data.size)) + 256
                                                       len (5 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 260] = 32
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 292] = 35
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer to the zero addr'
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 356] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from _7315 + (4 * ceil32(return_data.size)) + 256
                                                       len (5 * ceil32(return_data.size)) + 132
                                                mem[_7315 + (4 * ceil32(return_data.size)) + 256] = 38
                                                mem[_7315 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 356] = 32
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 388] = 38
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 420 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 458] = 0
                                                    revert with memory
                                                      from _7315 + (4 * ceil32(return_data.size)) + 352
                                                       len (5 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 356] = 32
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 388] = 27
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from _7315 + (4 * ceil32(return_data.size)) + 352
                                                       len (5 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 260] = 32
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 292] = 33
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 324] = 'SafeMath: multiplication overflo'
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 356] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from _7315 + (4 * ceil32(return_data.size)) + 256
                                                       len (5 * ceil32(return_data.size)) + 132
                                                if not msg.sender:
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 260] = 32
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 292] = 37
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer from the zero ad'
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 356] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from _7315 + (4 * ceil32(return_data.size)) + 256
                                                       len (5 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 260] = 32
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 292] = 35
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer to the zero addr'
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 356] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from _7315 + (4 * ceil32(return_data.size)) + 256
                                                       len (5 * ceil32(return_data.size)) + 132
                                                mem[_7315 + (4 * ceil32(return_data.size)) + 256] = 38
                                                mem[_7315 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 356] = 32
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 388] = 38
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 420 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 458] = 0
                                                    revert with memory
                                                      from _7315 + (4 * ceil32(return_data.size)) + 352
                                                       len (5 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                if balanceOf[this.address] > !(10^18 * arg2):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 356] = 32
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 388] = 27
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from _7315 + (4 * ceil32(return_data.size)) + 352
                                                       len (5 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                emit Transfer((10^18 * arg2), msg.sender, this.address);
                                            if not arg2:
                                                mem[_7315 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[_7315 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                mem[_7315 + (4 * ceil32(return_data.size)) + 388] = 96
                                                mem[_7315 + (4 * ceil32(return_data.size)) + 452] = mem[96]
                                                mem[_7315 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + _7315 + (4 * ceil32(return_data.size)) + 484] = 0
                                                mem[_7315 + (4 * ceil32(return_data.size)) + 420] = 0
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 356] = 32
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 388] = 33
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: multiplication overflo'
                                                    mem[_7315 + (4 * ceil32(return_data.size)) + 452] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from _7315 + (4 * ceil32(return_data.size)) + 352
                                                       len (5 * ceil32(return_data.size)) + 132
                                                mem[_7315 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[_7315 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                mem[_7315 + (4 * ceil32(return_data.size)) + 388] = 96
                                                mem[_7315 + (4 * ceil32(return_data.size)) + 452] = mem[96]
                                                mem[_7315 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + _7315 + (4 * ceil32(return_data.size)) + 484] = 0
                                                mem[_7315 + (4 * ceil32(return_data.size)) + 420] = 10^18 * arg2
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0x90219732 with:
                                                 gas gas_remaining wei
                                                args mem[_7315 + (4 * ceil32(return_data.size)) + 356 len ceil32(mem[96]) + (5 * ceil32(return_data.size)) + 128]
                                        else:
                                            _6993 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_6993] = 26
                                            mem[_6993 + 32] = 'SafeMath: division by zero'
                                            _7065 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_7065] = 26
                                            mem[_7065 + 32] = 'SafeMath: division by zero'
                                            _7101 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_7101] = 30
                                            mem[_7101 + 32] = 'SafeMath: subtraction overflow'
                                            _7170 = mem[64]
                                            mem[mem[64]] = 2
                                            mem[64] = mem[64] + 96
                                            mem[_7170 + 32 len 64] = call.data[calldata.size len 64]
                                            if 0 >= mem[_7170]:
                                                revert with 0, 50
                                            mem[_7170 + 32] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_7170 + 96] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _7170 + ceil32(return_data.size) + 96
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            if 1 >= mem[_7170]:
                                                revert with 0, 50
                                            mem[_7170 + 64] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_7170 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_7170 + ceil32(return_data.size) + 100] = 0
                                            mem[_7170 + ceil32(return_data.size) + 132] = 0
                                            mem[_7170 + ceil32(return_data.size) + 164] = 160
                                            mem[_7170 + ceil32(return_data.size) + 260] = mem[_7170]
                                            idx = 0
                                            s = _7170 + ceil32(return_data.size) + 292
                                            t = _7170 + 32
                                            while idx < mem[_7170]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_7170 + ceil32(return_data.size) + 196] = this.address
                                            mem[_7170 + ceil32(return_data.size) + 228] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _7170 + ceil32(return_data.size) + (32 * mem[_7170]) + -mem[64] + 288]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11888 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11888] = 30
                                            mem[_11888 + 32] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[mem[64] + 68] = 0
                                            mem[mem[64] + 100] = 0
                                            mem[mem[64] + 132] = 0
                                            mem[mem[64] + 164] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0, 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 96
                                            mem[mem[64] + 32] = 0
                                            mem[mem[64] + 64] = 0
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                0,
                                            mem[0] = this.address
                                            mem[32] = 0
                                            _12749 = mem[64]
                                            mem[mem[64]] = 2
                                            mem[64] = mem[64] + 96
                                            mem[_12749 + 32 len 64] = call.data[calldata.size len 64]
                                            if 0 >= mem[_12749]:
                                                revert with 0, 50
                                            mem[_12749 + 32] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_12749 + 96] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _12749 + ceil32(return_data.size) + 96
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            if 1 >= mem[_12749]:
                                                revert with 0, 50
                                            mem[_12749 + 64] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[_12749 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_12749 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)]
                                            mem[_12749 + ceil32(return_data.size) + 132] = 0
                                            mem[_12749 + ceil32(return_data.size) + 164] = 160
                                            mem[_12749 + ceil32(return_data.size) + 260] = mem[_12749]
                                            idx = 0
                                            s = _12749 + ceil32(return_data.size) + 292
                                            t = _12749 + 32
                                            while idx < mem[_12749]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_12749 + ceil32(return_data.size) + 196] = this.address
                                            mem[_12749 + ceil32(return_data.size) + 228] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _12749 + ceil32(return_data.size) + (32 * mem[_12749]) + -mem[64] + 288]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor27.field_0) = 0
                                            if not arg2:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _16020 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_16020] = 38
                                                mem[_16020 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16020 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _16412 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_16412] = 38
                                                mem[_16412 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16412 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                if balanceOf[this.address] > !(10^18 * arg2):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                emit Transfer((10^18 * arg2), msg.sender, this.address);
                                            if not arg2:
                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = 96
                                                mem[mem[64] + 100] = mem[96]
                                                mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + mem[64] + 132] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, 96, 0, mem[96], mem[mem[64] + 132 len ceil32(mem[96])]
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = 96
                                                mem[mem[64] + 100] = mem[96]
                                                mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + mem[64] + 132] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=mem[96], data=mem[mem[64] + 132 len ceil32(mem[96])]), 10^18 * arg2
                            else:
                                if balanceOf[address(this.address)] and futurFee > -1 / balanceOf[address(this.address)]:
                                    revert with 0, 17
                                if not balanceOf[address(this.address)]:
                                    revert with 0, 18
                                if balanceOf[address(this.address)] * futurFee / balanceOf[address(this.address)] != futurFee:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 26
                                mem[ceil32(arg1.length) + ceil32(return_data.size) + 160] = 'SafeMath: division by zero'
                                if balanceOf[address(this.address)] * futurFee / 100:
                                    if balanceOf[address(this.address)] * futurFee / 100 and stor26 > -1 / balanceOf[address(this.address)] * futurFee / 100:
                                        revert with 0, 17
                                    if not balanceOf[address(this.address)] * futurFee / 100:
                                        revert with 0, 18
                                    if balanceOf[address(this.address)] * futurFee / 100 * stor26 / balanceOf[address(this.address)] * futurFee / 100 != stor26:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 192] = 26
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 224] = 'SafeMath: division by zero'
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 256] = 30
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 288] = 'SafeMath: subtraction overflow'
                                    if balanceOf[address(this.address)] * futurFee / 100 * stor26 / 100 > balanceOf[address(this.address)] * futurFee / 100:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if balanceOf[address(this.address)] * futurFee / 100 < balanceOf[address(this.address)] * futurFee / 100 * stor26 / 100:
                                        revert with 0, 17
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 320] = 2
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 352] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 416] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 384] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = 32
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 36
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 'ERC20: approve from the zero add'
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                        revert with memory
                                          from ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                           len ceil32(return_data.size) + 132
                                    if not uniswapV2RouterAddress:
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = 32
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 34
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 'ERC20: approve to the zero addre'
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                        revert with memory
                                          from ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                           len ceil32(return_data.size) + 132
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 1)
                                    allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * futurFee / 100 * stor26 / 100
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = balanceOf[address(this.address)] * futurFee / 100 * stor26 / 100
                                    emit Approval(mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = balanceOf[address(this.address)] * futurFee / 100 * stor26 / 100
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 0
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 160
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 580] = 2
                                    idx = 0
                                    s = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 612
                                    t = ceil32(arg1.length) + ceil32(return_data.size) + 352
                                    while idx < mem[ceil32(arg1.length) + ceil32(return_data.size) + 320]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = this.address
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 548] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len ceil32(arg1.length) + (2 * ceil32(return_data.size)) + (32 * mem[ceil32(arg1.length) + ceil32(return_data.size) + 320]) + -mem[64] + 608]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1376 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_1376] = 30
                                    mem[_1376 + 32] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call devPoolAddress with:
                                         gas 2300 wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1415 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    mem[_1415 + 32 len 64] = call.data[calldata.size len 64]
                                    if 0 >= mem[_1415]:
                                        revert with 0, 50
                                    mem[_1415 + 32] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[_1415 + 96] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _1415 + ceil32(return_data.size) + 96
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    if 1 >= mem[_1415]:
                                        revert with 0, 50
                                    mem[_1415 + 64] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 1)
                                    allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * futurFee / 100) - (balanceOf[address(this.address)] * futurFee / 100 * stor26 / 100)
                                    emit Approval(((balanceOf[address(this.address)] * futurFee / 100) - (balanceOf[address(this.address)] * futurFee / 100 * stor26 / 100)), this.address, uniswapV2RouterAddress);
                                    mem[_1415 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[_1415 + ceil32(return_data.size) + 100] = (balanceOf[address(this.address)] * futurFee / 100) - (balanceOf[address(this.address)] * futurFee / 100 * stor26 / 100)
                                    mem[_1415 + ceil32(return_data.size) + 132] = 0
                                    mem[_1415 + ceil32(return_data.size) + 164] = 160
                                    mem[_1415 + ceil32(return_data.size) + 260] = mem[_1415]
                                    idx = 0
                                    s = _1415 + ceil32(return_data.size) + 292
                                    t = _1415 + 32
                                    while idx < mem[_1415]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[_1415 + ceil32(return_data.size) + 196] = this.address
                                    mem[_1415 + ceil32(return_data.size) + 228] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len _1415 + ceil32(return_data.size) + (32 * mem[_1415]) + -mem[64] + 288]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _3458 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3458] = 30
                                    mem[_3458 + 32] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call futurUsePoolAddress with:
                                         gas 2300 wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not balanceOf[address(this.address)]:
                                        _3500 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3500] = 26
                                        mem[_3500 + 32] = 'SafeMath: division by zero'
                                        _3524 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3524] = 26
                                        mem[_3524 + 32] = 'SafeMath: division by zero'
                                        _3539 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        mem[_3539 + 32 len 64] = call.data[calldata.size len 64]
                                        if 0 >= mem[_3539]:
                                            revert with 0, 50
                                        mem[_3539 + 32] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_3539 + 96] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3539 + ceil32(return_data.size) + 96
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        if 1 >= mem[_3539]:
                                            revert with 0, 50
                                        mem[_3539 + 64] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 1)
                                        allowance[address(this.address)][stor14].field_0 = 0
                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                        mem[_3539 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_3539 + ceil32(return_data.size) + 100] = 0
                                        mem[_3539 + ceil32(return_data.size) + 132] = 0
                                        mem[_3539 + ceil32(return_data.size) + 164] = 160
                                        mem[_3539 + ceil32(return_data.size) + 260] = mem[_3539]
                                        idx = 0
                                        s = _3539 + ceil32(return_data.size) + 292
                                        t = _3539 + 32
                                        while idx < mem[_3539]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[_3539 + ceil32(return_data.size) + 196] = this.address
                                        mem[_3539 + ceil32(return_data.size) + 228] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len _3539 + ceil32(return_data.size) + (32 * mem[_3539]) + -mem[64] + 288]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _6460 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_6460] = 30
                                        mem[_6460 + 32] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        call distributionPoolAddress with:
                                             gas 2300 wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _6550 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_6550] = 30
                                        mem[_6550 + 32] = 'SafeMath: subtraction overflow'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not distributionPoolAddress:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        _6740 = mem[64]
                                        mem[64] = mem[64] + 96
                                        mem[_6740] = 38
                                        mem[_6740 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if 0 > balanceOf[address(this.address)]:
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 38
                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6740 + 70 len 26]
                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                        if balanceOf[address(this.address)] < 0:
                                            revert with 0, 17
                                        if balanceOf[stor17] > -1:
                                            revert with 0, 17
                                        if balanceOf[stor17] < balanceOf[stor17]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = distributionPoolAddress
                                        mem[32] = 0
                                        balanceOf[stor17] = balanceOf[stor17]
                                        emit Transfer(0, this.address, distributionPoolAddress);
                                        if not balanceOf[address(this.address)]:
                                            _6988 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_6988] = 26
                                            mem[_6988 + 32] = 'SafeMath: division by zero'
                                            _7060 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_7060] = 26
                                            mem[_7060 + 32] = 'SafeMath: division by zero'
                                            _7096 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_7096] = 30
                                            mem[_7096 + 32] = 'SafeMath: subtraction overflow'
                                            _7155 = mem[64]
                                            mem[mem[64]] = 2
                                            mem[64] = mem[64] + 96
                                            mem[_7155 + 32 len 64] = call.data[calldata.size len 64]
                                            if 0 >= mem[_7155]:
                                                revert with 0, 50
                                            mem[_7155 + 32] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_7155 + 96] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _7155 + ceil32(return_data.size) + 96
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            if 1 >= mem[_7155]:
                                                revert with 0, 50
                                            mem[_7155 + 64] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_7155 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_7155 + ceil32(return_data.size) + 100] = 0
                                            mem[_7155 + ceil32(return_data.size) + 132] = 0
                                            mem[_7155 + ceil32(return_data.size) + 164] = 160
                                            mem[_7155 + ceil32(return_data.size) + 260] = mem[_7155]
                                            idx = 0
                                            s = _7155 + ceil32(return_data.size) + 292
                                            t = _7155 + 32
                                            while idx < mem[_7155]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0, 0, 160, address(this.address), block.timestamp, mem[_7155 + ceil32(return_data.size) + 260 len (32 * mem[_7155]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_7155 + ceil32(return_data.size) + 96] = 30
                                            mem[_7155 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_7155 + ceil32(return_data.size) + 228] = 0
                                            mem[_7155 + ceil32(return_data.size) + 260] = 0
                                            mem[_7155 + ceil32(return_data.size) + 292] = 0
                                            mem[_7155 + ceil32(return_data.size) + 324] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0, 0, 0, 0, block.timestamp
                                            mem[_7155 + ceil32(return_data.size) + 160 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                0,
                                            mem[_7155 + (2 * ceil32(return_data.size)) + 160] = 2
                                            mem[_7155 + (2 * ceil32(return_data.size)) + 192] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_7155 + (2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_7155 + (2 * ceil32(return_data.size)) + 224] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[_7155 + (4 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_7155 + (4 * ceil32(return_data.size)) + 260] = balanceOf[address(this.address)]
                                            mem[_7155 + (4 * ceil32(return_data.size)) + 292] = 0
                                            mem[_7155 + (4 * ceil32(return_data.size)) + 324] = 160
                                            mem[_7155 + (4 * ceil32(return_data.size)) + 420] = 2
                                            idx = 0
                                            s = _7155 + (4 * ceil32(return_data.size)) + 452
                                            t = _7155 + (2 * ceil32(return_data.size)) + 192
                                            while idx < mem[_7155 + (2 * ceil32(return_data.size)) + 160]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_7155 + (4 * ceil32(return_data.size)) + 356] = this.address
                                            mem[_7155 + (4 * ceil32(return_data.size)) + 388] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[_7155 + (4 * ceil32(return_data.size)) + 420 len (32 * mem[_7155 + (2 * ceil32(return_data.size)) + 160]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor27.field_0) = 0
                                            if not arg2:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                mem[_7155 + (4 * ceil32(return_data.size)) + 256] = 38
                                                mem[_7155 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                mem[_7155 + (4 * ceil32(return_data.size)) + 256] = 38
                                                mem[_7155 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                if balanceOf[this.address] > !(10^18 * arg2):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                emit Transfer((10^18 * arg2), msg.sender, this.address);
                                            if not arg2:
                                                mem[_7155 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[_7155 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                mem[_7155 + (4 * ceil32(return_data.size)) + 388] = 96
                                                mem[_7155 + (4 * ceil32(return_data.size)) + 452] = mem[96]
                                                mem[_7155 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + _7155 + (4 * ceil32(return_data.size)) + 484] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, 96, 0, mem[96], mem[_7155 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[96])]
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[_7155 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[_7155 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                mem[_7155 + (4 * ceil32(return_data.size)) + 388] = 96
                                                mem[_7155 + (4 * ceil32(return_data.size)) + 452] = mem[96]
                                                mem[_7155 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + _7155 + (4 * ceil32(return_data.size)) + 484] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=mem[96], data=mem[_7155 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[96])]), 10^18 * arg2
                                        else:
                                            if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _7035 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_7035] = 26
                                            mem[_7035 + 32] = 'SafeMath: division by zero'
                                            _7078 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_7078] = 26
                                            mem[_7078 + 32] = 'SafeMath: division by zero'
                                            _7114 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_7114] = 30
                                            mem[_7114 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                revert with 0, 17
                                            _7305 = mem[64]
                                            mem[mem[64]] = 2
                                            mem[64] = mem[64] + 96
                                            mem[_7305 + 32 len 64] = call.data[calldata.size len 64]
                                            if 0 >= mem[_7305]:
                                                revert with 0, 50
                                            mem[_7305 + 32] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_7305 + 96] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _7305 + ceil32(return_data.size) + 96
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            if 1 >= mem[_7305]:
                                                revert with 0, 50
                                            mem[_7305 + 64] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            allowance[address(this.address)][stor14].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                            mem[_7305 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_7305 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[_7305 + ceil32(return_data.size) + 132] = 0
                                            mem[_7305 + ceil32(return_data.size) + 164] = 160
                                            mem[_7305 + ceil32(return_data.size) + 260] = mem[_7305]
                                            idx = 0
                                            s = _7305 + ceil32(return_data.size) + 292
                                            t = _7305 + 32
                                            while idx < mem[_7305]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_7305 + ceil32(return_data.size) + 260 len (32 * mem[_7305]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_7305 + ceil32(return_data.size) + 96] = 30
                                            mem[_7305 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[_7305 + ceil32(return_data.size) + 228] = 0
                                            mem[_7305 + ceil32(return_data.size) + 260] = 0
                                            mem[_7305 + ceil32(return_data.size) + 292] = 0
                                            mem[_7305 + ceil32(return_data.size) + 324] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                            mem[_7305 + ceil32(return_data.size) + 160 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                            mem[_7305 + (2 * ceil32(return_data.size)) + 160] = 2
                                            mem[_7305 + (2 * ceil32(return_data.size)) + 192] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_7305 + (2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _7305 + (4 * ceil32(return_data.size)) + 256
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_7305 + (2 * ceil32(return_data.size)) + 224] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[_7305 + (4 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_7305 + (4 * ceil32(return_data.size)) + 260] = balanceOf[address(this.address)]
                                            mem[_7305 + (4 * ceil32(return_data.size)) + 292] = 0
                                            mem[_7305 + (4 * ceil32(return_data.size)) + 324] = 160
                                            mem[_7305 + (4 * ceil32(return_data.size)) + 420] = 2
                                            idx = 0
                                            s = _7305 + (4 * ceil32(return_data.size)) + 452
                                            t = _7305 + (2 * ceil32(return_data.size)) + 192
                                            while idx < mem[_7305 + (2 * ceil32(return_data.size)) + 160]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_7305 + (4 * ceil32(return_data.size)) + 356] = this.address
                                            mem[_7305 + (4 * ceil32(return_data.size)) + 388] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _7305 + (4 * ceil32(return_data.size)) + (32 * mem[_7305 + (2 * ceil32(return_data.size)) + 160]) + -mem[64] + 448]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor27.field_0) = 0
                                            if not arg2:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _15976 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_15976] = 38
                                                mem[_15976 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15976 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _16357 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_16357] = 38
                                                mem[_16357 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16357 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                if balanceOf[this.address] > !(10^18 * arg2):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                emit Transfer((10^18 * arg2), msg.sender, this.address);
                                            if not arg2:
                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = 96
                                                mem[mem[64] + 100] = mem[96]
                                                mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + mem[64] + 132] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, 96, 0, mem[96], mem[mem[64] + 132 len ceil32(mem[96])]
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = 96
                                                mem[mem[64] + 100] = mem[96]
                                                mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + mem[64] + 132] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=mem[96], data=mem[mem[64] + 132 len ceil32(mem[96])]), 10^18 * arg2
                                    else:
                                        if balanceOf[address(this.address)] and rewardsFee > -1 / balanceOf[address(this.address)]:
                                            revert with 0, 17
                                        if not balanceOf[address(this.address)]:
                                            revert with 0, 18
                                        if balanceOf[address(this.address)] * rewardsFee / balanceOf[address(this.address)] != rewardsFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _3515 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3515] = 26
                                        mem[_3515 + 32] = 'SafeMath: division by zero'
                                        if balanceOf[address(this.address)] * rewardsFee / 100:
                                            if balanceOf[address(this.address)] * rewardsFee / 100 and stor25 > -1 / balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / balanceOf[address(this.address)] * rewardsFee / 100 != stor25:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _3572 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_3572] = 26
                                            mem[_3572 + 32] = 'SafeMath: division by zero'
                                            _3638 = mem[64]
                                            mem[mem[64]] = 2
                                            mem[64] = mem[64] + 96
                                            mem[_3638 + 32 len 64] = call.data[calldata.size len 64]
                                            if 0 >= mem[_3638]:
                                                revert with 0, 50
                                            mem[_3638 + 32] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_3638 + 96] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3638 + ceil32(return_data.size) + 96
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            if 1 >= mem[_3638]:
                                                revert with 0, 50
                                            mem[_3638 + 64] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100
                                            emit Approval((balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100), this.address, uniswapV2RouterAddress);
                                            mem[_3638 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_3638 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100
                                            mem[_3638 + ceil32(return_data.size) + 132] = 0
                                            mem[_3638 + ceil32(return_data.size) + 164] = 160
                                            mem[_3638 + ceil32(return_data.size) + 260] = mem[_3638]
                                            idx = 0
                                            s = _3638 + ceil32(return_data.size) + 292
                                            t = _3638 + 32
                                            while idx < mem[_3638]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100, 0, 160, address(this.address), block.timestamp, mem[_3638 + ceil32(return_data.size) + 260 len (32 * mem[_3638]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_3638 + ceil32(return_data.size) + 96] = 30
                                            mem[_3638 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            call distributionPoolAddress with:
                                                 gas 2300 wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_3638 + ceil32(return_data.size) + 160] = 30
                                            mem[_3638 + ceil32(return_data.size) + 192] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100:
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not distributionPoolAddress:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            mem[_3638 + ceil32(return_data.size) + 224] = 38
                                            mem[_3638 + ceil32(return_data.size) + 256 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100) > balanceOf[address(this.address)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_3638 + ceil32(return_data.size) + 294 len 26] >> 48,
                                                            0
                                            if balanceOf[address(this.address)] < (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100):
                                                revert with 0, 17
                                            balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[address(this.address)] * rewardsFee / 100) + (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)
                                            if balanceOf[stor17] > !((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100) < balanceOf[stor17]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[stor17] = balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)
                                            emit Transfer(((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[_3638 + ceil32(return_data.size) + 320] = 26
                                                mem[_3638 + ceil32(return_data.size) + 352] = 'SafeMath: division by zero'
                                                mem[_3638 + ceil32(return_data.size) + 384] = 26
                                                mem[_3638 + ceil32(return_data.size) + 416] = 'SafeMath: division by zero'
                                                mem[_3638 + ceil32(return_data.size) + 448] = 30
                                                mem[_3638 + ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                mem[_3638 + ceil32(return_data.size) + 512] = 2
                                                mem[_3638 + ceil32(return_data.size) + 544] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_3638 + ceil32(return_data.size) + 608] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_3638 + ceil32(return_data.size) + 576] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 608] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 612] = 0
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 644] = 0
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 676] = 160
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 772] = 2
                                                idx = 0
                                                s = _3638 + (2 * ceil32(return_data.size)) + 804
                                                t = _3638 + ceil32(return_data.size) + 544
                                                while idx < mem[_3638 + ceil32(return_data.size) + 512]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 708] = this.address
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 740] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[_3638 + (2 * ceil32(return_data.size)) + 772 len (32 * mem[_3638 + ceil32(return_data.size) + 512]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 608] = 30
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 676] = this.address
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 708] = 0
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 740] = 0
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 772] = 0
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 804] = 0
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 836] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0, 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    0,
                                                mem[_3638 + (4 * ceil32(return_data.size)) + 672] = 2
                                                mem[_3638 + (4 * ceil32(return_data.size)) + 704] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_3638 + (4 * ceil32(return_data.size)) + 768] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3638 + (6 * ceil32(return_data.size)) + 768
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_3638 + (4 * ceil32(return_data.size)) + 736] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_3638 + (6 * ceil32(return_data.size)) + 768] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_3638 + (6 * ceil32(return_data.size)) + 772] = balanceOf[address(this.address)]
                                                mem[_3638 + (6 * ceil32(return_data.size)) + 804] = 0
                                                mem[_3638 + (6 * ceil32(return_data.size)) + 836] = 160
                                                mem[_3638 + (6 * ceil32(return_data.size)) + 932] = 2
                                                idx = 0
                                                s = _3638 + (6 * ceil32(return_data.size)) + 964
                                                t = _3638 + (4 * ceil32(return_data.size)) + 704
                                                while idx < mem[_3638 + (4 * ceil32(return_data.size)) + 672]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[_3638 + (6 * ceil32(return_data.size)) + 932 len (32 * mem[_3638 + (4 * ceil32(return_data.size)) + 672]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor27.field_0) = 0
                                                if not arg2:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    mem[_3638 + (6 * ceil32(return_data.size)) + 768] = 38
                                                    mem[_3638 + (6 * ceil32(return_data.size)) + 800 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] > -1:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                    emit Transfer(0, msg.sender, this.address);
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    mem[_3638 + (6 * ceil32(return_data.size)) + 768] = 38
                                                    mem[_3638 + (6 * ceil32(return_data.size)) + 800 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                    if balanceOf[this.address] > !(10^18 * arg2):
                                                        revert with 0, 17
                                                    if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                    emit Transfer((10^18 * arg2), msg.sender, this.address);
                                                if not arg2:
                                                    mem[_3638 + (6 * ceil32(return_data.size)) + 864] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[_3638 + (6 * ceil32(return_data.size)) + 868] = msg.sender
                                                    mem[_3638 + (6 * ceil32(return_data.size)) + 900] = 96
                                                    mem[_3638 + (6 * ceil32(return_data.size)) + 964] = mem[96]
                                                    mem[_3638 + (6 * ceil32(return_data.size)) + 996 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + _3638 + (6 * ceil32(return_data.size)) + 996] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, 96, 0, mem[96], mem[_3638 + (6 * ceil32(return_data.size)) + 996 len ceil32(mem[96])]
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    mem[_3638 + (6 * ceil32(return_data.size)) + 864] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[_3638 + (6 * ceil32(return_data.size)) + 868] = msg.sender
                                                    mem[_3638 + (6 * ceil32(return_data.size)) + 900] = 96
                                                    mem[_3638 + (6 * ceil32(return_data.size)) + 964] = mem[96]
                                                    mem[_3638 + (6 * ceil32(return_data.size)) + 996 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + _3638 + (6 * ceil32(return_data.size)) + 996] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, Array(len=mem[96], data=mem[_3638 + (6 * ceil32(return_data.size)) + 996 len ceil32(mem[96])]), 10^18 * arg2
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[_3638 + ceil32(return_data.size) + 320] = 26
                                                mem[_3638 + ceil32(return_data.size) + 352] = 'SafeMath: division by zero'
                                                mem[_3638 + ceil32(return_data.size) + 384] = 26
                                                mem[_3638 + ceil32(return_data.size) + 416] = 'SafeMath: division by zero'
                                                mem[_3638 + ceil32(return_data.size) + 448] = 30
                                                mem[_3638 + ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[_3638 + ceil32(return_data.size) + 512] = 2
                                                mem[_3638 + ceil32(return_data.size) + 544] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_3638 + ceil32(return_data.size) + 608] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_3638 + ceil32(return_data.size) + 576] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 608] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 612] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 644] = 0
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 676] = 160
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 772] = 2
                                                idx = 0
                                                s = _3638 + (2 * ceil32(return_data.size)) + 804
                                                t = _3638 + ceil32(return_data.size) + 544
                                                while idx < mem[_3638 + ceil32(return_data.size) + 512]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 708] = this.address
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 740] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_3638 + (2 * ceil32(return_data.size)) + 772 len (32 * mem[_3638 + ceil32(return_data.size) + 512]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 608] = 30
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 676] = this.address
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 708] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 740] = 0
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 772] = 0
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 804] = 0
                                                mem[_3638 + (2 * ceil32(return_data.size)) + 836] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                                mem[_3638 + (4 * ceil32(return_data.size)) + 672] = 2
                                                mem[_3638 + (4 * ceil32(return_data.size)) + 704] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_3638 + (4 * ceil32(return_data.size)) + 768] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3638 + (6 * ceil32(return_data.size)) + 768
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_3638 + (4 * ceil32(return_data.size)) + 736] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_3638 + (6 * ceil32(return_data.size)) + 768] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_3638 + (6 * ceil32(return_data.size)) + 772] = balanceOf[address(this.address)]
                                                mem[_3638 + (6 * ceil32(return_data.size)) + 804] = 0
                                                mem[_3638 + (6 * ceil32(return_data.size)) + 836] = 160
                                                mem[_3638 + (6 * ceil32(return_data.size)) + 932] = 2
                                                idx = 0
                                                s = _3638 + (6 * ceil32(return_data.size)) + 964
                                                t = _3638 + (4 * ceil32(return_data.size)) + 704
                                                while idx < mem[_3638 + (4 * ceil32(return_data.size)) + 672]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_3638 + (6 * ceil32(return_data.size)) + 868] = this.address
                                                mem[_3638 + (6 * ceil32(return_data.size)) + 900] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len _3638 + (6 * ceil32(return_data.size)) + (32 * mem[_3638 + (4 * ceil32(return_data.size)) + 672]) + -mem[64] + 960]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor27.field_0) = 0
                                                if not arg2:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _15960 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_15960] = 38
                                                    mem[_15960 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15960 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] > -1:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                    emit Transfer(0, msg.sender, this.address);
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _16337 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_16337] = 38
                                                    mem[_16337 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16337 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                    if balanceOf[this.address] > !(10^18 * arg2):
                                                        revert with 0, 17
                                                    if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                    emit Transfer((10^18 * arg2), msg.sender, this.address);
                                                if not arg2:
                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = 96
                                                    mem[mem[64] + 100] = mem[96]
                                                    mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + mem[64] + 132] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, 96, 0, mem[96], mem[mem[64] + 132 len ceil32(mem[96])]
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = 96
                                                    mem[mem[64] + 100] = mem[96]
                                                    mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + mem[64] + 132] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, Array(len=mem[96], data=mem[mem[64] + 132 len ceil32(mem[96])]), 10^18 * arg2
                                        else:
                                            _3530 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_3530] = 26
                                            mem[_3530 + 32] = 'SafeMath: division by zero'
                                            _3593 = mem[64]
                                            mem[mem[64]] = 2
                                            mem[64] = mem[64] + 96
                                            mem[_3593 + 32 len 64] = call.data[calldata.size len 64]
                                            if 0 >= mem[_3593]:
                                                revert with 0, 50
                                            mem[_3593 + 32] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_3593 + 96] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3593 + ceil32(return_data.size) + 96
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            if 1 >= mem[_3593]:
                                                revert with 0, 50
                                            mem[_3593 + 64] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_3593 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_3593 + ceil32(return_data.size) + 100] = 0
                                            mem[_3593 + ceil32(return_data.size) + 132] = 0
                                            mem[_3593 + ceil32(return_data.size) + 164] = 160
                                            mem[_3593 + ceil32(return_data.size) + 260] = mem[_3593]
                                            idx = 0
                                            s = _3593 + ceil32(return_data.size) + 292
                                            t = _3593 + 32
                                            while idx < mem[_3593]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_3593 + ceil32(return_data.size) + 196] = this.address
                                            mem[_3593 + ceil32(return_data.size) + 228] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _3593 + ceil32(return_data.size) + (32 * mem[_3593]) + -mem[64] + 288]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _6459 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_6459] = 30
                                            mem[_6459 + 32] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            call distributionPoolAddress with:
                                                 gas 2300 wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _6549 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_6549] = 30
                                            mem[_6549 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < 0:
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not distributionPoolAddress:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _6737 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_6737] = 38
                                            mem[_6737 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if balanceOf[address(this.address)] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6737 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 17
                                            balanceOf[address(this.address)] -= balanceOf[address(this.address)] * rewardsFee / 100
                                            if balanceOf[stor17] > !(balanceOf[address(this.address)] * rewardsFee / 100):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) < balanceOf[stor17]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = distributionPoolAddress
                                            mem[32] = 0
                                            balanceOf[stor17] += balanceOf[address(this.address)] * rewardsFee / 100
                                            emit Transfer((balanceOf[address(this.address)] * rewardsFee / 100), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                _6987 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_6987] = 26
                                                mem[_6987 + 32] = 'SafeMath: division by zero'
                                                _7059 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_7059] = 26
                                                mem[_7059 + 32] = 'SafeMath: division by zero'
                                                _7095 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_7095] = 30
                                                mem[_7095 + 32] = 'SafeMath: subtraction overflow'
                                                _7152 = mem[64]
                                                mem[mem[64]] = 2
                                                mem[64] = mem[64] + 96
                                                mem[_7152 + 32 len 64] = call.data[calldata.size len 64]
                                                if 0 >= mem[_7152]:
                                                    revert with 0, 50
                                                mem[_7152 + 32] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_7152 + 96] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _7152 + ceil32(return_data.size) + 96
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                if 1 >= mem[_7152]:
                                                    revert with 0, 50
                                                mem[_7152 + 64] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[_7152 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_7152 + ceil32(return_data.size) + 100] = 0
                                                mem[_7152 + ceil32(return_data.size) + 132] = 0
                                                mem[_7152 + ceil32(return_data.size) + 164] = 160
                                                mem[_7152 + ceil32(return_data.size) + 260] = mem[_7152]
                                                idx = 0
                                                s = _7152 + ceil32(return_data.size) + 292
                                                t = _7152 + 32
                                                while idx < mem[_7152]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[_7152 + ceil32(return_data.size) + 260 len (32 * mem[_7152]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[_7152 + ceil32(return_data.size) + 96] = 30
                                                mem[_7152 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[_7152 + ceil32(return_data.size) + 228] = 0
                                                mem[_7152 + ceil32(return_data.size) + 260] = 0
                                                mem[_7152 + ceil32(return_data.size) + 292] = 0
                                                mem[_7152 + ceil32(return_data.size) + 324] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0, 0, 0, 0, block.timestamp
                                                mem[_7152 + ceil32(return_data.size) + 160 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    0,
                                                mem[_7152 + (2 * ceil32(return_data.size)) + 160] = 2
                                                mem[_7152 + (2 * ceil32(return_data.size)) + 192] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_7152 + (2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_7152 + (2 * ceil32(return_data.size)) + 224] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_7152 + (4 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_7152 + (4 * ceil32(return_data.size)) + 260] = balanceOf[address(this.address)]
                                                mem[_7152 + (4 * ceil32(return_data.size)) + 292] = 0
                                                mem[_7152 + (4 * ceil32(return_data.size)) + 324] = 160
                                                mem[_7152 + (4 * ceil32(return_data.size)) + 420] = 2
                                                idx = 0
                                                s = _7152 + (4 * ceil32(return_data.size)) + 452
                                                t = _7152 + (2 * ceil32(return_data.size)) + 192
                                                while idx < mem[_7152 + (2 * ceil32(return_data.size)) + 160]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_7152 + (4 * ceil32(return_data.size)) + 356] = this.address
                                                mem[_7152 + (4 * ceil32(return_data.size)) + 388] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[_7152 + (4 * ceil32(return_data.size)) + 420 len (32 * mem[_7152 + (2 * ceil32(return_data.size)) + 160]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor27.field_0) = 0
                                                if not arg2:
                                                    if not msg.sender:
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 260] = 32
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 292] = 37
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer from the zero ad'
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 356] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from _7152 + (4 * ceil32(return_data.size)) + 256
                                                           len (5 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 260] = 32
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 292] = 35
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer to the zero addr'
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 356] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from _7152 + (4 * ceil32(return_data.size)) + 256
                                                           len (5 * ceil32(return_data.size)) + 132
                                                    mem[_7152 + (4 * ceil32(return_data.size)) + 256] = 38
                                                    mem[_7152 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 356] = 32
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 388] = 38
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 420 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 458] = 0
                                                        revert with memory
                                                          from _7152 + (4 * ceil32(return_data.size)) + 352
                                                           len (5 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] > -1:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 356] = 32
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 388] = 27
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from _7152 + (4 * ceil32(return_data.size)) + 352
                                                           len (5 * ceil32(return_data.size)) + 100
                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                    emit Transfer(0, msg.sender, this.address);
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 260] = 32
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 292] = 33
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 324] = 'SafeMath: multiplication overflo'
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 356] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from _7152 + (4 * ceil32(return_data.size)) + 256
                                                           len (5 * ceil32(return_data.size)) + 132
                                                    if not msg.sender:
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 260] = 32
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 292] = 37
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer from the zero ad'
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 356] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from _7152 + (4 * ceil32(return_data.size)) + 256
                                                           len (5 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 260] = 32
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 292] = 35
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer to the zero addr'
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 356] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from _7152 + (4 * ceil32(return_data.size)) + 256
                                                           len (5 * ceil32(return_data.size)) + 132
                                                    mem[_7152 + (4 * ceil32(return_data.size)) + 256] = 38
                                                    mem[_7152 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 356] = 32
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 388] = 38
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 420 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 458] = 0
                                                        revert with memory
                                                          from _7152 + (4 * ceil32(return_data.size)) + 352
                                                           len (5 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                    if balanceOf[this.address] > !(10^18 * arg2):
                                                        revert with 0, 17
                                                    if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 356] = 32
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 388] = 27
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from _7152 + (4 * ceil32(return_data.size)) + 352
                                                           len (5 * ceil32(return_data.size)) + 100
                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                    emit Transfer((10^18 * arg2), msg.sender, this.address);
                                                if not arg2:
                                                    mem[_7152 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[_7152 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                    mem[_7152 + (4 * ceil32(return_data.size)) + 388] = 96
                                                    mem[_7152 + (4 * ceil32(return_data.size)) + 452] = mem[96]
                                                    mem[_7152 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + _7152 + (4 * ceil32(return_data.size)) + 484] = 0
                                                    mem[_7152 + (4 * ceil32(return_data.size)) + 420] = 0
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 356] = 32
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 388] = 33
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: multiplication overflo'
                                                        mem[_7152 + (4 * ceil32(return_data.size)) + 452] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from _7152 + (4 * ceil32(return_data.size)) + 352
                                                           len (5 * ceil32(return_data.size)) + 132
                                                    mem[_7152 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[_7152 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                    mem[_7152 + (4 * ceil32(return_data.size)) + 388] = 96
                                                    mem[_7152 + (4 * ceil32(return_data.size)) + 452] = mem[96]
                                                    mem[_7152 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + _7152 + (4 * ceil32(return_data.size)) + 484] = 0
                                                    mem[_7152 + (4 * ceil32(return_data.size)) + 420] = 10^18 * arg2
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args mem[_7152 + (4 * ceil32(return_data.size)) + 356 len ceil32(mem[96]) + (5 * ceil32(return_data.size)) + 128]
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _7033 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_7033] = 26
                                                mem[_7033 + 32] = 'SafeMath: division by zero'
                                                _7077 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_7077] = 26
                                                mem[_7077 + 32] = 'SafeMath: division by zero'
                                                _7113 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_7113] = 30
                                                mem[_7113 + 32] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                _7303 = mem[64]
                                                mem[mem[64]] = 2
                                                mem[64] = mem[64] + 96
                                                mem[_7303 + 32 len 64] = call.data[calldata.size len 64]
                                                if 0 >= mem[_7303]:
                                                    revert with 0, 50
                                                mem[_7303 + 32] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_7303 + 96] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _7303 + ceil32(return_data.size) + 96
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                if 1 >= mem[_7303]:
                                                    revert with 0, 50
                                                mem[_7303 + 64] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[_7303 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_7303 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[_7303 + ceil32(return_data.size) + 132] = 0
                                                mem[_7303 + ceil32(return_data.size) + 164] = 160
                                                mem[_7303 + ceil32(return_data.size) + 260] = mem[_7303]
                                                idx = 0
                                                s = _7303 + ceil32(return_data.size) + 292
                                                t = _7303 + 32
                                                while idx < mem[_7303]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_7303 + ceil32(return_data.size) + 260 len (32 * mem[_7303]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[_7303 + ceil32(return_data.size) + 96] = 30
                                                mem[_7303 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[_7303 + ceil32(return_data.size) + 228] = 0
                                                mem[_7303 + ceil32(return_data.size) + 260] = 0
                                                mem[_7303 + ceil32(return_data.size) + 292] = 0
                                                mem[_7303 + ceil32(return_data.size) + 324] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                                mem[_7303 + ceil32(return_data.size) + 160 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                                mem[_7303 + (2 * ceil32(return_data.size)) + 160] = 2
                                                mem[_7303 + (2 * ceil32(return_data.size)) + 192] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_7303 + (2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _7303 + (4 * ceil32(return_data.size)) + 256
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_7303 + (2 * ceil32(return_data.size)) + 224] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_7303 + (4 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_7303 + (4 * ceil32(return_data.size)) + 260] = balanceOf[address(this.address)]
                                                mem[_7303 + (4 * ceil32(return_data.size)) + 292] = 0
                                                mem[_7303 + (4 * ceil32(return_data.size)) + 324] = 160
                                                mem[_7303 + (4 * ceil32(return_data.size)) + 420] = 2
                                                idx = 0
                                                s = _7303 + (4 * ceil32(return_data.size)) + 452
                                                t = _7303 + (2 * ceil32(return_data.size)) + 192
                                                while idx < mem[_7303 + (2 * ceil32(return_data.size)) + 160]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_7303 + (4 * ceil32(return_data.size)) + 356] = this.address
                                                mem[_7303 + (4 * ceil32(return_data.size)) + 388] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len _7303 + (4 * ceil32(return_data.size)) + (32 * mem[_7303 + (2 * ceil32(return_data.size)) + 160]) + -mem[64] + 448]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor27.field_0) = 0
                                                if not arg2:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _15968 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_15968] = 38
                                                    mem[_15968 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15968 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] > -1:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                    emit Transfer(0, msg.sender, this.address);
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _16347 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_16347] = 38
                                                    mem[_16347 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16347 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                    if balanceOf[this.address] > !(10^18 * arg2):
                                                        revert with 0, 17
                                                    if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                    emit Transfer((10^18 * arg2), msg.sender, this.address);
                                                if not arg2:
                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = 96
                                                    mem[mem[64] + 100] = mem[96]
                                                    mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + mem[64] + 132] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, 96, 0, mem[96], mem[mem[64] + 132 len ceil32(mem[96])]
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = 96
                                                    mem[mem[64] + 100] = mem[96]
                                                    mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + mem[64] + 132] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, Array(len=mem[96], data=mem[mem[64] + 132 len ceil32(mem[96])]), 10^18 * arg2
                                else:
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 192] = 26
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 224] = 'SafeMath: division by zero'
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 256] = 30
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 288] = 'SafeMath: subtraction overflow'
                                    if 0 > balanceOf[address(this.address)] * futurFee / 100:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if balanceOf[address(this.address)] * futurFee / 100 < 0:
                                        revert with 0, 17
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 320] = 2
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 352] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 416] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[ceil32(arg1.length) + ceil32(return_data.size) + 384] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = 32
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 36
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 'ERC20: approve from the zero add'
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                        revert with memory
                                          from ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                           len ceil32(return_data.size) + 132
                                    if not uniswapV2RouterAddress:
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = 32
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 34
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 'ERC20: approve to the zero addre'
                                        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                        revert with memory
                                          from ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416
                                           len ceil32(return_data.size) + 132
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 1)
                                    allowance[address(this.address)][stor14].field_0 = 0
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0
                                    emit Approval(mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 416] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 420] = 0
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 452] = 0
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 484] = 160
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 580] = 2
                                    idx = 0
                                    s = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 612
                                    t = ceil32(arg1.length) + ceil32(return_data.size) + 352
                                    while idx < mem[ceil32(arg1.length) + ceil32(return_data.size) + 320]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 516] = this.address
                                    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 548] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len ceil32(arg1.length) + (2 * ceil32(return_data.size)) + (32 * mem[ceil32(arg1.length) + ceil32(return_data.size) + 320]) + -mem[64] + 608]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1377 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_1377] = 30
                                    mem[_1377 + 32] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call devPoolAddress with:
                                         gas 2300 wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1419 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    mem[_1419 + 32 len 64] = call.data[calldata.size len 64]
                                    if 0 >= mem[_1419]:
                                        revert with 0, 50
                                    mem[_1419 + 32] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                            gas gas_remaining wei
                                    mem[_1419 + 96] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _1419 + ceil32(return_data.size) + 96
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    if 1 >= mem[_1419]:
                                        revert with 0, 50
                                    mem[_1419 + 64] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 1)
                                    allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * futurFee / 100
                                    emit Approval((balanceOf[address(this.address)] * futurFee / 100), this.address, uniswapV2RouterAddress);
                                    mem[_1419 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[_1419 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)] * futurFee / 100
                                    mem[_1419 + ceil32(return_data.size) + 132] = 0
                                    mem[_1419 + ceil32(return_data.size) + 164] = 160
                                    mem[_1419 + ceil32(return_data.size) + 260] = mem[_1419]
                                    idx = 0
                                    s = _1419 + ceil32(return_data.size) + 292
                                    t = _1419 + 32
                                    while idx < mem[_1419]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[_1419 + ceil32(return_data.size) + 196] = this.address
                                    mem[_1419 + ceil32(return_data.size) + 228] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len _1419 + ceil32(return_data.size) + (32 * mem[_1419]) + -mem[64] + 288]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _3459 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3459] = 30
                                    mem[_3459 + 32] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call futurUsePoolAddress with:
                                         gas 2300 wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not balanceOf[address(this.address)]:
                                        _3501 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3501] = 26
                                        mem[_3501 + 32] = 'SafeMath: division by zero'
                                        _3525 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3525] = 26
                                        mem[_3525 + 32] = 'SafeMath: division by zero'
                                        _3541 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        mem[_3541 + 32 len 64] = call.data[calldata.size len 64]
                                        if 0 >= mem[_3541]:
                                            revert with 0, 50
                                        mem[_3541 + 32] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                gas gas_remaining wei
                                        mem[_3541 + 96] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3541 + ceil32(return_data.size) + 96
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        if 1 >= mem[_3541]:
                                            revert with 0, 50
                                        mem[_3541 + 64] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 1)
                                        allowance[address(this.address)][stor14].field_0 = 0
                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                        mem[_3541 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[_3541 + ceil32(return_data.size) + 100] = 0
                                        mem[_3541 + ceil32(return_data.size) + 132] = 0
                                        mem[_3541 + ceil32(return_data.size) + 164] = 160
                                        mem[_3541 + ceil32(return_data.size) + 260] = mem[_3541]
                                        idx = 0
                                        s = _3541 + ceil32(return_data.size) + 292
                                        t = _3541 + 32
                                        while idx < mem[_3541]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[_3541 + ceil32(return_data.size) + 196] = this.address
                                        mem[_3541 + ceil32(return_data.size) + 228] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len _3541 + ceil32(return_data.size) + (32 * mem[_3541]) + -mem[64] + 288]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _6463 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_6463] = 30
                                        mem[_6463 + 32] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        call distributionPoolAddress with:
                                             gas 2300 wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _6553 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_6553] = 30
                                        mem[_6553 + 32] = 'SafeMath: subtraction overflow'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not distributionPoolAddress:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        _6749 = mem[64]
                                        mem[64] = mem[64] + 96
                                        mem[_6749] = 38
                                        mem[_6749 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if 0 > balanceOf[address(this.address)]:
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 38
                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6749 + 70 len 26]
                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                        if balanceOf[address(this.address)] < 0:
                                            revert with 0, 17
                                        if balanceOf[stor17] > -1:
                                            revert with 0, 17
                                        if balanceOf[stor17] < balanceOf[stor17]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = distributionPoolAddress
                                        mem[32] = 0
                                        balanceOf[stor17] = balanceOf[stor17]
                                        emit Transfer(0, this.address, distributionPoolAddress);
                                        if balanceOf[address(this.address)]:
                                            if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _7041 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_7041] = 26
                                            mem[_7041 + 32] = 'SafeMath: division by zero'
                                            _7081 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_7081] = 26
                                            mem[_7081 + 32] = 'SafeMath: division by zero'
                                            _7117 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_7117] = 30
                                            mem[_7117 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                revert with 0, 17
                                            _7311 = mem[64]
                                            mem[mem[64]] = 2
                                            mem[64] = mem[64] + 96
                                            mem[_7311 + 32 len 64] = call.data[calldata.size len 64]
                                            if 0 >= mem[_7311]:
                                                revert with 0, 50
                                            mem[_7311 + 32] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_7311 + 96] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _7311 + ceil32(return_data.size) + 96
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            if 1 >= mem[_7311]:
                                                revert with 0, 50
                                            mem[_7311 + 64] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            allowance[address(this.address)][stor14].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                            mem[_7311 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_7311 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[_7311 + ceil32(return_data.size) + 132] = 0
                                            mem[_7311 + ceil32(return_data.size) + 164] = 160
                                            mem[_7311 + ceil32(return_data.size) + 260] = mem[_7311]
                                            idx = 0
                                            s = _7311 + ceil32(return_data.size) + 292
                                            t = _7311 + 32
                                            while idx < mem[_7311]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_7311 + ceil32(return_data.size) + 260 len (32 * mem[_7311]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_7311 + ceil32(return_data.size) + 96] = 30
                                            mem[_7311 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[_7311 + ceil32(return_data.size) + 228] = 0
                                            mem[_7311 + ceil32(return_data.size) + 260] = 0
                                            mem[_7311 + ceil32(return_data.size) + 292] = 0
                                            mem[_7311 + ceil32(return_data.size) + 324] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                            mem[_7311 + ceil32(return_data.size) + 160 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                            mem[_7311 + (2 * ceil32(return_data.size)) + 160] = 2
                                            mem[_7311 + (2 * ceil32(return_data.size)) + 192] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_7311 + (2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[_7311 + (2 * ceil32(return_data.size)) + 224] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[_7311 + (4 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_7311 + (4 * ceil32(return_data.size)) + 260] = balanceOf[address(this.address)]
                                            mem[_7311 + (4 * ceil32(return_data.size)) + 292] = 0
                                            mem[_7311 + (4 * ceil32(return_data.size)) + 324] = 160
                                            mem[_7311 + (4 * ceil32(return_data.size)) + 420] = 2
                                            idx = 0
                                            s = _7311 + (4 * ceil32(return_data.size)) + 452
                                            t = _7311 + (2 * ceil32(return_data.size)) + 192
                                            while idx < mem[_7311 + (2 * ceil32(return_data.size)) + 160]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_7311 + (4 * ceil32(return_data.size)) + 356] = this.address
                                            mem[_7311 + (4 * ceil32(return_data.size)) + 388] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[_7311 + (4 * ceil32(return_data.size)) + 420 len (32 * mem[_7311 + (2 * ceil32(return_data.size)) + 160]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor27.field_0) = 0
                                            if not arg2:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                mem[_7311 + (4 * ceil32(return_data.size)) + 256] = 38
                                                mem[_7311 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                mem[_7311 + (4 * ceil32(return_data.size)) + 256] = 38
                                                mem[_7311 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                if balanceOf[this.address] > !(10^18 * arg2):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                emit Transfer((10^18 * arg2), msg.sender, this.address);
                                            if not arg2:
                                                mem[_7311 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[_7311 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                mem[_7311 + (4 * ceil32(return_data.size)) + 388] = 96
                                                mem[_7311 + (4 * ceil32(return_data.size)) + 452] = mem[96]
                                                mem[_7311 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + _7311 + (4 * ceil32(return_data.size)) + 484] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, 96, 0, mem[96], mem[_7311 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[96])]
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[_7311 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[_7311 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                mem[_7311 + (4 * ceil32(return_data.size)) + 388] = 96
                                                mem[_7311 + (4 * ceil32(return_data.size)) + 452] = mem[96]
                                                mem[_7311 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + _7311 + (4 * ceil32(return_data.size)) + 484] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=mem[96], data=mem[_7311 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[96])]), 10^18 * arg2
                                        else:
                                            _6991 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_6991] = 26
                                            mem[_6991 + 32] = 'SafeMath: division by zero'
                                            _7063 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_7063] = 26
                                            mem[_7063 + 32] = 'SafeMath: division by zero'
                                            _7099 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_7099] = 30
                                            mem[_7099 + 32] = 'SafeMath: subtraction overflow'
                                            _7164 = mem[64]
                                            mem[mem[64]] = 2
                                            mem[64] = mem[64] + 96
                                            mem[_7164 + 32 len 64] = call.data[calldata.size len 64]
                                            if 0 >= mem[_7164]:
                                                revert with 0, 50
                                            mem[_7164 + 32] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_7164 + 96] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _7164 + ceil32(return_data.size) + 96
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            if 1 >= mem[_7164]:
                                                revert with 0, 50
                                            mem[_7164 + 64] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_7164 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_7164 + ceil32(return_data.size) + 100] = 0
                                            mem[_7164 + ceil32(return_data.size) + 132] = 0
                                            mem[_7164 + ceil32(return_data.size) + 164] = 160
                                            mem[_7164 + ceil32(return_data.size) + 260] = mem[_7164]
                                            idx = 0
                                            s = _7164 + ceil32(return_data.size) + 292
                                            t = _7164 + 32
                                            while idx < mem[_7164]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_7164 + ceil32(return_data.size) + 196] = this.address
                                            mem[_7164 + ceil32(return_data.size) + 228] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _7164 + ceil32(return_data.size) + (32 * mem[_7164]) + -mem[64] + 288]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11884 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11884] = 30
                                            mem[_11884 + 32] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[mem[64] + 68] = 0
                                            mem[mem[64] + 100] = 0
                                            mem[mem[64] + 132] = 0
                                            mem[mem[64] + 164] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0, 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 96
                                            mem[mem[64] + 32] = 0
                                            mem[mem[64] + 64] = 0
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                0,
                                            mem[0] = this.address
                                            mem[32] = 0
                                            _12741 = mem[64]
                                            mem[mem[64]] = 2
                                            mem[64] = mem[64] + 96
                                            mem[_12741 + 32 len 64] = call.data[calldata.size len 64]
                                            if 0 >= mem[_12741]:
                                                revert with 0, 50
                                            mem[_12741 + 32] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_12741 + 96] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _12741 + ceil32(return_data.size) + 96
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            if 1 >= mem[_12741]:
                                                revert with 0, 50
                                            mem[_12741 + 64] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[_12741 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_12741 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)]
                                            mem[_12741 + ceil32(return_data.size) + 132] = 0
                                            mem[_12741 + ceil32(return_data.size) + 164] = 160
                                            mem[_12741 + ceil32(return_data.size) + 260] = mem[_12741]
                                            idx = 0
                                            s = _12741 + ceil32(return_data.size) + 292
                                            t = _12741 + 32
                                            while idx < mem[_12741]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[_12741 + ceil32(return_data.size) + 260 len (32 * mem[_12741]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor27.field_0) = 0
                                            if not arg2:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                mem[_12741 + ceil32(return_data.size) + 96] = 38
                                                mem[_12741 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                mem[_12741 + ceil32(return_data.size) + 96] = 38
                                                mem[_12741 + ceil32(return_data.size) + 128 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                if balanceOf[this.address] > !(10^18 * arg2):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                emit Transfer((10^18 * arg2), msg.sender, this.address);
                                            if not arg2:
                                                mem[_12741 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[_12741 + ceil32(return_data.size) + 196] = msg.sender
                                                mem[_12741 + ceil32(return_data.size) + 228] = 96
                                                mem[_12741 + ceil32(return_data.size) + 292] = mem[96]
                                                mem[_12741 + ceil32(return_data.size) + 324 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + _12741 + ceil32(return_data.size) + 324] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, 96, 0, mem[96], mem[_12741 + ceil32(return_data.size) + 324 len ceil32(mem[96])]
                                            else:
                                                if arg2 and 10^18 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if 10^18 * arg2 / arg2 != 10^18:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[_12741 + ceil32(return_data.size) + 192] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                mem[_12741 + ceil32(return_data.size) + 196] = msg.sender
                                                mem[_12741 + ceil32(return_data.size) + 228] = 96
                                                mem[_12741 + ceil32(return_data.size) + 292] = mem[96]
                                                mem[_12741 + ceil32(return_data.size) + 324 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + _12741 + ceil32(return_data.size) + 324] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=mem[96], data=mem[_12741 + ceil32(return_data.size) + 324 len ceil32(mem[96])]), 10^18 * arg2
                                    else:
                                        if balanceOf[address(this.address)] and rewardsFee > -1 / balanceOf[address(this.address)]:
                                            revert with 0, 17
                                        if not balanceOf[address(this.address)]:
                                            revert with 0, 18
                                        if balanceOf[address(this.address)] * rewardsFee / balanceOf[address(this.address)] != rewardsFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _3517 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3517] = 26
                                        mem[_3517 + 32] = 'SafeMath: division by zero'
                                        if not balanceOf[address(this.address)] * rewardsFee / 100:
                                            _3531 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_3531] = 26
                                            mem[_3531 + 32] = 'SafeMath: division by zero'
                                            _3595 = mem[64]
                                            mem[mem[64]] = 2
                                            mem[64] = mem[64] + 96
                                            mem[_3595 + 32 len 64] = call.data[calldata.size len 64]
                                            if 0 >= mem[_3595]:
                                                revert with 0, 50
                                            mem[_3595 + 32] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_3595 + 96] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3595 + ceil32(return_data.size) + 96
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            if 1 >= mem[_3595]:
                                                revert with 0, 50
                                            mem[_3595 + 64] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[_3595 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_3595 + ceil32(return_data.size) + 100] = 0
                                            mem[_3595 + ceil32(return_data.size) + 132] = 0
                                            mem[_3595 + ceil32(return_data.size) + 164] = 160
                                            mem[_3595 + ceil32(return_data.size) + 260] = mem[_3595]
                                            idx = 0
                                            s = _3595 + ceil32(return_data.size) + 292
                                            t = _3595 + 32
                                            while idx < mem[_3595]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0, 0, 160, address(this.address), block.timestamp, mem[_3595 + ceil32(return_data.size) + 260 len (32 * mem[_3595]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_3595 + ceil32(return_data.size) + 96] = 30
                                            mem[_3595 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            call distributionPoolAddress with:
                                                 gas 2300 wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[_3595 + ceil32(return_data.size) + 160] = 30
                                            mem[_3595 + ceil32(return_data.size) + 192] = 'SafeMath: subtraction overflow'
                                            if 0 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < 0:
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not distributionPoolAddress:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            mem[_3595 + ceil32(return_data.size) + 224] = 38
                                            mem[_3595 + ceil32(return_data.size) + 256 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if balanceOf[address(this.address)] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_3595 + ceil32(return_data.size) + 294 len 26] >> 48,
                                                            0
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 17
                                            balanceOf[address(this.address)] -= balanceOf[address(this.address)] * rewardsFee / 100
                                            if balanceOf[stor17] > !(balanceOf[address(this.address)] * rewardsFee / 100):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) < balanceOf[stor17]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[stor17] += balanceOf[address(this.address)] * rewardsFee / 100
                                            emit Transfer((balanceOf[address(this.address)] * rewardsFee / 100), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[_3595 + ceil32(return_data.size) + 320] = 26
                                                mem[_3595 + ceil32(return_data.size) + 352] = 'SafeMath: division by zero'
                                                mem[_3595 + ceil32(return_data.size) + 384] = 26
                                                mem[_3595 + ceil32(return_data.size) + 416] = 'SafeMath: division by zero'
                                                mem[_3595 + ceil32(return_data.size) + 448] = 30
                                                mem[_3595 + ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                mem[_3595 + ceil32(return_data.size) + 512] = 2
                                                mem[_3595 + ceil32(return_data.size) + 544] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_3595 + ceil32(return_data.size) + 608] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3595 + (2 * ceil32(return_data.size)) + 608
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_3595 + ceil32(return_data.size) + 576] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 608] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 612] = 0
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 644] = 0
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 676] = 160
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 772] = 2
                                                idx = 0
                                                s = _3595 + (2 * ceil32(return_data.size)) + 804
                                                t = _3595 + ceil32(return_data.size) + 544
                                                while idx < mem[_3595 + ceil32(return_data.size) + 512]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 708] = this.address
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 740] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[_3595 + (2 * ceil32(return_data.size)) + 772 len (32 * mem[_3595 + ceil32(return_data.size) + 512]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 608] = 30
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 640] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    mem[_3595 + (2 * ceil32(return_data.size)) + 672] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_3595 + (2 * ceil32(return_data.size)) + 676] = 32
                                                    mem[_3595 + (2 * ceil32(return_data.size)) + 708] = 30
                                                    mem[_3595 + (2 * ceil32(return_data.size)) + 740] = 'SafeMath: subtraction overflow'
                                                    mem[_3595 + (2 * ceil32(return_data.size)) + 770] = 0
                                                    revert with memory
                                                      from _3595 + (2 * ceil32(return_data.size)) + 672
                                                       len ceil32(return_data.size) + 100
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    mem[_3595 + (2 * ceil32(return_data.size)) + 672] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_3595 + (2 * ceil32(return_data.size)) + 676] = 32
                                                    mem[_3595 + (2 * ceil32(return_data.size)) + 708] = 36
                                                    mem[_3595 + (2 * ceil32(return_data.size)) + 740] = 'ERC20: approve from the zero add'
                                                    mem[_3595 + (2 * ceil32(return_data.size)) + 772] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from _3595 + (2 * ceil32(return_data.size)) + 672
                                                       len ceil32(return_data.size) + 132
                                                if not uniswapV2RouterAddress:
                                                    mem[_3595 + (2 * ceil32(return_data.size)) + 672] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[_3595 + (2 * ceil32(return_data.size)) + 676] = 32
                                                    mem[_3595 + (2 * ceil32(return_data.size)) + 708] = 34
                                                    mem[_3595 + (2 * ceil32(return_data.size)) + 740] = 'ERC20: approve to the zero addre'
                                                    mem[_3595 + (2 * ceil32(return_data.size)) + 772] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from _3595 + (2 * ceil32(return_data.size)) + 672
                                                       len ceil32(return_data.size) + 132
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 676] = this.address
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 708] = 0
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 740] = 0
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 772] = 0
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 804] = 0
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 836] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args mem[_3595 + (2 * ceil32(return_data.size)) + 676 len ceil32(return_data.size) + 192]
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 672 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                mem[_3595 + (4 * ceil32(return_data.size)) + 672] = 0
                                                mem[_3595 + (4 * ceil32(return_data.size)) + 704] = 0
                                                mem[_3595 + (4 * ceil32(return_data.size)) + 736] = 0
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    mem[_3595 + (4 * ceil32(return_data.size)) + 672 len (5 * ceil32(return_data.size)) + 96],
                                                mem[_3595 + (4 * ceil32(return_data.size)) + 672] = 2
                                                mem[_3595 + (4 * ceil32(return_data.size)) + 704] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_3595 + (4 * ceil32(return_data.size)) + 768] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_3595 + (4 * ceil32(return_data.size)) + 736] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_3595 + (6 * ceil32(return_data.size)) + 768] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_3595 + (6 * ceil32(return_data.size)) + 772] = balanceOf[address(this.address)]
                                                mem[_3595 + (6 * ceil32(return_data.size)) + 836] = 160
                                                mem[_3595 + (6 * ceil32(return_data.size)) + 932] = 2
                                                idx = 0
                                                s = _3595 + (6 * ceil32(return_data.size)) + 964
                                                t = _3595 + (4 * ceil32(return_data.size)) + 704
                                                while idx < 2:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[_3595 + (6 * ceil32(return_data.size)) + 964 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor27.field_0) = 0
                                                if not arg2:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    mem[_3595 + (6 * ceil32(return_data.size)) + 768] = 38
                                                    mem[_3595 + (6 * ceil32(return_data.size)) + 800 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] > -1:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                    emit Transfer(0, msg.sender, this.address);
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    mem[_3595 + (6 * ceil32(return_data.size)) + 768] = 38
                                                    mem[_3595 + (6 * ceil32(return_data.size)) + 800 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                    if balanceOf[this.address] > !(10^18 * arg2):
                                                        revert with 0, 17
                                                    if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                    emit Transfer((10^18 * arg2), msg.sender, this.address);
                                                if not arg2:
                                                    mem[_3595 + (6 * ceil32(return_data.size)) + 864] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[_3595 + (6 * ceil32(return_data.size)) + 868] = msg.sender
                                                    mem[_3595 + (6 * ceil32(return_data.size)) + 900] = 96
                                                    mem[_3595 + (6 * ceil32(return_data.size)) + 964] = mem[96]
                                                    mem[_3595 + (6 * ceil32(return_data.size)) + 996 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + _3595 + (6 * ceil32(return_data.size)) + 996] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, 96, 0, mem[96], mem[_3595 + (6 * ceil32(return_data.size)) + 996 len ceil32(mem[96])]
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    mem[_3595 + (6 * ceil32(return_data.size)) + 864] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[_3595 + (6 * ceil32(return_data.size)) + 868] = msg.sender
                                                    mem[_3595 + (6 * ceil32(return_data.size)) + 900] = 96
                                                    mem[_3595 + (6 * ceil32(return_data.size)) + 964] = mem[96]
                                                    mem[_3595 + (6 * ceil32(return_data.size)) + 996 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + _3595 + (6 * ceil32(return_data.size)) + 996] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, Array(len=mem[96], data=mem[_3595 + (6 * ceil32(return_data.size)) + 996 len ceil32(mem[96])]), 10^18 * arg2
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[_3595 + ceil32(return_data.size) + 320] = 26
                                                mem[_3595 + ceil32(return_data.size) + 352] = 'SafeMath: division by zero'
                                                mem[_3595 + ceil32(return_data.size) + 384] = 26
                                                mem[_3595 + ceil32(return_data.size) + 416] = 'SafeMath: division by zero'
                                                mem[_3595 + ceil32(return_data.size) + 448] = 30
                                                mem[_3595 + ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[_3595 + ceil32(return_data.size) + 512] = 2
                                                mem[_3595 + ceil32(return_data.size) + 544] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_3595 + ceil32(return_data.size) + 608] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3595 + (2 * ceil32(return_data.size)) + 608
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_3595 + ceil32(return_data.size) + 576] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 608] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 612] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 644] = 0
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 676] = 160
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 772] = 2
                                                idx = 0
                                                s = _3595 + (2 * ceil32(return_data.size)) + 804
                                                t = _3595 + ceil32(return_data.size) + 544
                                                while idx < mem[_3595 + ceil32(return_data.size) + 512]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 708] = this.address
                                                mem[_3595 + (2 * ceil32(return_data.size)) + 740] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len _3595 + (2 * ceil32(return_data.size)) + (32 * mem[_3595 + ceil32(return_data.size) + 512]) + -mem[64] + 800]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _11881 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11881] = 30
                                                mem[_11881 + 32] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[mem[64] + 68] = 0
                                                mem[mem[64] + 100] = 0
                                                mem[mem[64] + 132] = 0
                                                mem[mem[64] + 164] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 96
                                                mem[mem[64] + 32] = 0
                                                mem[mem[64] + 64] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                                mem[0] = this.address
                                                mem[32] = 0
                                                _12735 = mem[64]
                                                mem[mem[64]] = 2
                                                mem[64] = mem[64] + 96
                                                mem[_12735 + 32 len 64] = call.data[calldata.size len 64]
                                                if 0 >= mem[_12735]:
                                                    revert with 0, 50
                                                mem[_12735 + 32] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_12735 + 96] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _12735 + ceil32(return_data.size) + 96
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                if 1 >= mem[_12735]:
                                                    revert with 0, 50
                                                mem[_12735 + 64] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_12735 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_12735 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)]
                                                mem[_12735 + ceil32(return_data.size) + 132] = 0
                                                mem[_12735 + ceil32(return_data.size) + 164] = 160
                                                mem[_12735 + ceil32(return_data.size) + 260] = mem[_12735]
                                                idx = 0
                                                s = _12735 + ceil32(return_data.size) + 292
                                                t = _12735 + 32
                                                while idx < mem[_12735]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_12735 + ceil32(return_data.size) + 196] = this.address
                                                mem[_12735 + ceil32(return_data.size) + 228] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len _12735 + ceil32(return_data.size) + (32 * mem[_12735]) + -mem[64] + 288]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor27.field_0) = 0
                                                if not arg2:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _15992 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_15992] = 38
                                                    mem[_15992 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15992 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] > -1:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                    emit Transfer(0, msg.sender, this.address);
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _16377 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_16377] = 38
                                                    mem[_16377 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16377 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                    if balanceOf[this.address] > !(10^18 * arg2):
                                                        revert with 0, 17
                                                    if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                    emit Transfer((10^18 * arg2), msg.sender, this.address);
                                                if not arg2:
                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = 96
                                                    mem[mem[64] + 100] = mem[96]
                                                    mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + mem[64] + 132] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, 96, 0, mem[96], mem[mem[64] + 132 len ceil32(mem[96])]
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = 96
                                                    mem[mem[64] + 100] = mem[96]
                                                    mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + mem[64] + 132] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, Array(len=mem[96], data=mem[mem[64] + 132 len ceil32(mem[96])]), 10^18 * arg2
                                        else:
                                            if balanceOf[address(this.address)] * rewardsFee / 100 and stor25 > -1 / balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / balanceOf[address(this.address)] * rewardsFee / 100 != stor25:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _3575 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_3575] = 26
                                            mem[_3575 + 32] = 'SafeMath: division by zero'
                                            _3641 = mem[64]
                                            mem[mem[64]] = 2
                                            mem[64] = mem[64] + 96
                                            mem[_3641 + 32 len 64] = call.data[calldata.size len 64]
                                            if 0 >= mem[_3641]:
                                                revert with 0, 50
                                            mem[_3641 + 32] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                    gas gas_remaining wei
                                            mem[_3641 + 96] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3641 + ceil32(return_data.size) + 96
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            if 1 >= mem[_3641]:
                                                revert with 0, 50
                                            mem[_3641 + 64] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100
                                            emit Approval((balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100), this.address, uniswapV2RouterAddress);
                                            mem[_3641 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_3641 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100
                                            mem[_3641 + ceil32(return_data.size) + 132] = 0
                                            mem[_3641 + ceil32(return_data.size) + 164] = 160
                                            mem[_3641 + ceil32(return_data.size) + 260] = mem[_3641]
                                            idx = 0
                                            s = _3641 + ceil32(return_data.size) + 292
                                            t = _3641 + 32
                                            while idx < mem[_3641]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_3641 + ceil32(return_data.size) + 196] = this.address
                                            mem[_3641 + ceil32(return_data.size) + 228] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _3641 + ceil32(return_data.size) + (32 * mem[_3641]) + -mem[64] + 288]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _6461 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_6461] = 30
                                            mem[_6461 + 32] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            call distributionPoolAddress with:
                                                 gas 2300 wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _6551 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_6551] = 30
                                            mem[_6551 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100:
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not distributionPoolAddress:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _6743 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_6743] = 38
                                            mem[_6743 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100) > balanceOf[address(this.address)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_6743 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(this.address)] < (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100):
                                                revert with 0, 17
                                            balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[address(this.address)] * rewardsFee / 100) + (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)
                                            if balanceOf[stor17] > !((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100) < balanceOf[stor17]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = distributionPoolAddress
                                            mem[32] = 0
                                            balanceOf[stor17] = balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)
                                            emit Transfer(((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor25 / 100)), this.address, distributionPoolAddress);
                                            if balanceOf[address(this.address)]:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _7037 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_7037] = 26
                                                mem[_7037 + 32] = 'SafeMath: division by zero'
                                                _7079 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_7079] = 26
                                                mem[_7079 + 32] = 'SafeMath: division by zero'
                                                _7115 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_7115] = 30
                                                mem[_7115 + 32] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                _7307 = mem[64]
                                                mem[mem[64]] = 2
                                                mem[64] = mem[64] + 96
                                                mem[_7307 + 32 len 64] = call.data[calldata.size len 64]
                                                if 0 >= mem[_7307]:
                                                    revert with 0, 50
                                                mem[_7307 + 32] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_7307 + 96] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _7307 + ceil32(return_data.size) + 96
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                if 1 >= mem[_7307]:
                                                    revert with 0, 50
                                                mem[_7307 + 64] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[_7307 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_7307 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[_7307 + ceil32(return_data.size) + 132] = 0
                                                mem[_7307 + ceil32(return_data.size) + 164] = 160
                                                mem[_7307 + ceil32(return_data.size) + 260] = mem[_7307]
                                                idx = 0
                                                s = _7307 + ceil32(return_data.size) + 292
                                                t = _7307 + 32
                                                while idx < mem[_7307]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_7307 + ceil32(return_data.size) + 260 len (32 * mem[_7307]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[_7307 + ceil32(return_data.size) + 96] = 30
                                                mem[_7307 + ceil32(return_data.size) + 128] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[_7307 + ceil32(return_data.size) + 228] = 0
                                                mem[_7307 + ceil32(return_data.size) + 260] = 0
                                                mem[_7307 + ceil32(return_data.size) + 292] = 0
                                                mem[_7307 + ceil32(return_data.size) + 324] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                                mem[_7307 + ceil32(return_data.size) + 160 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                                mem[_7307 + (2 * ceil32(return_data.size)) + 160] = 2
                                                mem[_7307 + (2 * ceil32(return_data.size)) + 192] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_7307 + (2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[_7307 + (2 * ceil32(return_data.size)) + 224] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_7307 + (4 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_7307 + (4 * ceil32(return_data.size)) + 260] = balanceOf[address(this.address)]
                                                mem[_7307 + (4 * ceil32(return_data.size)) + 292] = 0
                                                mem[_7307 + (4 * ceil32(return_data.size)) + 324] = 160
                                                mem[_7307 + (4 * ceil32(return_data.size)) + 420] = 2
                                                idx = 0
                                                s = _7307 + (4 * ceil32(return_data.size)) + 452
                                                t = _7307 + (2 * ceil32(return_data.size)) + 192
                                                while idx < mem[_7307 + (2 * ceil32(return_data.size)) + 160]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_7307 + (4 * ceil32(return_data.size)) + 356] = this.address
                                                mem[_7307 + (4 * ceil32(return_data.size)) + 388] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[_7307 + (4 * ceil32(return_data.size)) + 420 len (32 * mem[_7307 + (2 * ceil32(return_data.size)) + 160]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor27.field_0) = 0
                                                if not arg2:
                                                    if not msg.sender:
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 260] = 32
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 292] = 37
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer from the zero ad'
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 356] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from _7307 + (4 * ceil32(return_data.size)) + 256
                                                           len (5 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 260] = 32
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 292] = 35
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer to the zero addr'
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 356] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from _7307 + (4 * ceil32(return_data.size)) + 256
                                                           len (5 * ceil32(return_data.size)) + 132
                                                    mem[_7307 + (4 * ceil32(return_data.size)) + 256] = 38
                                                    mem[_7307 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 356] = 32
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 388] = 38
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 420 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 458] = 0
                                                        revert with memory
                                                          from _7307 + (4 * ceil32(return_data.size)) + 352
                                                           len (5 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] > -1:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 356] = 32
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 388] = 27
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from _7307 + (4 * ceil32(return_data.size)) + 352
                                                           len (5 * ceil32(return_data.size)) + 100
                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                    emit Transfer(0, msg.sender, this.address);
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 260] = 32
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 292] = 33
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 324] = 'SafeMath: multiplication overflo'
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 356] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from _7307 + (4 * ceil32(return_data.size)) + 256
                                                           len (5 * ceil32(return_data.size)) + 132
                                                    if not msg.sender:
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 260] = 32
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 292] = 37
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer from the zero ad'
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 356] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from _7307 + (4 * ceil32(return_data.size)) + 256
                                                           len (5 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 260] = 32
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 292] = 35
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 324] = 'ERC20: transfer to the zero addr'
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 356] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from _7307 + (4 * ceil32(return_data.size)) + 256
                                                           len (5 * ceil32(return_data.size)) + 132
                                                    mem[_7307 + (4 * ceil32(return_data.size)) + 256] = 38
                                                    mem[_7307 + (4 * ceil32(return_data.size)) + 288 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 356] = 32
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 388] = 38
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 420 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 458] = 0
                                                        revert with memory
                                                          from _7307 + (4 * ceil32(return_data.size)) + 352
                                                           len (5 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                    if balanceOf[this.address] > !(10^18 * arg2):
                                                        revert with 0, 17
                                                    if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 356] = 32
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 388] = 27
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from _7307 + (4 * ceil32(return_data.size)) + 352
                                                           len (5 * ceil32(return_data.size)) + 100
                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                    emit Transfer((10^18 * arg2), msg.sender, this.address);
                                                if not arg2:
                                                    mem[_7307 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[_7307 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                    mem[_7307 + (4 * ceil32(return_data.size)) + 388] = 96
                                                    mem[_7307 + (4 * ceil32(return_data.size)) + 452] = mem[96]
                                                    mem[_7307 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + _7307 + (4 * ceil32(return_data.size)) + 484] = 0
                                                    mem[_7307 + (4 * ceil32(return_data.size)) + 420] = 0
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 352] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 356] = 32
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 388] = 33
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 420] = 'SafeMath: multiplication overflo'
                                                        mem[_7307 + (4 * ceil32(return_data.size)) + 452] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                        revert with memory
                                                          from _7307 + (4 * ceil32(return_data.size)) + 352
                                                           len (5 * ceil32(return_data.size)) + 132
                                                    mem[_7307 + (4 * ceil32(return_data.size)) + 352] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[_7307 + (4 * ceil32(return_data.size)) + 356] = msg.sender
                                                    mem[_7307 + (4 * ceil32(return_data.size)) + 388] = 96
                                                    mem[_7307 + (4 * ceil32(return_data.size)) + 452] = mem[96]
                                                    mem[_7307 + (4 * ceil32(return_data.size)) + 484 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + _7307 + (4 * ceil32(return_data.size)) + 484] = 0
                                                    mem[_7307 + (4 * ceil32(return_data.size)) + 420] = 10^18 * arg2
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0x90219732 with:
                                                     gas gas_remaining wei
                                                    args mem[_7307 + (4 * ceil32(return_data.size)) + 356 len ceil32(mem[96]) + (5 * ceil32(return_data.size)) + 128]
                                            else:
                                                _6989 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_6989] = 26
                                                mem[_6989 + 32] = 'SafeMath: division by zero'
                                                _7061 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_7061] = 26
                                                mem[_7061 + 32] = 'SafeMath: division by zero'
                                                _7097 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_7097] = 30
                                                mem[_7097 + 32] = 'SafeMath: subtraction overflow'
                                                _7158 = mem[64]
                                                mem[mem[64]] = 2
                                                mem[64] = mem[64] + 96
                                                mem[_7158 + 32 len 64] = call.data[calldata.size len 64]
                                                if 0 >= mem[_7158]:
                                                    revert with 0, 50
                                                mem[_7158 + 32] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_7158 + 96] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _7158 + ceil32(return_data.size) + 96
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                if 1 >= mem[_7158]:
                                                    revert with 0, 50
                                                mem[_7158 + 64] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[_7158 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_7158 + ceil32(return_data.size) + 100] = 0
                                                mem[_7158 + ceil32(return_data.size) + 132] = 0
                                                mem[_7158 + ceil32(return_data.size) + 164] = 160
                                                mem[_7158 + ceil32(return_data.size) + 260] = mem[_7158]
                                                idx = 0
                                                s = _7158 + ceil32(return_data.size) + 292
                                                t = _7158 + 32
                                                while idx < mem[_7158]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_7158 + ceil32(return_data.size) + 196] = this.address
                                                mem[_7158 + ceil32(return_data.size) + 228] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len _7158 + ceil32(return_data.size) + (32 * mem[_7158]) + -mem[64] + 288]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _11880 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11880] = 30
                                                mem[_11880 + 32] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[mem[64] + 68] = 0
                                                mem[mem[64] + 100] = 0
                                                mem[mem[64] + 132] = 0
                                                mem[mem[64] + 164] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0, 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 96
                                                mem[mem[64] + 32] = 0
                                                mem[mem[64] + 64] = 0
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    0,
                                                mem[0] = this.address
                                                mem[32] = 0
                                                _12733 = mem[64]
                                                mem[mem[64]] = 2
                                                mem[64] = mem[64] + 96
                                                mem[_12733 + 32 len 64] = call.data[calldata.size len 64]
                                                if 0 >= mem[_12733]:
                                                    revert with 0, 50
                                                mem[_12733 + 32] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                                        gas gas_remaining wei
                                                mem[_12733 + 96] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _12733 + ceil32(return_data.size) + 96
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                if 1 >= mem[_12733]:
                                                    revert with 0, 50
                                                mem[_12733 + 64] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_12733 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_12733 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)]
                                                mem[_12733 + ceil32(return_data.size) + 132] = 0
                                                mem[_12733 + ceil32(return_data.size) + 164] = 160
                                                mem[_12733 + ceil32(return_data.size) + 260] = mem[_12733]
                                                idx = 0
                                                s = _12733 + ceil32(return_data.size) + 292
                                                t = _12733 + 32
                                                while idx < mem[_12733]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_12733 + ceil32(return_data.size) + 196] = this.address
                                                mem[_12733 + ceil32(return_data.size) + 228] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len _12733 + ceil32(return_data.size) + (32 * mem[_12733]) + -mem[64] + 288]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor27.field_0) = 0
                                                if not arg2:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _15988 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_15988] = 38
                                                    mem[_15988 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15988 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] > -1:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                    emit Transfer(0, msg.sender, this.address);
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _16372 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_16372] = 38
                                                    mem[_16372 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if 10^18 * arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16372 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < 10^18 * arg2:
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] += -1 * 10^18 * arg2
                                                    if balanceOf[this.address] > !(10^18 * arg2):
                                                        revert with 0, 17
                                                    if balanceOf[this.address] + (10^18 * arg2) < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (10^18 * arg2)
                                                    emit Transfer((10^18 * arg2), msg.sender, this.address);
                                                if not arg2:
                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = 96
                                                    mem[mem[64] + 100] = mem[96]
                                                    mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + mem[64] + 132] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, 96, 0, mem[96], mem[mem[64] + 132 len ceil32(mem[96])]
                                                else:
                                                    if arg2 and 10^18 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if 10^18 * arg2 / arg2 != 10^18:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    mem[mem[64]] = 0x9021973200000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = msg.sender
                                                    mem[mem[64] + 36] = 96
                                                    mem[mem[64] + 100] = mem[96]
                                                    mem[mem[64] + 132 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                    if ceil32(mem[96]) > mem[96]:
                                                        mem[mem[96] + mem[64] + 132] = 0
                                                    require ext_code.size(nodeRewardManagerAddress)
                                                    call nodeRewardManagerAddress.0x90219732 with:
                                                         gas gas_remaining wei
                                                        args msg.sender, Array(len=mem[96], data=mem[mem[64] + 132 len ceil32(mem[96])]), 10^18 * arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}



}
